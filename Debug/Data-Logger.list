
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a4a4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  0801a744  0801a744  0002a744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b0d8  0801b0d8  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801b0d8  0801b0d8  0002b0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b0e0  0801b0e0  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b0e0  0801b0e0  0002b0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b0e4  0801b0e4  0002b0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  0801b0e8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022d0  240001e0  0801b2c4  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240024b0  0801b2c4  000324b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a05d  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b2c  00000000  00000000  0007a267  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002420  00000000  00000000  00081d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002128  00000000  00000000  000841b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000430f0  00000000  00000000  000862e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002816d  00000000  00000000  000c93d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00178689  00000000  00000000  000f153d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00269bc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f80  00000000  00000000  00269c44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a72c 	.word	0x0801a72c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0801a72c 	.word	0x0801a72c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <myprintf.h>

int FDCAN_Flag = 0;
int CAN_Flag = 0;

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f006 fb92 	bl	8006de4 <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f006 fc00 	bl	8006ed0 <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f003 fa99 	bl	8003c0c <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f006 fc48 	bl	8006f70 <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f003 fa91 	bl	8003c0c <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f006 fdc8 	bl	8007284 <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f003 fa87 	bl	8003c0c <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f006 fc13 	bl	8006f2a <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b91      	ldr	r3, [pc, #580]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000718:	4a91      	ldr	r2, [pc, #580]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f006 fc53 	bl	8006fc8 <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	f040 8114 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
			      {
					uint32_t time = HAL_GetTick();
 800072a:	f003 ff57 	bl	80045dc <HAL_GetTick>
 800072e:	60f8      	str	r0, [r7, #12]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000730:	2101      	movs	r1, #1
 8000732:	488c      	ldr	r0, [pc, #560]	; (8000964 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000734:	f007 fc91 	bl	800805a <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000738:	488b      	ldr	r0, [pc, #556]	; (8000968 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 800073a:	f018 ffd5 	bl	80196e8 <puts>
					if(RxHeader.FDFormat == FDCAN_CLASSIC_CAN){
 800073e:	4b88      	ldr	r3, [pc, #544]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d17f      	bne.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						CanFrame.id = RxHeader.Identifier;
 8000746:	4b86      	ldr	r3, [pc, #536]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a88      	ldr	r2, [pc, #544]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800074c:	6013      	str	r3, [r2, #0]
						switch(RxHeader.DataLength/65536){
 800074e:	4b84      	ldr	r3, [pc, #528]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	3b01      	subs	r3, #1
 8000756:	2b0e      	cmp	r3, #14
 8000758:	d85c      	bhi.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
 800075a:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <HAL_FDCAN_RxFifo0Callback+0x54>)
 800075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000760:	0800079d 	.word	0x0800079d
 8000764:	080007a5 	.word	0x080007a5
 8000768:	080007ad 	.word	0x080007ad
 800076c:	080007b5 	.word	0x080007b5
 8000770:	080007bd 	.word	0x080007bd
 8000774:	080007c5 	.word	0x080007c5
 8000778:	080007cd 	.word	0x080007cd
 800077c:	080007d5 	.word	0x080007d5
 8000780:	080007dd 	.word	0x080007dd
 8000784:	080007e5 	.word	0x080007e5
 8000788:	080007ed 	.word	0x080007ed
 800078c:	080007f5 	.word	0x080007f5
 8000790:	080007fd 	.word	0x080007fd
 8000794:	08000805 	.word	0x08000805
 8000798:	0800080d 	.word	0x0800080d
							case 1:
								CanFrame.length = 1;
 800079c:	4b73      	ldr	r3, [pc, #460]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800079e:	2201      	movs	r2, #1
 80007a0:	715a      	strb	r2, [r3, #5]
								break;
 80007a2:	e037      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 2:
								CanFrame.length = 2;
 80007a4:	4b71      	ldr	r3, [pc, #452]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	715a      	strb	r2, [r3, #5]
								break;
 80007aa:	e033      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 3:
								CanFrame.length = 3;
 80007ac:	4b6f      	ldr	r3, [pc, #444]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	715a      	strb	r2, [r3, #5]
								break;
 80007b2:	e02f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 4:
								CanFrame.length = 4;
 80007b4:	4b6d      	ldr	r3, [pc, #436]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	715a      	strb	r2, [r3, #5]
								break;
 80007ba:	e02b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 5:
								CanFrame.length = 5;
 80007bc:	4b6b      	ldr	r3, [pc, #428]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007be:	2205      	movs	r2, #5
 80007c0:	715a      	strb	r2, [r3, #5]
								break;
 80007c2:	e027      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 6:
								CanFrame.length = 6;
 80007c4:	4b69      	ldr	r3, [pc, #420]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007c6:	2206      	movs	r2, #6
 80007c8:	715a      	strb	r2, [r3, #5]
								break;
 80007ca:	e023      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 7:
								CanFrame.length = 7;
 80007cc:	4b67      	ldr	r3, [pc, #412]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	715a      	strb	r2, [r3, #5]
								break;
 80007d2:	e01f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 8:
								CanFrame.length = 8;
 80007d4:	4b65      	ldr	r3, [pc, #404]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	715a      	strb	r2, [r3, #5]
								break;
 80007da:	e01b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 9:
								CanFrame.length = 12;
 80007dc:	4b63      	ldr	r3, [pc, #396]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007de:	220c      	movs	r2, #12
 80007e0:	715a      	strb	r2, [r3, #5]
								break;
 80007e2:	e017      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 10:
								CanFrame.length = 16;
 80007e4:	4b61      	ldr	r3, [pc, #388]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007e6:	2210      	movs	r2, #16
 80007e8:	715a      	strb	r2, [r3, #5]
								break;
 80007ea:	e013      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 11:
								CanFrame.length = 20;
 80007ec:	4b5f      	ldr	r3, [pc, #380]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ee:	2214      	movs	r2, #20
 80007f0:	715a      	strb	r2, [r3, #5]
								break;
 80007f2:	e00f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 12:
								CanFrame.length = 24;
 80007f4:	4b5d      	ldr	r3, [pc, #372]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007f6:	2218      	movs	r2, #24
 80007f8:	715a      	strb	r2, [r3, #5]
								break;
 80007fa:	e00b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 13:
								CanFrame.length = 32;
 80007fc:	4b5b      	ldr	r3, [pc, #364]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007fe:	2220      	movs	r2, #32
 8000800:	715a      	strb	r2, [r3, #5]
								break;
 8000802:	e007      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 14:
								CanFrame.length = 48;
 8000804:	4b59      	ldr	r3, [pc, #356]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	715a      	strb	r2, [r3, #5]
								break;
 800080a:	e003      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 15:
								CanFrame.length = 64;
 800080c:	4b57      	ldr	r3, [pc, #348]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800080e:	2240      	movs	r2, #64	; 0x40
 8000810:	715a      	strb	r2, [r3, #5]
								break;
 8000812:	bf00      	nop
						}
						CanFrame.time = time;
 8000814:	4a55      	ldr	r2, [pc, #340]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6093      	str	r3, [r2, #8]
						CAN_Flag = 1;
 800081a:	4b55      	ldr	r3, [pc, #340]	; (8000970 <HAL_FDCAN_RxFifo0Callback+0x264>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
						memcpy(CanFrame.data.bytes, RxData, CanFrame.length);
 8000820:	4b52      	ldr	r3, [pc, #328]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000822:	795b      	ldrb	r3, [r3, #5]
 8000824:	461a      	mov	r2, r3
 8000826:	494d      	ldr	r1, [pc, #308]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000828:	4852      	ldr	r0, [pc, #328]	; (8000974 <HAL_FDCAN_RxFifo0Callback+0x268>)
 800082a:	f018 fe2d 	bl	8019488 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000836:	d103      	bne.n	8000840 <HAL_FDCAN_RxFifo0Callback+0x134>
							CanFrame.extended = 1;
 8000838:	4b4c      	ldr	r3, [pc, #304]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800083a:	2201      	movs	r2, #1
 800083c:	711a      	strb	r2, [r3, #4]
 800083e:	e002      	b.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						}
						else{
							CanFrame.extended = 0;
 8000840:	4b4a      	ldr	r3, [pc, #296]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000842:	2200      	movs	r2, #0
 8000844:	711a      	strb	r2, [r3, #4]
						}
					}
					if(RxHeader.FDFormat == FDCAN_FD_CAN){
 8000846:	4b46      	ldr	r3, [pc, #280]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800084e:	f040 8080 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
						CanFDFrame.id = RxHeader.Identifier;
 8000852:	4b43      	ldr	r3, [pc, #268]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a48      	ldr	r2, [pc, #288]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000858:	6013      	str	r3, [r2, #0]

						switch(RxHeader.DataLength/65536){
 800085a:	4b41      	ldr	r3, [pc, #260]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	3b01      	subs	r3, #1
 8000862:	2b0e      	cmp	r3, #14
 8000864:	d85c      	bhi.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
 8000866:	a201      	add	r2, pc, #4	; (adr r2, 800086c <HAL_FDCAN_RxFifo0Callback+0x160>)
 8000868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086c:	080008a9 	.word	0x080008a9
 8000870:	080008b1 	.word	0x080008b1
 8000874:	080008b9 	.word	0x080008b9
 8000878:	080008c1 	.word	0x080008c1
 800087c:	080008c9 	.word	0x080008c9
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080008d9 	.word	0x080008d9
 8000888:	080008e1 	.word	0x080008e1
 800088c:	080008e9 	.word	0x080008e9
 8000890:	080008f1 	.word	0x080008f1
 8000894:	080008f9 	.word	0x080008f9
 8000898:	08000901 	.word	0x08000901
 800089c:	08000909 	.word	0x08000909
 80008a0:	08000911 	.word	0x08000911
 80008a4:	08000919 	.word	0x08000919
							case 1:
								CanFDFrame.length = 1;
 80008a8:	4b33      	ldr	r3, [pc, #204]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	609a      	str	r2, [r3, #8]
								break;
 80008ae:	e037      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 2:
								CanFDFrame.length = 2;
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	609a      	str	r2, [r3, #8]
								break;
 80008b6:	e033      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 3:
								CanFDFrame.length = 3;
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	609a      	str	r2, [r3, #8]
								break;
 80008be:	e02f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 4:
								CanFDFrame.length = 4;
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	609a      	str	r2, [r3, #8]
								break;
 80008c6:	e02b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 5:
								CanFDFrame.length = 5;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ca:	2205      	movs	r2, #5
 80008cc:	609a      	str	r2, [r3, #8]
								break;
 80008ce:	e027      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 6:
								CanFDFrame.length = 6;
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008d2:	2206      	movs	r2, #6
 80008d4:	609a      	str	r2, [r3, #8]
								break;
 80008d6:	e023      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 7:
								CanFDFrame.length = 7;
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008da:	2207      	movs	r2, #7
 80008dc:	609a      	str	r2, [r3, #8]
								break;
 80008de:	e01f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 8:
								CanFDFrame.length = 8;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	609a      	str	r2, [r3, #8]
								break;
 80008e6:	e01b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 9:
								CanFDFrame.length = 12;
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	609a      	str	r2, [r3, #8]
								break;
 80008ee:	e017      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 10:
								CanFDFrame.length = 16;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008f2:	2210      	movs	r2, #16
 80008f4:	609a      	str	r2, [r3, #8]
								break;
 80008f6:	e013      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 11:
								CanFDFrame.length = 20;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008fa:	2214      	movs	r2, #20
 80008fc:	609a      	str	r2, [r3, #8]
								break;
 80008fe:	e00f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 12:
								CanFDFrame.length = 24;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000902:	2218      	movs	r2, #24
 8000904:	609a      	str	r2, [r3, #8]
								break;
 8000906:	e00b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 13:
								CanFDFrame.length = 32;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800090a:	2220      	movs	r2, #32
 800090c:	609a      	str	r2, [r3, #8]
								break;
 800090e:	e007      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 14:
								CanFDFrame.length = 48;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	609a      	str	r2, [r3, #8]
								break;
 8000916:	e003      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 15:
								CanFDFrame.length = 64;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800091a:	2240      	movs	r2, #64	; 0x40
 800091c:	609a      	str	r2, [r3, #8]
								break;
 800091e:	bf00      	nop
						}

						CanFDFrame.time = time;
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	60d3      	str	r3, [r2, #12]
						FDCAN_Flag = 1;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_FDCAN_RxFifo0Callback+0x270>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
						memcpy(CanFDFrame.data.bytes, RxData, CanFDFrame.length);
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	461a      	mov	r2, r3
 8000932:	490a      	ldr	r1, [pc, #40]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <HAL_FDCAN_RxFifo0Callback+0x274>)
 8000936:	f018 fda7 	bl	8019488 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000942:	d103      	bne.n	800094c <HAL_FDCAN_RxFifo0Callback+0x240>
							CanFDFrame.extended = 1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000946:	2201      	movs	r2, #1
 8000948:	711a      	strb	r2, [r3, #4]
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 800094a:	e002      	b.n	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
							CanFDFrame.extended = 0;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800094e:	2200      	movs	r2, #0
 8000950:	711a      	strb	r2, [r3, #4]
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	24001000 	.word	0x24001000
 8000960:	24001090 	.word	0x24001090
 8000964:	58020400 	.word	0x58020400
 8000968:	0801a744 	.word	0x0801a744
 800096c:	240010b8 	.word	0x240010b8
 8000970:	24000200 	.word	0x24000200
 8000974:	240010c8 	.word	0x240010c8
 8000978:	24001040 	.word	0x24001040
 800097c:	240001fc 	.word	0x240001fc
 8000980:	24001050 	.word	0x24001050

08000984 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000984:	b580      	push	{r7, lr}
 8000986:	b09e      	sub	sp, #120	; 0x78
 8000988:	af02      	add	r7, sp, #8
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 8000990:	68b8      	ldr	r0, [r7, #8]
 8000992:	f7ff fca5 	bl	80002e0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	2b03      	cmp	r3, #3
 800099a:	d001      	beq.n	80009a0 <gps_msg_config+0x1c>
 800099c:	2301      	movs	r3, #1
 800099e:	e052      	b.n	8000a46 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80009a0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <gps_msg_config+0xcc>)
 80009ac:	211f      	movs	r1, #31
 80009ae:	f018 feb3 	bl	8019718 <sniprintf>

	int checksum_int = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80009ba:	e00b      	b.n	80009d4 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80009bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009c2:	4413      	add	r3, r2
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ca:	4053      	eors	r3, r2
 80009cc:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009d0:	3301      	adds	r3, #1
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80009d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <gps_msg_config+0x64>
 80009e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009e4:	2b1f      	cmp	r3, #31
 80009e6:	dde9      	ble.n	80009bc <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80009e8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80009ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <gps_msg_config+0xd0>)
 80009f0:	2107      	movs	r1, #7
 80009f2:	f018 fe91 	bl	8019718 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 80009f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009fa:	f107 0014 	add.w	r0, r7, #20
 80009fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4613      	mov	r3, r2
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <gps_msg_config+0xd4>)
 8000a08:	2129      	movs	r1, #41	; 0x29
 8000a0a:	f018 fe85 	bl	8019718 <sniprintf>
	printf("\n\rSending: ");
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <gps_msg_config+0xd8>)
 8000a10:	f018 fdf6 	bl	8019600 <iprintf>
	printf("%s", messagetosend);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <gps_msg_config+0xdc>)
 8000a1c:	f018 fdf0 	bl	8019600 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fc5b 	bl	80002e0 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	f107 0114 	add.w	r1, r7, #20
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f00f f8b8 	bl	800fbaa <HAL_UART_Transmit>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <gps_msg_config+0xc0>
		Error_Handler();
 8000a40:	f003 f8e4 	bl	8003c0c <Error_Handler>
	}
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3770      	adds	r7, #112	; 0x70
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	0801a758 	.word	0x0801a758
 8000a54:	0801a770 	.word	0x0801a770
 8000a58:	0801a778 	.word	0x0801a778
 8000a5c:	0801a780 	.word	0x0801a780
 8000a60:	0801a78c 	.word	0x0801a78c

08000a64 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	4611      	mov	r1, r2
 8000a70:	461a      	mov	r2, r3
 8000a72:	4603      	mov	r3, r0
 8000a74:	817b      	strh	r3, [r7, #10]
 8000a76:	460b      	mov	r3, r1
 8000a78:	813b      	strh	r3, [r7, #8]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 8000a7e:	2306      	movs	r3, #6
 8000a80:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 8000a82:	23b5      	movs	r3, #181	; 0xb5
 8000a84:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000a86:	2362      	movs	r3, #98	; 0x62
 8000a88:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 8000a92:	8bfb      	ldrh	r3, [r7, #30]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000a9c:	897b      	ldrh	r3, [r7, #10]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000aa6:	893b      	ldrh	r3, [r7, #8]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	e013      	b.n	8000af4 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8000acc:	f107 0210 	add.w	r2, r7, #16
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ada:	4413      	add	r3, r2
 8000adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 8000ae0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ae8:	4413      	add	r3, r2
 8000aea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	3301      	adds	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	2b0b      	cmp	r3, #11
 8000af8:	dde8      	ble.n	8000acc <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8000afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000afe:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 8000b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b04:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000b06:	f107 0110 	add.w	r1, r7, #16
 8000b0a:	2364      	movs	r3, #100	; 0x64
 8000b0c:	220e      	movs	r2, #14
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f00f f84b 	bl	800fbaa <HAL_UART_Transmit>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <gps_rate_config+0xbe>
				Error_Handler();
 8000b1a:	f003 f877 	bl	8003c0c <Error_Handler>
				return 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <gps_rate_config+0xc0>
			}
		return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  GPS_flag = 1;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	24000204 	.word	0x24000204

08000b4c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <NRF24_DelayMicroSeconds+0x38>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <NRF24_DelayMicroSeconds+0x3c>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	0c9a      	lsrs	r2, r3, #18
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	fb02 f303 	mul.w	r3, r2, r3
 8000b6a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000b6c:	bf00      	nop
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	60fa      	str	r2, [r7, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1fa      	bne.n	8000b6e <NRF24_DelayMicroSeconds+0x22>
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	24000010 	.word	0x24000010
 8000b88:	165e9f81 	.word	0x165e9f81

08000b8c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d008      	beq.n	8000bac <NRF24_csn+0x20>
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <NRF24_csn+0x38>)
 8000b9c:	6818      	ldr	r0, [r3, #0]
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <NRF24_csn+0x3c>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f007 fa3f 	bl	8008028 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000baa:	e007      	b.n	8000bbc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <NRF24_csn+0x38>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <NRF24_csn+0x3c>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f007 fa36 	bl	8008028 <HAL_GPIO_WritePin>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24000210 	.word	0x24000210
 8000bc8:	24000214 	.word	0x24000214

08000bcc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d008      	beq.n	8000bec <NRF24_ce+0x20>
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <NRF24_ce+0x38>)
 8000bdc:	6818      	ldr	r0, [r3, #0]
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <NRF24_ce+0x3c>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	2201      	movs	r2, #1
 8000be4:	4619      	mov	r1, r3
 8000be6:	f007 fa1f 	bl	8008028 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000bea:	e007      	b.n	8000bfc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <NRF24_ce+0x38>)
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <NRF24_ce+0x3c>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f007 fa16 	bl	8008028 <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	24000210 	.word	0x24000210
 8000c08:	24000216 	.word	0x24000216

08000c0c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff ffb8 	bl	8000b8c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 031f 	and.w	r3, r3, #31
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c26:	f107 010c 	add.w	r1, r7, #12
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	480a      	ldr	r0, [pc, #40]	; (8000c58 <NRF24_read_register+0x4c>)
 8000c30:	f00d ffb2 	bl	800eb98 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	1c59      	adds	r1, r3, #1
 8000c3a:	2364      	movs	r3, #100	; 0x64
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <NRF24_read_register+0x4c>)
 8000c40:	f00e f99c 	bl	800ef7c <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000c44:	7b7b      	ldrb	r3, [r7, #13]
 8000c46:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff ff9f 	bl	8000b8c <NRF24_csn>
	return retData;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	24000218 	.word	0x24000218

08000c5c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff ff8d 	bl	8000b8c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 031f 	and.w	r3, r3, #31
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c7c:	f107 010c 	add.w	r1, r7, #12
 8000c80:	2364      	movs	r3, #100	; 0x64
 8000c82:	2201      	movs	r2, #1
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <NRF24_read_registerN+0x4c>)
 8000c86:	f00d ff87 	bl	800eb98 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	2364      	movs	r3, #100	; 0x64
 8000c90:	6839      	ldr	r1, [r7, #0]
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <NRF24_read_registerN+0x4c>)
 8000c94:	f00e f972 	bl	800ef7c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff ff77 	bl	8000b8c <NRF24_csn>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	24000218 	.word	0x24000218

08000cac <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460a      	mov	r2, r1
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff65 	bl	8000b8c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000cd0:	f107 010c 	add.w	r1, r7, #12
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <NRF24_write_register+0x40>)
 8000cda:	f00d ff5d 	bl	800eb98 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff ff54 	bl	8000b8c <NRF24_csn>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	24000218 	.word	0x24000218

08000cf0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff ff43 	bl	8000b8c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f043 0320 	orr.w	r3, r3, #32
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000d10:	f107 010c 	add.w	r1, r7, #12
 8000d14:	2364      	movs	r3, #100	; 0x64
 8000d16:	2201      	movs	r2, #1
 8000d18:	4808      	ldr	r0, [pc, #32]	; (8000d3c <NRF24_write_registerN+0x4c>)
 8000d1a:	f00d ff3d 	bl	800eb98 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	2364      	movs	r3, #100	; 0x64
 8000d24:	6839      	ldr	r1, [r7, #0]
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <NRF24_write_registerN+0x4c>)
 8000d28:	f00d ff36 	bl	800eb98 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff ff2d 	bl	8000b8c <NRF24_csn>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000218 	.word	0x24000218

08000d40 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ff1d 	bl	8000b8c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000d52:	23a0      	movs	r3, #160	; 0xa0
 8000d54:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000d56:	f107 010f 	add.w	r1, r7, #15
 8000d5a:	2364      	movs	r3, #100	; 0x64
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <NRF24_write_payload+0x40>)
 8000d60:	f00d ff1a 	bl	800eb98 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	2364      	movs	r3, #100	; 0x64
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <NRF24_write_payload+0x40>)
 8000d6e:	f00d ff13 	bl	800eb98 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff ff0a 	bl	8000b8c <NRF24_csn>
}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	24000218 	.word	0x24000218

08000d84 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000d88:	21ff      	movs	r1, #255	; 0xff
 8000d8a:	20e1      	movs	r0, #225	; 0xe1
 8000d8c:	f7ff ff8e 	bl	8000cac <NRF24_write_register>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000d98:	21ff      	movs	r1, #255	; 0xff
 8000d9a:	20e2      	movs	r0, #226	; 0xe2
 8000d9c:	f7ff ff86 	bl	8000cac <NRF24_write_register>
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000daa:	2007      	movs	r0, #7
 8000dac:	f7ff ff2e 	bl	8000c0c <NRF24_read_register>
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000dd4:	4b66      	ldr	r3, [pc, #408]	; (8000f70 <NRF24_begin+0x1b0>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2288      	movs	r2, #136	; 0x88
 8000dde:	4619      	mov	r1, r3
 8000de0:	f018 fb52 	bl	8019488 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000de4:	4a63      	ldr	r2, [pc, #396]	; (8000f74 <NRF24_begin+0x1b4>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000dea:	4a63      	ldr	r2, [pc, #396]	; (8000f78 <NRF24_begin+0x1b8>)
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000df0:	4a62      	ldr	r2, [pc, #392]	; (8000f7c <NRF24_begin+0x1bc>)
 8000df2:	883b      	ldrh	r3, [r7, #0]
 8000df4:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff fec8 	bl	8000b8c <NRF24_csn>
	NRF24_ce(0);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fee5 	bl	8000bcc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000e02:	2005      	movs	r0, #5
 8000e04:	f003 fbf6 	bl	80045f4 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000e08:	2108      	movs	r1, #8
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff ff4e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000e10:	213f      	movs	r1, #63	; 0x3f
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff ff4a 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000e18:	2103      	movs	r1, #3
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f7ff ff46 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000e20:	2103      	movs	r1, #3
 8000e22:	2003      	movs	r0, #3
 8000e24:	f7ff ff42 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000e28:	2103      	movs	r1, #3
 8000e2a:	2004      	movs	r0, #4
 8000e2c:	f7ff ff3e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000e30:	2102      	movs	r1, #2
 8000e32:	2005      	movs	r0, #5
 8000e34:	f7ff ff3a 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000e38:	210f      	movs	r1, #15
 8000e3a:	2006      	movs	r0, #6
 8000e3c:	f7ff ff36 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000e40:	210e      	movs	r1, #14
 8000e42:	2007      	movs	r0, #7
 8000e44:	f7ff ff32 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2008      	movs	r0, #8
 8000e4c:	f7ff ff2e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000e50:	2100      	movs	r1, #0
 8000e52:	2009      	movs	r0, #9
 8000e54:	f7ff ff2a 	bl	8000cac <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000e58:	23e7      	movs	r3, #231	; 0xe7
 8000e5a:	733b      	strb	r3, [r7, #12]
 8000e5c:	23e7      	movs	r3, #231	; 0xe7
 8000e5e:	72fb      	strb	r3, [r7, #11]
 8000e60:	23e7      	movs	r3, #231	; 0xe7
 8000e62:	72bb      	strb	r3, [r7, #10]
 8000e64:	23e7      	movs	r3, #231	; 0xe7
 8000e66:	727b      	strb	r3, [r7, #9]
 8000e68:	23e7      	movs	r3, #231	; 0xe7
 8000e6a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	2205      	movs	r2, #5
 8000e72:	4619      	mov	r1, r3
 8000e74:	200a      	movs	r0, #10
 8000e76:	f7ff ff3b 	bl	8000cf0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000e7a:	23c2      	movs	r3, #194	; 0xc2
 8000e7c:	733b      	strb	r3, [r7, #12]
 8000e7e:	23c2      	movs	r3, #194	; 0xc2
 8000e80:	72fb      	strb	r3, [r7, #11]
 8000e82:	23c2      	movs	r3, #194	; 0xc2
 8000e84:	72bb      	strb	r3, [r7, #10]
 8000e86:	23c2      	movs	r3, #194	; 0xc2
 8000e88:	727b      	strb	r3, [r7, #9]
 8000e8a:	23c2      	movs	r3, #194	; 0xc2
 8000e8c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	2205      	movs	r2, #5
 8000e94:	4619      	mov	r1, r3
 8000e96:	200b      	movs	r0, #11
 8000e98:	f7ff ff2a 	bl	8000cf0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000e9c:	21c3      	movs	r1, #195	; 0xc3
 8000e9e:	200c      	movs	r0, #12
 8000ea0:	f7ff ff04 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000ea4:	21c4      	movs	r1, #196	; 0xc4
 8000ea6:	200d      	movs	r0, #13
 8000ea8:	f7ff ff00 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000eac:	21c5      	movs	r1, #197	; 0xc5
 8000eae:	200e      	movs	r0, #14
 8000eb0:	f7ff fefc 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000eb4:	21c6      	movs	r1, #198	; 0xc6
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f7ff fef8 	bl	8000cac <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000ebc:	23e7      	movs	r3, #231	; 0xe7
 8000ebe:	733b      	strb	r3, [r7, #12]
 8000ec0:	23e7      	movs	r3, #231	; 0xe7
 8000ec2:	72fb      	strb	r3, [r7, #11]
 8000ec4:	23e7      	movs	r3, #231	; 0xe7
 8000ec6:	72bb      	strb	r3, [r7, #10]
 8000ec8:	23e7      	movs	r3, #231	; 0xe7
 8000eca:	727b      	strb	r3, [r7, #9]
 8000ecc:	23e7      	movs	r3, #231	; 0xe7
 8000ece:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2010      	movs	r0, #16
 8000eda:	f7ff ff09 	bl	8000cf0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2011      	movs	r0, #17
 8000ee2:	f7ff fee3 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2012      	movs	r0, #18
 8000eea:	f7ff fedf 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2013      	movs	r0, #19
 8000ef2:	f7ff fedb 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2014      	movs	r0, #20
 8000efa:	f7ff fed7 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000efe:	2100      	movs	r1, #0
 8000f00:	2015      	movs	r0, #21
 8000f02:	f7ff fed3 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000f06:	2100      	movs	r1, #0
 8000f08:	2016      	movs	r0, #22
 8000f0a:	f7ff fecf 	bl	8000cac <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000f0e:	f000 fa89 	bl	8001424 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000f12:	2100      	movs	r1, #0
 8000f14:	201c      	movs	r0, #28
 8000f16:	f7ff fec9 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	201d      	movs	r0, #29
 8000f1e:	f7ff fec5 	bl	8000cac <NRF24_write_register>
	printRadioSettings();
 8000f22:	f000 fa99 	bl	8001458 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000f26:	210f      	movs	r1, #15
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f000 f8ad 	bl	8001088 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f000 f927 	bl	8001182 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 f95d 	bl	80011f4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f000 f9a0 	bl	8001280 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000f40:	f000 f8f2 	bl	8001128 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000f44:	2020      	movs	r0, #32
 8000f46:	f000 f8cf 	bl	80010e8 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000f4a:	f000 fa62 	bl	8001412 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000f4e:	204c      	movs	r0, #76	; 0x4c
 8000f50:	f000 f8b5 	bl	80010be <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000f54:	f7ff ff16 	bl	8000d84 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000f58:	f7ff ff1c 	bl	8000d94 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000f5c:	f000 f9b8 	bl	80012d0 <NRF24_powerDown>
	
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f6a:	b002      	add	sp, #8
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	24000218 	.word	0x24000218
 8000f74:	24000210 	.word	0x24000210
 8000f78:	24000214 	.word	0x24000214
 8000f7c:	24000216 	.word	0x24000216

08000f80 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fe21 	bl	8000bcc <NRF24_ce>
	NRF24_flush_tx();
 8000f8a:	f7ff fefb 	bl	8000d84 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000f8e:	f7ff ff01 	bl	8000d94 <NRF24_flush_rx>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000fa4:	f000 fa35 	bl	8001412 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	4619      	mov	r1, r3
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f9ce 	bl	800134e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000fb2:	f003 fb13 	bl	80045dc <HAL_GetTick>
 8000fb6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000fb8:	230a      	movs	r3, #10
 8000fba:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000fbc:	f107 030d 	add.w	r3, r7, #13
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2008      	movs	r0, #8
 8000fc6:	f7ff fe49 	bl	8000c5c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000fca:	f7ff feeb 	bl	8000da4 <NRF24_get_status>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d107      	bne.n	8000fec <NRF24_write+0x54>
 8000fdc:	f003 fafe 	bl	80045dc <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8e7      	bhi.n	8000fbc <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000fec:	f107 010b 	add.w	r1, r7, #11
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <NRF24_write+0x90>)
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f9d8 	bl	80013ac <NRF24_whatHappened>
	retStatus = tx_ok;
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <NRF24_write+0x90>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001008:	f000 f886 	bl	8001118 <NRF24_getDynamicPayloadSize>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <NRF24_write+0x94>)
 8001012:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8001014:	f000 f80c 	bl	8001030 <NRF24_available>
	NRF24_flush_tx();
 8001018:	f7ff feb4 	bl	8000d84 <NRF24_flush_tx>
	return retStatus;
 800101c:	7bbb      	ldrb	r3, [r7, #14]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24000208 	.word	0x24000208
 800102c:	24000209 	.word	0x24000209

08001030 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 f95a 	bl	80012ee <NRF24_availablePipe>
 800103a:	4603      	mov	r3, r0
}
 800103c:	4618      	mov	r0, r3
 800103e:	bd80      	pop	{r7, pc}

08001040 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800104a:	463b      	mov	r3, r7
 800104c:	2205      	movs	r2, #5
 800104e:	4619      	mov	r1, r3
 8001050:	200a      	movs	r0, #10
 8001052:	f7ff fe4d 	bl	8000cf0 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8001056:	463b      	mov	r3, r7
 8001058:	2205      	movs	r2, #5
 800105a:	4619      	mov	r1, r3
 800105c:	2010      	movs	r0, #16
 800105e:	f7ff fe47 	bl	8000cf0 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8001062:	2320      	movs	r3, #32
 8001064:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <NRF24_openWritingPipe+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	4293      	cmp	r3, r2
 800106e:	bf28      	it	cs
 8001070:	4613      	movcs	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	2011      	movs	r0, #17
 8001078:	f7ff fe18 	bl	8000cac <NRF24_write_register>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2400020a 	.word	0x2400020a

08001088 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	b25a      	sxtb	r2, r3
 800109e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4619      	mov	r1, r3
 80010b0:	2004      	movs	r0, #4
 80010b2:	f7ff fdfb 	bl	8000cac <NRF24_write_register>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80010c8:	237f      	movs	r3, #127	; 0x7f
 80010ca:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	4293      	cmp	r3, r2
 80010d2:	bf28      	it	cs
 80010d4:	4613      	movcs	r3, r2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	2005      	movs	r0, #5
 80010dc:	f7ff fde6 	bl	8000cac <NRF24_write_register>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80010f2:	2320      	movs	r3, #32
 80010f4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	bf28      	it	cs
 80010fe:	4613      	movcs	r3, r2
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <NRF24_setPayloadSize+0x2c>)
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2400020a 	.word	0x2400020a

08001118 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800111c:	2060      	movs	r0, #96	; 0x60
 800111e:	f7ff fd75 	bl	8000c0c <NRF24_read_register>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	bd80      	pop	{r7, pc}

08001128 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800112c:	201d      	movs	r0, #29
 800112e:	f7ff fd6d 	bl	8000c0c <NRF24_read_register>
 8001132:	4603      	mov	r3, r0
 8001134:	f023 0304 	bic.w	r3, r3, #4
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4619      	mov	r1, r3
 800113c:	201d      	movs	r0, #29
 800113e:	f7ff fdb5 	bl	8000cac <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8001142:	2100      	movs	r1, #0
 8001144:	201c      	movs	r0, #28
 8001146:	f7ff fdb1 	bl	8000cac <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800114a:	4b02      	ldr	r3, [pc, #8]	; (8001154 <NRF24_disableDynamicPayloads+0x2c>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2400020b 	.word	0x2400020b

08001158 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001168:	213f      	movs	r1, #63	; 0x3f
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff fd9e 	bl	8000cac <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001170:	e003      	b.n	800117a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001172:	2100      	movs	r1, #0
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff fd99 	bl	8000cac <NRF24_write_register>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800118c:	2006      	movs	r0, #6
 800118e:	f7ff fd3d 	bl	8000c0c <NRF24_read_register>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	f023 0306 	bic.w	r3, r3, #6
 800119c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d104      	bne.n	80011ae <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	f043 0306 	orr.w	r3, r3, #6
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e019      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d104      	bne.n	80011be <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e011      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d104      	bne.n	80011ce <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e009      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d103      	bne.n	80011e2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	f043 0306 	orr.w	r3, r3, #6
 80011e0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	4619      	mov	r1, r3
 80011e6:	2006      	movs	r0, #6
 80011e8:	f7ff fd60 	bl	8000cac <NRF24_write_register>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001202:	2006      	movs	r0, #6
 8001204:	f7ff fd02 	bl	8000c0c <NRF24_read_register>
 8001208:	4603      	mov	r3, r0
 800120a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <NRF24_setDataRate+0x88>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001218:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d107      	bne.n	8001230 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <NRF24_setDataRate+0x88>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	73bb      	strb	r3, [r7, #14]
 800122e:	e00d      	b.n	800124c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d107      	bne.n	8001246 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <NRF24_setDataRate+0x88>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	73bb      	strb	r3, [r7, #14]
 8001244:	e002      	b.n	800124c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <NRF24_setDataRate+0x88>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	4619      	mov	r1, r3
 8001250:	2006      	movs	r0, #6
 8001252:	f7ff fd2b 	bl	8000cac <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001256:	2006      	movs	r0, #6
 8001258:	f7ff fcd8 	bl	8000c0c <NRF24_read_register>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	4293      	cmp	r3, r2
 8001264:	d102      	bne.n	800126c <NRF24_setDataRate+0x78>
  {
    result = true;
 8001266:	2301      	movs	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	e002      	b.n	8001272 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <NRF24_setDataRate+0x88>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2400020c 	.word	0x2400020c

08001280 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fcbe 	bl	8000c0c <NRF24_read_register>
 8001290:	4603      	mov	r3, r0
 8001292:	f023 030c 	bic.w	r3, r3, #12
 8001296:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00f      	beq.n	80012be <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d104      	bne.n	80012ae <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e007      	b.n	80012be <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	4619      	mov	r1, r3
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fcf2 	bl	8000cac <NRF24_write_register>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff fc99 	bl	8000c0c <NRF24_read_register>
 80012da:	4603      	mov	r3, r0
 80012dc:	f023 0302 	bic.w	r3, r3, #2
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fce1 	bl	8000cac <NRF24_write_register>
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}

080012ee <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80012f6:	f7ff fd55 	bl	8000da4 <NRF24_get_status>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf14      	ite	ne
 8001308:	2301      	movne	r3, #1
 800130a:	2300      	moveq	r3, #0
 800130c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800130e:	7bbb      	ldrb	r3, [r7, #14]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d017      	beq.n	8001344 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	085b      	lsrs	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	b2da      	uxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800132a:	2140      	movs	r1, #64	; 0x40
 800132c:	2007      	movs	r0, #7
 800132e:	f7ff fcbd 	bl	8000cac <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800133c:	2120      	movs	r1, #32
 800133e:	2007      	movs	r0, #7
 8001340:	f7ff fcb4 	bl	8000cac <NRF24_write_register>
    }
  }
  return result;
 8001344:	7bbb      	ldrb	r3, [r7, #14]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fc36 	bl	8000bcc <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fc53 	bl	8000c0c <NRF24_read_register>
 8001366:	4603      	mov	r3, r0
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4619      	mov	r1, r3
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff fc98 	bl	8000cac <NRF24_write_register>
  NRF24_ce(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fc25 	bl	8000bcc <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8001382:	2096      	movs	r0, #150	; 0x96
 8001384:	f7ff fbe2 	bl	8000b4c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	4619      	mov	r1, r3
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fcd7 	bl	8000d40 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff fc1a 	bl	8000bcc <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001398:	200f      	movs	r0, #15
 800139a:	f7ff fbd7 	bl	8000b4c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fc14 	bl	8000bcc <NRF24_ce>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80013b8:	f7ff fcf4 	bl	8000da4 <NRF24_get_status>
 80013bc:	4603      	mov	r3, r0
 80013be:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80013c6:	2170      	movs	r1, #112	; 0x70
 80013c8:	2007      	movs	r0, #7
 80013ca:	f7ff fc6f 	bl	8000cac <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bf14      	ite	ne
 80013d8:	2301      	movne	r3, #1
 80013da:	2300      	moveq	r3, #0
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf14      	ite	ne
 80013ec:	2301      	movne	r3, #1
 80013ee:	2300      	moveq	r3, #0
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80013f6:	7dfb      	ldrb	r3, [r7, #23]
 80013f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bf14      	ite	ne
 8001400:	2301      	movne	r3, #1
 8001402:	2300      	moveq	r3, #0
 8001404:	b2da      	uxtb	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	701a      	strb	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001416:	2170      	movs	r1, #112	; 0x70
 8001418:	2007      	movs	r0, #7
 800141a:	f7ff fc47 	bl	8000cac <NRF24_write_register>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff fbae 	bl	8000b8c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001430:	2350      	movs	r3, #80	; 0x50
 8001432:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001434:	2373      	movs	r3, #115	; 0x73
 8001436:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001438:	1d39      	adds	r1, r7, #4
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	2202      	movs	r2, #2
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <NRF24_ACTIVATE_cmd+0x30>)
 8001440:	f00d fbaa 	bl	800eb98 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fba1 	bl	8000b8c <NRF24_csn>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	24000218 	.word	0x24000218

08001458 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	b0a1      	sub	sp, #132	; 0x84
 800145c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4ab6      	ldr	r2, [pc, #728]	; (800173c <printRadioSettings+0x2e4>)
 8001464:	461c      	mov	r4, r3
 8001466:	4615      	mov	r5, r2
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001474:	682b      	ldr	r3, [r5, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	8022      	strh	r2, [r4, #0]
 800147a:	3402      	adds	r4, #2
 800147c:	0c1b      	lsrs	r3, r3, #16
 800147e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ff2b 	bl	80002e0 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0108 	add.w	r1, r7, #8
 8001492:	230a      	movs	r3, #10
 8001494:	48aa      	ldr	r0, [pc, #680]	; (8001740 <printRadioSettings+0x2e8>)
 8001496:	f00e fb88 	bl	800fbaa <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fbb6 	bl	8000c0c <NRF24_read_register>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80014a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d020      	beq.n	80014f4 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80014b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <printRadioSettings+0x7e>
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4aa0      	ldr	r2, [pc, #640]	; (8001744 <printRadioSettings+0x2ec>)
 80014c4:	461c      	mov	r4, r3
 80014c6:	4615      	mov	r5, r2
 80014c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014d4:	e017      	b.n	8001506 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4a9b      	ldr	r2, [pc, #620]	; (8001748 <printRadioSettings+0x2f0>)
 80014dc:	461c      	mov	r4, r3
 80014de:	4615      	mov	r5, r2
 80014e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e8:	c403      	stmia	r4!, {r0, r1}
 80014ea:	8022      	strh	r2, [r4, #0]
 80014ec:	3402      	adds	r4, #2
 80014ee:	0c13      	lsrs	r3, r2, #16
 80014f0:	7023      	strb	r3, [r4, #0]
 80014f2:	e008      	b.n	8001506 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	4a94      	ldr	r2, [pc, #592]	; (800174c <printRadioSettings+0x2f4>)
 80014fa:	461c      	mov	r4, r3
 80014fc:	4615      	mov	r5, r2
 80014fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fee8 	bl	80002e0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f107 0108 	add.w	r1, r7, #8
 8001518:	230a      	movs	r3, #10
 800151a:	4889      	ldr	r0, [pc, #548]	; (8001740 <printRadioSettings+0x2e8>)
 800151c:	f00e fb45 	bl	800fbaa <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fb73 	bl	8000c0c <NRF24_read_register>
 8001526:	4603      	mov	r3, r0
 8001528:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800152c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001530:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001534:	2b00      	cmp	r3, #0
 8001536:	bfcc      	ite	gt
 8001538:	2301      	movgt	r3, #1
 800153a:	2300      	movle	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001540:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001544:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001548:	2b00      	cmp	r3, #0
 800154a:	bfcc      	ite	gt
 800154c:	2301      	movgt	r3, #1
 800154e:	2300      	movle	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001554:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001558:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800155c:	2b00      	cmp	r3, #0
 800155e:	bfcc      	ite	gt
 8001560:	2301      	movgt	r3, #1
 8001562:	2300      	movle	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001568:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800156c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001570:	2b00      	cmp	r3, #0
 8001572:	bfcc      	ite	gt
 8001574:	2301      	movgt	r3, #1
 8001576:	2300      	movle	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800157c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001580:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001584:	2b00      	cmp	r3, #0
 8001586:	bfcc      	ite	gt
 8001588:	2301      	movgt	r3, #1
 800158a:	2300      	movle	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001590:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001594:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001598:	2b00      	cmp	r3, #0
 800159a:	bfcc      	ite	gt
 800159c:	2301      	movgt	r3, #1
 800159e:	2300      	movle	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f107 0008 	add.w	r0, r7, #8
 80015a6:	9303      	str	r3, [sp, #12]
 80015a8:	9402      	str	r4, [sp, #8]
 80015aa:	9101      	str	r1, [sp, #4]
 80015ac:	9200      	str	r2, [sp, #0]
 80015ae:	4633      	mov	r3, r6
 80015b0:	462a      	mov	r2, r5
 80015b2:	4967      	ldr	r1, [pc, #412]	; (8001750 <printRadioSettings+0x2f8>)
 80015b4:	f018 f8e4 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fe8f 	bl	80002e0 <strlen>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	f107 0108 	add.w	r1, r7, #8
 80015ca:	230a      	movs	r3, #10
 80015cc:	485c      	ldr	r0, [pc, #368]	; (8001740 <printRadioSettings+0x2e8>)
 80015ce:	f00e faec 	bl	800fbaa <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f7ff fb1a 	bl	8000c0c <NRF24_read_register>
 80015d8:	4603      	mov	r3, r0
 80015da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015e2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bfcc      	ite	gt
 80015ea:	2301      	movgt	r3, #1
 80015ec:	2300      	movle	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015f6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bfcc      	ite	gt
 80015fe:	2301      	movgt	r3, #1
 8001600:	2300      	movle	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001606:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800160a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800160e:	2b00      	cmp	r3, #0
 8001610:	bfcc      	ite	gt
 8001612:	2301      	movgt	r3, #1
 8001614:	2300      	movle	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800161a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001622:	2b00      	cmp	r3, #0
 8001624:	bfcc      	ite	gt
 8001626:	2301      	movgt	r3, #1
 8001628:	2300      	movle	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800162e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001632:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001636:	2b00      	cmp	r3, #0
 8001638:	bfcc      	ite	gt
 800163a:	2301      	movgt	r3, #1
 800163c:	2300      	movle	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001642:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001646:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800164a:	2b00      	cmp	r3, #0
 800164c:	bfcc      	ite	gt
 800164e:	2301      	movgt	r3, #1
 8001650:	2300      	movle	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f107 0008 	add.w	r0, r7, #8
 8001658:	9303      	str	r3, [sp, #12]
 800165a:	9402      	str	r4, [sp, #8]
 800165c:	9101      	str	r1, [sp, #4]
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	4633      	mov	r3, r6
 8001662:	462a      	mov	r2, r5
 8001664:	493b      	ldr	r1, [pc, #236]	; (8001754 <printRadioSettings+0x2fc>)
 8001666:	f018 f88b 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fe36 	bl	80002e0 <strlen>
 8001674:	4603      	mov	r3, r0
 8001676:	b29a      	uxth	r2, r3
 8001678:	f107 0108 	add.w	r1, r7, #8
 800167c:	230a      	movs	r3, #10
 800167e:	4830      	ldr	r0, [pc, #192]	; (8001740 <printRadioSettings+0x2e8>)
 8001680:	f00e fa93 	bl	800fbaa <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001684:	2003      	movs	r0, #3
 8001686:	f7ff fac1 	bl	8000c0c <NRF24_read_register>
 800168a:	4603      	mov	r3, r0
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001694:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001698:	3302      	adds	r3, #2
 800169a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800169e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	492c      	ldr	r1, [pc, #176]	; (8001758 <printRadioSettings+0x300>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f018 f869 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fe14 	bl	80002e0 <strlen>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f107 0108 	add.w	r1, r7, #8
 80016c0:	230a      	movs	r3, #10
 80016c2:	481f      	ldr	r0, [pc, #124]	; (8001740 <printRadioSettings+0x2e8>)
 80016c4:	f00e fa71 	bl	800fbaa <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80016c8:	2005      	movs	r0, #5
 80016ca:	f7ff fa9f 	bl	8000c0c <NRF24_read_register>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80016d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	491e      	ldr	r1, [pc, #120]	; (800175c <printRadioSettings+0x304>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f018 f84c 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fdf7 	bl	80002e0 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f107 0108 	add.w	r1, r7, #8
 80016fa:	230a      	movs	r3, #10
 80016fc:	4810      	ldr	r0, [pc, #64]	; (8001740 <printRadioSettings+0x2e8>)
 80016fe:	f00e fa54 	bl	800fbaa <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001702:	2006      	movs	r0, #6
 8001704:	f7ff fa82 	bl	8000c0c <NRF24_read_register>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800170e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d024      	beq.n	8001764 <printRadioSettings+0x30c>
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4a10      	ldr	r2, [pc, #64]	; (8001760 <printRadioSettings+0x308>)
 8001720:	461c      	mov	r4, r3
 8001722:	4615      	mov	r5, r2
 8001724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001728:	e895 0003 	ldmia.w	r5, {r0, r1}
 800172c:	6020      	str	r0, [r4, #0]
 800172e:	3404      	adds	r4, #4
 8001730:	8021      	strh	r1, [r4, #0]
 8001732:	3402      	adds	r4, #2
 8001734:	0c0b      	lsrs	r3, r1, #16
 8001736:	7023      	strb	r3, [r4, #0]
 8001738:	e023      	b.n	8001782 <printRadioSettings+0x32a>
 800173a:	bf00      	nop
 800173c:	0801a798 	.word	0x0801a798
 8001740:	240002a0 	.word	0x240002a0
 8001744:	0801a7cc 	.word	0x0801a7cc
 8001748:	0801a7e8 	.word	0x0801a7e8
 800174c:	0801a804 	.word	0x0801a804
 8001750:	0801a818 	.word	0x0801a818
 8001754:	0801a85c 	.word	0x0801a85c
 8001758:	0801a8a8 	.word	0x0801a8a8
 800175c:	0801a8c4 	.word	0x0801a8c4
 8001760:	0801a8d8 	.word	0x0801a8d8
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	4a29      	ldr	r2, [pc, #164]	; (8001810 <printRadioSettings+0x3b8>)
 800176a:	461c      	mov	r4, r3
 800176c:	4615      	mov	r5, r2
 800176e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001772:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001776:	6020      	str	r0, [r4, #0]
 8001778:	3404      	adds	r4, #4
 800177a:	8021      	strh	r1, [r4, #0]
 800177c:	3402      	adds	r4, #2
 800177e:	0c0b      	lsrs	r3, r1, #16
 8001780:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fdaa 	bl	80002e0 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	b29a      	uxth	r2, r3
 8001790:	f107 0108 	add.w	r1, r7, #8
 8001794:	230a      	movs	r3, #10
 8001796:	481f      	ldr	r0, [pc, #124]	; (8001814 <printRadioSettings+0x3bc>)
 8001798:	f00e fa07 	bl	800fbaa <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 800179c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017a0:	f003 0306 	and.w	r3, r3, #6
 80017a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80017a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80017b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <printRadioSettings+0x376>
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4a16      	ldr	r2, [pc, #88]	; (8001818 <printRadioSettings+0x3c0>)
 80017c0:	461c      	mov	r4, r3
 80017c2:	4615      	mov	r5, r2
 80017c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c8:	682b      	ldr	r3, [r5, #0]
 80017ca:	6023      	str	r3, [r4, #0]
 80017cc:	e037      	b.n	800183e <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80017ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d109      	bne.n	80017ea <printRadioSettings+0x392>
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <printRadioSettings+0x3c4>)
 80017dc:	461c      	mov	r4, r3
 80017de:	4615      	mov	r5, r2
 80017e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e4:	682b      	ldr	r3, [r5, #0]
 80017e6:	6023      	str	r3, [r4, #0]
 80017e8:	e029      	b.n	800183e <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80017ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d118      	bne.n	8001824 <printRadioSettings+0x3cc>
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <printRadioSettings+0x3c8>)
 80017f8:	461c      	mov	r4, r3
 80017fa:	4615      	mov	r5, r2
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	8022      	strh	r2, [r4, #0]
 8001806:	3402      	adds	r4, #2
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	7023      	strb	r3, [r4, #0]
 800180c:	e017      	b.n	800183e <printRadioSettings+0x3e6>
 800180e:	bf00      	nop
 8001810:	0801a8f0 	.word	0x0801a8f0
 8001814:	240002a0 	.word	0x240002a0
 8001818:	0801a908 	.word	0x0801a908
 800181c:	0801a91c 	.word	0x0801a91c
 8001820:	0801a930 	.word	0x0801a930
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001824:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001828:	2b03      	cmp	r3, #3
 800182a:	d108      	bne.n	800183e <printRadioSettings+0x3e6>
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	4ad7      	ldr	r2, [pc, #860]	; (8001b90 <printRadioSettings+0x738>)
 8001832:	461c      	mov	r4, r3
 8001834:	4615      	mov	r5, r2
 8001836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fd4c 	bl	80002e0 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	f107 0108 	add.w	r1, r7, #8
 8001850:	230a      	movs	r3, #10
 8001852:	48d0      	ldr	r0, [pc, #832]	; (8001b94 <printRadioSettings+0x73c>)
 8001854:	f00e f9a9 	bl	800fbaa <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001858:	463b      	mov	r3, r7
 800185a:	2205      	movs	r2, #5
 800185c:	4619      	mov	r1, r3
 800185e:	200a      	movs	r0, #10
 8001860:	f7ff f9fc 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001864:	793b      	ldrb	r3, [r7, #4]
 8001866:	461c      	mov	r4, r3
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	461d      	mov	r5, r3
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	787a      	ldrb	r2, [r7, #1]
 8001870:	7839      	ldrb	r1, [r7, #0]
 8001872:	f107 0008 	add.w	r0, r7, #8
 8001876:	9102      	str	r1, [sp, #8]
 8001878:	9201      	str	r2, [sp, #4]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	462b      	mov	r3, r5
 800187e:	4622      	mov	r2, r4
 8001880:	49c5      	ldr	r1, [pc, #788]	; (8001b98 <printRadioSettings+0x740>)
 8001882:	f017 ff7d 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fd28 	bl	80002e0 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	b29a      	uxth	r2, r3
 8001894:	f107 0108 	add.w	r1, r7, #8
 8001898:	230a      	movs	r3, #10
 800189a:	48be      	ldr	r0, [pc, #760]	; (8001b94 <printRadioSettings+0x73c>)
 800189c:	f00e f985 	bl	800fbaa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80018a0:	463b      	mov	r3, r7
 80018a2:	2205      	movs	r2, #5
 80018a4:	4619      	mov	r1, r3
 80018a6:	200b      	movs	r0, #11
 80018a8:	f7ff f9d8 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80018ac:	793b      	ldrb	r3, [r7, #4]
 80018ae:	461c      	mov	r4, r3
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	461d      	mov	r5, r3
 80018b4:	78bb      	ldrb	r3, [r7, #2]
 80018b6:	787a      	ldrb	r2, [r7, #1]
 80018b8:	7839      	ldrb	r1, [r7, #0]
 80018ba:	f107 0008 	add.w	r0, r7, #8
 80018be:	9102      	str	r1, [sp, #8]
 80018c0:	9201      	str	r2, [sp, #4]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	462b      	mov	r3, r5
 80018c6:	4622      	mov	r2, r4
 80018c8:	49b4      	ldr	r1, [pc, #720]	; (8001b9c <printRadioSettings+0x744>)
 80018ca:	f017 ff59 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd04 	bl	80002e0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f107 0108 	add.w	r1, r7, #8
 80018e0:	230a      	movs	r3, #10
 80018e2:	48ac      	ldr	r0, [pc, #688]	; (8001b94 <printRadioSettings+0x73c>)
 80018e4:	f00e f961 	bl	800fbaa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80018e8:	463b      	mov	r3, r7
 80018ea:	2201      	movs	r2, #1
 80018ec:	4619      	mov	r1, r3
 80018ee:	200c      	movs	r0, #12
 80018f0:	f7ff f9b4 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80018f4:	783b      	ldrb	r3, [r7, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	49a8      	ldr	r1, [pc, #672]	; (8001ba0 <printRadioSettings+0x748>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f017 ff3e 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fce9 	bl	80002e0 <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	f107 0108 	add.w	r1, r7, #8
 8001916:	230a      	movs	r3, #10
 8001918:	489e      	ldr	r0, [pc, #632]	; (8001b94 <printRadioSettings+0x73c>)
 800191a:	f00e f946 	bl	800fbaa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800191e:	463b      	mov	r3, r7
 8001920:	2201      	movs	r2, #1
 8001922:	4619      	mov	r1, r3
 8001924:	200d      	movs	r0, #13
 8001926:	f7ff f999 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800192a:	783b      	ldrb	r3, [r7, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	499c      	ldr	r1, [pc, #624]	; (8001ba4 <printRadioSettings+0x74c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f017 ff23 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fcce 	bl	80002e0 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	f107 0108 	add.w	r1, r7, #8
 800194c:	230a      	movs	r3, #10
 800194e:	4891      	ldr	r0, [pc, #580]	; (8001b94 <printRadioSettings+0x73c>)
 8001950:	f00e f92b 	bl	800fbaa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001954:	463b      	mov	r3, r7
 8001956:	2201      	movs	r2, #1
 8001958:	4619      	mov	r1, r3
 800195a:	200e      	movs	r0, #14
 800195c:	f7ff f97e 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001960:	783b      	ldrb	r3, [r7, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	498f      	ldr	r1, [pc, #572]	; (8001ba8 <printRadioSettings+0x750>)
 800196a:	4618      	mov	r0, r3
 800196c:	f017 ff08 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fcb3 	bl	80002e0 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	f107 0108 	add.w	r1, r7, #8
 8001982:	230a      	movs	r3, #10
 8001984:	4883      	ldr	r0, [pc, #524]	; (8001b94 <printRadioSettings+0x73c>)
 8001986:	f00e f910 	bl	800fbaa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800198a:	463b      	mov	r3, r7
 800198c:	2201      	movs	r2, #1
 800198e:	4619      	mov	r1, r3
 8001990:	200f      	movs	r0, #15
 8001992:	f7ff f963 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001996:	783b      	ldrb	r3, [r7, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	4983      	ldr	r1, [pc, #524]	; (8001bac <printRadioSettings+0x754>)
 80019a0:	4618      	mov	r0, r3
 80019a2:	f017 feed 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fc98 	bl	80002e0 <strlen>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f107 0108 	add.w	r1, r7, #8
 80019b8:	230a      	movs	r3, #10
 80019ba:	4876      	ldr	r0, [pc, #472]	; (8001b94 <printRadioSettings+0x73c>)
 80019bc:	f00e f8f5 	bl	800fbaa <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80019c0:	463b      	mov	r3, r7
 80019c2:	2205      	movs	r2, #5
 80019c4:	4619      	mov	r1, r3
 80019c6:	2010      	movs	r0, #16
 80019c8:	f7ff f948 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80019cc:	793b      	ldrb	r3, [r7, #4]
 80019ce:	461c      	mov	r4, r3
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	461d      	mov	r5, r3
 80019d4:	78bb      	ldrb	r3, [r7, #2]
 80019d6:	787a      	ldrb	r2, [r7, #1]
 80019d8:	7839      	ldrb	r1, [r7, #0]
 80019da:	f107 0008 	add.w	r0, r7, #8
 80019de:	9102      	str	r1, [sp, #8]
 80019e0:	9201      	str	r2, [sp, #4]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	462b      	mov	r3, r5
 80019e6:	4622      	mov	r2, r4
 80019e8:	4971      	ldr	r1, [pc, #452]	; (8001bb0 <printRadioSettings+0x758>)
 80019ea:	f017 fec9 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fc74 	bl	80002e0 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f107 0108 	add.w	r1, r7, #8
 8001a00:	230a      	movs	r3, #10
 8001a02:	4864      	ldr	r0, [pc, #400]	; (8001b94 <printRadioSettings+0x73c>)
 8001a04:	f00e f8d1 	bl	800fbaa <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001a08:	2011      	movs	r0, #17
 8001a0a:	f7ff f8ff 	bl	8000c0c <NRF24_read_register>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	4964      	ldr	r1, [pc, #400]	; (8001bb4 <printRadioSettings+0x75c>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f017 feac 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fc57 	bl	80002e0 <strlen>
 8001a32:	4603      	mov	r3, r0
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	f107 0108 	add.w	r1, r7, #8
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	4855      	ldr	r0, [pc, #340]	; (8001b94 <printRadioSettings+0x73c>)
 8001a3e:	f00e f8b4 	bl	800fbaa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001a42:	2012      	movs	r0, #18
 8001a44:	f7ff f8e2 	bl	8000c0c <NRF24_read_register>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4957      	ldr	r1, [pc, #348]	; (8001bb8 <printRadioSettings+0x760>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f017 fe8f 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fc3a 	bl	80002e0 <strlen>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f107 0108 	add.w	r1, r7, #8
 8001a74:	230a      	movs	r3, #10
 8001a76:	4847      	ldr	r0, [pc, #284]	; (8001b94 <printRadioSettings+0x73c>)
 8001a78:	f00e f897 	bl	800fbaa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001a7c:	2013      	movs	r0, #19
 8001a7e:	f7ff f8c5 	bl	8000c0c <NRF24_read_register>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4949      	ldr	r1, [pc, #292]	; (8001bbc <printRadioSettings+0x764>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f017 fe72 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fc1d 	bl	80002e0 <strlen>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	f107 0108 	add.w	r1, r7, #8
 8001aae:	230a      	movs	r3, #10
 8001ab0:	4838      	ldr	r0, [pc, #224]	; (8001b94 <printRadioSettings+0x73c>)
 8001ab2:	f00e f87a 	bl	800fbaa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001ab6:	2014      	movs	r0, #20
 8001ab8:	f7ff f8a8 	bl	8000c0c <NRF24_read_register>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ac2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	493c      	ldr	r1, [pc, #240]	; (8001bc0 <printRadioSettings+0x768>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f017 fe55 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fc00 	bl	80002e0 <strlen>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	f107 0108 	add.w	r1, r7, #8
 8001ae8:	230a      	movs	r3, #10
 8001aea:	482a      	ldr	r0, [pc, #168]	; (8001b94 <printRadioSettings+0x73c>)
 8001aec:	f00e f85d 	bl	800fbaa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001af0:	2015      	movs	r0, #21
 8001af2:	f7ff f88b 	bl	8000c0c <NRF24_read_register>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001afc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	492e      	ldr	r1, [pc, #184]	; (8001bc4 <printRadioSettings+0x76c>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f017 fe38 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fbe3 	bl	80002e0 <strlen>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	f107 0108 	add.w	r1, r7, #8
 8001b22:	230a      	movs	r3, #10
 8001b24:	481b      	ldr	r0, [pc, #108]	; (8001b94 <printRadioSettings+0x73c>)
 8001b26:	f00e f840 	bl	800fbaa <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001b2a:	2016      	movs	r0, #22
 8001b2c:	f7ff f86e 	bl	8000c0c <NRF24_read_register>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4921      	ldr	r1, [pc, #132]	; (8001bc8 <printRadioSettings+0x770>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f017 fe1b 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fbc6 	bl	80002e0 <strlen>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	f107 0108 	add.w	r1, r7, #8
 8001b5c:	230a      	movs	r3, #10
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <printRadioSettings+0x73c>)
 8001b60:	f00e f823 	bl	800fbaa <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001b64:	201c      	movs	r0, #28
 8001b66:	f7ff f851 	bl	8000c0c <NRF24_read_register>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b74:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bfcc      	ite	gt
 8001b7c:	2301      	movgt	r3, #1
 8001b7e:	2300      	movle	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	e01e      	b.n	8001bcc <printRadioSettings+0x774>
 8001b8e:	bf00      	nop
 8001b90:	0801a944 	.word	0x0801a944
 8001b94:	240002a0 	.word	0x240002a0
 8001b98:	0801a958 	.word	0x0801a958
 8001b9c:	0801a988 	.word	0x0801a988
 8001ba0:	0801a9b8 	.word	0x0801a9b8
 8001ba4:	0801a9e0 	.word	0x0801a9e0
 8001ba8:	0801aa08 	.word	0x0801aa08
 8001bac:	0801aa30 	.word	0x0801aa30
 8001bb0:	0801aa58 	.word	0x0801aa58
 8001bb4:	0801aa84 	.word	0x0801aa84
 8001bb8:	0801aaa0 	.word	0x0801aaa0
 8001bbc:	0801aabc 	.word	0x0801aabc
 8001bc0:	0801aad8 	.word	0x0801aad8
 8001bc4:	0801aaf4 	.word	0x0801aaf4
 8001bc8:	0801ab10 	.word	0x0801ab10
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bfcc      	ite	gt
 8001bd0:	2301      	movgt	r3, #1
 8001bd2:	2300      	movle	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bdc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bfcc      	ite	gt
 8001be4:	2301      	movgt	r3, #1
 8001be6:	2300      	movle	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bf0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bfcc      	ite	gt
 8001bf8:	2301      	movgt	r3, #1
 8001bfa:	2300      	movle	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c04:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bfcc      	ite	gt
 8001c0c:	2301      	movgt	r3, #1
 8001c0e:	2300      	movle	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c18:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bfcc      	ite	gt
 8001c20:	2301      	movgt	r3, #1
 8001c22:	2300      	movle	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f107 0008 	add.w	r0, r7, #8
 8001c2a:	9303      	str	r3, [sp, #12]
 8001c2c:	9402      	str	r4, [sp, #8]
 8001c2e:	9101      	str	r1, [sp, #4]
 8001c30:	9200      	str	r2, [sp, #0]
 8001c32:	4633      	mov	r3, r6
 8001c34:	462a      	mov	r2, r5
 8001c36:	494a      	ldr	r1, [pc, #296]	; (8001d60 <printRadioSettings+0x908>)
 8001c38:	f017 fda2 	bl	8019780 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fb4d 	bl	80002e0 <strlen>
 8001c46:	4603      	mov	r3, r0
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	f107 0108 	add.w	r1, r7, #8
 8001c4e:	230a      	movs	r3, #10
 8001c50:	4844      	ldr	r0, [pc, #272]	; (8001d64 <printRadioSettings+0x90c>)
 8001c52:	f00d ffaa 	bl	800fbaa <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001c56:	201d      	movs	r0, #29
 8001c58:	f7fe ffd8 	bl	8000c0c <NRF24_read_register>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001c62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00c      	beq.n	8001c88 <printRadioSettings+0x830>
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4a3d      	ldr	r2, [pc, #244]	; (8001d68 <printRadioSettings+0x910>)
 8001c74:	461c      	mov	r4, r3
 8001c76:	4615      	mov	r5, r2
 8001c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c80:	6020      	str	r0, [r4, #0]
 8001c82:	3404      	adds	r4, #4
 8001c84:	8021      	strh	r1, [r4, #0]
 8001c86:	e00e      	b.n	8001ca6 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	4a37      	ldr	r2, [pc, #220]	; (8001d6c <printRadioSettings+0x914>)
 8001c8e:	461c      	mov	r4, r3
 8001c90:	4615      	mov	r5, r2
 8001c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c9a:	6020      	str	r0, [r4, #0]
 8001c9c:	3404      	adds	r4, #4
 8001c9e:	8021      	strh	r1, [r4, #0]
 8001ca0:	3402      	adds	r4, #2
 8001ca2:	0c0b      	lsrs	r3, r1, #16
 8001ca4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fb18 	bl	80002e0 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f107 0108 	add.w	r1, r7, #8
 8001cb8:	230a      	movs	r3, #10
 8001cba:	482a      	ldr	r0, [pc, #168]	; (8001d64 <printRadioSettings+0x90c>)
 8001cbc:	f00d ff75 	bl	800fbaa <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001cc0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <printRadioSettings+0x88c>
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <printRadioSettings+0x918>)
 8001cd2:	461c      	mov	r4, r3
 8001cd4:	4615      	mov	r5, r2
 8001cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cde:	c403      	stmia	r4!, {r0, r1}
 8001ce0:	8022      	strh	r2, [r4, #0]
 8001ce2:	e00d      	b.n	8001d00 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <printRadioSettings+0x91c>)
 8001cea:	461c      	mov	r4, r3
 8001cec:	4615      	mov	r5, r2
 8001cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cf6:	c403      	stmia	r4!, {r0, r1}
 8001cf8:	8022      	strh	r2, [r4, #0]
 8001cfa:	3402      	adds	r4, #2
 8001cfc:	0c13      	lsrs	r3, r2, #16
 8001cfe:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe faeb 	bl	80002e0 <strlen>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	f107 0108 	add.w	r1, r7, #8
 8001d12:	230a      	movs	r3, #10
 8001d14:	4813      	ldr	r0, [pc, #76]	; (8001d64 <printRadioSettings+0x90c>)
 8001d16:	f00d ff48 	bl	800fbaa <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <printRadioSettings+0x920>)
 8001d20:	461c      	mov	r4, r3
 8001d22:	4615      	mov	r5, r2
 8001d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	8022      	strh	r2, [r4, #0]
 8001d36:	3402      	adds	r4, #2
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe facd 	bl	80002e0 <strlen>
 8001d46:	4603      	mov	r3, r0
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	f107 0108 	add.w	r1, r7, #8
 8001d4e:	230a      	movs	r3, #10
 8001d50:	4804      	ldr	r0, [pc, #16]	; (8001d64 <printRadioSettings+0x90c>)
 8001d52:	f00d ff2a 	bl	800fbaa <HAL_UART_Transmit>
}
 8001d56:	bf00      	nop
 8001d58:	3774      	adds	r7, #116	; 0x74
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	0801ab2c 	.word	0x0801ab2c
 8001d64:	240002a0 	.word	0x240002a0
 8001d68:	0801ab78 	.word	0x0801ab78
 8001d6c:	0801ab90 	.word	0x0801ab90
 8001d70:	0801aba8 	.word	0x0801aba8
 8001d74:	0801abc4 	.word	0x0801abc4
 8001d78:	0801a798 	.word	0x0801a798

08001d7c <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	dd03      	ble.n	8001d94 <WriteToBuff+0x18>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d92:	db01      	blt.n	8001d98 <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 8001d94:	2303      	movs	r3, #3
 8001d96:	e089      	b.n	8001eac <WriteToBuff+0x130>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 8001d98:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <WriteToBuff+0x138>)
 8001d9a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da2:	d238      	bcs.n	8001e16 <WriteToBuff+0x9a>
 8001da4:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <WriteToBuff+0x138>)
 8001da6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db2:	d330      	bcc.n	8001e16 <WriteToBuff+0x9a>
    DataBuffer.counter = Bufflength;
 8001db4:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <WriteToBuff+0x138>)
 8001db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dba:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <WriteToBuff+0x138>)
 8001dc0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001dc4:	4a3b      	ldr	r2, [pc, #236]	; (8001eb4 <WriteToBuff+0x138>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f017 fb5b 	bl	8019488 <memcpy>
    DataBuffer.counter += len;
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <WriteToBuff+0x138>)
 8001dd4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a35      	ldr	r2, [pc, #212]	; (8001eb4 <WriteToBuff+0x138>)
 8001dde:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 8001de2:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <WriteToBuff+0x13c>)
 8001de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de8:	4932      	ldr	r1, [pc, #200]	; (8001eb4 <WriteToBuff+0x138>)
 8001dea:	4834      	ldr	r0, [pc, #208]	; (8001ebc <WriteToBuff+0x140>)
 8001dec:	f016 fb9b 	bl	8018526 <f_write>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10d      	bne.n	8001e12 <WriteToBuff+0x96>

      memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear next buffer after writing
 8001df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4830      	ldr	r0, [pc, #192]	; (8001ec0 <WriteToBuff+0x144>)
 8001dfe:	f017 fb4e 	bl	801949e <memset>
    	f_sync(&myFILE);
 8001e02:	482e      	ldr	r0, [pc, #184]	; (8001ebc <WriteToBuff+0x140>)
 8001e04:	f016 fd04 	bl	8018810 <f_sync>
      printf("Buffer 1 has been written\n");
 8001e08:	482e      	ldr	r0, [pc, #184]	; (8001ec4 <WriteToBuff+0x148>)
 8001e0a:	f017 fc6d 	bl	80196e8 <puts>
      return 1; //buffer 1 has been written
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e04c      	b.n	8001eac <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001e12:	2304      	movs	r3, #4
 8001e14:	e04a      	b.n	8001eac <WriteToBuff+0x130>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 8001e16:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <WriteToBuff+0x138>)
 8001e18:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e24:	d32f      	bcc.n	8001e86 <WriteToBuff+0x10a>
    DataBuffer.counter = 0;
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <WriteToBuff+0x138>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <WriteToBuff+0x138>)
 8001e30:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001e34:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <WriteToBuff+0x138>)
 8001e36:	4413      	add	r3, r2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f017 fb23 	bl	8019488 <memcpy>
    DataBuffer.counter += len;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <WriteToBuff+0x138>)
 8001e44:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <WriteToBuff+0x138>)
 8001e4e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 8001e52:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <WriteToBuff+0x13c>)
 8001e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e58:	4919      	ldr	r1, [pc, #100]	; (8001ec0 <WriteToBuff+0x144>)
 8001e5a:	4818      	ldr	r0, [pc, #96]	; (8001ebc <WriteToBuff+0x140>)
 8001e5c:	f016 fb63 	bl	8018526 <f_write>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <WriteToBuff+0x106>
      memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear next buffer after writing
 8001e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <WriteToBuff+0x138>)
 8001e6e:	f017 fb16 	bl	801949e <memset>
    	f_sync(&myFILE);
 8001e72:	4812      	ldr	r0, [pc, #72]	; (8001ebc <WriteToBuff+0x140>)
 8001e74:	f016 fccc 	bl	8018810 <f_sync>
      printf("Buffer 2 has been written\n");
 8001e78:	4813      	ldr	r0, [pc, #76]	; (8001ec8 <WriteToBuff+0x14c>)
 8001e7a:	f017 fc35 	bl	80196e8 <puts>
      return 2; //buffer 2 has been written
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e014      	b.n	8001eac <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001e82:	2304      	movs	r3, #4
 8001e84:	e012      	b.n	8001eac <WriteToBuff+0x130>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <WriteToBuff+0x138>)
 8001e88:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001e8c:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <WriteToBuff+0x138>)
 8001e8e:	4413      	add	r3, r2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f017 faf7 	bl	8019488 <memcpy>
  DataBuffer.counter += len;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <WriteToBuff+0x138>)
 8001e9c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <WriteToBuff+0x138>)
 8001ea6:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  return 0; //moved data to buffer
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2400032c 	.word	0x2400032c
 8001eb8:	240010d0 	.word	0x240010d0
 8001ebc:	24000b98 	.word	0x24000b98
 8001ec0:	2400072c 	.word	0x2400072c
 8001ec4:	0801acdc 	.word	0x0801acdc
 8001ec8:	0801acf8 	.word	0x0801acf8

08001ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed0:	f5ad 5def 	sub.w	sp, sp, #7648	; 0x1de0
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed8:	f002 fafa 	bl	80044d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001edc:	f001 fa26 	bl	800332c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee0:	f001 fd86 	bl	80039f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ee4:	f001 fd64 	bl	80039b0 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001ee8:	f001 fc52 	bl	8003790 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001eec:	f011 f992 	bl	8013214 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001ef0:	f016 fd92 	bl	8018a18 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8001ef4:	f001 fb24 	bl	8003540 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001ef8:	f001 fb88 	bl	800360c <MX_FDCAN2_Init>
  MX_UART8_Init();
 8001efc:	f001 fcc0 	bl	8003880 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001f00:	f001 fd0a 	bl	8003918 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001f04:	f001 fc66 	bl	80037d4 <MX_SPI1_Init>
  MX_RTC_Init();
 8001f08:	f001 fbe4 	bl	80036d4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(1000);//NEEDED FOR USB MASS STORAGE TO WORK
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	489f      	ldr	r0, [pc, #636]	; (800218c <main+0x2c0>)
 8001f10:	f006 f8a3 	bl	800805a <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 8001f14:	4c9e      	ldr	r4, [pc, #632]	; (8002190 <main+0x2c4>)
 8001f16:	4668      	mov	r0, sp
 8001f18:	1d23      	adds	r3, r4, #4
 8001f1a:	2284      	movs	r2, #132	; 0x84
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f017 fab3 	bl	8019488 <memcpy>
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	2102      	movs	r1, #2
 8001f28:	489a      	ldr	r0, [pc, #616]	; (8002194 <main+0x2c8>)
 8001f2a:	f7fe ff49 	bl	8000dc0 <NRF24_begin>
    //nrf24_DebugUART_Init(huart3);



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 8001f2e:	f7ff f827 	bl	8000f80 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 8001f32:	4b99      	ldr	r3, [pc, #612]	; (8002198 <main+0x2cc>)
 8001f34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	f7ff f880 	bl	8001040 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff f909 	bl	8001158 <NRF24_setAutoAck>
    NRF24_setChannel(42);
 8001f46:	202a      	movs	r0, #42	; 0x2a
 8001f48:	f7ff f8b9 	bl	80010be <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001f4c:	2020      	movs	r0, #32
 8001f4e:	f7ff f8cb 	bl	80010e8 <NRF24_setPayloadSize>

    printRadioSettings();
 8001f52:	f7ff fa81 	bl	8001458 <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 8001f56:	4891      	ldr	r0, [pc, #580]	; (800219c <main+0x2d0>)
 8001f58:	f017 fbc6 	bl	80196e8 <puts>
  FDCAN_Config(&hfdcan1);
 8001f5c:	4890      	ldr	r0, [pc, #576]	; (80021a0 <main+0x2d4>)
 8001f5e:	f7fe fb97 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8001f62:	2246      	movs	r2, #70	; 0x46
 8001f64:	498f      	ldr	r1, [pc, #572]	; (80021a4 <main+0x2d8>)
 8001f66:	4890      	ldr	r0, [pc, #576]	; (80021a8 <main+0x2dc>)
 8001f68:	f00d feb6 	bl	800fcd8 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8001f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f70:	f002 fb40 	bl	80045f4 <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8001f74:	2364      	movs	r3, #100	; 0x64
 8001f76:	f641 5226 	movw	r2, #7462	; 0x1d26
 8001f7a:	443a      	add	r2, r7
 8001f7c:	8013      	strh	r3, [r2, #0]
  uint16_t navRate = 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f641 5224 	movw	r2, #7460	; 0x1d24
 8001f84:	443a      	add	r2, r7
 8001f86:	8013      	strh	r3, [r2, #0]
  uint16_t timeRef = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f641 5222 	movw	r2, #7458	; 0x1d22
 8001f8e:	443a      	add	r2, r7
 8001f90:	8013      	strh	r3, [r2, #0]
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8001f92:	f641 5322 	movw	r3, #7458	; 0x1d22
 8001f96:	443b      	add	r3, r7
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	f641 5224 	movw	r2, #7460	; 0x1d24
 8001f9e:	443a      	add	r2, r7
 8001fa0:	8812      	ldrh	r2, [r2, #0]
 8001fa2:	f641 5126 	movw	r1, #7462	; 0x1d26
 8001fa6:	4439      	add	r1, r7
 8001fa8:	8809      	ldrh	r1, [r1, #0]
 8001faa:	487f      	ldr	r0, [pc, #508]	; (80021a8 <main+0x2dc>)
 8001fac:	f7fe fd5a 	bl	8000a64 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	497e      	ldr	r1, [pc, #504]	; (80021ac <main+0x2e0>)
 8001fb4:	487c      	ldr	r0, [pc, #496]	; (80021a8 <main+0x2dc>)
 8001fb6:	f7fe fce5 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	497c      	ldr	r1, [pc, #496]	; (80021b0 <main+0x2e4>)
 8001fbe:	487a      	ldr	r0, [pc, #488]	; (80021a8 <main+0x2dc>)
 8001fc0:	f7fe fce0 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	497b      	ldr	r1, [pc, #492]	; (80021b4 <main+0x2e8>)
 8001fc8:	4877      	ldr	r0, [pc, #476]	; (80021a8 <main+0x2dc>)
 8001fca:	f7fe fcdb 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4979      	ldr	r1, [pc, #484]	; (80021b8 <main+0x2ec>)
 8001fd2:	4875      	ldr	r0, [pc, #468]	; (80021a8 <main+0x2dc>)
 8001fd4:	f7fe fcd6 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8001fd8:	2200      	movs	r2, #0
 8001fda:	4978      	ldr	r1, [pc, #480]	; (80021bc <main+0x2f0>)
 8001fdc:	4872      	ldr	r0, [pc, #456]	; (80021a8 <main+0x2dc>)
 8001fde:	f7fe fcd1 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	4976      	ldr	r1, [pc, #472]	; (80021c0 <main+0x2f4>)
 8001fe6:	4870      	ldr	r0, [pc, #448]	; (80021a8 <main+0x2dc>)
 8001fe8:	f7fe fccc 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	4975      	ldr	r1, [pc, #468]	; (80021c4 <main+0x2f8>)
 8001ff0:	486d      	ldr	r0, [pc, #436]	; (80021a8 <main+0x2dc>)
 8001ff2:	f7fe fcc7 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4973      	ldr	r1, [pc, #460]	; (80021c8 <main+0x2fc>)
 8001ffa:	486b      	ldr	r0, [pc, #428]	; (80021a8 <main+0x2dc>)
 8001ffc:	f7fe fcc2 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8002000:	2200      	movs	r2, #0
 8002002:	4972      	ldr	r1, [pc, #456]	; (80021cc <main+0x300>)
 8002004:	4868      	ldr	r0, [pc, #416]	; (80021a8 <main+0x2dc>)
 8002006:	f7fe fcbd 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 800200a:	2200      	movs	r2, #0
 800200c:	4970      	ldr	r1, [pc, #448]	; (80021d0 <main+0x304>)
 800200e:	4866      	ldr	r0, [pc, #408]	; (80021a8 <main+0x2dc>)
 8002010:	f7fe fcb8 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8002014:	2200      	movs	r2, #0
 8002016:	496f      	ldr	r1, [pc, #444]	; (80021d4 <main+0x308>)
 8002018:	4863      	ldr	r0, [pc, #396]	; (80021a8 <main+0x2dc>)
 800201a:	f7fe fcb3 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 800201e:	2200      	movs	r2, #0
 8002020:	496d      	ldr	r1, [pc, #436]	; (80021d8 <main+0x30c>)
 8002022:	4861      	ldr	r0, [pc, #388]	; (80021a8 <main+0x2dc>)
 8002024:	f7fe fcae 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8002028:	2200      	movs	r2, #0
 800202a:	496c      	ldr	r1, [pc, #432]	; (80021dc <main+0x310>)
 800202c:	485e      	ldr	r0, [pc, #376]	; (80021a8 <main+0x2dc>)
 800202e:	f7fe fca9 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8002032:	2200      	movs	r2, #0
 8002034:	496a      	ldr	r1, [pc, #424]	; (80021e0 <main+0x314>)
 8002036:	485c      	ldr	r0, [pc, #368]	; (80021a8 <main+0x2dc>)
 8002038:	f7fe fca4 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 800203c:	2200      	movs	r2, #0
 800203e:	4969      	ldr	r1, [pc, #420]	; (80021e4 <main+0x318>)
 8002040:	4859      	ldr	r0, [pc, #356]	; (80021a8 <main+0x2dc>)
 8002042:	f7fe fc9f 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8002046:	2201      	movs	r2, #1
 8002048:	4967      	ldr	r1, [pc, #412]	; (80021e8 <main+0x31c>)
 800204a:	4857      	ldr	r0, [pc, #348]	; (80021a8 <main+0x2dc>)
 800204c:	f7fe fc9a 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8002050:	2200      	movs	r2, #0
 8002052:	4966      	ldr	r1, [pc, #408]	; (80021ec <main+0x320>)
 8002054:	4854      	ldr	r0, [pc, #336]	; (80021a8 <main+0x2dc>)
 8002056:	f7fe fc95 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 800205a:	2200      	movs	r2, #0
 800205c:	4964      	ldr	r1, [pc, #400]	; (80021f0 <main+0x324>)
 800205e:	4852      	ldr	r0, [pc, #328]	; (80021a8 <main+0x2dc>)
 8002060:	f7fe fc90 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8002064:	2200      	movs	r2, #0
 8002066:	4963      	ldr	r1, [pc, #396]	; (80021f4 <main+0x328>)
 8002068:	484f      	ldr	r0, [pc, #316]	; (80021a8 <main+0x2dc>)
 800206a:	f7fe fc8b 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 800206e:	2200      	movs	r2, #0
 8002070:	4961      	ldr	r1, [pc, #388]	; (80021f8 <main+0x32c>)
 8002072:	484d      	ldr	r0, [pc, #308]	; (80021a8 <main+0x2dc>)
 8002074:	f7fe fc86 	bl	8000984 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8002078:	2201      	movs	r2, #1
 800207a:	4960      	ldr	r1, [pc, #384]	; (80021fc <main+0x330>)
 800207c:	4860      	ldr	r0, [pc, #384]	; (8002200 <main+0x334>)
 800207e:	f015 ff0f 	bl	8017ea0 <f_mount>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	f040 814d 	bne.w	8002324 <main+0x458>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char Filename[20] = "test";
 800208a:	4a5e      	ldr	r2, [pc, #376]	; (8002204 <main+0x338>)
 800208c:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002090:	443b      	add	r3, r7
 8002092:	441a      	add	r2, r3
 8002094:	495c      	ldr	r1, [pc, #368]	; (8002208 <main+0x33c>)
 8002096:	4613      	mov	r3, r2
 8002098:	c903      	ldmia	r1, {r0, r1}
 800209a:	6018      	str	r0, [r3, #0]
 800209c:	3304      	adds	r3, #4
 800209e:	7019      	strb	r1, [r3, #0]
 80020a0:	1d53      	adds	r3, r2, #5
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	f8c3 200b 	str.w	r2, [r3, #11]
      char FilePath[150];
      char ConfigPath[] ="Config.csv\0";
 80020ae:	4b57      	ldr	r3, [pc, #348]	; (800220c <main+0x340>)
 80020b0:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020b4:	443a      	add	r2, r7
 80020b6:	4413      	add	r3, r2
 80020b8:	4a55      	ldr	r2, [pc, #340]	; (8002210 <main+0x344>)
 80020ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80020bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 80020c0:	4b52      	ldr	r3, [pc, #328]	; (800220c <main+0x340>)
 80020c2:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020c6:	443a      	add	r2, r7
 80020c8:	4413      	add	r3, r2
 80020ca:	2201      	movs	r2, #1
 80020cc:	4619      	mov	r1, r3
 80020ce:	4851      	ldr	r0, [pc, #324]	; (8002214 <main+0x348>)
 80020d0:	f015 ff2c 	bl	8017f2c <f_open>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	f040 80a6 	bne.w	8002228 <main+0x35c>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 80020dc:	4b4b      	ldr	r3, [pc, #300]	; (800220c <main+0x340>)
 80020de:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020e2:	443a      	add	r2, r7
 80020e4:	4413      	add	r3, r2
 80020e6:	220a      	movs	r2, #10
 80020e8:	4619      	mov	r1, r3
 80020ea:	484a      	ldr	r0, [pc, #296]	; (8002214 <main+0x348>)
 80020ec:	f015 ff1e 	bl	8017f2c <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 80020f0:	4b49      	ldr	r3, [pc, #292]	; (8002218 <main+0x34c>)
 80020f2:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020f6:	443a      	add	r2, r7
 80020f8:	4413      	add	r3, r2
 80020fa:	4a48      	ldr	r2, [pc, #288]	; (800221c <main+0x350>)
 80020fc:	461c      	mov	r4, r3
 80020fe:	4615      	mov	r5, r2
 8002100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002108:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800210c:	c403      	stmia	r4!, {r0, r1}
 800210e:	8022      	strh	r2, [r4, #0]
 8002110:	3402      	adds	r4, #2
 8002112:	0c13      	lsrs	r3, r2, #16
 8002114:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8002116:	4b40      	ldr	r3, [pc, #256]	; (8002218 <main+0x34c>)
 8002118:	f641 5270 	movw	r2, #7536	; 0x1d70
 800211c:	443a      	add	r2, r7
 800211e:	4413      	add	r3, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f8dd 	bl	80002e0 <strlen>
 8002126:	4602      	mov	r2, r0
 8002128:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <main+0x34c>)
 800212a:	f641 5170 	movw	r1, #7536	; 0x1d70
 800212e:	4439      	add	r1, r7
 8002130:	440b      	add	r3, r1
 8002132:	4413      	add	r3, r2
 8002134:	4a3a      	ldr	r2, [pc, #232]	; (8002220 <main+0x354>)
 8002136:	4614      	mov	r4, r2
 8002138:	469c      	mov	ip, r3
 800213a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800213e:	4665      	mov	r5, ip
 8002140:	4626      	mov	r6, r4
 8002142:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002144:	6028      	str	r0, [r5, #0]
 8002146:	6069      	str	r1, [r5, #4]
 8002148:	60aa      	str	r2, [r5, #8]
 800214a:	60eb      	str	r3, [r5, #12]
 800214c:	3410      	adds	r4, #16
 800214e:	f10c 0c10 	add.w	ip, ip, #16
 8002152:	4574      	cmp	r4, lr
 8002154:	d1f3      	bne.n	800213e <main+0x272>
 8002156:	4662      	mov	r2, ip
 8002158:	4623      	mov	r3, r4
 800215a:	cb03      	ldmia	r3!, {r0, r1}
 800215c:	6010      	str	r0, [r2, #0]
 800215e:	6051      	str	r1, [r2, #4]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8002164:	4b2c      	ldr	r3, [pc, #176]	; (8002218 <main+0x34c>)
 8002166:	f641 5270 	movw	r2, #7536	; 0x1d70
 800216a:	443a      	add	r2, r7
 800216c:	4413      	add	r3, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f8b6 	bl	80002e0 <strlen>
 8002174:	4602      	mov	r2, r0
 8002176:	4928      	ldr	r1, [pc, #160]	; (8002218 <main+0x34c>)
 8002178:	f641 5370 	movw	r3, #7536	; 0x1d70
 800217c:	443b      	add	r3, r7
 800217e:	4419      	add	r1, r3
 8002180:	4b28      	ldr	r3, [pc, #160]	; (8002224 <main+0x358>)
 8002182:	4824      	ldr	r0, [pc, #144]	; (8002214 <main+0x348>)
 8002184:	f016 f9cf 	bl	8018526 <f_write>
 8002188:	e060      	b.n	800224c <main+0x380>
 800218a:	bf00      	nop
 800218c:	58020400 	.word	0x58020400
 8002190:	24001640 	.word	0x24001640
 8002194:	58020000 	.word	0x58020000
 8002198:	24000000 	.word	0x24000000
 800219c:	0801ad14 	.word	0x0801ad14
 80021a0:	24001514 	.word	0x24001514
 80021a4:	24001304 	.word	0x24001304
 80021a8:	240013c4 	.word	0x240013c4
 80021ac:	0801ad20 	.word	0x0801ad20
 80021b0:	0801ad24 	.word	0x0801ad24
 80021b4:	0801ad28 	.word	0x0801ad28
 80021b8:	0801ad2c 	.word	0x0801ad2c
 80021bc:	0801ad30 	.word	0x0801ad30
 80021c0:	0801ad34 	.word	0x0801ad34
 80021c4:	0801ad38 	.word	0x0801ad38
 80021c8:	0801ad3c 	.word	0x0801ad3c
 80021cc:	0801ad40 	.word	0x0801ad40
 80021d0:	0801ad44 	.word	0x0801ad44
 80021d4:	0801ad48 	.word	0x0801ad48
 80021d8:	0801ad4c 	.word	0x0801ad4c
 80021dc:	0801ad50 	.word	0x0801ad50
 80021e0:	0801ad54 	.word	0x0801ad54
 80021e4:	0801ad58 	.word	0x0801ad58
 80021e8:	0801ad5c 	.word	0x0801ad5c
 80021ec:	0801ad60 	.word	0x0801ad60
 80021f0:	0801ad64 	.word	0x0801ad64
 80021f4:	0801ad68 	.word	0x0801ad68
 80021f8:	0801ad6c 	.word	0x0801ad6c
 80021fc:	24001770 	.word	0x24001770
 8002200:	24000dd0 	.word	0x24000dd0
 8002204:	ffffe744 	.word	0xffffe744
 8002208:	0801ae34 	.word	0x0801ae34
 800220c:	ffffe738 	.word	0xffffe738
 8002210:	0801ae48 	.word	0x0801ae48
 8002214:	240010d4 	.word	0x240010d4
 8002218:	ffffe328 	.word	0xffffe328
 800221c:	0801ad70 	.word	0x0801ad70
 8002220:	0801ad9c 	.word	0x0801ad9c
 8002224:	24000dcc 	.word	0x24000dcc
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8002228:	4bb7      	ldr	r3, [pc, #732]	; (8002508 <main+0x63c>)
 800222a:	f641 5270 	movw	r2, #7536	; 0x1d70
 800222e:	443a      	add	r2, r7
 8002230:	4413      	add	r3, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f854 	bl	80002e0 <strlen>
 8002238:	4602      	mov	r2, r0
 800223a:	49b3      	ldr	r1, [pc, #716]	; (8002508 <main+0x63c>)
 800223c:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002240:	443b      	add	r3, r7
 8002242:	4419      	add	r1, r3
 8002244:	4bb1      	ldr	r3, [pc, #708]	; (800250c <main+0x640>)
 8002246:	48b2      	ldr	r0, [pc, #712]	; (8002510 <main+0x644>)
 8002248:	f016 f82e 	bl	80182a8 <f_read>
      }
      f_close(&Config);
 800224c:	48b0      	ldr	r0, [pc, #704]	; (8002510 <main+0x644>)
 800224e:	f016 fb5d 	bl	801890c <f_close>
      //MAKE NEW FILE INCREMENTED BY 1
      
      strcpy(FilePath,Filename);
 8002252:	4ab0      	ldr	r2, [pc, #704]	; (8002514 <main+0x648>)
 8002254:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002258:	443b      	add	r3, r7
 800225a:	441a      	add	r2, r3
 800225c:	4bae      	ldr	r3, [pc, #696]	; (8002518 <main+0x64c>)
 800225e:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002262:	4439      	add	r1, r7
 8002264:	440b      	add	r3, r1
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f017 faa9 	bl	80197c0 <strcpy>
      int FilePathLen = strlen(Filename);
 800226e:	4ba9      	ldr	r3, [pc, #676]	; (8002514 <main+0x648>)
 8002270:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002274:	443a      	add	r2, r7
 8002276:	4413      	add	r3, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f831 	bl	80002e0 <strlen>
 800227e:	4603      	mov	r3, r0
 8002280:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002284:	443a      	add	r2, r7
 8002286:	6013      	str	r3, [r2, #0]
      sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 8002288:	f641 531c 	movw	r3, #7452	; 0x1d1c
 800228c:	443b      	add	r3, r7
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4ba1      	ldr	r3, [pc, #644]	; (8002518 <main+0x64c>)
 8002292:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002296:	4439      	add	r1, r7
 8002298:	440b      	add	r3, r1
 800229a:	1898      	adds	r0, r3, r2
 800229c:	4b9f      	ldr	r3, [pc, #636]	; (800251c <main+0x650>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	499f      	ldr	r1, [pc, #636]	; (8002520 <main+0x654>)
 80022a4:	f017 fa6c 	bl	8019780 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 80022a8:	e025      	b.n	80022f6 <main+0x42a>
    	  f_close(&myFILE);
 80022aa:	489e      	ldr	r0, [pc, #632]	; (8002524 <main+0x658>)
 80022ac:	f016 fb2e 	bl	801890c <f_close>
        fileNum++;
 80022b0:	4b9a      	ldr	r3, [pc, #616]	; (800251c <main+0x650>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	4a99      	ldr	r2, [pc, #612]	; (800251c <main+0x650>)
 80022b8:	6013      	str	r3, [r2, #0]
        strcpy(FilePath,Filename);
 80022ba:	4a96      	ldr	r2, [pc, #600]	; (8002514 <main+0x648>)
 80022bc:	f641 5370 	movw	r3, #7536	; 0x1d70
 80022c0:	443b      	add	r3, r7
 80022c2:	441a      	add	r2, r3
 80022c4:	4b94      	ldr	r3, [pc, #592]	; (8002518 <main+0x64c>)
 80022c6:	f641 5170 	movw	r1, #7536	; 0x1d70
 80022ca:	4439      	add	r1, r7
 80022cc:	440b      	add	r3, r1
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f017 fa75 	bl	80197c0 <strcpy>
        sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 80022d6:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80022da:	443b      	add	r3, r7
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b8e      	ldr	r3, [pc, #568]	; (8002518 <main+0x64c>)
 80022e0:	f641 5170 	movw	r1, #7536	; 0x1d70
 80022e4:	4439      	add	r1, r7
 80022e6:	440b      	add	r3, r1
 80022e8:	1898      	adds	r0, r3, r2
 80022ea:	4b8c      	ldr	r3, [pc, #560]	; (800251c <main+0x650>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	498b      	ldr	r1, [pc, #556]	; (8002520 <main+0x654>)
 80022f2:	f017 fa45 	bl	8019780 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 80022f6:	4b88      	ldr	r3, [pc, #544]	; (8002518 <main+0x64c>)
 80022f8:	f641 5270 	movw	r2, #7536	; 0x1d70
 80022fc:	443a      	add	r2, r7
 80022fe:	4413      	add	r3, r2
 8002300:	2201      	movs	r2, #1
 8002302:	4619      	mov	r1, r3
 8002304:	4887      	ldr	r0, [pc, #540]	; (8002524 <main+0x658>)
 8002306:	f015 fe11 	bl	8017f2c <f_open>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0cc      	beq.n	80022aa <main+0x3de>
      }
      f_open(&myFILE, FilePath, FA_WRITE | FA_CREATE_ALWAYS);
 8002310:	4b81      	ldr	r3, [pc, #516]	; (8002518 <main+0x64c>)
 8002312:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002316:	443a      	add	r2, r7
 8002318:	4413      	add	r3, r2
 800231a:	220a      	movs	r2, #10
 800231c:	4619      	mov	r1, r3
 800231e:	4881      	ldr	r0, [pc, #516]	; (8002524 <main+0x658>)
 8002320:	f015 fe04 	bl	8017f2c <f_open>
  extern int GPS_flag;
  extern int FDCAN_Flag;
  extern int CAN_Flag;


  CAN_FD_FRAME FDBuffer[50] = {0};
 8002324:	4b80      	ldr	r3, [pc, #512]	; (8002528 <main+0x65c>)
 8002326:	f641 5270 	movw	r2, #7536	; 0x1d70
 800232a:	443a      	add	r2, r7
 800232c:	4413      	add	r3, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002334:	461a      	mov	r2, r3
 8002336:	2100      	movs	r1, #0
 8002338:	f017 f8b1 	bl	801949e <memset>
  CAN_FRAME Buffer[50] = {0};
 800233c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8002340:	4618      	mov	r0, r3
 8002342:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002346:	461a      	mov	r2, r3
 8002348:	2100      	movs	r1, #0
 800234a:	f017 f8a8 	bl	801949e <memset>
  uint32_t Tele_IDs[50] = {0};
 800234e:	4b77      	ldr	r3, [pc, #476]	; (800252c <main+0x660>)
 8002350:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002354:	443a      	add	r2, r7
 8002356:	4413      	add	r3, r2
 8002358:	4618      	mov	r0, r3
 800235a:	23c8      	movs	r3, #200	; 0xc8
 800235c:	461a      	mov	r2, r3
 800235e:	2100      	movs	r1, #0
 8002360:	f017 f89d 	bl	801949e <memset>
  Tele_IDs[0] = 0x321;
 8002364:	4b71      	ldr	r3, [pc, #452]	; (800252c <main+0x660>)
 8002366:	f641 5270 	movw	r2, #7536	; 0x1d70
 800236a:	443a      	add	r2, r7
 800236c:	4413      	add	r3, r2
 800236e:	f240 3221 	movw	r2, #801	; 0x321
 8002372:	601a      	str	r2, [r3, #0]

  sTime.SecondFraction = 999;
 8002374:	4b6e      	ldr	r3, [pc, #440]	; (8002530 <main+0x664>)
 8002376:	f240 32e7 	movw	r2, #999	; 0x3e7
 800237a:	609a      	str	r2, [r3, #8]
  uint32_t LocalTime = HAL_GetTick();
 800237c:	f002 f92e 	bl	80045dc <HAL_GetTick>
 8002380:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002384:	443b      	add	r3, r7
 8002386:	6018      	str	r0, [r3, #0]
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002388:	2200      	movs	r2, #0
 800238a:	4969      	ldr	r1, [pc, #420]	; (8002530 <main+0x664>)
 800238c:	4869      	ldr	r0, [pc, #420]	; (8002534 <main+0x668>)
 800238e:	f00a f987 	bl	800c6a0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002392:	2200      	movs	r2, #0
 8002394:	4968      	ldr	r1, [pc, #416]	; (8002538 <main+0x66c>)
 8002396:	4867      	ldr	r0, [pc, #412]	; (8002534 <main+0x668>)
 8002398:	f00a fa66 	bl	800c868 <HAL_RTC_GetDate>

  sTime.SubSeconds -= LocalTime % 1000;
 800239c:	4b64      	ldr	r3, [pc, #400]	; (8002530 <main+0x664>)
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	f641 5318 	movw	r3, #7448	; 0x1d18
 80023a4:	443b      	add	r3, r7
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b64      	ldr	r3, [pc, #400]	; (800253c <main+0x670>)
 80023aa:	fba3 0302 	umull	r0, r3, r3, r2
 80023ae:	099b      	lsrs	r3, r3, #6
 80023b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023b4:	fb00 f303 	mul.w	r3, r0, r3
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	1acb      	subs	r3, r1, r3
 80023bc:	4a5c      	ldr	r2, [pc, #368]	; (8002530 <main+0x664>)
 80023be:	6053      	str	r3, [r2, #4]
  LocalTime = LocalTime/1000;
 80023c0:	f641 5318 	movw	r3, #7448	; 0x1d18
 80023c4:	443b      	add	r3, r7
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a5c      	ldr	r2, [pc, #368]	; (800253c <main+0x670>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	099b      	lsrs	r3, r3, #6
 80023d0:	f641 5218 	movw	r2, #7448	; 0x1d18
 80023d4:	443a      	add	r2, r7
 80023d6:	6013      	str	r3, [r2, #0]
  sTime.Seconds -= LocalTime % 60;
 80023d8:	4b55      	ldr	r3, [pc, #340]	; (8002530 <main+0x664>)
 80023da:	7898      	ldrb	r0, [r3, #2]
 80023dc:	f641 5318 	movw	r3, #7448	; 0x1d18
 80023e0:	443b      	add	r3, r7
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	4b56      	ldr	r3, [pc, #344]	; (8002540 <main+0x674>)
 80023e6:	fba3 2301 	umull	r2, r3, r3, r1
 80023ea:	095a      	lsrs	r2, r3, #5
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	1aca      	subs	r2, r1, r3
 80023f6:	b2d3      	uxtb	r3, r2
 80023f8:	1ac3      	subs	r3, r0, r3
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b4c      	ldr	r3, [pc, #304]	; (8002530 <main+0x664>)
 80023fe:	709a      	strb	r2, [r3, #2]
  LocalTime = LocalTime/60;
 8002400:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002404:	443b      	add	r3, r7
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a4d      	ldr	r2, [pc, #308]	; (8002540 <main+0x674>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002414:	443a      	add	r2, r7
 8002416:	6013      	str	r3, [r2, #0]
  sTime.Minutes -= LocalTime % 60;
 8002418:	4b45      	ldr	r3, [pc, #276]	; (8002530 <main+0x664>)
 800241a:	7858      	ldrb	r0, [r3, #1]
 800241c:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002420:	443b      	add	r3, r7
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	4b46      	ldr	r3, [pc, #280]	; (8002540 <main+0x674>)
 8002426:	fba3 2301 	umull	r2, r3, r3, r1
 800242a:	095a      	lsrs	r2, r3, #5
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	1aca      	subs	r2, r1, r3
 8002436:	b2d3      	uxtb	r3, r2
 8002438:	1ac3      	subs	r3, r0, r3
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <main+0x664>)
 800243e:	705a      	strb	r2, [r3, #1]
  LocalTime = LocalTime/60;
 8002440:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002444:	443b      	add	r3, r7
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a3d      	ldr	r2, [pc, #244]	; (8002540 <main+0x674>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002454:	443a      	add	r2, r7
 8002456:	6013      	str	r3, [r2, #0]
  sTime.Hours -= LocalTime % 60;
 8002458:	4b35      	ldr	r3, [pc, #212]	; (8002530 <main+0x664>)
 800245a:	7818      	ldrb	r0, [r3, #0]
 800245c:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002460:	443b      	add	r3, r7
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	4b36      	ldr	r3, [pc, #216]	; (8002540 <main+0x674>)
 8002466:	fba3 2301 	umull	r2, r3, r3, r1
 800246a:	095a      	lsrs	r2, r3, #5
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	1aca      	subs	r2, r1, r3
 8002476:	b2d3      	uxtb	r3, r2
 8002478:	1ac3      	subs	r3, r0, r3
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <main+0x664>)
 800247e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char CanWrite[400];
  int CW = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	f641 526c 	movw	r2, #7532	; 0x1d6c
 8002486:	443a      	add	r2, r7
 8002488:	6013      	str	r3, [r2, #0]
  char CanFDWrite[400];
  int CFDW = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002490:	443a      	add	r2, r7
 8002492:	6013      	str	r3, [r2, #0]
  int AllowedTele = 1;
 8002494:	2301      	movs	r3, #1
 8002496:	f641 5264 	movw	r2, #7524	; 0x1d64
 800249a:	443a      	add	r2, r7
 800249c:	6013      	str	r3, [r2, #0]
  int BuffIndex = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 80024a4:	6013      	str	r3, [r2, #0]
  int Txcnt = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80024ac:	443a      	add	r2, r7
 80024ae:	6013      	str	r3, [r2, #0]
  int TxDataSpace = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f641 5214 	movw	r2, #7444	; 0x1d14
 80024b6:	443a      	add	r2, r7
 80024b8:	6013      	str	r3, [r2, #0]
  uint32_t LoopTime = 10; //time a loop should take (this is aguess should test avg time)
 80024ba:	230a      	movs	r3, #10
 80024bc:	f641 5210 	movw	r2, #7440	; 0x1d10
 80024c0:	443a      	add	r2, r7
 80024c2:	6013      	str	r3, [r2, #0]
  uint32_t StartTime = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f641 520c 	movw	r2, #7436	; 0x1d0c
 80024ca:	443a      	add	r2, r7
 80024cc:	6013      	str	r3, [r2, #0]
  uint32_t EndTime = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f641 5208 	movw	r2, #7432	; 0x1d08
 80024d4:	443a      	add	r2, r7
 80024d6:	6013      	str	r3, [r2, #0]
  uint32_t radiodelay = 1000;
 80024d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024dc:	f641 5204 	movw	r2, #7428	; 0x1d04
 80024e0:	443a      	add	r2, r7
 80024e2:	6013      	str	r3, [r2, #0]
  uint32_t r_start = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f641 5258 	movw	r2, #7512	; 0x1d58
 80024ea:	443a      	add	r2, r7
 80024ec:	6013      	str	r3, [r2, #0]
  uint32_t r_end = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80024f4:	6013      	str	r3, [r2, #0]
  r_start = HAL_GetTick();
 80024f6:	f002 f871 	bl	80045dc <HAL_GetTick>
 80024fa:	f641 5358 	movw	r3, #7512	; 0x1d58
 80024fe:	443b      	add	r3, r7
 8002500:	6018      	str	r0, [r3, #0]

  while (end_flag){
 8002502:	f000 bef7 	b.w	80032f4 <main+0x1428>
 8002506:	bf00      	nop
 8002508:	ffffe328 	.word	0xffffe328
 800250c:	24000dc8 	.word	0x24000dc8
 8002510:	240010d4 	.word	0x240010d4
 8002514:	ffffe744 	.word	0xffffe744
 8002518:	ffffe290 	.word	0xffffe290
 800251c:	2400000c 	.word	0x2400000c
 8002520:	0801add8 	.word	0x0801add8
 8002524:	24000b98 	.word	0x24000b98
 8002528:	ffffeff0 	.word	0xffffeff0
 800252c:	ffffea78 	.word	0xffffea78
 8002530:	24000b30 	.word	0x24000b30
 8002534:	240014f0 	.word	0x240014f0
 8002538:	24000b44 	.word	0x24000b44
 800253c:	10624dd3 	.word	0x10624dd3
 8002540:	88888889 	.word	0x88888889
    StartTime = HAL_GetTick();
 8002544:	f002 f84a 	bl	80045dc <HAL_GetTick>
 8002548:	f641 530c 	movw	r3, #7436	; 0x1d0c
 800254c:	443b      	add	r3, r7
 800254e:	6018      	str	r0, [r3, #0]
	  if(GPS_flag){
 8002550:	4b96      	ldr	r3, [pc, #600]	; (80027ac <main+0x8e0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <main+0x69a>
		  WriteToBuff(rxBuf, sizeof(rxBuf));
 8002558:	2146      	movs	r1, #70	; 0x46
 800255a:	4895      	ldr	r0, [pc, #596]	; (80027b0 <main+0x8e4>)
 800255c:	f7ff fc0e 	bl	8001d7c <WriteToBuff>
		  GPS_flag=0;
 8002560:	4b92      	ldr	r3, [pc, #584]	; (80027ac <main+0x8e0>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
	  }
	  
    r_end = HAL_GetTick();
 8002566:	f002 f839 	bl	80045dc <HAL_GetTick>
 800256a:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800256e:	6018      	str	r0, [r3, #0]
    if(r_start - r_end > radiodelay){
 8002570:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002574:	443b      	add	r3, r7
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f641 5204 	movw	r2, #7428	; 0x1d04
 8002584:	443a      	add	r2, r7
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	f080 8299 	bcs.w	8002ac0 <main+0xbf4>
      r_start = HAL_GetTick();
 800258e:	f002 f825 	bl	80045dc <HAL_GetTick>
 8002592:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002596:	443b      	add	r3, r7
 8002598:	6018      	str	r0, [r3, #0]
      for(int i = 0; i < AllowedTele; i++){
 800259a:	2300      	movs	r3, #0
 800259c:	f641 5254 	movw	r2, #7508	; 0x1d54
 80025a0:	443a      	add	r2, r7
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	e281      	b.n	8002aaa <main+0xbde>
        //make packet (Time ID data)
        Txcnt = sprintf(myTxData,"%u %x ",FDBuffer[BuffIndex].time, FDBuffer[BuffIndex].id);
 80025a6:	4a83      	ldr	r2, [pc, #524]	; (80027b4 <main+0x8e8>)
 80025a8:	f641 5370 	movw	r3, #7536	; 0x1d70
 80025ac:	443b      	add	r3, r7
 80025ae:	441a      	add	r2, r3
 80025b0:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	460b      	mov	r3, r1
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	4413      	add	r3, r2
 80025c0:	330c      	adds	r3, #12
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	4a7b      	ldr	r2, [pc, #492]	; (80027b4 <main+0x8e8>)
 80025c6:	f641 5370 	movw	r3, #7536	; 0x1d70
 80025ca:	443b      	add	r3, r7
 80025cc:	441a      	add	r2, r3
 80025ce:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80025d2:	6819      	ldr	r1, [r3, #0]
 80025d4:	460b      	mov	r3, r1
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	4413      	add	r3, r2
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4602      	mov	r2, r0
 80025e2:	4975      	ldr	r1, [pc, #468]	; (80027b8 <main+0x8ec>)
 80025e4:	4875      	ldr	r0, [pc, #468]	; (80027bc <main+0x8f0>)
 80025e6:	f017 f8cb 	bl	8019780 <siprintf>
 80025ea:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80025ee:	443b      	add	r3, r7
 80025f0:	6018      	str	r0, [r3, #0]
        TxDataSpace = 32 - Txcnt;
 80025f2:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80025f6:	443b      	add	r3, r7
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f1c3 0320 	rsb	r3, r3, #32
 80025fe:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002602:	443a      	add	r2, r7
 8002604:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].length > TxDataSpace){
 8002606:	4a6b      	ldr	r2, [pc, #428]	; (80027b4 <main+0x8e8>)
 8002608:	f641 5370 	movw	r3, #7536	; 0x1d70
 800260c:	443b      	add	r3, r7
 800260e:	441a      	add	r2, r3
 8002610:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002614:	6819      	ldr	r1, [r3, #0]
 8002616:	460b      	mov	r3, r1
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	4413      	add	r3, r2
 8002620:	3308      	adds	r3, #8
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002628:	443b      	add	r3, r7
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	f240 81ad 	bls.w	800298c <main+0xac0>
          for(int i = 0; i < TxDataSpace; i++){
 8002632:	2300      	movs	r3, #0
 8002634:	f641 5250 	movw	r2, #7504	; 0x1d50
 8002638:	443a      	add	r2, r7
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	e030      	b.n	80026a0 <main+0x7d4>
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 800263e:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002642:	443b      	add	r3, r7
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a5d      	ldr	r2, [pc, #372]	; (80027bc <main+0x8f0>)
 8002648:	1898      	adds	r0, r3, r2
 800264a:	4a5a      	ldr	r2, [pc, #360]	; (80027b4 <main+0x8e8>)
 800264c:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002650:	443b      	add	r3, r7
 8002652:	441a      	add	r2, r3
 8002654:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002658:	6819      	ldr	r1, [r3, #0]
 800265a:	460b      	mov	r3, r1
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	441a      	add	r2, r3
 8002664:	f641 5350 	movw	r3, #7504	; 0x1d50
 8002668:	443b      	add	r3, r7
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4413      	add	r3, r2
 800266e:	3310      	adds	r3, #16
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	4952      	ldr	r1, [pc, #328]	; (80027c0 <main+0x8f4>)
 8002676:	f017 f883 	bl	8019780 <siprintf>
 800267a:	4602      	mov	r2, r0
 800267c:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002680:	443b      	add	r3, r7
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4413      	add	r3, r2
 8002686:	f641 525c 	movw	r2, #7516	; 0x1d5c
 800268a:	443a      	add	r2, r7
 800268c:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < TxDataSpace; i++){
 800268e:	f641 5350 	movw	r3, #7504	; 0x1d50
 8002692:	443b      	add	r3, r7
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	f641 5250 	movw	r2, #7504	; 0x1d50
 800269c:	443a      	add	r2, r7
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	f641 5350 	movw	r3, #7504	; 0x1d50
 80026a4:	443b      	add	r3, r7
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	f641 5314 	movw	r3, #7444	; 0x1d14
 80026ac:	443b      	add	r3, r7
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	dbc4      	blt.n	800263e <main+0x772>
          }
          NRF24_write(myTxData, 32);
 80026b4:	2120      	movs	r1, #32
 80026b6:	4841      	ldr	r0, [pc, #260]	; (80027bc <main+0x8f0>)
 80026b8:	f7fe fc6e 	bl	8000f98 <NRF24_write>
          Txcnt = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80026c2:	443a      	add	r2, r7
 80026c4:	6013      	str	r3, [r2, #0]
          if(FDBuffer[BuffIndex].length - TxDataSpace > 32){
 80026c6:	4a3b      	ldr	r2, [pc, #236]	; (80027b4 <main+0x8e8>)
 80026c8:	f641 5370 	movw	r3, #7536	; 0x1d70
 80026cc:	443b      	add	r3, r7
 80026ce:	441a      	add	r2, r3
 80026d0:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	460b      	mov	r3, r1
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	4413      	add	r3, r2
 80026e0:	3308      	adds	r3, #8
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	f641 5314 	movw	r3, #7444	; 0x1d14
 80026e8:	443b      	add	r3, r7
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	f240 80cb 	bls.w	800288a <main+0x9be>
            for(int i = 0; i < 32; i++){
 80026f4:	2300      	movs	r3, #0
 80026f6:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80026fa:	443a      	add	r2, r7
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e036      	b.n	800276e <main+0x8a2>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 8002700:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002704:	443b      	add	r3, r7
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2c      	ldr	r2, [pc, #176]	; (80027bc <main+0x8f0>)
 800270a:	189c      	adds	r4, r3, r2
 800270c:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002710:	443b      	add	r3, r7
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002718:	443b      	add	r3, r7
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	18d0      	adds	r0, r2, r3
 800271e:	4a25      	ldr	r2, [pc, #148]	; (80027b4 <main+0x8e8>)
 8002720:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002724:	443b      	add	r3, r7
 8002726:	441a      	add	r2, r3
 8002728:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	460b      	mov	r3, r1
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	4413      	add	r3, r2
 8002738:	4403      	add	r3, r0
 800273a:	3310      	adds	r3, #16
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	491f      	ldr	r1, [pc, #124]	; (80027c0 <main+0x8f4>)
 8002742:	4620      	mov	r0, r4
 8002744:	f017 f81c 	bl	8019780 <siprintf>
 8002748:	4602      	mov	r2, r0
 800274a:	f641 535c 	movw	r3, #7516	; 0x1d5c
 800274e:	443b      	add	r3, r7
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4413      	add	r3, r2
 8002754:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002758:	443a      	add	r2, r7
 800275a:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < 32; i++){
 800275c:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002760:	443b      	add	r3, r7
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3301      	adds	r3, #1
 8002766:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800276a:	443a      	add	r2, r7
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002772:	443b      	add	r3, r7
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b1f      	cmp	r3, #31
 8002778:	ddc2      	ble.n	8002700 <main+0x834>
            }
            Txcnt = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002780:	443a      	add	r2, r7
 8002782:	6013      	str	r3, [r2, #0]
            i++;
 8002784:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002788:	443b      	add	r3, r7
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002792:	443a      	add	r2, r7
 8002794:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 8002796:	2120      	movs	r1, #32
 8002798:	4808      	ldr	r0, [pc, #32]	; (80027bc <main+0x8f0>)
 800279a:	f7fe fbfd 	bl	8000f98 <NRF24_write>
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 800279e:	2300      	movs	r3, #0
 80027a0:	f641 5248 	movw	r2, #7496	; 0x1d48
 80027a4:	443a      	add	r2, r7
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	e045      	b.n	8002836 <main+0x96a>
 80027aa:	bf00      	nop
 80027ac:	24000204 	.word	0x24000204
 80027b0:	24001304 	.word	0x24001304
 80027b4:	ffffeff0 	.word	0xffffeff0
 80027b8:	0801ade0 	.word	0x0801ade0
 80027bc:	24001450 	.word	0x24001450
 80027c0:	0801ade8 	.word	0x0801ade8
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace + 32]);
 80027c4:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80027c8:	443b      	add	r3, r7
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a72      	ldr	r2, [pc, #456]	; (8002998 <main+0xacc>)
 80027ce:	189c      	adds	r4, r3, r2
 80027d0:	f641 5348 	movw	r3, #7496	; 0x1d48
 80027d4:	443b      	add	r3, r7
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	f641 5314 	movw	r3, #7444	; 0x1d14
 80027dc:	443b      	add	r3, r7
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	f103 0020 	add.w	r0, r3, #32
 80027e6:	4a6d      	ldr	r2, [pc, #436]	; (800299c <main+0xad0>)
 80027e8:	f641 5370 	movw	r3, #7536	; 0x1d70
 80027ec:	443b      	add	r3, r7
 80027ee:	441a      	add	r2, r3
 80027f0:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80027f4:	6819      	ldr	r1, [r3, #0]
 80027f6:	460b      	mov	r3, r1
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	4413      	add	r3, r2
 8002800:	4403      	add	r3, r0
 8002802:	3310      	adds	r3, #16
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	4965      	ldr	r1, [pc, #404]	; (80029a0 <main+0xad4>)
 800280a:	4620      	mov	r0, r4
 800280c:	f016 ffb8 	bl	8019780 <siprintf>
 8002810:	4602      	mov	r2, r0
 8002812:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002816:	443b      	add	r3, r7
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4413      	add	r3, r2
 800281c:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002820:	443a      	add	r2, r7
 8002822:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 8002824:	f641 5348 	movw	r3, #7496	; 0x1d48
 8002828:	443b      	add	r3, r7
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	f641 5248 	movw	r2, #7496	; 0x1d48
 8002832:	443a      	add	r2, r7
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	4a59      	ldr	r2, [pc, #356]	; (800299c <main+0xad0>)
 8002838:	f641 5370 	movw	r3, #7536	; 0x1d70
 800283c:	443b      	add	r3, r7
 800283e:	441a      	add	r2, r3
 8002840:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	460b      	mov	r3, r1
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	4413      	add	r3, r2
 8002850:	3308      	adds	r3, #8
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002858:	443b      	add	r3, r7
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f103 0220 	add.w	r2, r3, #32
 8002862:	f641 5348 	movw	r3, #7496	; 0x1d48
 8002866:	443b      	add	r3, r7
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d8aa      	bhi.n	80027c4 <main+0x8f8>
            }
            i++;
 800286e:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002872:	443b      	add	r3, r7
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3301      	adds	r3, #1
 8002878:	f641 5254 	movw	r2, #7508	; 0x1d54
 800287c:	443a      	add	r2, r7
 800287e:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);//FDBuffer[BuffIndex].length - (TxDataSpace + 32) CHANGE BACK TO THIS
 8002880:	2120      	movs	r1, #32
 8002882:	4845      	ldr	r0, [pc, #276]	; (8002998 <main+0xacc>)
 8002884:	f7fe fb88 	bl	8000f98 <NRF24_write>
 8002888:	e0eb      	b.n	8002a62 <main+0xb96>
          }else{
            Txcnt = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002890:	443a      	add	r2, r7
 8002892:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 8002894:	2300      	movs	r3, #0
 8002896:	f641 5244 	movw	r2, #7492	; 0x1d44
 800289a:	443a      	add	r2, r7
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e036      	b.n	800290e <main+0xa42>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 80028a0:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80028a4:	443b      	add	r3, r7
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a3b      	ldr	r2, [pc, #236]	; (8002998 <main+0xacc>)
 80028aa:	189c      	adds	r4, r3, r2
 80028ac:	f641 5344 	movw	r3, #7492	; 0x1d44
 80028b0:	443b      	add	r3, r7
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	f641 5314 	movw	r3, #7444	; 0x1d14
 80028b8:	443b      	add	r3, r7
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	18d0      	adds	r0, r2, r3
 80028be:	4a37      	ldr	r2, [pc, #220]	; (800299c <main+0xad0>)
 80028c0:	f641 5370 	movw	r3, #7536	; 0x1d70
 80028c4:	443b      	add	r3, r7
 80028c6:	441a      	add	r2, r3
 80028c8:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80028cc:	6819      	ldr	r1, [r3, #0]
 80028ce:	460b      	mov	r3, r1
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	4413      	add	r3, r2
 80028d8:	4403      	add	r3, r0
 80028da:	3310      	adds	r3, #16
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	492f      	ldr	r1, [pc, #188]	; (80029a0 <main+0xad4>)
 80028e2:	4620      	mov	r0, r4
 80028e4:	f016 ff4c 	bl	8019780 <siprintf>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80028ee:	443b      	add	r3, r7
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80028f8:	443a      	add	r2, r7
 80028fa:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 80028fc:	f641 5344 	movw	r3, #7492	; 0x1d44
 8002900:	443b      	add	r3, r7
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	f641 5244 	movw	r2, #7492	; 0x1d44
 800290a:	443a      	add	r2, r7
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	4a23      	ldr	r2, [pc, #140]	; (800299c <main+0xad0>)
 8002910:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002914:	443b      	add	r3, r7
 8002916:	441a      	add	r2, r3
 8002918:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800291c:	6819      	ldr	r1, [r3, #0]
 800291e:	460b      	mov	r3, r1
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	4413      	add	r3, r2
 8002928:	3308      	adds	r3, #8
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002930:	443b      	add	r3, r7
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	1ad2      	subs	r2, r2, r3
 8002936:	f641 5344 	movw	r3, #7492	; 0x1d44
 800293a:	443b      	add	r3, r7
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d8ae      	bhi.n	80028a0 <main+0x9d4>
            }
            i++;
 8002942:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002946:	443b      	add	r3, r7
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002950:	443a      	add	r2, r7
 8002952:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, FDBuffer[BuffIndex].length - TxDataSpace);
 8002954:	4a11      	ldr	r2, [pc, #68]	; (800299c <main+0xad0>)
 8002956:	f641 5370 	movw	r3, #7536	; 0x1d70
 800295a:	443b      	add	r3, r7
 800295c:	441a      	add	r2, r3
 800295e:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	460b      	mov	r3, r1
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	4413      	add	r3, r2
 800296e:	3308      	adds	r3, #8
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002978:	443b      	add	r3, r7
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4619      	mov	r1, r3
 8002984:	4804      	ldr	r0, [pc, #16]	; (8002998 <main+0xacc>)
 8002986:	f7fe fb07 	bl	8000f98 <NRF24_write>
 800298a:	e06a      	b.n	8002a62 <main+0xb96>
          }
        }
        else{
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 800298c:	2300      	movs	r3, #0
 800298e:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	e034      	b.n	8002a00 <main+0xb34>
 8002996:	bf00      	nop
 8002998:	24001450 	.word	0x24001450
 800299c:	ffffeff0 	.word	0xffffeff0
 80029a0:	0801ade8 	.word	0x0801ade8
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 80029a4:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80029a8:	443b      	add	r3, r7
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4ab6      	ldr	r2, [pc, #728]	; (8002c88 <main+0xdbc>)
 80029ae:	1898      	adds	r0, r3, r2
 80029b0:	4ab6      	ldr	r2, [pc, #728]	; (8002c8c <main+0xdc0>)
 80029b2:	f641 5370 	movw	r3, #7536	; 0x1d70
 80029b6:	443b      	add	r3, r7
 80029b8:	441a      	add	r2, r3
 80029ba:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	460b      	mov	r3, r1
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	441a      	add	r2, r3
 80029ca:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	3310      	adds	r3, #16
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	49ad      	ldr	r1, [pc, #692]	; (8002c90 <main+0xdc4>)
 80029da:	f016 fed1 	bl	8019780 <siprintf>
 80029de:	4602      	mov	r2, r0
 80029e0:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80029e4:	443b      	add	r3, r7
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80029ee:	443a      	add	r2, r7
 80029f0:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 80029f2:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4aa2      	ldr	r2, [pc, #648]	; (8002c8c <main+0xdc0>)
 8002a02:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002a06:	443b      	add	r3, r7
 8002a08:	441a      	add	r2, r3
 8002a0a:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	460b      	mov	r3, r1
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	4413      	add	r3, r2
 8002a1a:	3308      	adds	r3, #8
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d8bd      	bhi.n	80029a4 <main+0xad8>
          }
          NRF24_write(myTxData, FDBuffer[BuffIndex].length + (32 - TxDataSpace));
 8002a28:	4a98      	ldr	r2, [pc, #608]	; (8002c8c <main+0xdc0>)
 8002a2a:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002a2e:	443b      	add	r3, r7
 8002a30:	441a      	add	r2, r3
 8002a32:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a36:	6819      	ldr	r1, [r3, #0]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	4413      	add	r3, r2
 8002a42:	3308      	adds	r3, #8
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002a4c:	443b      	add	r3, r7
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	3320      	adds	r3, #32
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	488a      	ldr	r0, [pc, #552]	; (8002c88 <main+0xdbc>)
 8002a5e:	f7fe fa9b 	bl	8000f98 <NRF24_write>
        }
        BuffIndex++;
 8002a62:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002a6e:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].id == 0){
 8002a70:	4a86      	ldr	r2, [pc, #536]	; (8002c8c <main+0xdc0>)
 8002a72:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002a76:	443b      	add	r3, r7
 8002a78:	441a      	add	r2, r3
 8002a7a:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a7e:	6819      	ldr	r1, [r3, #0]
 8002a80:	460b      	mov	r3, r1
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	4413      	add	r3, r2
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d103      	bne.n	8002a98 <main+0xbcc>
          BuffIndex = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002a96:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < AllowedTele; i++){
 8002a98:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002a9c:	443b      	add	r3, r7
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002aa6:	443a      	add	r2, r7
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002aae:	443b      	add	r3, r7
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002ab6:	443b      	add	r3, r7
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	f6ff ad73 	blt.w	80025a6 <main+0x6da>


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);*/

	  if(FDCAN_Flag){
 8002ac0:	4b74      	ldr	r3, [pc, #464]	; (8002c94 <main+0xdc8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 81ee 	beq.w	8002ea6 <main+0xfda>

		  RTC_TimeTypeDef lTime = sTime;
 8002aca:	4b73      	ldr	r3, [pc, #460]	; (8002c98 <main+0xdcc>)
 8002acc:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002ad0:	443a      	add	r2, r7
 8002ad2:	4413      	add	r3, r2
 8002ad4:	4a71      	ldr	r2, [pc, #452]	; (8002c9c <main+0xdd0>)
 8002ad6:	461c      	mov	r4, r3
 8002ad8:	4615      	mov	r5, r2
 8002ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ade:	682b      	ldr	r3, [r5, #0]
 8002ae0:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFDFrame.time;
 8002ae2:	4b6f      	ldr	r3, [pc, #444]	; (8002ca0 <main+0xdd4>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002aea:	443a      	add	r2, r7
 8002aec:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8002aee:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <main+0xdcc>)
 8002af0:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002af4:	443a      	add	r2, r7
 8002af6:	4413      	add	r3, r2
 8002af8:	6859      	ldr	r1, [r3, #4]
 8002afa:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002afe:	443b      	add	r3, r7
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <main+0xdd8>)
 8002b04:	fba3 0302 	umull	r0, r3, r3, r2
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b0e:	fb00 f303 	mul.w	r3, r0, r3
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	18ca      	adds	r2, r1, r3
 8002b16:	4b60      	ldr	r3, [pc, #384]	; (8002c98 <main+0xdcc>)
 8002b18:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002b1c:	4439      	add	r1, r7
 8002b1e:	440b      	add	r3, r1
 8002b20:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002b22:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b26:	443b      	add	r3, r7
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5e      	ldr	r2, [pc, #376]	; (8002ca4 <main+0xdd8>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002b36:	443a      	add	r2, r7
 8002b38:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8002b3a:	4b57      	ldr	r3, [pc, #348]	; (8002c98 <main+0xdcc>)
 8002b3c:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002b40:	443a      	add	r2, r7
 8002b42:	4413      	add	r3, r2
 8002b44:	7898      	ldrb	r0, [r3, #2]
 8002b46:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b4a:	443b      	add	r3, r7
 8002b4c:	6819      	ldr	r1, [r3, #0]
 8002b4e:	4b56      	ldr	r3, [pc, #344]	; (8002ca8 <main+0xddc>)
 8002b50:	fba3 2301 	umull	r2, r3, r3, r1
 8002b54:	095a      	lsrs	r2, r3, #5
 8002b56:	4613      	mov	r3, r2
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	1aca      	subs	r2, r1, r3
 8002b60:	b2d3      	uxtb	r3, r2
 8002b62:	4403      	add	r3, r0
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4b4c      	ldr	r3, [pc, #304]	; (8002c98 <main+0xdcc>)
 8002b68:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002b6c:	4439      	add	r1, r7
 8002b6e:	440b      	add	r3, r1
 8002b70:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8002b72:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b76:	443b      	add	r3, r7
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a4b      	ldr	r2, [pc, #300]	; (8002ca8 <main+0xddc>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002b86:	443a      	add	r2, r7
 8002b88:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 8002b8a:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <main+0xdcc>)
 8002b8c:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002b90:	443a      	add	r2, r7
 8002b92:	4413      	add	r3, r2
 8002b94:	7858      	ldrb	r0, [r3, #1]
 8002b96:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b9a:	443b      	add	r3, r7
 8002b9c:	6819      	ldr	r1, [r3, #0]
 8002b9e:	4b42      	ldr	r3, [pc, #264]	; (8002ca8 <main+0xddc>)
 8002ba0:	fba3 2301 	umull	r2, r3, r3, r1
 8002ba4:	095a      	lsrs	r2, r3, #5
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	1aca      	subs	r2, r1, r3
 8002bb0:	b2d3      	uxtb	r3, r2
 8002bb2:	4403      	add	r3, r0
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <main+0xdcc>)
 8002bb8:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002bbc:	4439      	add	r1, r7
 8002bbe:	440b      	add	r3, r1
 8002bc0:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8002bc2:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002bc6:	443b      	add	r3, r7
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a37      	ldr	r2, [pc, #220]	; (8002ca8 <main+0xddc>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	095b      	lsrs	r3, r3, #5
 8002bd2:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002bd6:	443a      	add	r2, r7
 8002bd8:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8002bda:	4b2f      	ldr	r3, [pc, #188]	; (8002c98 <main+0xdcc>)
 8002bdc:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002be0:	443a      	add	r2, r7
 8002be2:	4413      	add	r3, r2
 8002be4:	7818      	ldrb	r0, [r3, #0]
 8002be6:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002bea:	443b      	add	r3, r7
 8002bec:	6819      	ldr	r1, [r3, #0]
 8002bee:	4b2e      	ldr	r3, [pc, #184]	; (8002ca8 <main+0xddc>)
 8002bf0:	fba3 2301 	umull	r2, r3, r3, r1
 8002bf4:	095a      	lsrs	r2, r3, #5
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	1aca      	subs	r2, r1, r3
 8002c00:	b2d3      	uxtb	r3, r2
 8002c02:	4403      	add	r3, r0
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <main+0xdcc>)
 8002c08:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002c0c:	4439      	add	r1, r7
 8002c0e:	440b      	add	r3, r1
 8002c10:	701a      	strb	r2, [r3, #0]
      //Write to SD Card
		  //date/time, CANID, Data
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c12:	4b26      	ldr	r3, [pc, #152]	; (8002cac <main+0xde0>)
 8002c14:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c16:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c18:	4b24      	ldr	r3, [pc, #144]	; (8002cac <main+0xde0>)
 8002c1a:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c1c:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c1e:	4b23      	ldr	r3, [pc, #140]	; (8002cac <main+0xde0>)
 8002c20:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c22:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c24:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <main+0xdcc>)
 8002c26:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c2a:	443a      	add	r2, r7
 8002c2c:	4413      	add	r3, r2
 8002c2e:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c30:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c32:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <main+0xdcc>)
 8002c34:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c38:	443a      	add	r2, r7
 8002c3a:	4413      	add	r3, r2
 8002c3c:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c3e:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c40:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <main+0xdcc>)
 8002c42:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c46:	443a      	add	r2, r7
 8002c48:	4413      	add	r3, r2
 8002c4a:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c4c:	461e      	mov	r6, r3
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <main+0xdcc>)
 8002c50:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c54:	443a      	add	r2, r7
 8002c56:	4413      	add	r3, r2
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4a11      	ldr	r2, [pc, #68]	; (8002ca0 <main+0xdd4>)
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	4814      	ldr	r0, [pc, #80]	; (8002cb0 <main+0xde4>)
 8002c60:	f641 5870 	movw	r8, #7536	; 0x1d70
 8002c64:	44b8      	add	r8, r7
 8002c66:	4440      	add	r0, r8
 8002c68:	9205      	str	r2, [sp, #20]
 8002c6a:	9304      	str	r3, [sp, #16]
 8002c6c:	9603      	str	r6, [sp, #12]
 8002c6e:	9502      	str	r5, [sp, #8]
 8002c70:	9401      	str	r4, [sp, #4]
 8002c72:	9100      	str	r1, [sp, #0]
 8002c74:	4673      	mov	r3, lr
 8002c76:	4662      	mov	r2, ip
 8002c78:	490e      	ldr	r1, [pc, #56]	; (8002cb4 <main+0xde8>)
 8002c7a:	f016 fd81 	bl	8019780 <siprintf>
 8002c7e:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002c82:	443b      	add	r3, r7
 8002c84:	e018      	b.n	8002cb8 <main+0xdec>
 8002c86:	bf00      	nop
 8002c88:	24001450 	.word	0x24001450
 8002c8c:	ffffeff0 	.word	0xffffeff0
 8002c90:	0801ade8 	.word	0x0801ade8
 8002c94:	240001fc 	.word	0x240001fc
 8002c98:	ffffe724 	.word	0xffffe724
 8002c9c:	24000b30 	.word	0x24000b30
 8002ca0:	24001040 	.word	0x24001040
 8002ca4:	10624dd3 	.word	0x10624dd3
 8002ca8:	88888889 	.word	0x88888889
 8002cac:	24000b44 	.word	0x24000b44
 8002cb0:	ffffe758 	.word	0xffffe758
 8002cb4:	0801adec 	.word	0x0801adec
 8002cb8:	6018      	str	r0, [r3, #0]
				  CanFDFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f641 523c 	movw	r2, #7484	; 0x1d3c
 8002cc0:	443a      	add	r2, r7
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	e028      	b.n	8002d18 <main+0xe4c>
			  CFDW += sprintf(CanFDWrite + CFDW, "%c", CanFDFrame.data.bytes[i]);
 8002cc6:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002cca:	443b      	add	r3, r7
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4b5e      	ldr	r3, [pc, #376]	; (8002e48 <main+0xf7c>)
 8002cd0:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002cd4:	4439      	add	r1, r7
 8002cd6:	440b      	add	r3, r1
 8002cd8:	1898      	adds	r0, r3, r2
 8002cda:	4a5c      	ldr	r2, [pc, #368]	; (8002e4c <main+0xf80>)
 8002cdc:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002ce0:	443b      	add	r3, r7
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3310      	adds	r3, #16
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	4958      	ldr	r1, [pc, #352]	; (8002e50 <main+0xf84>)
 8002cee:	f016 fd47 	bl	8019780 <siprintf>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002cf8:	443b      	add	r3, r7
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002d02:	443a      	add	r2, r7
 8002d04:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002d06:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002d0a:	443b      	add	r3, r7
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f641 523c 	movw	r2, #7484	; 0x1d3c
 8002d14:	443a      	add	r2, r7
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4b4c      	ldr	r3, [pc, #304]	; (8002e4c <main+0xf80>)
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002d20:	443b      	add	r3, r7
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d8ce      	bhi.n	8002cc6 <main+0xdfa>
		  }
		  CFDW += sprintf(CanFDWrite + CFDW, "\n\r");
 8002d28:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002d2c:	443b      	add	r3, r7
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b45      	ldr	r3, [pc, #276]	; (8002e48 <main+0xf7c>)
 8002d32:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002d36:	4439      	add	r1, r7
 8002d38:	440b      	add	r3, r1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a45      	ldr	r2, [pc, #276]	; (8002e54 <main+0xf88>)
 8002d3e:	8811      	ldrh	r1, [r2, #0]
 8002d40:	7892      	ldrb	r2, [r2, #2]
 8002d42:	8019      	strh	r1, [r3, #0]
 8002d44:	709a      	strb	r2, [r3, #2]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002d4c:	443b      	add	r3, r7
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4413      	add	r3, r2
 8002d52:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002d56:	443a      	add	r2, r7
 8002d58:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanFDWrite, CFDW);
 8002d5a:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <main+0xf7c>)
 8002d5c:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002d60:	443a      	add	r2, r7
 8002d62:	4413      	add	r3, r2
 8002d64:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002d68:	443a      	add	r2, r7
 8002d6a:	6811      	ldr	r1, [r2, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff f805 	bl	8001d7c <WriteToBuff>

      //Write to telemetry buffer
      
      for(int i = 0; i <50; i++){
 8002d72:	2300      	movs	r3, #0
 8002d74:	f641 5238 	movw	r2, #7480	; 0x1d38
 8002d78:	443a      	add	r2, r7
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	e088      	b.n	8002e90 <main+0xfc4>
        if(CanFDFrame.id == Tele_IDs[i]){ //check if frame should be checked
 8002d7e:	4b33      	ldr	r3, [pc, #204]	; (8002e4c <main+0xf80>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4b35      	ldr	r3, [pc, #212]	; (8002e58 <main+0xf8c>)
 8002d84:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002d88:	4439      	add	r1, r7
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f641 5138 	movw	r1, #7480	; 0x1d38
 8002d90:	4439      	add	r1, r7
 8002d92:	6809      	ldr	r1, [r1, #0]
 8002d94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d170      	bne.n	8002e7e <main+0xfb2>
          for(int j = 0; j < 50; j++){
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f641 5234 	movw	r2, #7476	; 0x1d34
 8002da2:	443a      	add	r2, r7
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e064      	b.n	8002e72 <main+0xfa6>
            if(FDBuffer[j].id == CanFDFrame.id){
 8002da8:	4a2c      	ldr	r2, [pc, #176]	; (8002e5c <main+0xf90>)
 8002daa:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002dae:	443b      	add	r3, r7
 8002db0:	441a      	add	r2, r3
 8002db2:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002db6:	443b      	add	r3, r7
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	4413      	add	r3, r2
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <main+0xf80>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d115      	bne.n	8002dfa <main+0xf2e>
              FDBuffer[j] = CanFDFrame;
 8002dce:	4a23      	ldr	r2, [pc, #140]	; (8002e5c <main+0xf90>)
 8002dd0:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002dd4:	443b      	add	r3, r7
 8002dd6:	441a      	add	r2, r3
 8002dd8:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002ddc:	443b      	add	r3, r7
 8002dde:	6819      	ldr	r1, [r3, #0]
 8002de0:	460b      	mov	r3, r1
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	4413      	add	r3, r2
 8002dea:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <main+0xf80>)
 8002dec:	4618      	mov	r0, r3
 8002dee:	4611      	mov	r1, r2
 8002df0:	2350      	movs	r3, #80	; 0x50
 8002df2:	461a      	mov	r2, r3
 8002df4:	f016 fb48 	bl	8019488 <memcpy>
              goto TeleDoneFD;
 8002df8:	e052      	b.n	8002ea0 <main+0xfd4>
            }
            if(FDBuffer[j].id == 0){
 8002dfa:	4a18      	ldr	r2, [pc, #96]	; (8002e5c <main+0xf90>)
 8002dfc:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002e00:	443b      	add	r3, r7
 8002e02:	441a      	add	r2, r3
 8002e04:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002e08:	443b      	add	r3, r7
 8002e0a:	6819      	ldr	r1, [r3, #0]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	4413      	add	r3, r2
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d121      	bne.n	8002e60 <main+0xf94>
              FDBuffer[j] = CanFDFrame;
 8002e1c:	4a0f      	ldr	r2, [pc, #60]	; (8002e5c <main+0xf90>)
 8002e1e:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002e22:	443b      	add	r3, r7
 8002e24:	441a      	add	r2, r3
 8002e26:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002e2a:	443b      	add	r3, r7
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	4413      	add	r3, r2
 8002e38:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <main+0xf80>)
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	2350      	movs	r3, #80	; 0x50
 8002e40:	461a      	mov	r2, r3
 8002e42:	f016 fb21 	bl	8019488 <memcpy>
              goto TeleDoneFD;
 8002e46:	e02b      	b.n	8002ea0 <main+0xfd4>
 8002e48:	ffffe758 	.word	0xffffe758
 8002e4c:	24001040 	.word	0x24001040
 8002e50:	0801ade8 	.word	0x0801ade8
 8002e54:	0801ae08 	.word	0x0801ae08
 8002e58:	ffffea78 	.word	0xffffea78
 8002e5c:	ffffeff0 	.word	0xffffeff0
          for(int j = 0; j < 50; j++){
 8002e60:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002e64:	443b      	add	r3, r7
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f641 5234 	movw	r2, #7476	; 0x1d34
 8002e6e:	443a      	add	r2, r7
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002e76:	443b      	add	r3, r7
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b31      	cmp	r3, #49	; 0x31
 8002e7c:	dd94      	ble.n	8002da8 <main+0xedc>
      for(int i = 0; i <50; i++){
 8002e7e:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002e82:	443b      	add	r3, r7
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3301      	adds	r3, #1
 8002e88:	f641 5238 	movw	r2, #7480	; 0x1d38
 8002e8c:	443a      	add	r2, r7
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002e94:	443b      	add	r3, r7
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b31      	cmp	r3, #49	; 0x31
 8002e9a:	f77f af70 	ble.w	8002d7e <main+0xeb2>
            }
          }
        }
      }
TeleDoneFD:
 8002e9e:	bf00      	nop
		  FDCAN_Flag = 0;
 8002ea0:	4bae      	ldr	r3, [pc, #696]	; (800315c <main+0x1290>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
	  }
	  if(CAN_Flag){
 8002ea6:	4bae      	ldr	r3, [pc, #696]	; (8003160 <main+0x1294>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 81df 	beq.w	800326e <main+0x13a2>

		  RTC_TimeTypeDef lTime = sTime;
 8002eb0:	4bac      	ldr	r3, [pc, #688]	; (8003164 <main+0x1298>)
 8002eb2:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002eb6:	443a      	add	r2, r7
 8002eb8:	4413      	add	r3, r2
 8002eba:	4aab      	ldr	r2, [pc, #684]	; (8003168 <main+0x129c>)
 8002ebc:	461c      	mov	r4, r3
 8002ebe:	4615      	mov	r5, r2
 8002ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ec4:	682b      	ldr	r3, [r5, #0]
 8002ec6:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFrame.time;
 8002ec8:	4ba8      	ldr	r3, [pc, #672]	; (800316c <main+0x12a0>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002ed0:	443a      	add	r2, r7
 8002ed2:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8002ed4:	4ba3      	ldr	r3, [pc, #652]	; (8003164 <main+0x1298>)
 8002ed6:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002eda:	443a      	add	r2, r7
 8002edc:	4413      	add	r3, r2
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002ee4:	443b      	add	r3, r7
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4ba1      	ldr	r3, [pc, #644]	; (8003170 <main+0x12a4>)
 8002eea:	fba3 0302 	umull	r0, r3, r3, r2
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ef4:	fb00 f303 	mul.w	r3, r0, r3
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	18ca      	adds	r2, r1, r3
 8002efc:	4b99      	ldr	r3, [pc, #612]	; (8003164 <main+0x1298>)
 8002efe:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002f02:	4439      	add	r1, r7
 8002f04:	440b      	add	r3, r1
 8002f06:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002f08:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f0c:	443b      	add	r3, r7
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a97      	ldr	r2, [pc, #604]	; (8003170 <main+0x12a4>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	099b      	lsrs	r3, r3, #6
 8002f18:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002f1c:	443a      	add	r2, r7
 8002f1e:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8002f20:	4b90      	ldr	r3, [pc, #576]	; (8003164 <main+0x1298>)
 8002f22:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002f26:	443a      	add	r2, r7
 8002f28:	4413      	add	r3, r2
 8002f2a:	7898      	ldrb	r0, [r3, #2]
 8002f2c:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f30:	443b      	add	r3, r7
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	4b8f      	ldr	r3, [pc, #572]	; (8003174 <main+0x12a8>)
 8002f36:	fba3 2301 	umull	r2, r3, r3, r1
 8002f3a:	095a      	lsrs	r2, r3, #5
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	1aca      	subs	r2, r1, r3
 8002f46:	b2d3      	uxtb	r3, r2
 8002f48:	4403      	add	r3, r0
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	4b85      	ldr	r3, [pc, #532]	; (8003164 <main+0x1298>)
 8002f4e:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002f52:	4439      	add	r1, r7
 8002f54:	440b      	add	r3, r1
 8002f56:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8002f58:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f5c:	443b      	add	r3, r7
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a84      	ldr	r2, [pc, #528]	; (8003174 <main+0x12a8>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002f6c:	443a      	add	r2, r7
 8002f6e:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 8002f70:	4b7c      	ldr	r3, [pc, #496]	; (8003164 <main+0x1298>)
 8002f72:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002f76:	443a      	add	r2, r7
 8002f78:	4413      	add	r3, r2
 8002f7a:	7858      	ldrb	r0, [r3, #1]
 8002f7c:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f80:	443b      	add	r3, r7
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	4b7b      	ldr	r3, [pc, #492]	; (8003174 <main+0x12a8>)
 8002f86:	fba3 2301 	umull	r2, r3, r3, r1
 8002f8a:	095a      	lsrs	r2, r3, #5
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	1aca      	subs	r2, r1, r3
 8002f96:	b2d3      	uxtb	r3, r2
 8002f98:	4403      	add	r3, r0
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	4b71      	ldr	r3, [pc, #452]	; (8003164 <main+0x1298>)
 8002f9e:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002fa2:	4439      	add	r1, r7
 8002fa4:	440b      	add	r3, r1
 8002fa6:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8002fa8:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002fac:	443b      	add	r3, r7
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a70      	ldr	r2, [pc, #448]	; (8003174 <main+0x12a8>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002fbc:	443a      	add	r2, r7
 8002fbe:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8002fc0:	4b68      	ldr	r3, [pc, #416]	; (8003164 <main+0x1298>)
 8002fc2:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002fc6:	443a      	add	r2, r7
 8002fc8:	4413      	add	r3, r2
 8002fca:	7818      	ldrb	r0, [r3, #0]
 8002fcc:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002fd0:	443b      	add	r3, r7
 8002fd2:	6819      	ldr	r1, [r3, #0]
 8002fd4:	4b67      	ldr	r3, [pc, #412]	; (8003174 <main+0x12a8>)
 8002fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8002fda:	095a      	lsrs	r2, r3, #5
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	1aca      	subs	r2, r1, r3
 8002fe6:	b2d3      	uxtb	r3, r2
 8002fe8:	4403      	add	r3, r0
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	4b5d      	ldr	r3, [pc, #372]	; (8003164 <main+0x1298>)
 8002fee:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002ff2:	4439      	add	r1, r7
 8002ff4:	440b      	add	r3, r1
 8002ff6:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002ff8:	4b5f      	ldr	r3, [pc, #380]	; (8003178 <main+0x12ac>)
 8002ffa:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002ffc:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002ffe:	4b5e      	ldr	r3, [pc, #376]	; (8003178 <main+0x12ac>)
 8003000:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003002:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003004:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <main+0x12ac>)
 8003006:	78db      	ldrb	r3, [r3, #3]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003008:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 800300a:	4b56      	ldr	r3, [pc, #344]	; (8003164 <main+0x1298>)
 800300c:	f641 5270 	movw	r2, #7536	; 0x1d70
 8003010:	443a      	add	r2, r7
 8003012:	4413      	add	r3, r2
 8003014:	781b      	ldrb	r3, [r3, #0]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003016:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003018:	4b52      	ldr	r3, [pc, #328]	; (8003164 <main+0x1298>)
 800301a:	f641 5270 	movw	r2, #7536	; 0x1d70
 800301e:	443a      	add	r2, r7
 8003020:	4413      	add	r3, r2
 8003022:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003024:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003026:	4b4f      	ldr	r3, [pc, #316]	; (8003164 <main+0x1298>)
 8003028:	f641 5270 	movw	r2, #7536	; 0x1d70
 800302c:	443a      	add	r2, r7
 800302e:	4413      	add	r3, r2
 8003030:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003032:	461e      	mov	r6, r3
 8003034:	4b4b      	ldr	r3, [pc, #300]	; (8003164 <main+0x1298>)
 8003036:	f641 5270 	movw	r2, #7536	; 0x1d70
 800303a:	443a      	add	r2, r7
 800303c:	4413      	add	r3, r2
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4a4a      	ldr	r2, [pc, #296]	; (800316c <main+0x12a0>)
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	484d      	ldr	r0, [pc, #308]	; (800317c <main+0x12b0>)
 8003046:	f641 5870 	movw	r8, #7536	; 0x1d70
 800304a:	44b8      	add	r8, r7
 800304c:	4440      	add	r0, r8
 800304e:	9205      	str	r2, [sp, #20]
 8003050:	9304      	str	r3, [sp, #16]
 8003052:	9603      	str	r6, [sp, #12]
 8003054:	9502      	str	r5, [sp, #8]
 8003056:	9401      	str	r4, [sp, #4]
 8003058:	9100      	str	r1, [sp, #0]
 800305a:	4673      	mov	r3, lr
 800305c:	4662      	mov	r2, ip
 800305e:	4948      	ldr	r1, [pc, #288]	; (8003180 <main+0x12b4>)
 8003060:	f016 fb8e 	bl	8019780 <siprintf>
 8003064:	f641 536c 	movw	r3, #7532	; 0x1d6c
 8003068:	443b      	add	r3, r7
 800306a:	6018      	str	r0, [r3, #0]
				  CanFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 800306c:	2300      	movs	r3, #0
 800306e:	f641 5230 	movw	r2, #7472	; 0x1d30
 8003072:	443a      	add	r2, r7
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e028      	b.n	80030ca <main+0x11fe>
			  CW += sprintf(CanWrite + CW, "%c", CanFrame.data.bytes[i]);
 8003078:	f641 536c 	movw	r3, #7532	; 0x1d6c
 800307c:	443b      	add	r3, r7
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b3e      	ldr	r3, [pc, #248]	; (800317c <main+0x12b0>)
 8003082:	f641 5170 	movw	r1, #7536	; 0x1d70
 8003086:	4439      	add	r1, r7
 8003088:	440b      	add	r3, r1
 800308a:	1898      	adds	r0, r3, r2
 800308c:	4a37      	ldr	r2, [pc, #220]	; (800316c <main+0x12a0>)
 800308e:	f641 5330 	movw	r3, #7472	; 0x1d30
 8003092:	443b      	add	r3, r7
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4413      	add	r3, r2
 8003098:	3310      	adds	r3, #16
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4939      	ldr	r1, [pc, #228]	; (8003184 <main+0x12b8>)
 80030a0:	f016 fb6e 	bl	8019780 <siprintf>
 80030a4:	4602      	mov	r2, r0
 80030a6:	f641 536c 	movw	r3, #7532	; 0x1d6c
 80030aa:	443b      	add	r3, r7
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4413      	add	r3, r2
 80030b0:	f641 526c 	movw	r2, #7532	; 0x1d6c
 80030b4:	443a      	add	r2, r7
 80030b6:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < CanFDFrame.length; i++){
 80030b8:	f641 5330 	movw	r3, #7472	; 0x1d30
 80030bc:	443b      	add	r3, r7
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	f641 5230 	movw	r2, #7472	; 0x1d30
 80030c6:	443a      	add	r2, r7
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <main+0x12bc>)
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	f641 5330 	movw	r3, #7472	; 0x1d30
 80030d2:	443b      	add	r3, r7
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d8ce      	bhi.n	8003078 <main+0x11ac>
		  }
		  CW += sprintf(CanWrite + CW, "\n\r");
 80030da:	f641 536c 	movw	r3, #7532	; 0x1d6c
 80030de:	443b      	add	r3, r7
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b26      	ldr	r3, [pc, #152]	; (800317c <main+0x12b0>)
 80030e4:	f641 5170 	movw	r1, #7536	; 0x1d70
 80030e8:	4439      	add	r1, r7
 80030ea:	440b      	add	r3, r1
 80030ec:	4413      	add	r3, r2
 80030ee:	4a27      	ldr	r2, [pc, #156]	; (800318c <main+0x12c0>)
 80030f0:	8811      	ldrh	r1, [r2, #0]
 80030f2:	7892      	ldrb	r2, [r2, #2]
 80030f4:	8019      	strh	r1, [r3, #0]
 80030f6:	709a      	strb	r2, [r3, #2]
 80030f8:	2202      	movs	r2, #2
 80030fa:	f641 536c 	movw	r3, #7532	; 0x1d6c
 80030fe:	443b      	add	r3, r7
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4413      	add	r3, r2
 8003104:	f641 526c 	movw	r2, #7532	; 0x1d6c
 8003108:	443a      	add	r2, r7
 800310a:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanWrite, CW);
 800310c:	4b1b      	ldr	r3, [pc, #108]	; (800317c <main+0x12b0>)
 800310e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8003112:	443a      	add	r2, r7
 8003114:	4413      	add	r3, r2
 8003116:	f641 526c 	movw	r2, #7532	; 0x1d6c
 800311a:	443a      	add	r2, r7
 800311c:	6811      	ldr	r1, [r2, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fe fe2c 	bl	8001d7c <WriteToBuff>

      for(int i = 0; i <50; i++){
 8003124:	2300      	movs	r3, #0
 8003126:	f641 522c 	movw	r2, #7468	; 0x1d2c
 800312a:	443a      	add	r2, r7
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e091      	b.n	8003254 <main+0x1388>
        if(CanFrame.id == Tele_IDs[i]){ //check if frame should be checked
 8003130:	4b0e      	ldr	r3, [pc, #56]	; (800316c <main+0x12a0>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b16      	ldr	r3, [pc, #88]	; (8003190 <main+0x12c4>)
 8003136:	f641 5170 	movw	r1, #7536	; 0x1d70
 800313a:	4439      	add	r1, r7
 800313c:	440b      	add	r3, r1
 800313e:	f641 512c 	movw	r1, #7468	; 0x1d2c
 8003142:	4439      	add	r1, r7
 8003144:	6809      	ldr	r1, [r1, #0]
 8003146:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800314a:	429a      	cmp	r2, r3
 800314c:	d179      	bne.n	8003242 <main+0x1376>
          for(int j = 0; j < 50; j++){
 800314e:	2300      	movs	r3, #0
 8003150:	f641 5228 	movw	r2, #7464	; 0x1d28
 8003154:	443a      	add	r2, r7
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	e06d      	b.n	8003236 <main+0x136a>
 800315a:	bf00      	nop
 800315c:	240001fc 	.word	0x240001fc
 8003160:	24000200 	.word	0x24000200
 8003164:	ffffe710 	.word	0xffffe710
 8003168:	24000b30 	.word	0x24000b30
 800316c:	240010b8 	.word	0x240010b8
 8003170:	10624dd3 	.word	0x10624dd3
 8003174:	88888889 	.word	0x88888889
 8003178:	24000b44 	.word	0x24000b44
 800317c:	ffffe8e8 	.word	0xffffe8e8
 8003180:	0801adec 	.word	0x0801adec
 8003184:	0801ade8 	.word	0x0801ade8
 8003188:	24001040 	.word	0x24001040
 800318c:	0801ae08 	.word	0x0801ae08
 8003190:	ffffea78 	.word	0xffffea78
            if(Buffer[j].id == CanFrame.id){
 8003194:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8003198:	f641 5328 	movw	r3, #7464	; 0x1d28
 800319c:	443b      	add	r3, r7
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	440b      	add	r3, r1
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b5a      	ldr	r3, [pc, #360]	; (8003318 <main+0x144c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d114      	bne.n	80031de <main+0x1312>
              Buffer[j] = CanFrame;     //if its already in the buffer replace it
 80031b4:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80031b8:	f641 5328 	movw	r3, #7464	; 0x1d28
 80031bc:	443b      	add	r3, r7
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	440b      	add	r3, r1
 80031ca:	4a53      	ldr	r2, [pc, #332]	; (8003318 <main+0x144c>)
 80031cc:	461c      	mov	r4, r3
 80031ce:	4615      	mov	r5, r2
 80031d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031d8:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 80031dc:	e044      	b.n	8003268 <main+0x139c>
            }
            if(Buffer[j].id == 0){
 80031de:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80031e2:	f641 5328 	movw	r3, #7464	; 0x1d28
 80031e6:	443b      	add	r3, r7
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	4613      	mov	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d114      	bne.n	8003224 <main+0x1358>
              Buffer[j] = CanFrame;     //if you get to the end of the defined packets withoout finding anything add the packet on the end
 80031fa:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80031fe:	f641 5328 	movw	r3, #7464	; 0x1d28
 8003202:	443b      	add	r3, r7
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4613      	mov	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4413      	add	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	440b      	add	r3, r1
 8003210:	4a41      	ldr	r2, [pc, #260]	; (8003318 <main+0x144c>)
 8003212:	461c      	mov	r4, r3
 8003214:	4615      	mov	r5, r2
 8003216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800321a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800321e:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 8003222:	e021      	b.n	8003268 <main+0x139c>
          for(int j = 0; j < 50; j++){
 8003224:	f641 5328 	movw	r3, #7464	; 0x1d28
 8003228:	443b      	add	r3, r7
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3301      	adds	r3, #1
 800322e:	f641 5228 	movw	r2, #7464	; 0x1d28
 8003232:	443a      	add	r2, r7
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	f641 5328 	movw	r3, #7464	; 0x1d28
 800323a:	443b      	add	r3, r7
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b31      	cmp	r3, #49	; 0x31
 8003240:	dda8      	ble.n	8003194 <main+0x12c8>
      for(int i = 0; i <50; i++){
 8003242:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003246:	443b      	add	r3, r7
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	f641 522c 	movw	r2, #7468	; 0x1d2c
 8003250:	443a      	add	r2, r7
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003258:	443b      	add	r3, r7
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b31      	cmp	r3, #49	; 0x31
 800325e:	f77f af67 	ble.w	8003130 <main+0x1264>
            }
          }
        }
      }
      printf("couldnt track, id buffer too full :(");
 8003262:	482e      	ldr	r0, [pc, #184]	; (800331c <main+0x1450>)
 8003264:	f016 f9cc 	bl	8019600 <iprintf>
TeleDone:
		  CAN_Flag = 0;
 8003268:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <main+0x1454>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
	  }
	  //WriteToBuff(A, 2);
	  //HAL_Delay(1000);
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    /* USER CODE END WHILE */
    EndTime = HAL_GetTick();
 800326e:	f001 f9b5 	bl	80045dc <HAL_GetTick>
 8003272:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003276:	443b      	add	r3, r7
 8003278:	6018      	str	r0, [r3, #0]
    if(StartTime - EndTime > LoopTime + 5){
 800327a:	f641 530c 	movw	r3, #7436	; 0x1d0c
 800327e:	443b      	add	r3, r7
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003286:	443b      	add	r3, r7
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	1ad2      	subs	r2, r2, r3
 800328c:	f641 5310 	movw	r3, #7440	; 0x1d10
 8003290:	443b      	add	r3, r7
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3305      	adds	r3, #5
 8003296:	429a      	cmp	r2, r3
 8003298:	d909      	bls.n	80032ae <main+0x13e2>
      AllowedTele--;
 800329a:	f641 5364 	movw	r3, #7524	; 0x1d64
 800329e:	443b      	add	r3, r7
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	f641 5264 	movw	r2, #7524	; 0x1d64
 80032a8:	443a      	add	r2, r7
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	e017      	b.n	80032de <main+0x1412>
    }else if(StartTime - EndTime < LoopTime){
 80032ae:	f641 530c 	movw	r3, #7436	; 0x1d0c
 80032b2:	443b      	add	r3, r7
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	f641 5308 	movw	r3, #7432	; 0x1d08
 80032ba:	443b      	add	r3, r7
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	f641 5210 	movw	r2, #7440	; 0x1d10
 80032c4:	443a      	add	r2, r7
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d908      	bls.n	80032de <main+0x1412>
      AllowedTele++;
 80032cc:	f641 5364 	movw	r3, #7524	; 0x1d64
 80032d0:	443b      	add	r3, r7
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3301      	adds	r3, #1
 80032d6:	f641 5264 	movw	r2, #7524	; 0x1d64
 80032da:	443a      	add	r2, r7
 80032dc:	6013      	str	r3, [r2, #0]
    }if (AllowedTele<1){
 80032de:	f641 5364 	movw	r3, #7524	; 0x1d64
 80032e2:	443b      	add	r3, r7
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	dc04      	bgt.n	80032f4 <main+0x1428>
    	AllowedTele = 1;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f641 5264 	movw	r2, #7524	; 0x1d64
 80032f0:	443a      	add	r2, r7
 80032f2:	6013      	str	r3, [r2, #0]
  while (end_flag){
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <main+0x1458>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f47f a923 	bne.w	8002544 <main+0x678>
    /* USER CODE BEGIN 3 */
}

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80032fe:	2101      	movs	r1, #1
 8003300:	4809      	ldr	r0, [pc, #36]	; (8003328 <main+0x145c>)
 8003302:	f004 feaa 	bl	800805a <HAL_GPIO_TogglePin>
 8003306:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 8003308:	4618      	mov	r0, r3
 800330a:	f507 57eb 	add.w	r7, r7, #7520	; 0x1d60
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003316:	bf00      	nop
 8003318:	240010b8 	.word	0x240010b8
 800331c:	0801ae0c 	.word	0x0801ae0c
 8003320:	24000200 	.word	0x24000200
 8003324:	24000008 	.word	0x24000008
 8003328:	58020400 	.word	0x58020400

0800332c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b0cc      	sub	sp, #304	; 0x130
 8003330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003332:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003336:	224c      	movs	r2, #76	; 0x4c
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f016 f8af 	bl	801949e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003340:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003344:	2220      	movs	r2, #32
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f016 f8a8 	bl	801949e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800334e:	f107 0308 	add.w	r3, r7, #8
 8003352:	4618      	mov	r0, r3
 8003354:	23bc      	movs	r3, #188	; 0xbc
 8003356:	461a      	mov	r2, r3
 8003358:	2100      	movs	r1, #0
 800335a:	f016 f8a0 	bl	801949e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800335e:	2002      	movs	r0, #2
 8003360:	f006 f976 	bl	8009650 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003364:	1d3b      	adds	r3, r7, #4
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	4b71      	ldr	r3, [pc, #452]	; (8003530 <SystemClock_Config+0x204>)
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	4a70      	ldr	r2, [pc, #448]	; (8003530 <SystemClock_Config+0x204>)
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003376:	4b6e      	ldr	r3, [pc, #440]	; (8003530 <SystemClock_Config+0x204>)
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	f003 0201 	and.w	r2, r3, #1
 800337e:	1d3b      	adds	r3, r7, #4
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	4b6c      	ldr	r3, [pc, #432]	; (8003534 <SystemClock_Config+0x208>)
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	4a6b      	ldr	r2, [pc, #428]	; (8003534 <SystemClock_Config+0x208>)
 8003388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800338c:	6193      	str	r3, [r2, #24]
 800338e:	4b69      	ldr	r3, [pc, #420]	; (8003534 <SystemClock_Config+0x208>)
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8003396:	1d3b      	adds	r3, r7, #4
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	1d3b      	adds	r3, r7, #4
 800339c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800339e:	bf00      	nop
 80033a0:	4b64      	ldr	r3, [pc, #400]	; (8003534 <SystemClock_Config+0x208>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ac:	d1f8      	bne.n	80033a0 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80033ae:	f006 f8b5 	bl	800951c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 80033b2:	f001 f941 	bl	8004638 <HAL_GetREVID>
 80033b6:	4b60      	ldr	r3, [pc, #384]	; (8003538 <SystemClock_Config+0x20c>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	4a5f      	ldr	r2, [pc, #380]	; (8003538 <SystemClock_Config+0x20c>)
 80033bc:	f043 0318 	orr.w	r3, r3, #24
 80033c0:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80033c2:	4b5d      	ldr	r3, [pc, #372]	; (8003538 <SystemClock_Config+0x20c>)
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	f023 0303 	bic.w	r3, r3, #3
 80033ca:	4a5b      	ldr	r2, [pc, #364]	; (8003538 <SystemClock_Config+0x20c>)
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80033d2:	2325      	movs	r3, #37	; 0x25
 80033d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033ec:	2302      	movs	r3, #2
 80033ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033f2:	2302      	movs	r3, #2
 80033f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80033f8:	2302      	movs	r3, #2
 80033fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 80033fe:	2340      	movs	r3, #64	; 0x40
 8003400:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003404:	2302      	movs	r3, #2
 8003406:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 800340a:	230a      	movs	r3, #10
 800340c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003410:	2302      	movs	r3, #2
 8003412:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003416:	230c      	movs	r3, #12
 8003418:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800341c:	2300      	movs	r3, #0
 800341e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003428:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800342c:	4618      	mov	r0, r3
 800342e:	f006 f99d 	bl	800976c <HAL_RCC_OscConfig>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8003438:	f000 fbe8 	bl	8003c0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800343c:	233f      	movs	r3, #63	; 0x3f
 800343e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003442:	2303      	movs	r3, #3
 8003444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003448:	2300      	movs	r3, #0
 800344a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800344e:	2308      	movs	r3, #8
 8003450:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003454:	2340      	movs	r3, #64	; 0x40
 8003456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800345a:	2340      	movs	r3, #64	; 0x40
 800345c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003464:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003468:	2340      	movs	r3, #64	; 0x40
 800346a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800346e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003472:	2102      	movs	r1, #2
 8003474:	4618      	mov	r0, r3
 8003476:	f006 fd89 	bl	8009f8c <HAL_RCC_ClockConfig>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8003480:	f000 fbc4 	bl	8003c0c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8003484:	f107 0308 	add.w	r3, r7, #8
 8003488:	4a2c      	ldr	r2, [pc, #176]	; (800353c <SystemClock_Config+0x210>)
 800348a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800348c:	f107 0308 	add.w	r3, r7, #8
 8003490:	2202      	movs	r2, #2
 8003492:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8003494:	f107 0308 	add.w	r3, r7, #8
 8003498:	220c      	movs	r2, #12
 800349a:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800349c:	f107 0308 	add.w	r3, r7, #8
 80034a0:	2203      	movs	r2, #3
 80034a2:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80034a4:	f107 0308 	add.w	r3, r7, #8
 80034a8:	2202      	movs	r2, #2
 80034aa:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 80034ac:	f107 0308 	add.w	r3, r7, #8
 80034b0:	2203      	movs	r2, #3
 80034b2:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80034b4:	f107 0308 	add.w	r3, r7, #8
 80034b8:	22c0      	movs	r2, #192	; 0xc0
 80034ba:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80034bc:	f107 0308 	add.w	r3, r7, #8
 80034c0:	2220      	movs	r2, #32
 80034c2:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80034c4:	f107 0308 	add.w	r3, r7, #8
 80034c8:	2200      	movs	r2, #0
 80034ca:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80034cc:	f107 0308 	add.w	r3, r7, #8
 80034d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034d4:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80034d6:	f107 0308 	add.w	r3, r7, #8
 80034da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034de:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80034e0:	f107 0308 	add.w	r3, r7, #8
 80034e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e8:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80034ea:	f107 0308 	add.w	r3, r7, #8
 80034ee:	2200      	movs	r2, #0
 80034f0:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80034f2:	f107 0308 	add.w	r3, r7, #8
 80034f6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80034fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80034fe:	f107 0308 	add.w	r3, r7, #8
 8003502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003506:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800350a:	f107 0308 	add.w	r3, r7, #8
 800350e:	4618      	mov	r0, r3
 8003510:	f007 f8ec 	bl	800a6ec <HAL_RCCEx_PeriphCLKConfig>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 800351a:	f000 fb77 	bl	8003c0c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800351e:	f006 feeb 	bl	800a2f8 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8003522:	f006 f8cf 	bl	80096c4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8003526:	bf00      	nop
 8003528:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	58000400 	.word	0x58000400
 8003534:	58024800 	.word	0x58024800
 8003538:	58024400 	.word	0x58024400
 800353c:	00459002 	.word	0x00459002

08003540 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003544:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 8003546:	4a30      	ldr	r2, [pc, #192]	; (8003608 <MX_FDCAN1_Init+0xc8>)
 8003548:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800354a:	4b2e      	ldr	r3, [pc, #184]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 800354c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003550:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003552:	4b2c      	ldr	r3, [pc, #176]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 8003554:	2200      	movs	r2, #0
 8003556:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003558:	4b2a      	ldr	r3, [pc, #168]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 800355a:	2200      	movs	r2, #0
 800355c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800355e:	4b29      	ldr	r3, [pc, #164]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 8003560:	2200      	movs	r2, #0
 8003562:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003564:	4b27      	ldr	r3, [pc, #156]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 8003566:	2200      	movs	r2, #0
 8003568:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800356a:	4b26      	ldr	r3, [pc, #152]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 800356c:	2201      	movs	r2, #1
 800356e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 23;
 8003570:	4b24      	ldr	r3, [pc, #144]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 8003572:	2217      	movs	r2, #23
 8003574:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8003576:	4b23      	ldr	r3, [pc, #140]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 8003578:	2238      	movs	r2, #56	; 0x38
 800357a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 23;
 800357c:	4b21      	ldr	r3, [pc, #132]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 800357e:	2217      	movs	r2, #23
 8003580:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003582:	4b20      	ldr	r3, [pc, #128]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 8003584:	2201      	movs	r2, #1
 8003586:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8003588:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 800358a:	2205      	movs	r2, #5
 800358c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 8003590:	220a      	movs	r2, #10
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 8003596:	2205      	movs	r2, #5
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800359a:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 800359c:	2200      	movs	r2, #0
 800359e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 80035a0:	4b18      	ldr	r3, [pc, #96]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 80035a2:	2202      	movs	r2, #2
 80035a4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 80035a6:	4b17      	ldr	r3, [pc, #92]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 80035a8:	2202      	movs	r2, #2
 80035aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80035ac:	4b15      	ldr	r3, [pc, #84]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 80035ae:	2240      	movs	r2, #64	; 0x40
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80035b2:	4b14      	ldr	r3, [pc, #80]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 80035b4:	2212      	movs	r2, #18
 80035b6:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80035b8:	4b12      	ldr	r3, [pc, #72]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80035be:	4b11      	ldr	r3, [pc, #68]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 80035c0:	2204      	movs	r2, #4
 80035c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80035c4:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80035ca:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 80035cc:	2204      	movs	r2, #4
 80035ce:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 80035d8:	2200      	movs	r2, #0
 80035da:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 80035de:	2200      	movs	r2, #0
 80035e0:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80035e2:	4b08      	ldr	r3, [pc, #32]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 80035ea:	2204      	movs	r2, #4
 80035ec:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80035ee:	4805      	ldr	r0, [pc, #20]	; (8003604 <MX_FDCAN1_Init+0xc4>)
 80035f0:	f003 fa16 	bl	8006a20 <HAL_FDCAN_Init>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80035fa:	f000 fb07 	bl	8003c0c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	24001514 	.word	0x24001514
 8003608:	4000a000 	.word	0x4000a000

0800360c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003610:	4b2e      	ldr	r3, [pc, #184]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 8003612:	4a2f      	ldr	r2, [pc, #188]	; (80036d0 <MX_FDCAN2_Init+0xc4>)
 8003614:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003616:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 8003618:	2200      	movs	r2, #0
 800361a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800361c:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 800361e:	2200      	movs	r2, #0
 8003620:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8003622:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 8003624:	2200      	movs	r2, #0
 8003626:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003628:	4b28      	ldr	r3, [pc, #160]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 800362a:	2200      	movs	r2, #0
 800362c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800362e:	4b27      	ldr	r3, [pc, #156]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 8003630:	2200      	movs	r2, #0
 8003632:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8003634:	4b25      	ldr	r3, [pc, #148]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 8003636:	2201      	movs	r2, #1
 8003638:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800363a:	4b24      	ldr	r3, [pc, #144]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 800363c:	2201      	movs	r2, #1
 800363e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8003640:	4b22      	ldr	r3, [pc, #136]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 8003642:	2202      	movs	r2, #2
 8003644:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8003646:	4b21      	ldr	r3, [pc, #132]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 8003648:	2202      	movs	r2, #2
 800364a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800364c:	4b1f      	ldr	r3, [pc, #124]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 800364e:	2201      	movs	r2, #1
 8003650:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8003652:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 8003654:	2201      	movs	r2, #1
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8003658:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 800365a:	2201      	movs	r2, #1
 800365c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800365e:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 8003660:	2201      	movs	r2, #1
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 8003666:	2200      	movs	r2, #0
 8003668:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800366a:	4b18      	ldr	r3, [pc, #96]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 800366c:	2200      	movs	r2, #0
 800366e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 8003672:	2200      	movs	r2, #0
 8003674:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8003676:	4b15      	ldr	r3, [pc, #84]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 8003678:	2200      	movs	r2, #0
 800367a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800367c:	4b13      	ldr	r3, [pc, #76]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 800367e:	2204      	movs	r2, #4
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8003682:	4b12      	ldr	r3, [pc, #72]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 8003684:	2200      	movs	r2, #0
 8003686:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003688:	4b10      	ldr	r3, [pc, #64]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 800368a:	2204      	movs	r2, #4
 800368c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800368e:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 8003690:	2200      	movs	r2, #0
 8003692:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003694:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 8003696:	2204      	movs	r2, #4
 8003698:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800369a:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 800369c:	2200      	movs	r2, #0
 800369e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80036a0:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80036a6:	4b09      	ldr	r3, [pc, #36]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80036ac:	4b07      	ldr	r3, [pc, #28]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 80036b4:	2204      	movs	r2, #4
 80036b6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80036b8:	4804      	ldr	r0, [pc, #16]	; (80036cc <MX_FDCAN2_Init+0xc0>)
 80036ba:	f003 f9b1 	bl	8006a20 <HAL_FDCAN_Init>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80036c4:	f000 faa2 	bl	8003c0c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80036c8:	bf00      	nop
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	240016c8 	.word	0x240016c8
 80036d0:	4000a400 	.word	0x4000a400

080036d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80036e8:	2300      	movs	r3, #0
 80036ea:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80036ec:	4b26      	ldr	r3, [pc, #152]	; (8003788 <MX_RTC_Init+0xb4>)
 80036ee:	4a27      	ldr	r2, [pc, #156]	; (800378c <MX_RTC_Init+0xb8>)
 80036f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036f2:	4b25      	ldr	r3, [pc, #148]	; (8003788 <MX_RTC_Init+0xb4>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 80036f8:	4b23      	ldr	r3, [pc, #140]	; (8003788 <MX_RTC_Init+0xb4>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 80036fe:	4b22      	ldr	r3, [pc, #136]	; (8003788 <MX_RTC_Init+0xb4>)
 8003700:	f244 0204 	movw	r2, #16388	; 0x4004
 8003704:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <MX_RTC_Init+0xb4>)
 8003708:	2200      	movs	r2, #0
 800370a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800370c:	4b1e      	ldr	r3, [pc, #120]	; (8003788 <MX_RTC_Init+0xb4>)
 800370e:	2200      	movs	r2, #0
 8003710:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003712:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <MX_RTC_Init+0xb4>)
 8003714:	2200      	movs	r2, #0
 8003716:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003718:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <MX_RTC_Init+0xb4>)
 800371a:	2200      	movs	r2, #0
 800371c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800371e:	481a      	ldr	r0, [pc, #104]	; (8003788 <MX_RTC_Init+0xb4>)
 8003720:	f008 fea8 	bl	800c474 <HAL_RTC_Init>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800372a:	f000 fa6f 	bl	8003c0c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	2200      	movs	r2, #0
 8003746:	4619      	mov	r1, r3
 8003748:	480f      	ldr	r0, [pc, #60]	; (8003788 <MX_RTC_Init+0xb4>)
 800374a:	f008 ff0b 	bl	800c564 <HAL_RTC_SetTime>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003754:	f000 fa5a 	bl	8003c0c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003758:	2301      	movs	r3, #1
 800375a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800375c:	2301      	movs	r3, #1
 800375e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8003760:	2301      	movs	r3, #1
 8003762:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003768:	463b      	mov	r3, r7
 800376a:	2200      	movs	r2, #0
 800376c:	4619      	mov	r1, r3
 800376e:	4806      	ldr	r0, [pc, #24]	; (8003788 <MX_RTC_Init+0xb4>)
 8003770:	f008 fff2 	bl	800c758 <HAL_RTC_SetDate>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800377a:	f000 fa47 	bl	8003c0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800377e:	bf00      	nop
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	240014f0 	.word	0x240014f0
 800378c:	58004000 	.word	0x58004000

08003790 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003794:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <MX_SDMMC1_SD_Init+0x3c>)
 8003796:	4a0e      	ldr	r2, [pc, #56]	; (80037d0 <MX_SDMMC1_SD_Init+0x40>)
 8003798:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <MX_SDMMC1_SD_Init+0x3c>)
 800379c:	2200      	movs	r2, #0
 800379e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80037a0:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <MX_SDMMC1_SD_Init+0x3c>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <MX_SDMMC1_SD_Init+0x3c>)
 80037a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037ac:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80037ae:	4b07      	ldr	r3, [pc, #28]	; (80037cc <MX_SDMMC1_SD_Init+0x3c>)
 80037b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037b4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <MX_SDMMC1_SD_Init+0x3c>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <MX_SDMMC1_SD_Init+0x3c>)
 80037be:	2201      	movs	r2, #1
 80037c0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80037c2:	bf00      	nop
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	24001470 	.word	0x24001470
 80037d0:	52007000 	.word	0x52007000

080037d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <MX_SPI1_Init+0xa4>)
 80037da:	4a28      	ldr	r2, [pc, #160]	; (800387c <MX_SPI1_Init+0xa8>)
 80037dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037de:	4b26      	ldr	r3, [pc, #152]	; (8003878 <MX_SPI1_Init+0xa4>)
 80037e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80037e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037e6:	4b24      	ldr	r3, [pc, #144]	; (8003878 <MX_SPI1_Init+0xa4>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037ec:	4b22      	ldr	r3, [pc, #136]	; (8003878 <MX_SPI1_Init+0xa4>)
 80037ee:	2207      	movs	r2, #7
 80037f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037f2:	4b21      	ldr	r3, [pc, #132]	; (8003878 <MX_SPI1_Init+0xa4>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037f8:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <MX_SPI1_Init+0xa4>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <MX_SPI1_Init+0xa4>)
 8003800:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003804:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003806:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <MX_SPI1_Init+0xa4>)
 8003808:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800380c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800380e:	4b1a      	ldr	r3, [pc, #104]	; (8003878 <MX_SPI1_Init+0xa4>)
 8003810:	2200      	movs	r2, #0
 8003812:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003814:	4b18      	ldr	r3, [pc, #96]	; (8003878 <MX_SPI1_Init+0xa4>)
 8003816:	2200      	movs	r2, #0
 8003818:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <MX_SPI1_Init+0xa4>)
 800381c:	2200      	movs	r2, #0
 800381e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003820:	4b15      	ldr	r3, [pc, #84]	; (8003878 <MX_SPI1_Init+0xa4>)
 8003822:	2200      	movs	r2, #0
 8003824:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003826:	4b14      	ldr	r3, [pc, #80]	; (8003878 <MX_SPI1_Init+0xa4>)
 8003828:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800382c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800382e:	4b12      	ldr	r3, [pc, #72]	; (8003878 <MX_SPI1_Init+0xa4>)
 8003830:	2200      	movs	r2, #0
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <MX_SPI1_Init+0xa4>)
 8003836:	2200      	movs	r2, #0
 8003838:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800383a:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <MX_SPI1_Init+0xa4>)
 800383c:	2200      	movs	r2, #0
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003840:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <MX_SPI1_Init+0xa4>)
 8003842:	2200      	movs	r2, #0
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <MX_SPI1_Init+0xa4>)
 8003848:	2200      	movs	r2, #0
 800384a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800384c:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <MX_SPI1_Init+0xa4>)
 800384e:	2200      	movs	r2, #0
 8003850:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <MX_SPI1_Init+0xa4>)
 8003854:	2200      	movs	r2, #0
 8003856:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003858:	4b07      	ldr	r3, [pc, #28]	; (8003878 <MX_SPI1_Init+0xa4>)
 800385a:	2200      	movs	r2, #0
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <MX_SPI1_Init+0xa4>)
 8003860:	2200      	movs	r2, #0
 8003862:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003864:	4804      	ldr	r0, [pc, #16]	; (8003878 <MX_SPI1_Init+0xa4>)
 8003866:	f00b f89f 	bl	800e9a8 <HAL_SPI_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003870:	f000 f9cc 	bl	8003c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}
 8003878:	24001640 	.word	0x24001640
 800387c:	40013000 	.word	0x40013000

08003880 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8003884:	4b22      	ldr	r3, [pc, #136]	; (8003910 <MX_UART8_Init+0x90>)
 8003886:	4a23      	ldr	r2, [pc, #140]	; (8003914 <MX_UART8_Init+0x94>)
 8003888:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800388a:	4b21      	ldr	r3, [pc, #132]	; (8003910 <MX_UART8_Init+0x90>)
 800388c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003890:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8003892:	4b1f      	ldr	r3, [pc, #124]	; (8003910 <MX_UART8_Init+0x90>)
 8003894:	2200      	movs	r2, #0
 8003896:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003898:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <MX_UART8_Init+0x90>)
 800389a:	2200      	movs	r2, #0
 800389c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800389e:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <MX_UART8_Init+0x90>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80038a4:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <MX_UART8_Init+0x90>)
 80038a6:	220c      	movs	r2, #12
 80038a8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038aa:	4b19      	ldr	r3, [pc, #100]	; (8003910 <MX_UART8_Init+0x90>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80038b0:	4b17      	ldr	r3, [pc, #92]	; (8003910 <MX_UART8_Init+0x90>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038b6:	4b16      	ldr	r3, [pc, #88]	; (8003910 <MX_UART8_Init+0x90>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80038bc:	4b14      	ldr	r3, [pc, #80]	; (8003910 <MX_UART8_Init+0x90>)
 80038be:	2200      	movs	r2, #0
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <MX_UART8_Init+0x90>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80038c8:	4811      	ldr	r0, [pc, #68]	; (8003910 <MX_UART8_Init+0x90>)
 80038ca:	f00c f91e 	bl	800fb0a <HAL_UART_Init>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80038d4:	f000 f99a 	bl	8003c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038d8:	2100      	movs	r1, #0
 80038da:	480d      	ldr	r0, [pc, #52]	; (8003910 <MX_UART8_Init+0x90>)
 80038dc:	f00d faae 	bl	8010e3c <HAL_UARTEx_SetTxFifoThreshold>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80038e6:	f000 f991 	bl	8003c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038ea:	2100      	movs	r1, #0
 80038ec:	4808      	ldr	r0, [pc, #32]	; (8003910 <MX_UART8_Init+0x90>)
 80038ee:	f00d fae3 	bl	8010eb8 <HAL_UARTEx_SetRxFifoThreshold>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80038f8:	f000 f988 	bl	8003c0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80038fc:	4804      	ldr	r0, [pc, #16]	; (8003910 <MX_UART8_Init+0x90>)
 80038fe:	f00d fa64 	bl	8010dca <HAL_UARTEx_DisableFifoMode>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8003908:	f000 f980 	bl	8003c0c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800390c:	bf00      	nop
 800390e:	bd80      	pop	{r7, pc}
 8003910:	240015b4 	.word	0x240015b4
 8003914:	40007c00 	.word	0x40007c00

08003918 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800391c:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <MX_USART3_UART_Init+0x90>)
 800391e:	4a23      	ldr	r2, [pc, #140]	; (80039ac <MX_USART3_UART_Init+0x94>)
 8003920:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8003922:	4b21      	ldr	r3, [pc, #132]	; (80039a8 <MX_USART3_UART_Init+0x90>)
 8003924:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003928:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800392a:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <MX_USART3_UART_Init+0x90>)
 800392c:	2200      	movs	r2, #0
 800392e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003930:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <MX_USART3_UART_Init+0x90>)
 8003932:	2200      	movs	r2, #0
 8003934:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003936:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <MX_USART3_UART_Init+0x90>)
 8003938:	2200      	movs	r2, #0
 800393a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800393c:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <MX_USART3_UART_Init+0x90>)
 800393e:	220c      	movs	r2, #12
 8003940:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003942:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <MX_USART3_UART_Init+0x90>)
 8003944:	2200      	movs	r2, #0
 8003946:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003948:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <MX_USART3_UART_Init+0x90>)
 800394a:	2200      	movs	r2, #0
 800394c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800394e:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <MX_USART3_UART_Init+0x90>)
 8003950:	2200      	movs	r2, #0
 8003952:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003954:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <MX_USART3_UART_Init+0x90>)
 8003956:	2200      	movs	r2, #0
 8003958:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <MX_USART3_UART_Init+0x90>)
 800395c:	2200      	movs	r2, #0
 800395e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003960:	4811      	ldr	r0, [pc, #68]	; (80039a8 <MX_USART3_UART_Init+0x90>)
 8003962:	f00c f8d2 	bl	800fb0a <HAL_UART_Init>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800396c:	f000 f94e 	bl	8003c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003970:	2100      	movs	r1, #0
 8003972:	480d      	ldr	r0, [pc, #52]	; (80039a8 <MX_USART3_UART_Init+0x90>)
 8003974:	f00d fa62 	bl	8010e3c <HAL_UARTEx_SetTxFifoThreshold>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800397e:	f000 f945 	bl	8003c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003982:	2100      	movs	r1, #0
 8003984:	4808      	ldr	r0, [pc, #32]	; (80039a8 <MX_USART3_UART_Init+0x90>)
 8003986:	f00d fa97 	bl	8010eb8 <HAL_UARTEx_SetRxFifoThreshold>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003990:	f000 f93c 	bl	8003c0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003994:	4804      	ldr	r0, [pc, #16]	; (80039a8 <MX_USART3_UART_Init+0x90>)
 8003996:	f00d fa18 	bl	8010dca <HAL_UARTEx_DisableFifoMode>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80039a0:	f000 f934 	bl	8003c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	240013c4 	.word	0x240013c4
 80039ac:	40004800 	.word	0x40004800

080039b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039b6:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <MX_DMA_Init+0x3c>)
 80039b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039bc:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <MX_DMA_Init+0x3c>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80039c6:	4b09      	ldr	r3, [pc, #36]	; (80039ec <MX_DMA_Init+0x3c>)
 80039c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80039d4:	2200      	movs	r2, #0
 80039d6:	2100      	movs	r1, #0
 80039d8:	200c      	movs	r0, #12
 80039da:	f000 ff14 	bl	8004806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80039de:	200c      	movs	r0, #12
 80039e0:	f000 ff2b 	bl	800483a <HAL_NVIC_EnableIRQ>

}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	58024400 	.word	0x58024400

080039f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08c      	sub	sp, #48	; 0x30
 80039f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f6:	f107 031c 	add.w	r3, r7, #28
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	605a      	str	r2, [r3, #4]
 8003a00:	609a      	str	r2, [r3, #8]
 8003a02:	60da      	str	r2, [r3, #12]
 8003a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a06:	4b6d      	ldr	r3, [pc, #436]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a0c:	4a6b      	ldr	r2, [pc, #428]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a0e:	f043 0310 	orr.w	r3, r3, #16
 8003a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a16:	4b69      	ldr	r3, [pc, #420]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a24:	4b65      	ldr	r3, [pc, #404]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a2a:	4a64      	ldr	r2, [pc, #400]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a2c:	f043 0304 	orr.w	r3, r3, #4
 8003a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a34:	4b61      	ldr	r3, [pc, #388]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a42:	4b5e      	ldr	r3, [pc, #376]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a48:	4a5c      	ldr	r2, [pc, #368]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a52:	4b5a      	ldr	r3, [pc, #360]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a60:	4b56      	ldr	r3, [pc, #344]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a66:	4a55      	ldr	r2, [pc, #340]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a70:	4b52      	ldr	r3, [pc, #328]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a7e:	4b4f      	ldr	r3, [pc, #316]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a84:	4a4d      	ldr	r2, [pc, #308]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a86:	f043 0302 	orr.w	r3, r3, #2
 8003a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a8e:	4b4b      	ldr	r3, [pc, #300]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a9c:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aa2:	4a46      	ldr	r2, [pc, #280]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003aa4:	f043 0308 	orr.w	r3, r3, #8
 8003aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003aac:	4b43      	ldr	r3, [pc, #268]	; (8003bbc <MX_GPIO_Init+0x1cc>)
 8003aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	607b      	str	r3, [r7, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8003aba:	2200      	movs	r2, #0
 8003abc:	210c      	movs	r1, #12
 8003abe:	4840      	ldr	r0, [pc, #256]	; (8003bc0 <MX_GPIO_Init+0x1d0>)
 8003ac0:	f004 fab2 	bl	8008028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2103      	movs	r1, #3
 8003ac8:	483e      	ldr	r0, [pc, #248]	; (8003bc4 <MX_GPIO_Init+0x1d4>)
 8003aca:	f004 faad 	bl	8008028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	483d      	ldr	r0, [pc, #244]	; (8003bc8 <MX_GPIO_Init+0x1d8>)
 8003ad4:	f004 faa8 	bl	8008028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ade:	483b      	ldr	r0, [pc, #236]	; (8003bcc <MX_GPIO_Init+0x1dc>)
 8003ae0:	f004 faa2 	bl	8008028 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8003ae4:	230c      	movs	r3, #12
 8003ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af0:	2300      	movs	r3, #0
 8003af2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003af4:	f107 031c 	add.w	r3, r7, #28
 8003af8:	4619      	mov	r1, r3
 8003afa:	4831      	ldr	r0, [pc, #196]	; (8003bc0 <MX_GPIO_Init+0x1d0>)
 8003afc:	f004 f8cc 	bl	8007c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8003b00:	2303      	movs	r3, #3
 8003b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b04:	2301      	movs	r3, #1
 8003b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b10:	f107 031c 	add.w	r3, r7, #28
 8003b14:	4619      	mov	r1, r3
 8003b16:	482b      	ldr	r0, [pc, #172]	; (8003bc4 <MX_GPIO_Init+0x1d4>)
 8003b18:	f004 f8be 	bl	8007c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8003b1c:	2304      	movs	r3, #4
 8003b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b20:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <MX_GPIO_Init+0x1e0>)
 8003b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003b28:	f107 031c 	add.w	r3, r7, #28
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4825      	ldr	r0, [pc, #148]	; (8003bc4 <MX_GPIO_Init+0x1d4>)
 8003b30:	f004 f8b2 	bl	8007c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003b34:	2301      	movs	r3, #1
 8003b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b40:	2300      	movs	r3, #0
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003b44:	f107 031c 	add.w	r3, r7, #28
 8003b48:	4619      	mov	r1, r3
 8003b4a:	481f      	ldr	r0, [pc, #124]	; (8003bc8 <MX_GPIO_Init+0x1d8>)
 8003b4c:	f004 f8a4 	bl	8007c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8003b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b56:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <MX_GPIO_Init+0x1e0>)
 8003b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8003b5e:	f107 031c 	add.w	r3, r7, #28
 8003b62:	4619      	mov	r1, r3
 8003b64:	4816      	ldr	r0, [pc, #88]	; (8003bc0 <MX_GPIO_Init+0x1d0>)
 8003b66:	f004 f897 	bl	8007c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8003b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b70:	2301      	movs	r3, #1
 8003b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8003b7c:	f107 031c 	add.w	r3, r7, #28
 8003b80:	4619      	mov	r1, r3
 8003b82:	4812      	ldr	r0, [pc, #72]	; (8003bcc <MX_GPIO_Init+0x1dc>)
 8003b84:	f004 f888 	bl	8007c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8003b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8003b96:	f107 031c 	add.w	r3, r7, #28
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4809      	ldr	r0, [pc, #36]	; (8003bc4 <MX_GPIO_Init+0x1d4>)
 8003b9e:	f004 f87b 	bl	8007c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	2017      	movs	r0, #23
 8003ba8:	f000 fe2d 	bl	8004806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003bac:	2017      	movs	r0, #23
 8003bae:	f000 fe44 	bl	800483a <HAL_NVIC_EnableIRQ>

}
 8003bb2:	bf00      	nop
 8003bb4:	3730      	adds	r7, #48	; 0x30
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	58024400 	.word	0x58024400
 8003bc0:	58021000 	.word	0x58021000
 8003bc4:	58020000 	.word	0x58020000
 8003bc8:	58020400 	.word	0x58020400
 8003bcc:	58020c00 	.word	0x58020c00
 8003bd0:	11110000 	.word	0x11110000

08003bd4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  end_flag = 0;
 8003bde:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <HAL_GPIO_EXTI_Callback+0x1c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	24000008 	.word	0x24000008

08003bf4 <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_PWR_PVDCallback+0x14>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	24000008 	.word	0x24000008

08003c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c10:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 8003c12:	4802      	ldr	r0, [pc, #8]	; (8003c1c <Error_Handler+0x10>)
 8003c14:	f015 fd68 	bl	80196e8 <puts>
 8003c18:	e7fb      	b.n	8003c12 <Error_Handler+0x6>
 8003c1a:	bf00      	nop
 8003c1c:	0801ae54 	.word	0x0801ae54

08003c20 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c2c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d013      	beq.n	8003c60 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003c38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c3c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003c40:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00b      	beq.n	8003c60 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003c48:	e000      	b.n	8003c4c <ITM_SendChar+0x2c>
    {
      __NOP();
 8003c4a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003c4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f9      	beq.n	8003c4a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003c56:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003c60:	687b      	ldr	r3, [r7, #4]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
  int i=0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	e009      	b.n	8003c98 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	60ba      	str	r2, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ffc7 	bl	8003c20 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	3301      	adds	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	dbf1      	blt.n	8003c84 <_write+0x16>
  return len;
 8003ca0:	687b      	ldr	r3, [r7, #4]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8003cb2:	f107 0308 	add.w	r3, r7, #8
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cbc:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <HAL_MspInit+0x60>)
 8003cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cc2:	4a12      	ldr	r2, [pc, #72]	; (8003d0c <HAL_MspInit+0x60>)
 8003cc4:	f043 0302 	orr.w	r3, r3, #2
 8003cc8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <HAL_MspInit+0x60>)
 8003cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	607b      	str	r3, [r7, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2100      	movs	r1, #0
 8003cde:	2001      	movs	r0, #1
 8003ce0:	f000 fd91 	bl	8004806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	f000 fda8 	bl	800483a <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8003cea:	23c0      	movs	r3, #192	; 0xc0
 8003cec:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8003cee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003cf2:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003cf4:	f107 0308 	add.w	r3, r7, #8
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f005 fc1f 	bl	800953c <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8003cfe:	f005 fc97 	bl	8009630 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	58024400 	.word	0x58024400

08003d10 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08c      	sub	sp, #48	; 0x30
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d18:	f107 031c 	add.w	r3, r7, #28
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a48      	ldr	r2, [pc, #288]	; (8003e50 <HAL_FDCAN_MspInit+0x140>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d14e      	bne.n	8003dd0 <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003d32:	4b48      	ldr	r3, [pc, #288]	; (8003e54 <HAL_FDCAN_MspInit+0x144>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3301      	adds	r3, #1
 8003d38:	4a46      	ldr	r2, [pc, #280]	; (8003e54 <HAL_FDCAN_MspInit+0x144>)
 8003d3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003d3c:	4b45      	ldr	r3, [pc, #276]	; (8003e54 <HAL_FDCAN_MspInit+0x144>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d10e      	bne.n	8003d62 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003d44:	4b44      	ldr	r3, [pc, #272]	; (8003e58 <HAL_FDCAN_MspInit+0x148>)
 8003d46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d4a:	4a43      	ldr	r2, [pc, #268]	; (8003e58 <HAL_FDCAN_MspInit+0x148>)
 8003d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d50:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003d54:	4b40      	ldr	r3, [pc, #256]	; (8003e58 <HAL_FDCAN_MspInit+0x148>)
 8003d56:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d62:	4b3d      	ldr	r3, [pc, #244]	; (8003e58 <HAL_FDCAN_MspInit+0x148>)
 8003d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d68:	4a3b      	ldr	r2, [pc, #236]	; (8003e58 <HAL_FDCAN_MspInit+0x148>)
 8003d6a:	f043 0302 	orr.w	r3, r3, #2
 8003d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d72:	4b39      	ldr	r3, [pc, #228]	; (8003e58 <HAL_FDCAN_MspInit+0x148>)
 8003d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d86:	2302      	movs	r3, #2
 8003d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003d92:	2309      	movs	r3, #9
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d96:	f107 031c 	add.w	r3, r7, #28
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	482f      	ldr	r0, [pc, #188]	; (8003e5c <HAL_FDCAN_MspInit+0x14c>)
 8003d9e:	f003 ff7b 	bl	8007c98 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8003da2:	2040      	movs	r0, #64	; 0x40
 8003da4:	f004 f98e 	bl	80080c4 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8003da8:	2080      	movs	r0, #128	; 0x80
 8003daa:	f004 f98b 	bl	80080c4 <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003dae:	2200      	movs	r2, #0
 8003db0:	2100      	movs	r1, #0
 8003db2:	2013      	movs	r0, #19
 8003db4:	f000 fd27 	bl	8004806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003db8:	2013      	movs	r0, #19
 8003dba:	f000 fd3e 	bl	800483a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	2015      	movs	r0, #21
 8003dc4:	f000 fd1f 	bl	8004806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8003dc8:	2015      	movs	r0, #21
 8003dca:	f000 fd36 	bl	800483a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8003dce:	e03b      	b.n	8003e48 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a22      	ldr	r2, [pc, #136]	; (8003e60 <HAL_FDCAN_MspInit+0x150>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d136      	bne.n	8003e48 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003dda:	4b1e      	ldr	r3, [pc, #120]	; (8003e54 <HAL_FDCAN_MspInit+0x144>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	4a1c      	ldr	r2, [pc, #112]	; (8003e54 <HAL_FDCAN_MspInit+0x144>)
 8003de2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003de4:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <HAL_FDCAN_MspInit+0x144>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d10e      	bne.n	8003e0a <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <HAL_FDCAN_MspInit+0x148>)
 8003dee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003df2:	4a19      	ldr	r2, [pc, #100]	; (8003e58 <HAL_FDCAN_MspInit+0x148>)
 8003df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003dfc:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <HAL_FDCAN_MspInit+0x148>)
 8003dfe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e0a:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <HAL_FDCAN_MspInit+0x148>)
 8003e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e10:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <HAL_FDCAN_MspInit+0x148>)
 8003e12:	f043 0302 	orr.w	r3, r3, #2
 8003e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <HAL_FDCAN_MspInit+0x148>)
 8003e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003e28:	2360      	movs	r3, #96	; 0x60
 8003e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e34:	2300      	movs	r3, #0
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003e38:	2309      	movs	r3, #9
 8003e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e3c:	f107 031c 	add.w	r3, r7, #28
 8003e40:	4619      	mov	r1, r3
 8003e42:	4806      	ldr	r0, [pc, #24]	; (8003e5c <HAL_FDCAN_MspInit+0x14c>)
 8003e44:	f003 ff28 	bl	8007c98 <HAL_GPIO_Init>
}
 8003e48:	bf00      	nop
 8003e4a:	3730      	adds	r7, #48	; 0x30
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	4000a000 	.word	0x4000a000
 8003e54:	24000b48 	.word	0x24000b48
 8003e58:	58024400 	.word	0x58024400
 8003e5c:	58020400 	.word	0x58020400
 8003e60:	4000a400 	.word	0x4000a400

08003e64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a07      	ldr	r2, [pc, #28]	; (8003e90 <HAL_RTC_MspInit+0x2c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d105      	bne.n	8003e82 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <HAL_RTC_MspInit+0x30>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a06      	ldr	r2, [pc, #24]	; (8003e94 <HAL_RTC_MspInit+0x30>)
 8003e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	58004000 	.word	0x58004000
 8003e94:	58024400 	.word	0x58024400

08003e98 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	; 0x28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea0:	f107 0314 	add.w	r3, r7, #20
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	60da      	str	r2, [r3, #12]
 8003eae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a2e      	ldr	r2, [pc, #184]	; (8003f70 <HAL_SD_MspInit+0xd8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d155      	bne.n	8003f66 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003eba:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <HAL_SD_MspInit+0xdc>)
 8003ebc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003ec0:	4a2c      	ldr	r2, [pc, #176]	; (8003f74 <HAL_SD_MspInit+0xdc>)
 8003ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003eca:	4b2a      	ldr	r3, [pc, #168]	; (8003f74 <HAL_SD_MspInit+0xdc>)
 8003ecc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed8:	4b26      	ldr	r3, [pc, #152]	; (8003f74 <HAL_SD_MspInit+0xdc>)
 8003eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ede:	4a25      	ldr	r2, [pc, #148]	; (8003f74 <HAL_SD_MspInit+0xdc>)
 8003ee0:	f043 0304 	orr.w	r3, r3, #4
 8003ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ee8:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <HAL_SD_MspInit+0xdc>)
 8003eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ef6:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <HAL_SD_MspInit+0xdc>)
 8003ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003efc:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <HAL_SD_MspInit+0xdc>)
 8003efe:	f043 0308 	orr.w	r3, r3, #8
 8003f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f06:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <HAL_SD_MspInit+0xdc>)
 8003f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003f14:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003f18:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f22:	2303      	movs	r3, #3
 8003f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003f26:	230c      	movs	r3, #12
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f2a:	f107 0314 	add.w	r3, r7, #20
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4811      	ldr	r0, [pc, #68]	; (8003f78 <HAL_SD_MspInit+0xe0>)
 8003f32:	f003 feb1 	bl	8007c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f36:	2304      	movs	r3, #4
 8003f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f42:	2303      	movs	r3, #3
 8003f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003f46:	230c      	movs	r3, #12
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f4a:	f107 0314 	add.w	r3, r7, #20
 8003f4e:	4619      	mov	r1, r3
 8003f50:	480a      	ldr	r0, [pc, #40]	; (8003f7c <HAL_SD_MspInit+0xe4>)
 8003f52:	f003 fea1 	bl	8007c98 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003f56:	2200      	movs	r2, #0
 8003f58:	2100      	movs	r1, #0
 8003f5a:	2031      	movs	r0, #49	; 0x31
 8003f5c:	f000 fc53 	bl	8004806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003f60:	2031      	movs	r0, #49	; 0x31
 8003f62:	f000 fc6a 	bl	800483a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003f66:	bf00      	nop
 8003f68:	3728      	adds	r7, #40	; 0x28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	52007000 	.word	0x52007000
 8003f74:	58024400 	.word	0x58024400
 8003f78:	58020800 	.word	0x58020800
 8003f7c:	58020c00 	.word	0x58020c00

08003f80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f88:	f107 0314 	add.w	r3, r7, #20
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1a      	ldr	r2, [pc, #104]	; (8004008 <HAL_SPI_MspInit+0x88>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d12d      	bne.n	8003ffe <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fa2:	4b1a      	ldr	r3, [pc, #104]	; (800400c <HAL_SPI_MspInit+0x8c>)
 8003fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fa8:	4a18      	ldr	r2, [pc, #96]	; (800400c <HAL_SPI_MspInit+0x8c>)
 8003faa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003fb2:	4b16      	ldr	r3, [pc, #88]	; (800400c <HAL_SPI_MspInit+0x8c>)
 8003fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc0:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_SPI_MspInit+0x8c>)
 8003fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fc6:	4a11      	ldr	r2, [pc, #68]	; (800400c <HAL_SPI_MspInit+0x8c>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	; (800400c <HAL_SPI_MspInit+0x8c>)
 8003fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003fde:	23e0      	movs	r3, #224	; 0xe0
 8003fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fea:	2303      	movs	r3, #3
 8003fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fee:	2305      	movs	r3, #5
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff2:	f107 0314 	add.w	r3, r7, #20
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4805      	ldr	r0, [pc, #20]	; (8004010 <HAL_SPI_MspInit+0x90>)
 8003ffa:	f003 fe4d 	bl	8007c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003ffe:	bf00      	nop
 8004000:	3728      	adds	r7, #40	; 0x28
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40013000 	.word	0x40013000
 800400c:	58024400 	.word	0x58024400
 8004010:	58020000 	.word	0x58020000

08004014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08c      	sub	sp, #48	; 0x30
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800401c:	f107 031c 	add.w	r3, r7, #28
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	60da      	str	r2, [r3, #12]
 800402a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a4b      	ldr	r2, [pc, #300]	; (8004160 <HAL_UART_MspInit+0x14c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d12e      	bne.n	8004094 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8004036:	4b4b      	ldr	r3, [pc, #300]	; (8004164 <HAL_UART_MspInit+0x150>)
 8004038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800403c:	4a49      	ldr	r2, [pc, #292]	; (8004164 <HAL_UART_MspInit+0x150>)
 800403e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004042:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004046:	4b47      	ldr	r3, [pc, #284]	; (8004164 <HAL_UART_MspInit+0x150>)
 8004048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800404c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004054:	4b43      	ldr	r3, [pc, #268]	; (8004164 <HAL_UART_MspInit+0x150>)
 8004056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800405a:	4a42      	ldr	r2, [pc, #264]	; (8004164 <HAL_UART_MspInit+0x150>)
 800405c:	f043 0310 	orr.w	r3, r3, #16
 8004060:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004064:	4b3f      	ldr	r3, [pc, #252]	; (8004164 <HAL_UART_MspInit+0x150>)
 8004066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004072:	2303      	movs	r3, #3
 8004074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004076:	2302      	movs	r3, #2
 8004078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407e:	2300      	movs	r3, #0
 8004080:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004082:	2308      	movs	r3, #8
 8004084:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004086:	f107 031c 	add.w	r3, r7, #28
 800408a:	4619      	mov	r1, r3
 800408c:	4836      	ldr	r0, [pc, #216]	; (8004168 <HAL_UART_MspInit+0x154>)
 800408e:	f003 fe03 	bl	8007c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004092:	e061      	b.n	8004158 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a34      	ldr	r2, [pc, #208]	; (800416c <HAL_UART_MspInit+0x158>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d15c      	bne.n	8004158 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 800409e:	4b31      	ldr	r3, [pc, #196]	; (8004164 <HAL_UART_MspInit+0x150>)
 80040a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040a4:	4a2f      	ldr	r2, [pc, #188]	; (8004164 <HAL_UART_MspInit+0x150>)
 80040a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040ae:	4b2d      	ldr	r3, [pc, #180]	; (8004164 <HAL_UART_MspInit+0x150>)
 80040b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040bc:	4b29      	ldr	r3, [pc, #164]	; (8004164 <HAL_UART_MspInit+0x150>)
 80040be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040c2:	4a28      	ldr	r2, [pc, #160]	; (8004164 <HAL_UART_MspInit+0x150>)
 80040c4:	f043 0308 	orr.w	r3, r3, #8
 80040c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <HAL_UART_MspInit+0x150>)
 80040ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80040da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e0:	2302      	movs	r3, #2
 80040e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e8:	2300      	movs	r3, #0
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040ec:	2307      	movs	r3, #7
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040f0:	f107 031c 	add.w	r3, r7, #28
 80040f4:	4619      	mov	r1, r3
 80040f6:	481e      	ldr	r0, [pc, #120]	; (8004170 <HAL_UART_MspInit+0x15c>)
 80040f8:	f003 fdce 	bl	8007c98 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80040fc:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_UART_MspInit+0x160>)
 80040fe:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <HAL_UART_MspInit+0x164>)
 8004100:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004102:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <HAL_UART_MspInit+0x160>)
 8004104:	222d      	movs	r2, #45	; 0x2d
 8004106:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004108:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <HAL_UART_MspInit+0x160>)
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800410e:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_UART_MspInit+0x160>)
 8004110:	2200      	movs	r2, #0
 8004112:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004114:	4b17      	ldr	r3, [pc, #92]	; (8004174 <HAL_UART_MspInit+0x160>)
 8004116:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800411a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <HAL_UART_MspInit+0x160>)
 800411e:	2200      	movs	r2, #0
 8004120:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <HAL_UART_MspInit+0x160>)
 8004124:	2200      	movs	r2, #0
 8004126:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004128:	4b12      	ldr	r3, [pc, #72]	; (8004174 <HAL_UART_MspInit+0x160>)
 800412a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800412e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004130:	4b10      	ldr	r3, [pc, #64]	; (8004174 <HAL_UART_MspInit+0x160>)
 8004132:	2200      	movs	r2, #0
 8004134:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004136:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <HAL_UART_MspInit+0x160>)
 8004138:	2200      	movs	r2, #0
 800413a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800413c:	480d      	ldr	r0, [pc, #52]	; (8004174 <HAL_UART_MspInit+0x160>)
 800413e:	f000 fb97 	bl	8004870 <HAL_DMA_Init>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_UART_MspInit+0x138>
      Error_Handler();
 8004148:	f7ff fd60 	bl	8003c0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a09      	ldr	r2, [pc, #36]	; (8004174 <HAL_UART_MspInit+0x160>)
 8004150:	679a      	str	r2, [r3, #120]	; 0x78
 8004152:	4a08      	ldr	r2, [pc, #32]	; (8004174 <HAL_UART_MspInit+0x160>)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004158:	bf00      	nop
 800415a:	3730      	adds	r7, #48	; 0x30
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40007c00 	.word	0x40007c00
 8004164:	58024400 	.word	0x58024400
 8004168:	58021000 	.word	0x58021000
 800416c:	40004800 	.word	0x40004800
 8004170:	58020c00 	.word	0x58020c00
 8004174:	2400134c 	.word	0x2400134c
 8004178:	40020028 	.word	0x40020028

0800417c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004180:	f006 fa98 	bl	800a6b4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004184:	e7fe      	b.n	8004184 <NMI_Handler+0x8>

08004186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800418a:	e7fe      	b.n	800418a <HardFault_Handler+0x4>

0800418c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004190:	e7fe      	b.n	8004190 <MemManage_Handler+0x4>

08004192 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004192:	b480      	push	{r7}
 8004194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004196:	e7fe      	b.n	8004196 <BusFault_Handler+0x4>

08004198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800419c:	e7fe      	b.n	800419c <UsageFault_Handler+0x4>

0800419e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041ba:	b480      	push	{r7}
 80041bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041be:	bf00      	nop
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041cc:	f000 f9f2 	bl	80045b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041d0:	bf00      	nop
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 80041d8:	f005 fa84 	bl	80096e4 <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 80041dc:	bf00      	nop
 80041de:	bd80      	pop	{r7, pc}

080041e0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80041e4:	4802      	ldr	r0, [pc, #8]	; (80041f0 <DMA1_Stream1_IRQHandler+0x10>)
 80041e6:	f001 f909 	bl	80053fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80041ea:	bf00      	nop
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	2400134c 	.word	0x2400134c

080041f4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80041f8:	4802      	ldr	r0, [pc, #8]	; (8004204 <FDCAN1_IT0_IRQHandler+0x10>)
 80041fa:	f003 f8bd 	bl	8007378 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80041fe:	bf00      	nop
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	24001514 	.word	0x24001514

08004208 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800420c:	4802      	ldr	r0, [pc, #8]	; (8004218 <FDCAN1_IT1_IRQHandler+0x10>)
 800420e:	f003 f8b3 	bl	8007378 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	24001514 	.word	0x24001514

0800421c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004220:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004224:	f003 ff34 	bl	8008090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004228:	bf00      	nop
 800422a:	bd80      	pop	{r7, pc}

0800422c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004230:	4802      	ldr	r0, [pc, #8]	; (800423c <SDMMC1_IRQHandler+0x10>)
 8004232:	f009 f9c1 	bl	800d5b8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004236:	bf00      	nop
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	24001470 	.word	0x24001470

08004240 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004244:	4802      	ldr	r0, [pc, #8]	; (8004250 <OTG_FS_IRQHandler+0x10>)
 8004246:	f004 f8b8 	bl	80083ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	240020a4 	.word	0x240020a4

08004254 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e00a      	b.n	800427c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004266:	f3af 8000 	nop.w
 800426a:	4601      	mov	r1, r0
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	60ba      	str	r2, [r7, #8]
 8004272:	b2ca      	uxtb	r2, r1
 8004274:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	3301      	adds	r3, #1
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	dbf0      	blt.n	8004266 <_read+0x12>
	}

return len;
 8004284:	687b      	ldr	r3, [r7, #4]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <_close>:
	}
	return len;
}

int _close(int file)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
	return -1;
 8004296:	f04f 33ff 	mov.w	r3, #4294967295
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042b6:	605a      	str	r2, [r3, #4]
	return 0;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <_isatty>:

int _isatty(int file)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
	return 1;
 80042ce:	2301      	movs	r3, #1
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
	return 0;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004300:	4a14      	ldr	r2, [pc, #80]	; (8004354 <_sbrk+0x5c>)
 8004302:	4b15      	ldr	r3, [pc, #84]	; (8004358 <_sbrk+0x60>)
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800430c:	4b13      	ldr	r3, [pc, #76]	; (800435c <_sbrk+0x64>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d102      	bne.n	800431a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004314:	4b11      	ldr	r3, [pc, #68]	; (800435c <_sbrk+0x64>)
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <_sbrk+0x68>)
 8004318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800431a:	4b10      	ldr	r3, [pc, #64]	; (800435c <_sbrk+0x64>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4413      	add	r3, r2
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	429a      	cmp	r2, r3
 8004326:	d207      	bcs.n	8004338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004328:	f015 f874 	bl	8019414 <__errno>
 800432c:	4602      	mov	r2, r0
 800432e:	230c      	movs	r3, #12
 8004330:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004332:	f04f 33ff 	mov.w	r3, #4294967295
 8004336:	e009      	b.n	800434c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004338:	4b08      	ldr	r3, [pc, #32]	; (800435c <_sbrk+0x64>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800433e:	4b07      	ldr	r3, [pc, #28]	; (800435c <_sbrk+0x64>)
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4413      	add	r3, r2
 8004346:	4a05      	ldr	r2, [pc, #20]	; (800435c <_sbrk+0x64>)
 8004348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800434a:	68fb      	ldr	r3, [r7, #12]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	24080000 	.word	0x24080000
 8004358:	00000400 	.word	0x00000400
 800435c:	24000b4c 	.word	0x24000b4c
 8004360:	240024b0 	.word	0x240024b0

08004364 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004368:	4b39      	ldr	r3, [pc, #228]	; (8004450 <SystemInit+0xec>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	4a38      	ldr	r2, [pc, #224]	; (8004450 <SystemInit+0xec>)
 8004370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004378:	4b36      	ldr	r3, [pc, #216]	; (8004454 <SystemInit+0xf0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	2b06      	cmp	r3, #6
 8004382:	d807      	bhi.n	8004394 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004384:	4b33      	ldr	r3, [pc, #204]	; (8004454 <SystemInit+0xf0>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f023 030f 	bic.w	r3, r3, #15
 800438c:	4a31      	ldr	r2, [pc, #196]	; (8004454 <SystemInit+0xf0>)
 800438e:	f043 0307 	orr.w	r3, r3, #7
 8004392:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004394:	4b30      	ldr	r3, [pc, #192]	; (8004458 <SystemInit+0xf4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a2f      	ldr	r2, [pc, #188]	; (8004458 <SystemInit+0xf4>)
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80043a0:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <SystemInit+0xf4>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80043a6:	4b2c      	ldr	r3, [pc, #176]	; (8004458 <SystemInit+0xf4>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	492b      	ldr	r1, [pc, #172]	; (8004458 <SystemInit+0xf4>)
 80043ac:	4b2b      	ldr	r3, [pc, #172]	; (800445c <SystemInit+0xf8>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80043b2:	4b28      	ldr	r3, [pc, #160]	; (8004454 <SystemInit+0xf0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	2b07      	cmp	r3, #7
 80043bc:	d907      	bls.n	80043ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80043be:	4b25      	ldr	r3, [pc, #148]	; (8004454 <SystemInit+0xf0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f023 030f 	bic.w	r3, r3, #15
 80043c6:	4a23      	ldr	r2, [pc, #140]	; (8004454 <SystemInit+0xf0>)
 80043c8:	f043 0307 	orr.w	r3, r3, #7
 80043cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80043ce:	4b22      	ldr	r3, [pc, #136]	; (8004458 <SystemInit+0xf4>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80043d4:	4b20      	ldr	r3, [pc, #128]	; (8004458 <SystemInit+0xf4>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80043da:	4b1f      	ldr	r3, [pc, #124]	; (8004458 <SystemInit+0xf4>)
 80043dc:	2200      	movs	r2, #0
 80043de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80043e0:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <SystemInit+0xf4>)
 80043e2:	4a1f      	ldr	r2, [pc, #124]	; (8004460 <SystemInit+0xfc>)
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80043e6:	4b1c      	ldr	r3, [pc, #112]	; (8004458 <SystemInit+0xf4>)
 80043e8:	4a1e      	ldr	r2, [pc, #120]	; (8004464 <SystemInit+0x100>)
 80043ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80043ec:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <SystemInit+0xf4>)
 80043ee:	4a1e      	ldr	r2, [pc, #120]	; (8004468 <SystemInit+0x104>)
 80043f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80043f2:	4b19      	ldr	r3, [pc, #100]	; (8004458 <SystemInit+0xf4>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80043f8:	4b17      	ldr	r3, [pc, #92]	; (8004458 <SystemInit+0xf4>)
 80043fa:	4a1b      	ldr	r2, [pc, #108]	; (8004468 <SystemInit+0x104>)
 80043fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80043fe:	4b16      	ldr	r3, [pc, #88]	; (8004458 <SystemInit+0xf4>)
 8004400:	2200      	movs	r2, #0
 8004402:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004404:	4b14      	ldr	r3, [pc, #80]	; (8004458 <SystemInit+0xf4>)
 8004406:	4a18      	ldr	r2, [pc, #96]	; (8004468 <SystemInit+0x104>)
 8004408:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800440a:	4b13      	ldr	r3, [pc, #76]	; (8004458 <SystemInit+0xf4>)
 800440c:	2200      	movs	r2, #0
 800440e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004410:	4b11      	ldr	r3, [pc, #68]	; (8004458 <SystemInit+0xf4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a10      	ldr	r2, [pc, #64]	; (8004458 <SystemInit+0xf4>)
 8004416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800441a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800441c:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <SystemInit+0xf4>)
 800441e:	2200      	movs	r2, #0
 8004420:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <SystemInit+0x108>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4b12      	ldr	r3, [pc, #72]	; (8004470 <SystemInit+0x10c>)
 8004428:	4013      	ands	r3, r2
 800442a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800442e:	d202      	bcs.n	8004436 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004430:	4b10      	ldr	r3, [pc, #64]	; (8004474 <SystemInit+0x110>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <SystemInit+0x114>)
 8004438:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800443c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800443e:	4b04      	ldr	r3, [pc, #16]	; (8004450 <SystemInit+0xec>)
 8004440:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004444:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004446:	bf00      	nop
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	e000ed00 	.word	0xe000ed00
 8004454:	52002000 	.word	0x52002000
 8004458:	58024400 	.word	0x58024400
 800445c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004460:	02020200 	.word	0x02020200
 8004464:	01ff0000 	.word	0x01ff0000
 8004468:	01010280 	.word	0x01010280
 800446c:	5c001000 	.word	0x5c001000
 8004470:	ffff0000 	.word	0xffff0000
 8004474:	51008108 	.word	0x51008108
 8004478:	52004000 	.word	0x52004000

0800447c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800447c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044b4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004480:	f7ff ff70 	bl	8004364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004484:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004486:	e003      	b.n	8004490 <LoopCopyDataInit>

08004488 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800448a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800448c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800448e:	3104      	adds	r1, #4

08004490 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004490:	480a      	ldr	r0, [pc, #40]	; (80044bc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8004494:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004496:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004498:	d3f6      	bcc.n	8004488 <CopyDataInit>
  ldr  r2, =_sbss
 800449a:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800449c:	e002      	b.n	80044a4 <LoopFillZerobss>

0800449e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800449e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80044a0:	f842 3b04 	str.w	r3, [r2], #4

080044a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80044a4:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80044a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80044a8:	d3f9      	bcc.n	800449e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044aa:	f014 ffb9 	bl	8019420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044ae:	f7fd fd0d 	bl	8001ecc <main>
  bx  lr    
 80044b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80044b4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80044b8:	0801b0e8 	.word	0x0801b0e8
  ldr  r0, =_sdata
 80044bc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80044c0:	240001dc 	.word	0x240001dc
  ldr  r2, =_sbss
 80044c4:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 80044c8:	240024b0 	.word	0x240024b0

080044cc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044cc:	e7fe      	b.n	80044cc <ADC3_IRQHandler>
	...

080044d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044d6:	2003      	movs	r0, #3
 80044d8:	f000 f98a 	bl	80047f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044dc:	f005 ff1c 	bl	800a318 <HAL_RCC_GetSysClockFreq>
 80044e0:	4601      	mov	r1, r0
 80044e2:	4b15      	ldr	r3, [pc, #84]	; (8004538 <HAL_Init+0x68>)
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	0a1b      	lsrs	r3, r3, #8
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	4a13      	ldr	r2, [pc, #76]	; (800453c <HAL_Init+0x6c>)
 80044ee:	5cd3      	ldrb	r3, [r2, r3]
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	fa21 f303 	lsr.w	r3, r1, r3
 80044f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044fa:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <HAL_Init+0x68>)
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	4a0e      	ldr	r2, [pc, #56]	; (800453c <HAL_Init+0x6c>)
 8004504:	5cd3      	ldrb	r3, [r2, r3]
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
 8004510:	4a0b      	ldr	r2, [pc, #44]	; (8004540 <HAL_Init+0x70>)
 8004512:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004514:	4a0b      	ldr	r2, [pc, #44]	; (8004544 <HAL_Init+0x74>)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800451a:	2000      	movs	r0, #0
 800451c:	f000 f814 	bl	8004548 <HAL_InitTick>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e002      	b.n	8004530 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800452a:	f7ff fbbf 	bl	8003cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	58024400 	.word	0x58024400
 800453c:	0801af48 	.word	0x0801af48
 8004540:	24000014 	.word	0x24000014
 8004544:	24000010 	.word	0x24000010

08004548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004550:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <HAL_InitTick+0x60>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e021      	b.n	80045a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800455c:	4b13      	ldr	r3, [pc, #76]	; (80045ac <HAL_InitTick+0x64>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <HAL_InitTick+0x60>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	4619      	mov	r1, r3
 8004566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800456a:	fbb3 f3f1 	udiv	r3, r3, r1
 800456e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f96f 	bl	8004856 <HAL_SYSTICK_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e00e      	b.n	80045a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b0f      	cmp	r3, #15
 8004586:	d80a      	bhi.n	800459e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004588:	2200      	movs	r2, #0
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	f000 f939 	bl	8004806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004594:	4a06      	ldr	r2, [pc, #24]	; (80045b0 <HAL_InitTick+0x68>)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	e000      	b.n	80045a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	2400001c 	.word	0x2400001c
 80045ac:	24000010 	.word	0x24000010
 80045b0:	24000018 	.word	0x24000018

080045b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <HAL_IncTick+0x20>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	461a      	mov	r2, r3
 80045be:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <HAL_IncTick+0x24>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4413      	add	r3, r2
 80045c4:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <HAL_IncTick+0x24>)
 80045c6:	6013      	str	r3, [r2, #0]
}
 80045c8:	bf00      	nop
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	2400001c 	.word	0x2400001c
 80045d8:	24001768 	.word	0x24001768

080045dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return uwTick;
 80045e0:	4b03      	ldr	r3, [pc, #12]	; (80045f0 <HAL_GetTick+0x14>)
 80045e2:	681b      	ldr	r3, [r3, #0]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	24001768 	.word	0x24001768

080045f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045fc:	f7ff ffee 	bl	80045dc <HAL_GetTick>
 8004600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460c:	d005      	beq.n	800461a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800460e:	4b09      	ldr	r3, [pc, #36]	; (8004634 <HAL_Delay+0x40>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800461a:	bf00      	nop
 800461c:	f7ff ffde 	bl	80045dc <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	429a      	cmp	r2, r3
 800462a:	d8f7      	bhi.n	800461c <HAL_Delay+0x28>
  {
  }
}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	2400001c 	.word	0x2400001c

08004638 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800463c:	4b03      	ldr	r3, [pc, #12]	; (800464c <HAL_GetREVID+0x14>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	0c1b      	lsrs	r3, r3, #16
}
 8004642:	4618      	mov	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	5c001000 	.word	0x5c001000

08004650 <__NVIC_SetPriorityGrouping>:
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <__NVIC_SetPriorityGrouping+0x40>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800466c:	4013      	ands	r3, r2
 800466e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <__NVIC_SetPriorityGrouping+0x44>)
 800467a:	4313      	orrs	r3, r2
 800467c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800467e:	4a04      	ldr	r2, [pc, #16]	; (8004690 <__NVIC_SetPriorityGrouping+0x40>)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	60d3      	str	r3, [r2, #12]
}
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	e000ed00 	.word	0xe000ed00
 8004694:	05fa0000 	.word	0x05fa0000

08004698 <__NVIC_GetPriorityGrouping>:
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <__NVIC_GetPriorityGrouping+0x18>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	f003 0307 	and.w	r3, r3, #7
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <__NVIC_EnableIRQ>:
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	db0b      	blt.n	80046de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	f003 021f 	and.w	r2, r3, #31
 80046cc:	4907      	ldr	r1, [pc, #28]	; (80046ec <__NVIC_EnableIRQ+0x38>)
 80046ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	2001      	movs	r0, #1
 80046d6:	fa00 f202 	lsl.w	r2, r0, r2
 80046da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	e000e100 	.word	0xe000e100

080046f0 <__NVIC_SetPriority>:
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	6039      	str	r1, [r7, #0]
 80046fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004700:	2b00      	cmp	r3, #0
 8004702:	db0a      	blt.n	800471a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	b2da      	uxtb	r2, r3
 8004708:	490c      	ldr	r1, [pc, #48]	; (800473c <__NVIC_SetPriority+0x4c>)
 800470a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800470e:	0112      	lsls	r2, r2, #4
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	440b      	add	r3, r1
 8004714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004718:	e00a      	b.n	8004730 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4908      	ldr	r1, [pc, #32]	; (8004740 <__NVIC_SetPriority+0x50>)
 8004720:	88fb      	ldrh	r3, [r7, #6]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	3b04      	subs	r3, #4
 8004728:	0112      	lsls	r2, r2, #4
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	440b      	add	r3, r1
 800472e:	761a      	strb	r2, [r3, #24]
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	e000e100 	.word	0xe000e100
 8004740:	e000ed00 	.word	0xe000ed00

08004744 <NVIC_EncodePriority>:
{
 8004744:	b480      	push	{r7}
 8004746:	b089      	sub	sp, #36	; 0x24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f1c3 0307 	rsb	r3, r3, #7
 800475e:	2b04      	cmp	r3, #4
 8004760:	bf28      	it	cs
 8004762:	2304      	movcs	r3, #4
 8004764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3304      	adds	r3, #4
 800476a:	2b06      	cmp	r3, #6
 800476c:	d902      	bls.n	8004774 <NVIC_EncodePriority+0x30>
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3b03      	subs	r3, #3
 8004772:	e000      	b.n	8004776 <NVIC_EncodePriority+0x32>
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004778:	f04f 32ff 	mov.w	r2, #4294967295
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43da      	mvns	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	401a      	ands	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800478c:	f04f 31ff 	mov.w	r1, #4294967295
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	fa01 f303 	lsl.w	r3, r1, r3
 8004796:	43d9      	mvns	r1, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800479c:	4313      	orrs	r3, r2
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3724      	adds	r7, #36	; 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
	...

080047ac <SysTick_Config>:
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047bc:	d301      	bcc.n	80047c2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80047be:	2301      	movs	r3, #1
 80047c0:	e00f      	b.n	80047e2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047c2:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <SysTick_Config+0x40>)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047ca:	210f      	movs	r1, #15
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295
 80047d0:	f7ff ff8e 	bl	80046f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <SysTick_Config+0x40>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047da:	4b04      	ldr	r3, [pc, #16]	; (80047ec <SysTick_Config+0x40>)
 80047dc:	2207      	movs	r2, #7
 80047de:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	e000e010 	.word	0xe000e010

080047f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff ff29 	bl	8004650 <__NVIC_SetPriorityGrouping>
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b086      	sub	sp, #24
 800480a:	af00      	add	r7, sp, #0
 800480c:	4603      	mov	r3, r0
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
 8004812:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004814:	f7ff ff40 	bl	8004698 <__NVIC_GetPriorityGrouping>
 8004818:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	6978      	ldr	r0, [r7, #20]
 8004820:	f7ff ff90 	bl	8004744 <NVIC_EncodePriority>
 8004824:	4602      	mov	r2, r0
 8004826:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800482a:	4611      	mov	r1, r2
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff ff5f 	bl	80046f0 <__NVIC_SetPriority>
}
 8004832:	bf00      	nop
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	4603      	mov	r3, r0
 8004842:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004844:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff ff33 	bl	80046b4 <__NVIC_EnableIRQ>
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7ff ffa4 	bl	80047ac <SysTick_Config>
 8004864:	4603      	mov	r3, r0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004878:	f7ff feb0 	bl	80045dc <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e316      	b.n	8004eb6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a66      	ldr	r2, [pc, #408]	; (8004a28 <HAL_DMA_Init+0x1b8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d04a      	beq.n	8004928 <HAL_DMA_Init+0xb8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a65      	ldr	r2, [pc, #404]	; (8004a2c <HAL_DMA_Init+0x1bc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d045      	beq.n	8004928 <HAL_DMA_Init+0xb8>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a63      	ldr	r2, [pc, #396]	; (8004a30 <HAL_DMA_Init+0x1c0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d040      	beq.n	8004928 <HAL_DMA_Init+0xb8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a62      	ldr	r2, [pc, #392]	; (8004a34 <HAL_DMA_Init+0x1c4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d03b      	beq.n	8004928 <HAL_DMA_Init+0xb8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a60      	ldr	r2, [pc, #384]	; (8004a38 <HAL_DMA_Init+0x1c8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d036      	beq.n	8004928 <HAL_DMA_Init+0xb8>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a5f      	ldr	r2, [pc, #380]	; (8004a3c <HAL_DMA_Init+0x1cc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d031      	beq.n	8004928 <HAL_DMA_Init+0xb8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a5d      	ldr	r2, [pc, #372]	; (8004a40 <HAL_DMA_Init+0x1d0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d02c      	beq.n	8004928 <HAL_DMA_Init+0xb8>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a5c      	ldr	r2, [pc, #368]	; (8004a44 <HAL_DMA_Init+0x1d4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d027      	beq.n	8004928 <HAL_DMA_Init+0xb8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a5a      	ldr	r2, [pc, #360]	; (8004a48 <HAL_DMA_Init+0x1d8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d022      	beq.n	8004928 <HAL_DMA_Init+0xb8>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a59      	ldr	r2, [pc, #356]	; (8004a4c <HAL_DMA_Init+0x1dc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d01d      	beq.n	8004928 <HAL_DMA_Init+0xb8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a57      	ldr	r2, [pc, #348]	; (8004a50 <HAL_DMA_Init+0x1e0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d018      	beq.n	8004928 <HAL_DMA_Init+0xb8>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a56      	ldr	r2, [pc, #344]	; (8004a54 <HAL_DMA_Init+0x1e4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <HAL_DMA_Init+0xb8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a54      	ldr	r2, [pc, #336]	; (8004a58 <HAL_DMA_Init+0x1e8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00e      	beq.n	8004928 <HAL_DMA_Init+0xb8>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a53      	ldr	r2, [pc, #332]	; (8004a5c <HAL_DMA_Init+0x1ec>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d009      	beq.n	8004928 <HAL_DMA_Init+0xb8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a51      	ldr	r2, [pc, #324]	; (8004a60 <HAL_DMA_Init+0x1f0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_DMA_Init+0xb8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a50      	ldr	r2, [pc, #320]	; (8004a64 <HAL_DMA_Init+0x1f4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d101      	bne.n	800492c <HAL_DMA_Init+0xbc>
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <HAL_DMA_Init+0xbe>
 800492c:	2300      	movs	r3, #0
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 813b 	beq.w	8004baa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a37      	ldr	r2, [pc, #220]	; (8004a28 <HAL_DMA_Init+0x1b8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d04a      	beq.n	80049e4 <HAL_DMA_Init+0x174>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a36      	ldr	r2, [pc, #216]	; (8004a2c <HAL_DMA_Init+0x1bc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d045      	beq.n	80049e4 <HAL_DMA_Init+0x174>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a34      	ldr	r2, [pc, #208]	; (8004a30 <HAL_DMA_Init+0x1c0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d040      	beq.n	80049e4 <HAL_DMA_Init+0x174>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a33      	ldr	r2, [pc, #204]	; (8004a34 <HAL_DMA_Init+0x1c4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d03b      	beq.n	80049e4 <HAL_DMA_Init+0x174>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a31      	ldr	r2, [pc, #196]	; (8004a38 <HAL_DMA_Init+0x1c8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d036      	beq.n	80049e4 <HAL_DMA_Init+0x174>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a30      	ldr	r2, [pc, #192]	; (8004a3c <HAL_DMA_Init+0x1cc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d031      	beq.n	80049e4 <HAL_DMA_Init+0x174>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a2e      	ldr	r2, [pc, #184]	; (8004a40 <HAL_DMA_Init+0x1d0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d02c      	beq.n	80049e4 <HAL_DMA_Init+0x174>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a2d      	ldr	r2, [pc, #180]	; (8004a44 <HAL_DMA_Init+0x1d4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d027      	beq.n	80049e4 <HAL_DMA_Init+0x174>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a2b      	ldr	r2, [pc, #172]	; (8004a48 <HAL_DMA_Init+0x1d8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d022      	beq.n	80049e4 <HAL_DMA_Init+0x174>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a2a      	ldr	r2, [pc, #168]	; (8004a4c <HAL_DMA_Init+0x1dc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d01d      	beq.n	80049e4 <HAL_DMA_Init+0x174>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a28      	ldr	r2, [pc, #160]	; (8004a50 <HAL_DMA_Init+0x1e0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d018      	beq.n	80049e4 <HAL_DMA_Init+0x174>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a27      	ldr	r2, [pc, #156]	; (8004a54 <HAL_DMA_Init+0x1e4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d013      	beq.n	80049e4 <HAL_DMA_Init+0x174>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a25      	ldr	r2, [pc, #148]	; (8004a58 <HAL_DMA_Init+0x1e8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00e      	beq.n	80049e4 <HAL_DMA_Init+0x174>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a24      	ldr	r2, [pc, #144]	; (8004a5c <HAL_DMA_Init+0x1ec>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d009      	beq.n	80049e4 <HAL_DMA_Init+0x174>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a22      	ldr	r2, [pc, #136]	; (8004a60 <HAL_DMA_Init+0x1f0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d004      	beq.n	80049e4 <HAL_DMA_Init+0x174>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a21      	ldr	r2, [pc, #132]	; (8004a64 <HAL_DMA_Init+0x1f4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d108      	bne.n	80049f6 <HAL_DMA_Init+0x186>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0201 	bic.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e007      	b.n	8004a06 <HAL_DMA_Init+0x196>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0201 	bic.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a06:	e02f      	b.n	8004a68 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a08:	f7ff fde8 	bl	80045dc <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b05      	cmp	r3, #5
 8004a14:	d928      	bls.n	8004a68 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2203      	movs	r2, #3
 8004a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e246      	b.n	8004eb6 <HAL_DMA_Init+0x646>
 8004a28:	40020010 	.word	0x40020010
 8004a2c:	40020028 	.word	0x40020028
 8004a30:	40020040 	.word	0x40020040
 8004a34:	40020058 	.word	0x40020058
 8004a38:	40020070 	.word	0x40020070
 8004a3c:	40020088 	.word	0x40020088
 8004a40:	400200a0 	.word	0x400200a0
 8004a44:	400200b8 	.word	0x400200b8
 8004a48:	40020410 	.word	0x40020410
 8004a4c:	40020428 	.word	0x40020428
 8004a50:	40020440 	.word	0x40020440
 8004a54:	40020458 	.word	0x40020458
 8004a58:	40020470 	.word	0x40020470
 8004a5c:	40020488 	.word	0x40020488
 8004a60:	400204a0 	.word	0x400204a0
 8004a64:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1c8      	bne.n	8004a08 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4b83      	ldr	r3, [pc, #524]	; (8004c90 <HAL_DMA_Init+0x420>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004a8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d107      	bne.n	8004acc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004acc:	4b71      	ldr	r3, [pc, #452]	; (8004c94 <HAL_DMA_Init+0x424>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4b71      	ldr	r3, [pc, #452]	; (8004c98 <HAL_DMA_Init+0x428>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ad8:	d328      	bcc.n	8004b2c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b28      	cmp	r3, #40	; 0x28
 8004ae0:	d903      	bls.n	8004aea <HAL_DMA_Init+0x27a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ae8:	d917      	bls.n	8004b1a <HAL_DMA_Init+0x2aa>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b3e      	cmp	r3, #62	; 0x3e
 8004af0:	d903      	bls.n	8004afa <HAL_DMA_Init+0x28a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b42      	cmp	r3, #66	; 0x42
 8004af8:	d90f      	bls.n	8004b1a <HAL_DMA_Init+0x2aa>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b46      	cmp	r3, #70	; 0x46
 8004b00:	d903      	bls.n	8004b0a <HAL_DMA_Init+0x29a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b48      	cmp	r3, #72	; 0x48
 8004b08:	d907      	bls.n	8004b1a <HAL_DMA_Init+0x2aa>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b4e      	cmp	r3, #78	; 0x4e
 8004b10:	d905      	bls.n	8004b1e <HAL_DMA_Init+0x2ae>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b52      	cmp	r3, #82	; 0x52
 8004b18:	d801      	bhi.n	8004b1e <HAL_DMA_Init+0x2ae>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <HAL_DMA_Init+0x2b0>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b2a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f023 0307 	bic.w	r3, r3, #7
 8004b42:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d117      	bne.n	8004b86 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00e      	beq.n	8004b86 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f001 fdcf 	bl	800670c <DMA_CheckFifoParam>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2240      	movs	r2, #64	; 0x40
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e197      	b.n	8004eb6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f001 fd0a 	bl	80065a8 <DMA_CalcBaseAndBitshift>
 8004b94:	4603      	mov	r3, r0
 8004b96:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	223f      	movs	r2, #63	; 0x3f
 8004ba2:	409a      	lsls	r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	609a      	str	r2, [r3, #8]
 8004ba8:	e0cd      	b.n	8004d46 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a3b      	ldr	r2, [pc, #236]	; (8004c9c <HAL_DMA_Init+0x42c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d022      	beq.n	8004bfa <HAL_DMA_Init+0x38a>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a39      	ldr	r2, [pc, #228]	; (8004ca0 <HAL_DMA_Init+0x430>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01d      	beq.n	8004bfa <HAL_DMA_Init+0x38a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a38      	ldr	r2, [pc, #224]	; (8004ca4 <HAL_DMA_Init+0x434>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d018      	beq.n	8004bfa <HAL_DMA_Init+0x38a>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a36      	ldr	r2, [pc, #216]	; (8004ca8 <HAL_DMA_Init+0x438>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_DMA_Init+0x38a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a35      	ldr	r2, [pc, #212]	; (8004cac <HAL_DMA_Init+0x43c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00e      	beq.n	8004bfa <HAL_DMA_Init+0x38a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a33      	ldr	r2, [pc, #204]	; (8004cb0 <HAL_DMA_Init+0x440>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d009      	beq.n	8004bfa <HAL_DMA_Init+0x38a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a32      	ldr	r2, [pc, #200]	; (8004cb4 <HAL_DMA_Init+0x444>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_DMA_Init+0x38a>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a30      	ldr	r2, [pc, #192]	; (8004cb8 <HAL_DMA_Init+0x448>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d101      	bne.n	8004bfe <HAL_DMA_Init+0x38e>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <HAL_DMA_Init+0x390>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8097 	beq.w	8004d34 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <HAL_DMA_Init+0x42c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d021      	beq.n	8004c54 <HAL_DMA_Init+0x3e4>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a22      	ldr	r2, [pc, #136]	; (8004ca0 <HAL_DMA_Init+0x430>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d01c      	beq.n	8004c54 <HAL_DMA_Init+0x3e4>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a21      	ldr	r2, [pc, #132]	; (8004ca4 <HAL_DMA_Init+0x434>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d017      	beq.n	8004c54 <HAL_DMA_Init+0x3e4>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1f      	ldr	r2, [pc, #124]	; (8004ca8 <HAL_DMA_Init+0x438>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d012      	beq.n	8004c54 <HAL_DMA_Init+0x3e4>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1e      	ldr	r2, [pc, #120]	; (8004cac <HAL_DMA_Init+0x43c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00d      	beq.n	8004c54 <HAL_DMA_Init+0x3e4>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1c      	ldr	r2, [pc, #112]	; (8004cb0 <HAL_DMA_Init+0x440>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d008      	beq.n	8004c54 <HAL_DMA_Init+0x3e4>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1b      	ldr	r2, [pc, #108]	; (8004cb4 <HAL_DMA_Init+0x444>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d003      	beq.n	8004c54 <HAL_DMA_Init+0x3e4>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a19      	ldr	r2, [pc, #100]	; (8004cb8 <HAL_DMA_Init+0x448>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4b12      	ldr	r3, [pc, #72]	; (8004cbc <HAL_DMA_Init+0x44c>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b40      	cmp	r3, #64	; 0x40
 8004c7c:	d020      	beq.n	8004cc0 <HAL_DMA_Init+0x450>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b80      	cmp	r3, #128	; 0x80
 8004c84:	d102      	bne.n	8004c8c <HAL_DMA_Init+0x41c>
 8004c86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c8a:	e01a      	b.n	8004cc2 <HAL_DMA_Init+0x452>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e018      	b.n	8004cc2 <HAL_DMA_Init+0x452>
 8004c90:	fe10803f 	.word	0xfe10803f
 8004c94:	5c001000 	.word	0x5c001000
 8004c98:	ffff0000 	.word	0xffff0000
 8004c9c:	58025408 	.word	0x58025408
 8004ca0:	5802541c 	.word	0x5802541c
 8004ca4:	58025430 	.word	0x58025430
 8004ca8:	58025444 	.word	0x58025444
 8004cac:	58025458 	.word	0x58025458
 8004cb0:	5802546c 	.word	0x5802546c
 8004cb4:	58025480 	.word	0x58025480
 8004cb8:	58025494 	.word	0x58025494
 8004cbc:	fffe000f 	.word	0xfffe000f
 8004cc0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	68d2      	ldr	r2, [r2, #12]
 8004cc6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ce0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ce8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cf0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	4b6e      	ldr	r3, [pc, #440]	; (8004ec0 <HAL_DMA_Init+0x650>)
 8004d08:	4413      	add	r3, r2
 8004d0a:	4a6e      	ldr	r2, [pc, #440]	; (8004ec4 <HAL_DMA_Init+0x654>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	009a      	lsls	r2, r3, #2
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f001 fc45 	bl	80065a8 <DMA_CalcBaseAndBitshift>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	409a      	lsls	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	605a      	str	r2, [r3, #4]
 8004d32:	e008      	b.n	8004d46 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2240      	movs	r2, #64	; 0x40
 8004d38:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e0b7      	b.n	8004eb6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a5f      	ldr	r2, [pc, #380]	; (8004ec8 <HAL_DMA_Init+0x658>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d072      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a5d      	ldr	r2, [pc, #372]	; (8004ecc <HAL_DMA_Init+0x65c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d06d      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a5c      	ldr	r2, [pc, #368]	; (8004ed0 <HAL_DMA_Init+0x660>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d068      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a5a      	ldr	r2, [pc, #360]	; (8004ed4 <HAL_DMA_Init+0x664>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d063      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a59      	ldr	r2, [pc, #356]	; (8004ed8 <HAL_DMA_Init+0x668>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d05e      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a57      	ldr	r2, [pc, #348]	; (8004edc <HAL_DMA_Init+0x66c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d059      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a56      	ldr	r2, [pc, #344]	; (8004ee0 <HAL_DMA_Init+0x670>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d054      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a54      	ldr	r2, [pc, #336]	; (8004ee4 <HAL_DMA_Init+0x674>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d04f      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a53      	ldr	r2, [pc, #332]	; (8004ee8 <HAL_DMA_Init+0x678>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d04a      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a51      	ldr	r2, [pc, #324]	; (8004eec <HAL_DMA_Init+0x67c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d045      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a50      	ldr	r2, [pc, #320]	; (8004ef0 <HAL_DMA_Init+0x680>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d040      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a4e      	ldr	r2, [pc, #312]	; (8004ef4 <HAL_DMA_Init+0x684>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d03b      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a4d      	ldr	r2, [pc, #308]	; (8004ef8 <HAL_DMA_Init+0x688>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d036      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a4b      	ldr	r2, [pc, #300]	; (8004efc <HAL_DMA_Init+0x68c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d031      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a4a      	ldr	r2, [pc, #296]	; (8004f00 <HAL_DMA_Init+0x690>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d02c      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a48      	ldr	r2, [pc, #288]	; (8004f04 <HAL_DMA_Init+0x694>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d027      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a47      	ldr	r2, [pc, #284]	; (8004f08 <HAL_DMA_Init+0x698>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d022      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a45      	ldr	r2, [pc, #276]	; (8004f0c <HAL_DMA_Init+0x69c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01d      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a44      	ldr	r2, [pc, #272]	; (8004f10 <HAL_DMA_Init+0x6a0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d018      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a42      	ldr	r2, [pc, #264]	; (8004f14 <HAL_DMA_Init+0x6a4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a41      	ldr	r2, [pc, #260]	; (8004f18 <HAL_DMA_Init+0x6a8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00e      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a3f      	ldr	r2, [pc, #252]	; (8004f1c <HAL_DMA_Init+0x6ac>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d009      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a3e      	ldr	r2, [pc, #248]	; (8004f20 <HAL_DMA_Init+0x6b0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <HAL_DMA_Init+0x5c6>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a3c      	ldr	r2, [pc, #240]	; (8004f24 <HAL_DMA_Init+0x6b4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d101      	bne.n	8004e3a <HAL_DMA_Init+0x5ca>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <HAL_DMA_Init+0x5cc>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d032      	beq.n	8004ea6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f001 fcdf 	bl	8006804 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	2b80      	cmp	r3, #128	; 0x80
 8004e4c:	d102      	bne.n	8004e54 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e68:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d010      	beq.n	8004e94 <HAL_DMA_Init+0x624>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d80c      	bhi.n	8004e94 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f001 fd5c 	bl	8006938 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	e008      	b.n	8004ea6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	a7fdabf8 	.word	0xa7fdabf8
 8004ec4:	cccccccd 	.word	0xcccccccd
 8004ec8:	40020010 	.word	0x40020010
 8004ecc:	40020028 	.word	0x40020028
 8004ed0:	40020040 	.word	0x40020040
 8004ed4:	40020058 	.word	0x40020058
 8004ed8:	40020070 	.word	0x40020070
 8004edc:	40020088 	.word	0x40020088
 8004ee0:	400200a0 	.word	0x400200a0
 8004ee4:	400200b8 	.word	0x400200b8
 8004ee8:	40020410 	.word	0x40020410
 8004eec:	40020428 	.word	0x40020428
 8004ef0:	40020440 	.word	0x40020440
 8004ef4:	40020458 	.word	0x40020458
 8004ef8:	40020470 	.word	0x40020470
 8004efc:	40020488 	.word	0x40020488
 8004f00:	400204a0 	.word	0x400204a0
 8004f04:	400204b8 	.word	0x400204b8
 8004f08:	58025408 	.word	0x58025408
 8004f0c:	5802541c 	.word	0x5802541c
 8004f10:	58025430 	.word	0x58025430
 8004f14:	58025444 	.word	0x58025444
 8004f18:	58025458 	.word	0x58025458
 8004f1c:	5802546c 	.word	0x5802546c
 8004f20:	58025480 	.word	0x58025480
 8004f24:	58025494 	.word	0x58025494

08004f28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e226      	b.n	8005392 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <HAL_DMA_Start_IT+0x2a>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e21f      	b.n	8005392 <HAL_DMA_Start_IT+0x46a>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	f040 820a 	bne.w	800537c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a68      	ldr	r2, [pc, #416]	; (800511c <HAL_DMA_Start_IT+0x1f4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d04a      	beq.n	8005016 <HAL_DMA_Start_IT+0xee>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a66      	ldr	r2, [pc, #408]	; (8005120 <HAL_DMA_Start_IT+0x1f8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d045      	beq.n	8005016 <HAL_DMA_Start_IT+0xee>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a65      	ldr	r2, [pc, #404]	; (8005124 <HAL_DMA_Start_IT+0x1fc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d040      	beq.n	8005016 <HAL_DMA_Start_IT+0xee>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a63      	ldr	r2, [pc, #396]	; (8005128 <HAL_DMA_Start_IT+0x200>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d03b      	beq.n	8005016 <HAL_DMA_Start_IT+0xee>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a62      	ldr	r2, [pc, #392]	; (800512c <HAL_DMA_Start_IT+0x204>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d036      	beq.n	8005016 <HAL_DMA_Start_IT+0xee>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a60      	ldr	r2, [pc, #384]	; (8005130 <HAL_DMA_Start_IT+0x208>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d031      	beq.n	8005016 <HAL_DMA_Start_IT+0xee>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a5f      	ldr	r2, [pc, #380]	; (8005134 <HAL_DMA_Start_IT+0x20c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d02c      	beq.n	8005016 <HAL_DMA_Start_IT+0xee>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a5d      	ldr	r2, [pc, #372]	; (8005138 <HAL_DMA_Start_IT+0x210>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d027      	beq.n	8005016 <HAL_DMA_Start_IT+0xee>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a5c      	ldr	r2, [pc, #368]	; (800513c <HAL_DMA_Start_IT+0x214>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d022      	beq.n	8005016 <HAL_DMA_Start_IT+0xee>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a5a      	ldr	r2, [pc, #360]	; (8005140 <HAL_DMA_Start_IT+0x218>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01d      	beq.n	8005016 <HAL_DMA_Start_IT+0xee>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a59      	ldr	r2, [pc, #356]	; (8005144 <HAL_DMA_Start_IT+0x21c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d018      	beq.n	8005016 <HAL_DMA_Start_IT+0xee>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a57      	ldr	r2, [pc, #348]	; (8005148 <HAL_DMA_Start_IT+0x220>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <HAL_DMA_Start_IT+0xee>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a56      	ldr	r2, [pc, #344]	; (800514c <HAL_DMA_Start_IT+0x224>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00e      	beq.n	8005016 <HAL_DMA_Start_IT+0xee>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a54      	ldr	r2, [pc, #336]	; (8005150 <HAL_DMA_Start_IT+0x228>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_DMA_Start_IT+0xee>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a53      	ldr	r2, [pc, #332]	; (8005154 <HAL_DMA_Start_IT+0x22c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_DMA_Start_IT+0xee>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a51      	ldr	r2, [pc, #324]	; (8005158 <HAL_DMA_Start_IT+0x230>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d108      	bne.n	8005028 <HAL_DMA_Start_IT+0x100>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0201 	bic.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	e007      	b.n	8005038 <HAL_DMA_Start_IT+0x110>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0201 	bic.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f001 f906 	bl	8006250 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a34      	ldr	r2, [pc, #208]	; (800511c <HAL_DMA_Start_IT+0x1f4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d04a      	beq.n	80050e4 <HAL_DMA_Start_IT+0x1bc>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a33      	ldr	r2, [pc, #204]	; (8005120 <HAL_DMA_Start_IT+0x1f8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d045      	beq.n	80050e4 <HAL_DMA_Start_IT+0x1bc>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a31      	ldr	r2, [pc, #196]	; (8005124 <HAL_DMA_Start_IT+0x1fc>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d040      	beq.n	80050e4 <HAL_DMA_Start_IT+0x1bc>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a30      	ldr	r2, [pc, #192]	; (8005128 <HAL_DMA_Start_IT+0x200>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d03b      	beq.n	80050e4 <HAL_DMA_Start_IT+0x1bc>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a2e      	ldr	r2, [pc, #184]	; (800512c <HAL_DMA_Start_IT+0x204>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d036      	beq.n	80050e4 <HAL_DMA_Start_IT+0x1bc>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a2d      	ldr	r2, [pc, #180]	; (8005130 <HAL_DMA_Start_IT+0x208>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d031      	beq.n	80050e4 <HAL_DMA_Start_IT+0x1bc>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a2b      	ldr	r2, [pc, #172]	; (8005134 <HAL_DMA_Start_IT+0x20c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d02c      	beq.n	80050e4 <HAL_DMA_Start_IT+0x1bc>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a2a      	ldr	r2, [pc, #168]	; (8005138 <HAL_DMA_Start_IT+0x210>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d027      	beq.n	80050e4 <HAL_DMA_Start_IT+0x1bc>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a28      	ldr	r2, [pc, #160]	; (800513c <HAL_DMA_Start_IT+0x214>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d022      	beq.n	80050e4 <HAL_DMA_Start_IT+0x1bc>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a27      	ldr	r2, [pc, #156]	; (8005140 <HAL_DMA_Start_IT+0x218>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d01d      	beq.n	80050e4 <HAL_DMA_Start_IT+0x1bc>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a25      	ldr	r2, [pc, #148]	; (8005144 <HAL_DMA_Start_IT+0x21c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d018      	beq.n	80050e4 <HAL_DMA_Start_IT+0x1bc>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a24      	ldr	r2, [pc, #144]	; (8005148 <HAL_DMA_Start_IT+0x220>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d013      	beq.n	80050e4 <HAL_DMA_Start_IT+0x1bc>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a22      	ldr	r2, [pc, #136]	; (800514c <HAL_DMA_Start_IT+0x224>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00e      	beq.n	80050e4 <HAL_DMA_Start_IT+0x1bc>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a21      	ldr	r2, [pc, #132]	; (8005150 <HAL_DMA_Start_IT+0x228>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d009      	beq.n	80050e4 <HAL_DMA_Start_IT+0x1bc>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1f      	ldr	r2, [pc, #124]	; (8005154 <HAL_DMA_Start_IT+0x22c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <HAL_DMA_Start_IT+0x1bc>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a1e      	ldr	r2, [pc, #120]	; (8005158 <HAL_DMA_Start_IT+0x230>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d101      	bne.n	80050e8 <HAL_DMA_Start_IT+0x1c0>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <HAL_DMA_Start_IT+0x1c2>
 80050e8:	2300      	movs	r3, #0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d036      	beq.n	800515c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f023 021e 	bic.w	r2, r3, #30
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0216 	orr.w	r2, r2, #22
 8005100:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d03e      	beq.n	8005188 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0208 	orr.w	r2, r2, #8
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	e035      	b.n	8005188 <HAL_DMA_Start_IT+0x260>
 800511c:	40020010 	.word	0x40020010
 8005120:	40020028 	.word	0x40020028
 8005124:	40020040 	.word	0x40020040
 8005128:	40020058 	.word	0x40020058
 800512c:	40020070 	.word	0x40020070
 8005130:	40020088 	.word	0x40020088
 8005134:	400200a0 	.word	0x400200a0
 8005138:	400200b8 	.word	0x400200b8
 800513c:	40020410 	.word	0x40020410
 8005140:	40020428 	.word	0x40020428
 8005144:	40020440 	.word	0x40020440
 8005148:	40020458 	.word	0x40020458
 800514c:	40020470 	.word	0x40020470
 8005150:	40020488 	.word	0x40020488
 8005154:	400204a0 	.word	0x400204a0
 8005158:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f023 020e 	bic.w	r2, r3, #14
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 020a 	orr.w	r2, r2, #10
 800516e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0204 	orr.w	r2, r2, #4
 8005186:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a83      	ldr	r2, [pc, #524]	; (800539c <HAL_DMA_Start_IT+0x474>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d072      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a82      	ldr	r2, [pc, #520]	; (80053a0 <HAL_DMA_Start_IT+0x478>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d06d      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a80      	ldr	r2, [pc, #512]	; (80053a4 <HAL_DMA_Start_IT+0x47c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d068      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a7f      	ldr	r2, [pc, #508]	; (80053a8 <HAL_DMA_Start_IT+0x480>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d063      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a7d      	ldr	r2, [pc, #500]	; (80053ac <HAL_DMA_Start_IT+0x484>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d05e      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a7c      	ldr	r2, [pc, #496]	; (80053b0 <HAL_DMA_Start_IT+0x488>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d059      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a7a      	ldr	r2, [pc, #488]	; (80053b4 <HAL_DMA_Start_IT+0x48c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d054      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a79      	ldr	r2, [pc, #484]	; (80053b8 <HAL_DMA_Start_IT+0x490>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d04f      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a77      	ldr	r2, [pc, #476]	; (80053bc <HAL_DMA_Start_IT+0x494>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d04a      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a76      	ldr	r2, [pc, #472]	; (80053c0 <HAL_DMA_Start_IT+0x498>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d045      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a74      	ldr	r2, [pc, #464]	; (80053c4 <HAL_DMA_Start_IT+0x49c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d040      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a73      	ldr	r2, [pc, #460]	; (80053c8 <HAL_DMA_Start_IT+0x4a0>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d03b      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a71      	ldr	r2, [pc, #452]	; (80053cc <HAL_DMA_Start_IT+0x4a4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d036      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a70      	ldr	r2, [pc, #448]	; (80053d0 <HAL_DMA_Start_IT+0x4a8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d031      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a6e      	ldr	r2, [pc, #440]	; (80053d4 <HAL_DMA_Start_IT+0x4ac>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d02c      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a6d      	ldr	r2, [pc, #436]	; (80053d8 <HAL_DMA_Start_IT+0x4b0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d027      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a6b      	ldr	r2, [pc, #428]	; (80053dc <HAL_DMA_Start_IT+0x4b4>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d022      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a6a      	ldr	r2, [pc, #424]	; (80053e0 <HAL_DMA_Start_IT+0x4b8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d01d      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a68      	ldr	r2, [pc, #416]	; (80053e4 <HAL_DMA_Start_IT+0x4bc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d018      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a67      	ldr	r2, [pc, #412]	; (80053e8 <HAL_DMA_Start_IT+0x4c0>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d013      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a65      	ldr	r2, [pc, #404]	; (80053ec <HAL_DMA_Start_IT+0x4c4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00e      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a64      	ldr	r2, [pc, #400]	; (80053f0 <HAL_DMA_Start_IT+0x4c8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d009      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a62      	ldr	r2, [pc, #392]	; (80053f4 <HAL_DMA_Start_IT+0x4cc>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d004      	beq.n	8005278 <HAL_DMA_Start_IT+0x350>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a61      	ldr	r2, [pc, #388]	; (80053f8 <HAL_DMA_Start_IT+0x4d0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d101      	bne.n	800527c <HAL_DMA_Start_IT+0x354>
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <HAL_DMA_Start_IT+0x356>
 800527c:	2300      	movs	r3, #0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01a      	beq.n	80052b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800529e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a37      	ldr	r2, [pc, #220]	; (800539c <HAL_DMA_Start_IT+0x474>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d04a      	beq.n	8005358 <HAL_DMA_Start_IT+0x430>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a36      	ldr	r2, [pc, #216]	; (80053a0 <HAL_DMA_Start_IT+0x478>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d045      	beq.n	8005358 <HAL_DMA_Start_IT+0x430>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a34      	ldr	r2, [pc, #208]	; (80053a4 <HAL_DMA_Start_IT+0x47c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d040      	beq.n	8005358 <HAL_DMA_Start_IT+0x430>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a33      	ldr	r2, [pc, #204]	; (80053a8 <HAL_DMA_Start_IT+0x480>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d03b      	beq.n	8005358 <HAL_DMA_Start_IT+0x430>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a31      	ldr	r2, [pc, #196]	; (80053ac <HAL_DMA_Start_IT+0x484>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d036      	beq.n	8005358 <HAL_DMA_Start_IT+0x430>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a30      	ldr	r2, [pc, #192]	; (80053b0 <HAL_DMA_Start_IT+0x488>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d031      	beq.n	8005358 <HAL_DMA_Start_IT+0x430>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a2e      	ldr	r2, [pc, #184]	; (80053b4 <HAL_DMA_Start_IT+0x48c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d02c      	beq.n	8005358 <HAL_DMA_Start_IT+0x430>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a2d      	ldr	r2, [pc, #180]	; (80053b8 <HAL_DMA_Start_IT+0x490>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d027      	beq.n	8005358 <HAL_DMA_Start_IT+0x430>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a2b      	ldr	r2, [pc, #172]	; (80053bc <HAL_DMA_Start_IT+0x494>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d022      	beq.n	8005358 <HAL_DMA_Start_IT+0x430>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a2a      	ldr	r2, [pc, #168]	; (80053c0 <HAL_DMA_Start_IT+0x498>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d01d      	beq.n	8005358 <HAL_DMA_Start_IT+0x430>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a28      	ldr	r2, [pc, #160]	; (80053c4 <HAL_DMA_Start_IT+0x49c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d018      	beq.n	8005358 <HAL_DMA_Start_IT+0x430>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a27      	ldr	r2, [pc, #156]	; (80053c8 <HAL_DMA_Start_IT+0x4a0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d013      	beq.n	8005358 <HAL_DMA_Start_IT+0x430>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a25      	ldr	r2, [pc, #148]	; (80053cc <HAL_DMA_Start_IT+0x4a4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00e      	beq.n	8005358 <HAL_DMA_Start_IT+0x430>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a24      	ldr	r2, [pc, #144]	; (80053d0 <HAL_DMA_Start_IT+0x4a8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d009      	beq.n	8005358 <HAL_DMA_Start_IT+0x430>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a22      	ldr	r2, [pc, #136]	; (80053d4 <HAL_DMA_Start_IT+0x4ac>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d004      	beq.n	8005358 <HAL_DMA_Start_IT+0x430>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a21      	ldr	r2, [pc, #132]	; (80053d8 <HAL_DMA_Start_IT+0x4b0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d108      	bne.n	800536a <HAL_DMA_Start_IT+0x442>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	e012      	b.n	8005390 <HAL_DMA_Start_IT+0x468>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0201 	orr.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	e009      	b.n	8005390 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800538a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005390:	7dfb      	ldrb	r3, [r7, #23]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	40020010 	.word	0x40020010
 80053a0:	40020028 	.word	0x40020028
 80053a4:	40020040 	.word	0x40020040
 80053a8:	40020058 	.word	0x40020058
 80053ac:	40020070 	.word	0x40020070
 80053b0:	40020088 	.word	0x40020088
 80053b4:	400200a0 	.word	0x400200a0
 80053b8:	400200b8 	.word	0x400200b8
 80053bc:	40020410 	.word	0x40020410
 80053c0:	40020428 	.word	0x40020428
 80053c4:	40020440 	.word	0x40020440
 80053c8:	40020458 	.word	0x40020458
 80053cc:	40020470 	.word	0x40020470
 80053d0:	40020488 	.word	0x40020488
 80053d4:	400204a0 	.word	0x400204a0
 80053d8:	400204b8 	.word	0x400204b8
 80053dc:	58025408 	.word	0x58025408
 80053e0:	5802541c 	.word	0x5802541c
 80053e4:	58025430 	.word	0x58025430
 80053e8:	58025444 	.word	0x58025444
 80053ec:	58025458 	.word	0x58025458
 80053f0:	5802546c 	.word	0x5802546c
 80053f4:	58025480 	.word	0x58025480
 80053f8:	58025494 	.word	0x58025494

080053fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08a      	sub	sp, #40	; 0x28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005408:	4b67      	ldr	r3, [pc, #412]	; (80055a8 <HAL_DMA_IRQHandler+0x1ac>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a67      	ldr	r2, [pc, #412]	; (80055ac <HAL_DMA_IRQHandler+0x1b0>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	0a9b      	lsrs	r3, r3, #10
 8005414:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005420:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a5f      	ldr	r2, [pc, #380]	; (80055b0 <HAL_DMA_IRQHandler+0x1b4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d04a      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a5d      	ldr	r2, [pc, #372]	; (80055b4 <HAL_DMA_IRQHandler+0x1b8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d045      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a5c      	ldr	r2, [pc, #368]	; (80055b8 <HAL_DMA_IRQHandler+0x1bc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d040      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a5a      	ldr	r2, [pc, #360]	; (80055bc <HAL_DMA_IRQHandler+0x1c0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d03b      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a59      	ldr	r2, [pc, #356]	; (80055c0 <HAL_DMA_IRQHandler+0x1c4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d036      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a57      	ldr	r2, [pc, #348]	; (80055c4 <HAL_DMA_IRQHandler+0x1c8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d031      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a56      	ldr	r2, [pc, #344]	; (80055c8 <HAL_DMA_IRQHandler+0x1cc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d02c      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a54      	ldr	r2, [pc, #336]	; (80055cc <HAL_DMA_IRQHandler+0x1d0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d027      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a53      	ldr	r2, [pc, #332]	; (80055d0 <HAL_DMA_IRQHandler+0x1d4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d022      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a51      	ldr	r2, [pc, #324]	; (80055d4 <HAL_DMA_IRQHandler+0x1d8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d01d      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a50      	ldr	r2, [pc, #320]	; (80055d8 <HAL_DMA_IRQHandler+0x1dc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d018      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a4e      	ldr	r2, [pc, #312]	; (80055dc <HAL_DMA_IRQHandler+0x1e0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a4d      	ldr	r2, [pc, #308]	; (80055e0 <HAL_DMA_IRQHandler+0x1e4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00e      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a4b      	ldr	r2, [pc, #300]	; (80055e4 <HAL_DMA_IRQHandler+0x1e8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d009      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a4a      	ldr	r2, [pc, #296]	; (80055e8 <HAL_DMA_IRQHandler+0x1ec>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d004      	beq.n	80054ce <HAL_DMA_IRQHandler+0xd2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a48      	ldr	r2, [pc, #288]	; (80055ec <HAL_DMA_IRQHandler+0x1f0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d101      	bne.n	80054d2 <HAL_DMA_IRQHandler+0xd6>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <HAL_DMA_IRQHandler+0xd8>
 80054d2:	2300      	movs	r3, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 842b 	beq.w	8005d30 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	2208      	movs	r2, #8
 80054e4:	409a      	lsls	r2, r3
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 80a2 	beq.w	8005634 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a2e      	ldr	r2, [pc, #184]	; (80055b0 <HAL_DMA_IRQHandler+0x1b4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d04a      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a2d      	ldr	r2, [pc, #180]	; (80055b4 <HAL_DMA_IRQHandler+0x1b8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d045      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a2b      	ldr	r2, [pc, #172]	; (80055b8 <HAL_DMA_IRQHandler+0x1bc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d040      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a2a      	ldr	r2, [pc, #168]	; (80055bc <HAL_DMA_IRQHandler+0x1c0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d03b      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a28      	ldr	r2, [pc, #160]	; (80055c0 <HAL_DMA_IRQHandler+0x1c4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d036      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a27      	ldr	r2, [pc, #156]	; (80055c4 <HAL_DMA_IRQHandler+0x1c8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d031      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a25      	ldr	r2, [pc, #148]	; (80055c8 <HAL_DMA_IRQHandler+0x1cc>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d02c      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a24      	ldr	r2, [pc, #144]	; (80055cc <HAL_DMA_IRQHandler+0x1d0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d027      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a22      	ldr	r2, [pc, #136]	; (80055d0 <HAL_DMA_IRQHandler+0x1d4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d022      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a21      	ldr	r2, [pc, #132]	; (80055d4 <HAL_DMA_IRQHandler+0x1d8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d01d      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1f      	ldr	r2, [pc, #124]	; (80055d8 <HAL_DMA_IRQHandler+0x1dc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d018      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1e      	ldr	r2, [pc, #120]	; (80055dc <HAL_DMA_IRQHandler+0x1e0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d013      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1c      	ldr	r2, [pc, #112]	; (80055e0 <HAL_DMA_IRQHandler+0x1e4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00e      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <HAL_DMA_IRQHandler+0x1e8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d009      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a19      	ldr	r2, [pc, #100]	; (80055e8 <HAL_DMA_IRQHandler+0x1ec>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d004      	beq.n	8005590 <HAL_DMA_IRQHandler+0x194>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a18      	ldr	r2, [pc, #96]	; (80055ec <HAL_DMA_IRQHandler+0x1f0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d12f      	bne.n	80055f0 <HAL_DMA_IRQHandler+0x1f4>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	bf14      	ite	ne
 800559e:	2301      	movne	r3, #1
 80055a0:	2300      	moveq	r3, #0
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	e02e      	b.n	8005604 <HAL_DMA_IRQHandler+0x208>
 80055a6:	bf00      	nop
 80055a8:	24000010 	.word	0x24000010
 80055ac:	1b4e81b5 	.word	0x1b4e81b5
 80055b0:	40020010 	.word	0x40020010
 80055b4:	40020028 	.word	0x40020028
 80055b8:	40020040 	.word	0x40020040
 80055bc:	40020058 	.word	0x40020058
 80055c0:	40020070 	.word	0x40020070
 80055c4:	40020088 	.word	0x40020088
 80055c8:	400200a0 	.word	0x400200a0
 80055cc:	400200b8 	.word	0x400200b8
 80055d0:	40020410 	.word	0x40020410
 80055d4:	40020428 	.word	0x40020428
 80055d8:	40020440 	.word	0x40020440
 80055dc:	40020458 	.word	0x40020458
 80055e0:	40020470 	.word	0x40020470
 80055e4:	40020488 	.word	0x40020488
 80055e8:	400204a0 	.word	0x400204a0
 80055ec:	400204b8 	.word	0x400204b8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	bf14      	ite	ne
 80055fe:	2301      	movne	r3, #1
 8005600:	2300      	moveq	r3, #0
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d015      	beq.n	8005634 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0204 	bic.w	r2, r2, #4
 8005616:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	2208      	movs	r2, #8
 8005622:	409a      	lsls	r2, r3
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562c:	f043 0201 	orr.w	r2, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	fa22 f303 	lsr.w	r3, r2, r3
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d06e      	beq.n	8005728 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a69      	ldr	r2, [pc, #420]	; (80057f4 <HAL_DMA_IRQHandler+0x3f8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d04a      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a67      	ldr	r2, [pc, #412]	; (80057f8 <HAL_DMA_IRQHandler+0x3fc>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d045      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a66      	ldr	r2, [pc, #408]	; (80057fc <HAL_DMA_IRQHandler+0x400>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d040      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a64      	ldr	r2, [pc, #400]	; (8005800 <HAL_DMA_IRQHandler+0x404>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d03b      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a63      	ldr	r2, [pc, #396]	; (8005804 <HAL_DMA_IRQHandler+0x408>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d036      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a61      	ldr	r2, [pc, #388]	; (8005808 <HAL_DMA_IRQHandler+0x40c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d031      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a60      	ldr	r2, [pc, #384]	; (800580c <HAL_DMA_IRQHandler+0x410>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d02c      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a5e      	ldr	r2, [pc, #376]	; (8005810 <HAL_DMA_IRQHandler+0x414>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d027      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a5d      	ldr	r2, [pc, #372]	; (8005814 <HAL_DMA_IRQHandler+0x418>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d022      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a5b      	ldr	r2, [pc, #364]	; (8005818 <HAL_DMA_IRQHandler+0x41c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01d      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a5a      	ldr	r2, [pc, #360]	; (800581c <HAL_DMA_IRQHandler+0x420>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d018      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a58      	ldr	r2, [pc, #352]	; (8005820 <HAL_DMA_IRQHandler+0x424>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a57      	ldr	r2, [pc, #348]	; (8005824 <HAL_DMA_IRQHandler+0x428>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00e      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a55      	ldr	r2, [pc, #340]	; (8005828 <HAL_DMA_IRQHandler+0x42c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a54      	ldr	r2, [pc, #336]	; (800582c <HAL_DMA_IRQHandler+0x430>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <HAL_DMA_IRQHandler+0x2ee>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a52      	ldr	r2, [pc, #328]	; (8005830 <HAL_DMA_IRQHandler+0x434>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d10a      	bne.n	8005700 <HAL_DMA_IRQHandler+0x304>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf14      	ite	ne
 80056f8:	2301      	movne	r3, #1
 80056fa:	2300      	moveq	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	e003      	b.n	8005708 <HAL_DMA_IRQHandler+0x30c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2300      	movs	r3, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005710:	f003 031f 	and.w	r3, r3, #31
 8005714:	2201      	movs	r2, #1
 8005716:	409a      	lsls	r2, r3
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005720:	f043 0202 	orr.w	r2, r3, #2
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	2204      	movs	r2, #4
 8005732:	409a      	lsls	r2, r3
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	4013      	ands	r3, r2
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 808f 	beq.w	800585c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a2c      	ldr	r2, [pc, #176]	; (80057f4 <HAL_DMA_IRQHandler+0x3f8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d04a      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a2a      	ldr	r2, [pc, #168]	; (80057f8 <HAL_DMA_IRQHandler+0x3fc>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d045      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a29      	ldr	r2, [pc, #164]	; (80057fc <HAL_DMA_IRQHandler+0x400>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d040      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a27      	ldr	r2, [pc, #156]	; (8005800 <HAL_DMA_IRQHandler+0x404>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d03b      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a26      	ldr	r2, [pc, #152]	; (8005804 <HAL_DMA_IRQHandler+0x408>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d036      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a24      	ldr	r2, [pc, #144]	; (8005808 <HAL_DMA_IRQHandler+0x40c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d031      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a23      	ldr	r2, [pc, #140]	; (800580c <HAL_DMA_IRQHandler+0x410>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d02c      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a21      	ldr	r2, [pc, #132]	; (8005810 <HAL_DMA_IRQHandler+0x414>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d027      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a20      	ldr	r2, [pc, #128]	; (8005814 <HAL_DMA_IRQHandler+0x418>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d022      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1e      	ldr	r2, [pc, #120]	; (8005818 <HAL_DMA_IRQHandler+0x41c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d01d      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1d      	ldr	r2, [pc, #116]	; (800581c <HAL_DMA_IRQHandler+0x420>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d018      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1b      	ldr	r2, [pc, #108]	; (8005820 <HAL_DMA_IRQHandler+0x424>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1a      	ldr	r2, [pc, #104]	; (8005824 <HAL_DMA_IRQHandler+0x428>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00e      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a18      	ldr	r2, [pc, #96]	; (8005828 <HAL_DMA_IRQHandler+0x42c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d009      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a17      	ldr	r2, [pc, #92]	; (800582c <HAL_DMA_IRQHandler+0x430>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d004      	beq.n	80057de <HAL_DMA_IRQHandler+0x3e2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a15      	ldr	r2, [pc, #84]	; (8005830 <HAL_DMA_IRQHandler+0x434>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d12a      	bne.n	8005834 <HAL_DMA_IRQHandler+0x438>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bf14      	ite	ne
 80057ec:	2301      	movne	r3, #1
 80057ee:	2300      	moveq	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	e023      	b.n	800583c <HAL_DMA_IRQHandler+0x440>
 80057f4:	40020010 	.word	0x40020010
 80057f8:	40020028 	.word	0x40020028
 80057fc:	40020040 	.word	0x40020040
 8005800:	40020058 	.word	0x40020058
 8005804:	40020070 	.word	0x40020070
 8005808:	40020088 	.word	0x40020088
 800580c:	400200a0 	.word	0x400200a0
 8005810:	400200b8 	.word	0x400200b8
 8005814:	40020410 	.word	0x40020410
 8005818:	40020428 	.word	0x40020428
 800581c:	40020440 	.word	0x40020440
 8005820:	40020458 	.word	0x40020458
 8005824:	40020470 	.word	0x40020470
 8005828:	40020488 	.word	0x40020488
 800582c:	400204a0 	.word	0x400204a0
 8005830:	400204b8 	.word	0x400204b8
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2300      	movs	r3, #0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00d      	beq.n	800585c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	2204      	movs	r2, #4
 800584a:	409a      	lsls	r2, r3
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005854:	f043 0204 	orr.w	r2, r3, #4
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	2210      	movs	r2, #16
 8005866:	409a      	lsls	r2, r3
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	4013      	ands	r3, r2
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80a6 	beq.w	80059be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a85      	ldr	r2, [pc, #532]	; (8005a8c <HAL_DMA_IRQHandler+0x690>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d04a      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a83      	ldr	r2, [pc, #524]	; (8005a90 <HAL_DMA_IRQHandler+0x694>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d045      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a82      	ldr	r2, [pc, #520]	; (8005a94 <HAL_DMA_IRQHandler+0x698>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d040      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a80      	ldr	r2, [pc, #512]	; (8005a98 <HAL_DMA_IRQHandler+0x69c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d03b      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a7f      	ldr	r2, [pc, #508]	; (8005a9c <HAL_DMA_IRQHandler+0x6a0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d036      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a7d      	ldr	r2, [pc, #500]	; (8005aa0 <HAL_DMA_IRQHandler+0x6a4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d031      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a7c      	ldr	r2, [pc, #496]	; (8005aa4 <HAL_DMA_IRQHandler+0x6a8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d02c      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a7a      	ldr	r2, [pc, #488]	; (8005aa8 <HAL_DMA_IRQHandler+0x6ac>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d027      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a79      	ldr	r2, [pc, #484]	; (8005aac <HAL_DMA_IRQHandler+0x6b0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d022      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a77      	ldr	r2, [pc, #476]	; (8005ab0 <HAL_DMA_IRQHandler+0x6b4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01d      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a76      	ldr	r2, [pc, #472]	; (8005ab4 <HAL_DMA_IRQHandler+0x6b8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d018      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a74      	ldr	r2, [pc, #464]	; (8005ab8 <HAL_DMA_IRQHandler+0x6bc>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a73      	ldr	r2, [pc, #460]	; (8005abc <HAL_DMA_IRQHandler+0x6c0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00e      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a71      	ldr	r2, [pc, #452]	; (8005ac0 <HAL_DMA_IRQHandler+0x6c4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d009      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a70      	ldr	r2, [pc, #448]	; (8005ac4 <HAL_DMA_IRQHandler+0x6c8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <HAL_DMA_IRQHandler+0x516>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a6e      	ldr	r2, [pc, #440]	; (8005ac8 <HAL_DMA_IRQHandler+0x6cc>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d10a      	bne.n	8005928 <HAL_DMA_IRQHandler+0x52c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	bf14      	ite	ne
 8005920:	2301      	movne	r3, #1
 8005922:	2300      	moveq	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	e009      	b.n	800593c <HAL_DMA_IRQHandler+0x540>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b00      	cmp	r3, #0
 8005934:	bf14      	ite	ne
 8005936:	2301      	movne	r3, #1
 8005938:	2300      	moveq	r3, #0
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d03e      	beq.n	80059be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	2210      	movs	r2, #16
 800594a:	409a      	lsls	r2, r3
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d018      	beq.n	8005990 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d108      	bne.n	800597e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	d024      	beq.n	80059be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	4798      	blx	r3
 800597c:	e01f      	b.n	80059be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005982:	2b00      	cmp	r3, #0
 8005984:	d01b      	beq.n	80059be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	4798      	blx	r3
 800598e:	e016      	b.n	80059be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599a:	2b00      	cmp	r3, #0
 800599c:	d107      	bne.n	80059ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0208 	bic.w	r2, r2, #8
 80059ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c2:	f003 031f 	and.w	r3, r3, #31
 80059c6:	2220      	movs	r2, #32
 80059c8:	409a      	lsls	r2, r3
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	4013      	ands	r3, r2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 8110 	beq.w	8005bf4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a2c      	ldr	r2, [pc, #176]	; (8005a8c <HAL_DMA_IRQHandler+0x690>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d04a      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a2b      	ldr	r2, [pc, #172]	; (8005a90 <HAL_DMA_IRQHandler+0x694>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d045      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a29      	ldr	r2, [pc, #164]	; (8005a94 <HAL_DMA_IRQHandler+0x698>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d040      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a28      	ldr	r2, [pc, #160]	; (8005a98 <HAL_DMA_IRQHandler+0x69c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d03b      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a26      	ldr	r2, [pc, #152]	; (8005a9c <HAL_DMA_IRQHandler+0x6a0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d036      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a25      	ldr	r2, [pc, #148]	; (8005aa0 <HAL_DMA_IRQHandler+0x6a4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d031      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a23      	ldr	r2, [pc, #140]	; (8005aa4 <HAL_DMA_IRQHandler+0x6a8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d02c      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a22      	ldr	r2, [pc, #136]	; (8005aa8 <HAL_DMA_IRQHandler+0x6ac>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d027      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a20      	ldr	r2, [pc, #128]	; (8005aac <HAL_DMA_IRQHandler+0x6b0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d022      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a1f      	ldr	r2, [pc, #124]	; (8005ab0 <HAL_DMA_IRQHandler+0x6b4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d01d      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1d      	ldr	r2, [pc, #116]	; (8005ab4 <HAL_DMA_IRQHandler+0x6b8>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d018      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1c      	ldr	r2, [pc, #112]	; (8005ab8 <HAL_DMA_IRQHandler+0x6bc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d013      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1a      	ldr	r2, [pc, #104]	; (8005abc <HAL_DMA_IRQHandler+0x6c0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00e      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a19      	ldr	r2, [pc, #100]	; (8005ac0 <HAL_DMA_IRQHandler+0x6c4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d009      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a17      	ldr	r2, [pc, #92]	; (8005ac4 <HAL_DMA_IRQHandler+0x6c8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x678>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a16      	ldr	r2, [pc, #88]	; (8005ac8 <HAL_DMA_IRQHandler+0x6cc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d12b      	bne.n	8005acc <HAL_DMA_IRQHandler+0x6d0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bf14      	ite	ne
 8005a82:	2301      	movne	r3, #1
 8005a84:	2300      	moveq	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	e02a      	b.n	8005ae0 <HAL_DMA_IRQHandler+0x6e4>
 8005a8a:	bf00      	nop
 8005a8c:	40020010 	.word	0x40020010
 8005a90:	40020028 	.word	0x40020028
 8005a94:	40020040 	.word	0x40020040
 8005a98:	40020058 	.word	0x40020058
 8005a9c:	40020070 	.word	0x40020070
 8005aa0:	40020088 	.word	0x40020088
 8005aa4:	400200a0 	.word	0x400200a0
 8005aa8:	400200b8 	.word	0x400200b8
 8005aac:	40020410 	.word	0x40020410
 8005ab0:	40020428 	.word	0x40020428
 8005ab4:	40020440 	.word	0x40020440
 8005ab8:	40020458 	.word	0x40020458
 8005abc:	40020470 	.word	0x40020470
 8005ac0:	40020488 	.word	0x40020488
 8005ac4:	400204a0 	.word	0x400204a0
 8005ac8:	400204b8 	.word	0x400204b8
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bf14      	ite	ne
 8005ada:	2301      	movne	r3, #1
 8005adc:	2300      	moveq	r3, #0
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8087 	beq.w	8005bf4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	2220      	movs	r2, #32
 8005af0:	409a      	lsls	r2, r3
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d139      	bne.n	8005b76 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0216 	bic.w	r2, r2, #22
 8005b10:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695a      	ldr	r2, [r3, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b20:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d103      	bne.n	8005b32 <HAL_DMA_IRQHandler+0x736>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d007      	beq.n	8005b42 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0208 	bic.w	r2, r2, #8
 8005b40:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	223f      	movs	r2, #63	; 0x3f
 8005b4c:	409a      	lsls	r2, r3
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 834a 	beq.w	8006200 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	4798      	blx	r3
          }
          return;
 8005b74:	e344      	b.n	8006200 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d018      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d108      	bne.n	8005ba4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d02c      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	4798      	blx	r3
 8005ba2:	e027      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d023      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4798      	blx	r3
 8005bb4:	e01e      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10f      	bne.n	8005be4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0210 	bic.w	r2, r2, #16
 8005bd2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8306 	beq.w	800620a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 8088 	beq.w	8005d1c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2204      	movs	r2, #4
 8005c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a7a      	ldr	r2, [pc, #488]	; (8005e04 <HAL_DMA_IRQHandler+0xa08>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d04a      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a79      	ldr	r2, [pc, #484]	; (8005e08 <HAL_DMA_IRQHandler+0xa0c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d045      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a77      	ldr	r2, [pc, #476]	; (8005e0c <HAL_DMA_IRQHandler+0xa10>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d040      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a76      	ldr	r2, [pc, #472]	; (8005e10 <HAL_DMA_IRQHandler+0xa14>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d03b      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a74      	ldr	r2, [pc, #464]	; (8005e14 <HAL_DMA_IRQHandler+0xa18>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d036      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a73      	ldr	r2, [pc, #460]	; (8005e18 <HAL_DMA_IRQHandler+0xa1c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d031      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a71      	ldr	r2, [pc, #452]	; (8005e1c <HAL_DMA_IRQHandler+0xa20>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d02c      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a70      	ldr	r2, [pc, #448]	; (8005e20 <HAL_DMA_IRQHandler+0xa24>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d027      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a6e      	ldr	r2, [pc, #440]	; (8005e24 <HAL_DMA_IRQHandler+0xa28>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d022      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a6d      	ldr	r2, [pc, #436]	; (8005e28 <HAL_DMA_IRQHandler+0xa2c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d01d      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a6b      	ldr	r2, [pc, #428]	; (8005e2c <HAL_DMA_IRQHandler+0xa30>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d018      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a6a      	ldr	r2, [pc, #424]	; (8005e30 <HAL_DMA_IRQHandler+0xa34>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d013      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a68      	ldr	r2, [pc, #416]	; (8005e34 <HAL_DMA_IRQHandler+0xa38>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00e      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a67      	ldr	r2, [pc, #412]	; (8005e38 <HAL_DMA_IRQHandler+0xa3c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d009      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a65      	ldr	r2, [pc, #404]	; (8005e3c <HAL_DMA_IRQHandler+0xa40>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d004      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x8b8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a64      	ldr	r2, [pc, #400]	; (8005e40 <HAL_DMA_IRQHandler+0xa44>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d108      	bne.n	8005cc6 <HAL_DMA_IRQHandler+0x8ca>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	e007      	b.n	8005cd6 <HAL_DMA_IRQHandler+0x8da>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d307      	bcc.n	8005cf2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1f2      	bne.n	8005cd6 <HAL_DMA_IRQHandler+0x8da>
 8005cf0:	e000      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005cf2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d004      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2203      	movs	r2, #3
 8005d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005d12:	e003      	b.n	8005d1c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 8272 	beq.w	800620a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	4798      	blx	r3
 8005d2e:	e26c      	b.n	800620a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a43      	ldr	r2, [pc, #268]	; (8005e44 <HAL_DMA_IRQHandler+0xa48>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d022      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x984>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a42      	ldr	r2, [pc, #264]	; (8005e48 <HAL_DMA_IRQHandler+0xa4c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d01d      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x984>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a40      	ldr	r2, [pc, #256]	; (8005e4c <HAL_DMA_IRQHandler+0xa50>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d018      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x984>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a3f      	ldr	r2, [pc, #252]	; (8005e50 <HAL_DMA_IRQHandler+0xa54>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d013      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x984>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a3d      	ldr	r2, [pc, #244]	; (8005e54 <HAL_DMA_IRQHandler+0xa58>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00e      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x984>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a3c      	ldr	r2, [pc, #240]	; (8005e58 <HAL_DMA_IRQHandler+0xa5c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d009      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x984>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a3a      	ldr	r2, [pc, #232]	; (8005e5c <HAL_DMA_IRQHandler+0xa60>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d004      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x984>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a39      	ldr	r2, [pc, #228]	; (8005e60 <HAL_DMA_IRQHandler+0xa64>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d101      	bne.n	8005d84 <HAL_DMA_IRQHandler+0x988>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e000      	b.n	8005d86 <HAL_DMA_IRQHandler+0x98a>
 8005d84:	2300      	movs	r3, #0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 823f 	beq.w	800620a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	4013      	ands	r3, r2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80cd 	beq.w	8005f44 <HAL_DMA_IRQHandler+0xb48>
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80c7 	beq.w	8005f44 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dba:	f003 031f 	and.w	r3, r3, #31
 8005dbe:	2204      	movs	r2, #4
 8005dc0:	409a      	lsls	r2, r3
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d049      	beq.n	8005e64 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d109      	bne.n	8005dee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8210 	beq.w	8006204 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dec:	e20a      	b.n	8006204 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 8206 	beq.w	8006204 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e00:	e200      	b.n	8006204 <HAL_DMA_IRQHandler+0xe08>
 8005e02:	bf00      	nop
 8005e04:	40020010 	.word	0x40020010
 8005e08:	40020028 	.word	0x40020028
 8005e0c:	40020040 	.word	0x40020040
 8005e10:	40020058 	.word	0x40020058
 8005e14:	40020070 	.word	0x40020070
 8005e18:	40020088 	.word	0x40020088
 8005e1c:	400200a0 	.word	0x400200a0
 8005e20:	400200b8 	.word	0x400200b8
 8005e24:	40020410 	.word	0x40020410
 8005e28:	40020428 	.word	0x40020428
 8005e2c:	40020440 	.word	0x40020440
 8005e30:	40020458 	.word	0x40020458
 8005e34:	40020470 	.word	0x40020470
 8005e38:	40020488 	.word	0x40020488
 8005e3c:	400204a0 	.word	0x400204a0
 8005e40:	400204b8 	.word	0x400204b8
 8005e44:	58025408 	.word	0x58025408
 8005e48:	5802541c 	.word	0x5802541c
 8005e4c:	58025430 	.word	0x58025430
 8005e50:	58025444 	.word	0x58025444
 8005e54:	58025458 	.word	0x58025458
 8005e58:	5802546c 	.word	0x5802546c
 8005e5c:	58025480 	.word	0x58025480
 8005e60:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d160      	bne.n	8005f30 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a8c      	ldr	r2, [pc, #560]	; (80060a4 <HAL_DMA_IRQHandler+0xca8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d04a      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a8a      	ldr	r2, [pc, #552]	; (80060a8 <HAL_DMA_IRQHandler+0xcac>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d045      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a89      	ldr	r2, [pc, #548]	; (80060ac <HAL_DMA_IRQHandler+0xcb0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d040      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a87      	ldr	r2, [pc, #540]	; (80060b0 <HAL_DMA_IRQHandler+0xcb4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d03b      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a86      	ldr	r2, [pc, #536]	; (80060b4 <HAL_DMA_IRQHandler+0xcb8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d036      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a84      	ldr	r2, [pc, #528]	; (80060b8 <HAL_DMA_IRQHandler+0xcbc>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d031      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a83      	ldr	r2, [pc, #524]	; (80060bc <HAL_DMA_IRQHandler+0xcc0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d02c      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a81      	ldr	r2, [pc, #516]	; (80060c0 <HAL_DMA_IRQHandler+0xcc4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d027      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a80      	ldr	r2, [pc, #512]	; (80060c4 <HAL_DMA_IRQHandler+0xcc8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d022      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a7e      	ldr	r2, [pc, #504]	; (80060c8 <HAL_DMA_IRQHandler+0xccc>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d01d      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a7d      	ldr	r2, [pc, #500]	; (80060cc <HAL_DMA_IRQHandler+0xcd0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d018      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a7b      	ldr	r2, [pc, #492]	; (80060d0 <HAL_DMA_IRQHandler+0xcd4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d013      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a7a      	ldr	r2, [pc, #488]	; (80060d4 <HAL_DMA_IRQHandler+0xcd8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00e      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a78      	ldr	r2, [pc, #480]	; (80060d8 <HAL_DMA_IRQHandler+0xcdc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d009      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a77      	ldr	r2, [pc, #476]	; (80060dc <HAL_DMA_IRQHandler+0xce0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d004      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xb12>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a75      	ldr	r2, [pc, #468]	; (80060e0 <HAL_DMA_IRQHandler+0xce4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d108      	bne.n	8005f20 <HAL_DMA_IRQHandler+0xb24>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0208 	bic.w	r2, r2, #8
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	e007      	b.n	8005f30 <HAL_DMA_IRQHandler+0xb34>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0204 	bic.w	r2, r2, #4
 8005f2e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 8165 	beq.w	8006204 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f42:	e15f      	b.n	8006204 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	409a      	lsls	r2, r3
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	4013      	ands	r3, r2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 80c5 	beq.w	80060e4 <HAL_DMA_IRQHandler+0xce8>
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 80bf 	beq.w	80060e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	2202      	movs	r2, #2
 8005f70:	409a      	lsls	r2, r3
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d018      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d109      	bne.n	8005f9e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 813a 	beq.w	8006208 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f9c:	e134      	b.n	8006208 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 8130 	beq.w	8006208 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fb0:	e12a      	b.n	8006208 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d168      	bne.n	800608e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a38      	ldr	r2, [pc, #224]	; (80060a4 <HAL_DMA_IRQHandler+0xca8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d04a      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a37      	ldr	r2, [pc, #220]	; (80060a8 <HAL_DMA_IRQHandler+0xcac>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d045      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a35      	ldr	r2, [pc, #212]	; (80060ac <HAL_DMA_IRQHandler+0xcb0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d040      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a34      	ldr	r2, [pc, #208]	; (80060b0 <HAL_DMA_IRQHandler+0xcb4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d03b      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a32      	ldr	r2, [pc, #200]	; (80060b4 <HAL_DMA_IRQHandler+0xcb8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d036      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a31      	ldr	r2, [pc, #196]	; (80060b8 <HAL_DMA_IRQHandler+0xcbc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d031      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a2f      	ldr	r2, [pc, #188]	; (80060bc <HAL_DMA_IRQHandler+0xcc0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d02c      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a2e      	ldr	r2, [pc, #184]	; (80060c0 <HAL_DMA_IRQHandler+0xcc4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d027      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2c      	ldr	r2, [pc, #176]	; (80060c4 <HAL_DMA_IRQHandler+0xcc8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d022      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a2b      	ldr	r2, [pc, #172]	; (80060c8 <HAL_DMA_IRQHandler+0xccc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d01d      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a29      	ldr	r2, [pc, #164]	; (80060cc <HAL_DMA_IRQHandler+0xcd0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d018      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a28      	ldr	r2, [pc, #160]	; (80060d0 <HAL_DMA_IRQHandler+0xcd4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d013      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a26      	ldr	r2, [pc, #152]	; (80060d4 <HAL_DMA_IRQHandler+0xcd8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00e      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a25      	ldr	r2, [pc, #148]	; (80060d8 <HAL_DMA_IRQHandler+0xcdc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d009      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a23      	ldr	r2, [pc, #140]	; (80060dc <HAL_DMA_IRQHandler+0xce0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d004      	beq.n	800605c <HAL_DMA_IRQHandler+0xc60>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a22      	ldr	r2, [pc, #136]	; (80060e0 <HAL_DMA_IRQHandler+0xce4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d108      	bne.n	800606e <HAL_DMA_IRQHandler+0xc72>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0214 	bic.w	r2, r2, #20
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	e007      	b.n	800607e <HAL_DMA_IRQHandler+0xc82>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 020a 	bic.w	r2, r2, #10
 800607c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 80b8 	beq.w	8006208 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060a0:	e0b2      	b.n	8006208 <HAL_DMA_IRQHandler+0xe0c>
 80060a2:	bf00      	nop
 80060a4:	40020010 	.word	0x40020010
 80060a8:	40020028 	.word	0x40020028
 80060ac:	40020040 	.word	0x40020040
 80060b0:	40020058 	.word	0x40020058
 80060b4:	40020070 	.word	0x40020070
 80060b8:	40020088 	.word	0x40020088
 80060bc:	400200a0 	.word	0x400200a0
 80060c0:	400200b8 	.word	0x400200b8
 80060c4:	40020410 	.word	0x40020410
 80060c8:	40020428 	.word	0x40020428
 80060cc:	40020440 	.word	0x40020440
 80060d0:	40020458 	.word	0x40020458
 80060d4:	40020470 	.word	0x40020470
 80060d8:	40020488 	.word	0x40020488
 80060dc:	400204a0 	.word	0x400204a0
 80060e0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e8:	f003 031f 	and.w	r3, r3, #31
 80060ec:	2208      	movs	r2, #8
 80060ee:	409a      	lsls	r2, r3
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 8088 	beq.w	800620a <HAL_DMA_IRQHandler+0xe0e>
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8082 	beq.w	800620a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a41      	ldr	r2, [pc, #260]	; (8006210 <HAL_DMA_IRQHandler+0xe14>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d04a      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a3f      	ldr	r2, [pc, #252]	; (8006214 <HAL_DMA_IRQHandler+0xe18>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d045      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a3e      	ldr	r2, [pc, #248]	; (8006218 <HAL_DMA_IRQHandler+0xe1c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d040      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a3c      	ldr	r2, [pc, #240]	; (800621c <HAL_DMA_IRQHandler+0xe20>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d03b      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a3b      	ldr	r2, [pc, #236]	; (8006220 <HAL_DMA_IRQHandler+0xe24>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d036      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a39      	ldr	r2, [pc, #228]	; (8006224 <HAL_DMA_IRQHandler+0xe28>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d031      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a38      	ldr	r2, [pc, #224]	; (8006228 <HAL_DMA_IRQHandler+0xe2c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d02c      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a36      	ldr	r2, [pc, #216]	; (800622c <HAL_DMA_IRQHandler+0xe30>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d027      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a35      	ldr	r2, [pc, #212]	; (8006230 <HAL_DMA_IRQHandler+0xe34>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d022      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a33      	ldr	r2, [pc, #204]	; (8006234 <HAL_DMA_IRQHandler+0xe38>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d01d      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a32      	ldr	r2, [pc, #200]	; (8006238 <HAL_DMA_IRQHandler+0xe3c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d018      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a30      	ldr	r2, [pc, #192]	; (800623c <HAL_DMA_IRQHandler+0xe40>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a2f      	ldr	r2, [pc, #188]	; (8006240 <HAL_DMA_IRQHandler+0xe44>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00e      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a2d      	ldr	r2, [pc, #180]	; (8006244 <HAL_DMA_IRQHandler+0xe48>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d009      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a2c      	ldr	r2, [pc, #176]	; (8006248 <HAL_DMA_IRQHandler+0xe4c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d004      	beq.n	80061a6 <HAL_DMA_IRQHandler+0xdaa>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a2a      	ldr	r2, [pc, #168]	; (800624c <HAL_DMA_IRQHandler+0xe50>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d108      	bne.n	80061b8 <HAL_DMA_IRQHandler+0xdbc>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 021c 	bic.w	r2, r2, #28
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	e007      	b.n	80061c8 <HAL_DMA_IRQHandler+0xdcc>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 020e 	bic.w	r2, r2, #14
 80061c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061cc:	f003 031f 	and.w	r3, r3, #31
 80061d0:	2201      	movs	r2, #1
 80061d2:	409a      	lsls	r2, r3
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	4798      	blx	r3
 80061fe:	e004      	b.n	800620a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006200:	bf00      	nop
 8006202:	e002      	b.n	800620a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006204:	bf00      	nop
 8006206:	e000      	b.n	800620a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006208:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800620a:	3728      	adds	r7, #40	; 0x28
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	40020010 	.word	0x40020010
 8006214:	40020028 	.word	0x40020028
 8006218:	40020040 	.word	0x40020040
 800621c:	40020058 	.word	0x40020058
 8006220:	40020070 	.word	0x40020070
 8006224:	40020088 	.word	0x40020088
 8006228:	400200a0 	.word	0x400200a0
 800622c:	400200b8 	.word	0x400200b8
 8006230:	40020410 	.word	0x40020410
 8006234:	40020428 	.word	0x40020428
 8006238:	40020440 	.word	0x40020440
 800623c:	40020458 	.word	0x40020458
 8006240:	40020470 	.word	0x40020470
 8006244:	40020488 	.word	0x40020488
 8006248:	400204a0 	.word	0x400204a0
 800624c:	400204b8 	.word	0x400204b8

08006250 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006262:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006268:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a84      	ldr	r2, [pc, #528]	; (8006480 <DMA_SetConfig+0x230>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d072      	beq.n	800635a <DMA_SetConfig+0x10a>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a82      	ldr	r2, [pc, #520]	; (8006484 <DMA_SetConfig+0x234>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d06d      	beq.n	800635a <DMA_SetConfig+0x10a>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a81      	ldr	r2, [pc, #516]	; (8006488 <DMA_SetConfig+0x238>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d068      	beq.n	800635a <DMA_SetConfig+0x10a>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a7f      	ldr	r2, [pc, #508]	; (800648c <DMA_SetConfig+0x23c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d063      	beq.n	800635a <DMA_SetConfig+0x10a>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a7e      	ldr	r2, [pc, #504]	; (8006490 <DMA_SetConfig+0x240>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d05e      	beq.n	800635a <DMA_SetConfig+0x10a>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a7c      	ldr	r2, [pc, #496]	; (8006494 <DMA_SetConfig+0x244>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d059      	beq.n	800635a <DMA_SetConfig+0x10a>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a7b      	ldr	r2, [pc, #492]	; (8006498 <DMA_SetConfig+0x248>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d054      	beq.n	800635a <DMA_SetConfig+0x10a>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a79      	ldr	r2, [pc, #484]	; (800649c <DMA_SetConfig+0x24c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d04f      	beq.n	800635a <DMA_SetConfig+0x10a>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a78      	ldr	r2, [pc, #480]	; (80064a0 <DMA_SetConfig+0x250>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d04a      	beq.n	800635a <DMA_SetConfig+0x10a>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a76      	ldr	r2, [pc, #472]	; (80064a4 <DMA_SetConfig+0x254>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d045      	beq.n	800635a <DMA_SetConfig+0x10a>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a75      	ldr	r2, [pc, #468]	; (80064a8 <DMA_SetConfig+0x258>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d040      	beq.n	800635a <DMA_SetConfig+0x10a>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a73      	ldr	r2, [pc, #460]	; (80064ac <DMA_SetConfig+0x25c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d03b      	beq.n	800635a <DMA_SetConfig+0x10a>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a72      	ldr	r2, [pc, #456]	; (80064b0 <DMA_SetConfig+0x260>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d036      	beq.n	800635a <DMA_SetConfig+0x10a>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a70      	ldr	r2, [pc, #448]	; (80064b4 <DMA_SetConfig+0x264>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d031      	beq.n	800635a <DMA_SetConfig+0x10a>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a6f      	ldr	r2, [pc, #444]	; (80064b8 <DMA_SetConfig+0x268>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d02c      	beq.n	800635a <DMA_SetConfig+0x10a>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a6d      	ldr	r2, [pc, #436]	; (80064bc <DMA_SetConfig+0x26c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d027      	beq.n	800635a <DMA_SetConfig+0x10a>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a6c      	ldr	r2, [pc, #432]	; (80064c0 <DMA_SetConfig+0x270>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d022      	beq.n	800635a <DMA_SetConfig+0x10a>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a6a      	ldr	r2, [pc, #424]	; (80064c4 <DMA_SetConfig+0x274>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d01d      	beq.n	800635a <DMA_SetConfig+0x10a>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a69      	ldr	r2, [pc, #420]	; (80064c8 <DMA_SetConfig+0x278>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d018      	beq.n	800635a <DMA_SetConfig+0x10a>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a67      	ldr	r2, [pc, #412]	; (80064cc <DMA_SetConfig+0x27c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d013      	beq.n	800635a <DMA_SetConfig+0x10a>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a66      	ldr	r2, [pc, #408]	; (80064d0 <DMA_SetConfig+0x280>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00e      	beq.n	800635a <DMA_SetConfig+0x10a>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a64      	ldr	r2, [pc, #400]	; (80064d4 <DMA_SetConfig+0x284>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d009      	beq.n	800635a <DMA_SetConfig+0x10a>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a63      	ldr	r2, [pc, #396]	; (80064d8 <DMA_SetConfig+0x288>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d004      	beq.n	800635a <DMA_SetConfig+0x10a>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a61      	ldr	r2, [pc, #388]	; (80064dc <DMA_SetConfig+0x28c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d101      	bne.n	800635e <DMA_SetConfig+0x10e>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <DMA_SetConfig+0x110>
 800635e:	2300      	movs	r3, #0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00d      	beq.n	8006380 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800636c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d004      	beq.n	8006380 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800637e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a3e      	ldr	r2, [pc, #248]	; (8006480 <DMA_SetConfig+0x230>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d04a      	beq.n	8006420 <DMA_SetConfig+0x1d0>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a3d      	ldr	r2, [pc, #244]	; (8006484 <DMA_SetConfig+0x234>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d045      	beq.n	8006420 <DMA_SetConfig+0x1d0>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a3b      	ldr	r2, [pc, #236]	; (8006488 <DMA_SetConfig+0x238>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d040      	beq.n	8006420 <DMA_SetConfig+0x1d0>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a3a      	ldr	r2, [pc, #232]	; (800648c <DMA_SetConfig+0x23c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d03b      	beq.n	8006420 <DMA_SetConfig+0x1d0>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a38      	ldr	r2, [pc, #224]	; (8006490 <DMA_SetConfig+0x240>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d036      	beq.n	8006420 <DMA_SetConfig+0x1d0>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a37      	ldr	r2, [pc, #220]	; (8006494 <DMA_SetConfig+0x244>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d031      	beq.n	8006420 <DMA_SetConfig+0x1d0>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a35      	ldr	r2, [pc, #212]	; (8006498 <DMA_SetConfig+0x248>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d02c      	beq.n	8006420 <DMA_SetConfig+0x1d0>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a34      	ldr	r2, [pc, #208]	; (800649c <DMA_SetConfig+0x24c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d027      	beq.n	8006420 <DMA_SetConfig+0x1d0>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a32      	ldr	r2, [pc, #200]	; (80064a0 <DMA_SetConfig+0x250>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d022      	beq.n	8006420 <DMA_SetConfig+0x1d0>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a31      	ldr	r2, [pc, #196]	; (80064a4 <DMA_SetConfig+0x254>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d01d      	beq.n	8006420 <DMA_SetConfig+0x1d0>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a2f      	ldr	r2, [pc, #188]	; (80064a8 <DMA_SetConfig+0x258>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d018      	beq.n	8006420 <DMA_SetConfig+0x1d0>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a2e      	ldr	r2, [pc, #184]	; (80064ac <DMA_SetConfig+0x25c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d013      	beq.n	8006420 <DMA_SetConfig+0x1d0>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a2c      	ldr	r2, [pc, #176]	; (80064b0 <DMA_SetConfig+0x260>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00e      	beq.n	8006420 <DMA_SetConfig+0x1d0>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a2b      	ldr	r2, [pc, #172]	; (80064b4 <DMA_SetConfig+0x264>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d009      	beq.n	8006420 <DMA_SetConfig+0x1d0>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a29      	ldr	r2, [pc, #164]	; (80064b8 <DMA_SetConfig+0x268>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d004      	beq.n	8006420 <DMA_SetConfig+0x1d0>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a28      	ldr	r2, [pc, #160]	; (80064bc <DMA_SetConfig+0x26c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d101      	bne.n	8006424 <DMA_SetConfig+0x1d4>
 8006420:	2301      	movs	r3, #1
 8006422:	e000      	b.n	8006426 <DMA_SetConfig+0x1d6>
 8006424:	2300      	movs	r3, #0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d05a      	beq.n	80064e0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642e:	f003 031f 	and.w	r3, r3, #31
 8006432:	223f      	movs	r2, #63	; 0x3f
 8006434:	409a      	lsls	r2, r3
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006448:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b40      	cmp	r3, #64	; 0x40
 8006458:	d108      	bne.n	800646c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800646a:	e087      	b.n	800657c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	60da      	str	r2, [r3, #12]
}
 800647c:	e07e      	b.n	800657c <DMA_SetConfig+0x32c>
 800647e:	bf00      	nop
 8006480:	40020010 	.word	0x40020010
 8006484:	40020028 	.word	0x40020028
 8006488:	40020040 	.word	0x40020040
 800648c:	40020058 	.word	0x40020058
 8006490:	40020070 	.word	0x40020070
 8006494:	40020088 	.word	0x40020088
 8006498:	400200a0 	.word	0x400200a0
 800649c:	400200b8 	.word	0x400200b8
 80064a0:	40020410 	.word	0x40020410
 80064a4:	40020428 	.word	0x40020428
 80064a8:	40020440 	.word	0x40020440
 80064ac:	40020458 	.word	0x40020458
 80064b0:	40020470 	.word	0x40020470
 80064b4:	40020488 	.word	0x40020488
 80064b8:	400204a0 	.word	0x400204a0
 80064bc:	400204b8 	.word	0x400204b8
 80064c0:	58025408 	.word	0x58025408
 80064c4:	5802541c 	.word	0x5802541c
 80064c8:	58025430 	.word	0x58025430
 80064cc:	58025444 	.word	0x58025444
 80064d0:	58025458 	.word	0x58025458
 80064d4:	5802546c 	.word	0x5802546c
 80064d8:	58025480 	.word	0x58025480
 80064dc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a28      	ldr	r2, [pc, #160]	; (8006588 <DMA_SetConfig+0x338>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d022      	beq.n	8006530 <DMA_SetConfig+0x2e0>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a27      	ldr	r2, [pc, #156]	; (800658c <DMA_SetConfig+0x33c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d01d      	beq.n	8006530 <DMA_SetConfig+0x2e0>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a25      	ldr	r2, [pc, #148]	; (8006590 <DMA_SetConfig+0x340>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d018      	beq.n	8006530 <DMA_SetConfig+0x2e0>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a24      	ldr	r2, [pc, #144]	; (8006594 <DMA_SetConfig+0x344>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d013      	beq.n	8006530 <DMA_SetConfig+0x2e0>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a22      	ldr	r2, [pc, #136]	; (8006598 <DMA_SetConfig+0x348>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00e      	beq.n	8006530 <DMA_SetConfig+0x2e0>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a21      	ldr	r2, [pc, #132]	; (800659c <DMA_SetConfig+0x34c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d009      	beq.n	8006530 <DMA_SetConfig+0x2e0>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <DMA_SetConfig+0x350>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d004      	beq.n	8006530 <DMA_SetConfig+0x2e0>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1e      	ldr	r2, [pc, #120]	; (80065a4 <DMA_SetConfig+0x354>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d101      	bne.n	8006534 <DMA_SetConfig+0x2e4>
 8006530:	2301      	movs	r3, #1
 8006532:	e000      	b.n	8006536 <DMA_SetConfig+0x2e6>
 8006534:	2300      	movs	r3, #0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d020      	beq.n	800657c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653e:	f003 031f 	and.w	r3, r3, #31
 8006542:	2201      	movs	r2, #1
 8006544:	409a      	lsls	r2, r3
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2b40      	cmp	r3, #64	; 0x40
 8006558:	d108      	bne.n	800656c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	60da      	str	r2, [r3, #12]
}
 800656a:	e007      	b.n	800657c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	60da      	str	r2, [r3, #12]
}
 800657c:	bf00      	nop
 800657e:	371c      	adds	r7, #28
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	58025408 	.word	0x58025408
 800658c:	5802541c 	.word	0x5802541c
 8006590:	58025430 	.word	0x58025430
 8006594:	58025444 	.word	0x58025444
 8006598:	58025458 	.word	0x58025458
 800659c:	5802546c 	.word	0x5802546c
 80065a0:	58025480 	.word	0x58025480
 80065a4:	58025494 	.word	0x58025494

080065a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a42      	ldr	r2, [pc, #264]	; (80066c0 <DMA_CalcBaseAndBitshift+0x118>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d04a      	beq.n	8006650 <DMA_CalcBaseAndBitshift+0xa8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a41      	ldr	r2, [pc, #260]	; (80066c4 <DMA_CalcBaseAndBitshift+0x11c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d045      	beq.n	8006650 <DMA_CalcBaseAndBitshift+0xa8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a3f      	ldr	r2, [pc, #252]	; (80066c8 <DMA_CalcBaseAndBitshift+0x120>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d040      	beq.n	8006650 <DMA_CalcBaseAndBitshift+0xa8>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a3e      	ldr	r2, [pc, #248]	; (80066cc <DMA_CalcBaseAndBitshift+0x124>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d03b      	beq.n	8006650 <DMA_CalcBaseAndBitshift+0xa8>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a3c      	ldr	r2, [pc, #240]	; (80066d0 <DMA_CalcBaseAndBitshift+0x128>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d036      	beq.n	8006650 <DMA_CalcBaseAndBitshift+0xa8>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a3b      	ldr	r2, [pc, #236]	; (80066d4 <DMA_CalcBaseAndBitshift+0x12c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d031      	beq.n	8006650 <DMA_CalcBaseAndBitshift+0xa8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a39      	ldr	r2, [pc, #228]	; (80066d8 <DMA_CalcBaseAndBitshift+0x130>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d02c      	beq.n	8006650 <DMA_CalcBaseAndBitshift+0xa8>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a38      	ldr	r2, [pc, #224]	; (80066dc <DMA_CalcBaseAndBitshift+0x134>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d027      	beq.n	8006650 <DMA_CalcBaseAndBitshift+0xa8>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a36      	ldr	r2, [pc, #216]	; (80066e0 <DMA_CalcBaseAndBitshift+0x138>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d022      	beq.n	8006650 <DMA_CalcBaseAndBitshift+0xa8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a35      	ldr	r2, [pc, #212]	; (80066e4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d01d      	beq.n	8006650 <DMA_CalcBaseAndBitshift+0xa8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a33      	ldr	r2, [pc, #204]	; (80066e8 <DMA_CalcBaseAndBitshift+0x140>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d018      	beq.n	8006650 <DMA_CalcBaseAndBitshift+0xa8>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a32      	ldr	r2, [pc, #200]	; (80066ec <DMA_CalcBaseAndBitshift+0x144>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d013      	beq.n	8006650 <DMA_CalcBaseAndBitshift+0xa8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a30      	ldr	r2, [pc, #192]	; (80066f0 <DMA_CalcBaseAndBitshift+0x148>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00e      	beq.n	8006650 <DMA_CalcBaseAndBitshift+0xa8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a2f      	ldr	r2, [pc, #188]	; (80066f4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d009      	beq.n	8006650 <DMA_CalcBaseAndBitshift+0xa8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a2d      	ldr	r2, [pc, #180]	; (80066f8 <DMA_CalcBaseAndBitshift+0x150>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d004      	beq.n	8006650 <DMA_CalcBaseAndBitshift+0xa8>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a2c      	ldr	r2, [pc, #176]	; (80066fc <DMA_CalcBaseAndBitshift+0x154>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d101      	bne.n	8006654 <DMA_CalcBaseAndBitshift+0xac>
 8006650:	2301      	movs	r3, #1
 8006652:	e000      	b.n	8006656 <DMA_CalcBaseAndBitshift+0xae>
 8006654:	2300      	movs	r3, #0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d024      	beq.n	80066a4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	3b10      	subs	r3, #16
 8006662:	4a27      	ldr	r2, [pc, #156]	; (8006700 <DMA_CalcBaseAndBitshift+0x158>)
 8006664:	fba2 2303 	umull	r2, r3, r2, r3
 8006668:	091b      	lsrs	r3, r3, #4
 800666a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f003 0307 	and.w	r3, r3, #7
 8006672:	4a24      	ldr	r2, [pc, #144]	; (8006704 <DMA_CalcBaseAndBitshift+0x15c>)
 8006674:	5cd3      	ldrb	r3, [r2, r3]
 8006676:	461a      	mov	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b03      	cmp	r3, #3
 8006680:	d908      	bls.n	8006694 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	4b1f      	ldr	r3, [pc, #124]	; (8006708 <DMA_CalcBaseAndBitshift+0x160>)
 800668a:	4013      	ands	r3, r2
 800668c:	1d1a      	adds	r2, r3, #4
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	659a      	str	r2, [r3, #88]	; 0x58
 8006692:	e00d      	b.n	80066b0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	461a      	mov	r2, r3
 800669a:	4b1b      	ldr	r3, [pc, #108]	; (8006708 <DMA_CalcBaseAndBitshift+0x160>)
 800669c:	4013      	ands	r3, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6593      	str	r3, [r2, #88]	; 0x58
 80066a2:	e005      	b.n	80066b0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	40020010 	.word	0x40020010
 80066c4:	40020028 	.word	0x40020028
 80066c8:	40020040 	.word	0x40020040
 80066cc:	40020058 	.word	0x40020058
 80066d0:	40020070 	.word	0x40020070
 80066d4:	40020088 	.word	0x40020088
 80066d8:	400200a0 	.word	0x400200a0
 80066dc:	400200b8 	.word	0x400200b8
 80066e0:	40020410 	.word	0x40020410
 80066e4:	40020428 	.word	0x40020428
 80066e8:	40020440 	.word	0x40020440
 80066ec:	40020458 	.word	0x40020458
 80066f0:	40020470 	.word	0x40020470
 80066f4:	40020488 	.word	0x40020488
 80066f8:	400204a0 	.word	0x400204a0
 80066fc:	400204b8 	.word	0x400204b8
 8006700:	aaaaaaab 	.word	0xaaaaaaab
 8006704:	0801af58 	.word	0x0801af58
 8006708:	fffffc00 	.word	0xfffffc00

0800670c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d120      	bne.n	8006762 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	2b03      	cmp	r3, #3
 8006726:	d858      	bhi.n	80067da <DMA_CheckFifoParam+0xce>
 8006728:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <DMA_CheckFifoParam+0x24>)
 800672a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672e:	bf00      	nop
 8006730:	08006741 	.word	0x08006741
 8006734:	08006753 	.word	0x08006753
 8006738:	08006741 	.word	0x08006741
 800673c:	080067db 	.word	0x080067db
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d048      	beq.n	80067de <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006750:	e045      	b.n	80067de <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800675a:	d142      	bne.n	80067e2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006760:	e03f      	b.n	80067e2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676a:	d123      	bne.n	80067b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006770:	2b03      	cmp	r3, #3
 8006772:	d838      	bhi.n	80067e6 <DMA_CheckFifoParam+0xda>
 8006774:	a201      	add	r2, pc, #4	; (adr r2, 800677c <DMA_CheckFifoParam+0x70>)
 8006776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677a:	bf00      	nop
 800677c:	0800678d 	.word	0x0800678d
 8006780:	08006793 	.word	0x08006793
 8006784:	0800678d 	.word	0x0800678d
 8006788:	080067a5 	.word	0x080067a5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	73fb      	strb	r3, [r7, #15]
        break;
 8006790:	e030      	b.n	80067f4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d025      	beq.n	80067ea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067a2:	e022      	b.n	80067ea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067ac:	d11f      	bne.n	80067ee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067b2:	e01c      	b.n	80067ee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d902      	bls.n	80067c2 <DMA_CheckFifoParam+0xb6>
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d003      	beq.n	80067c8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80067c0:	e018      	b.n	80067f4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	73fb      	strb	r3, [r7, #15]
        break;
 80067c6:	e015      	b.n	80067f4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00e      	beq.n	80067f2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	73fb      	strb	r3, [r7, #15]
    break;
 80067d8:	e00b      	b.n	80067f2 <DMA_CheckFifoParam+0xe6>
        break;
 80067da:	bf00      	nop
 80067dc:	e00a      	b.n	80067f4 <DMA_CheckFifoParam+0xe8>
        break;
 80067de:	bf00      	nop
 80067e0:	e008      	b.n	80067f4 <DMA_CheckFifoParam+0xe8>
        break;
 80067e2:	bf00      	nop
 80067e4:	e006      	b.n	80067f4 <DMA_CheckFifoParam+0xe8>
        break;
 80067e6:	bf00      	nop
 80067e8:	e004      	b.n	80067f4 <DMA_CheckFifoParam+0xe8>
        break;
 80067ea:	bf00      	nop
 80067ec:	e002      	b.n	80067f4 <DMA_CheckFifoParam+0xe8>
        break;
 80067ee:	bf00      	nop
 80067f0:	e000      	b.n	80067f4 <DMA_CheckFifoParam+0xe8>
    break;
 80067f2:	bf00      	nop
    }
  }

  return status;
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop

08006804 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a38      	ldr	r2, [pc, #224]	; (80068f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d022      	beq.n	8006862 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a36      	ldr	r2, [pc, #216]	; (80068fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d01d      	beq.n	8006862 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a35      	ldr	r2, [pc, #212]	; (8006900 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d018      	beq.n	8006862 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a33      	ldr	r2, [pc, #204]	; (8006904 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a32      	ldr	r2, [pc, #200]	; (8006908 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00e      	beq.n	8006862 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a30      	ldr	r2, [pc, #192]	; (800690c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d009      	beq.n	8006862 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a2f      	ldr	r2, [pc, #188]	; (8006910 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d004      	beq.n	8006862 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a2d      	ldr	r2, [pc, #180]	; (8006914 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d101      	bne.n	8006866 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006866:	2300      	movs	r3, #0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01a      	beq.n	80068a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	3b08      	subs	r3, #8
 8006874:	4a28      	ldr	r2, [pc, #160]	; (8006918 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006876:	fba2 2303 	umull	r2, r3, r2, r3
 800687a:	091b      	lsrs	r3, r3, #4
 800687c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4b26      	ldr	r3, [pc, #152]	; (800691c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	461a      	mov	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a24      	ldr	r2, [pc, #144]	; (8006920 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006890:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f003 031f 	and.w	r3, r3, #31
 8006898:	2201      	movs	r2, #1
 800689a:	409a      	lsls	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80068a0:	e024      	b.n	80068ec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	3b10      	subs	r3, #16
 80068aa:	4a1e      	ldr	r2, [pc, #120]	; (8006924 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80068ac:	fba2 2303 	umull	r2, r3, r2, r3
 80068b0:	091b      	lsrs	r3, r3, #4
 80068b2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4a1c      	ldr	r2, [pc, #112]	; (8006928 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d806      	bhi.n	80068ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4a1b      	ldr	r2, [pc, #108]	; (800692c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d902      	bls.n	80068ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3308      	adds	r3, #8
 80068c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4b18      	ldr	r3, [pc, #96]	; (8006930 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	461a      	mov	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a16      	ldr	r2, [pc, #88]	; (8006934 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80068dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	2201      	movs	r2, #1
 80068e6:	409a      	lsls	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	669a      	str	r2, [r3, #104]	; 0x68
}
 80068ec:	bf00      	nop
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	58025408 	.word	0x58025408
 80068fc:	5802541c 	.word	0x5802541c
 8006900:	58025430 	.word	0x58025430
 8006904:	58025444 	.word	0x58025444
 8006908:	58025458 	.word	0x58025458
 800690c:	5802546c 	.word	0x5802546c
 8006910:	58025480 	.word	0x58025480
 8006914:	58025494 	.word	0x58025494
 8006918:	cccccccd 	.word	0xcccccccd
 800691c:	16009600 	.word	0x16009600
 8006920:	58025880 	.word	0x58025880
 8006924:	aaaaaaab 	.word	0xaaaaaaab
 8006928:	400204b8 	.word	0x400204b8
 800692c:	4002040f 	.word	0x4002040f
 8006930:	10008200 	.word	0x10008200
 8006934:	40020880 	.word	0x40020880

08006938 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d04a      	beq.n	80069e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2b08      	cmp	r3, #8
 8006952:	d847      	bhi.n	80069e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a25      	ldr	r2, [pc, #148]	; (80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d022      	beq.n	80069a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a24      	ldr	r2, [pc, #144]	; (80069f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d01d      	beq.n	80069a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a22      	ldr	r2, [pc, #136]	; (80069f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d018      	beq.n	80069a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a21      	ldr	r2, [pc, #132]	; (80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d013      	beq.n	80069a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1f      	ldr	r2, [pc, #124]	; (8006a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00e      	beq.n	80069a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1e      	ldr	r2, [pc, #120]	; (8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d009      	beq.n	80069a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1c      	ldr	r2, [pc, #112]	; (8006a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d004      	beq.n	80069a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1b      	ldr	r2, [pc, #108]	; (8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d101      	bne.n	80069a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80069a8:	2300      	movs	r3, #0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	4b17      	ldr	r3, [pc, #92]	; (8006a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80069b2:	4413      	add	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	461a      	mov	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a15      	ldr	r2, [pc, #84]	; (8006a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80069c0:	671a      	str	r2, [r3, #112]	; 0x70
 80069c2:	e009      	b.n	80069d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4b14      	ldr	r3, [pc, #80]	; (8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	461a      	mov	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a11      	ldr	r2, [pc, #68]	; (8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80069d6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3b01      	subs	r3, #1
 80069dc:	2201      	movs	r2, #1
 80069de:	409a      	lsls	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80069e4:	bf00      	nop
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	58025408 	.word	0x58025408
 80069f4:	5802541c 	.word	0x5802541c
 80069f8:	58025430 	.word	0x58025430
 80069fc:	58025444 	.word	0x58025444
 8006a00:	58025458 	.word	0x58025458
 8006a04:	5802546c 	.word	0x5802546c
 8006a08:	58025480 	.word	0x58025480
 8006a0c:	58025494 	.word	0x58025494
 8006a10:	1600963f 	.word	0x1600963f
 8006a14:	58025940 	.word	0x58025940
 8006a18:	1000823f 	.word	0x1000823f
 8006a1c:	40020940 	.word	0x40020940

08006a20 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b098      	sub	sp, #96	; 0x60
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006a28:	4a84      	ldr	r2, [pc, #528]	; (8006c3c <HAL_FDCAN_Init+0x21c>)
 8006a2a:	f107 030c 	add.w	r3, r7, #12
 8006a2e:	4611      	mov	r1, r2
 8006a30:	224c      	movs	r2, #76	; 0x4c
 8006a32:	4618      	mov	r0, r3
 8006a34:	f012 fd28 	bl	8019488 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e1ca      	b.n	8006dd8 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a7e      	ldr	r2, [pc, #504]	; (8006c40 <HAL_FDCAN_Init+0x220>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d106      	bne.n	8006a5a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006a54:	461a      	mov	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7fd f94e 	bl	8003d10 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699a      	ldr	r2, [r3, #24]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0210 	bic.w	r2, r2, #16
 8006a82:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a84:	f7fd fdaa 	bl	80045dc <HAL_GetTick>
 8006a88:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a8a:	e014      	b.n	8006ab6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006a8c:	f7fd fda6 	bl	80045dc <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b0a      	cmp	r3, #10
 8006a98:	d90d      	bls.n	8006ab6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aa0:	f043 0201 	orr.w	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2203      	movs	r2, #3
 8006aae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e190      	b.n	8006dd8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d0e3      	beq.n	8006a8c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699a      	ldr	r2, [r3, #24]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ad4:	f7fd fd82 	bl	80045dc <HAL_GetTick>
 8006ad8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ada:	e014      	b.n	8006b06 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006adc:	f7fd fd7e 	bl	80045dc <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b0a      	cmp	r3, #10
 8006ae8:	d90d      	bls.n	8006b06 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006af0:	f043 0201 	orr.w	r2, r3, #1
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2203      	movs	r2, #3
 8006afe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e168      	b.n	8006dd8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0e3      	beq.n	8006adc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699a      	ldr	r2, [r3, #24]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0202 	orr.w	r2, r2, #2
 8006b22:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	7c1b      	ldrb	r3, [r3, #16]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d108      	bne.n	8006b3e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b3a:	619a      	str	r2, [r3, #24]
 8006b3c:	e007      	b.n	8006b4e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	699a      	ldr	r2, [r3, #24]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b4c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	7c5b      	ldrb	r3, [r3, #17]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d108      	bne.n	8006b68 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	699a      	ldr	r2, [r3, #24]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b64:	619a      	str	r2, [r3, #24]
 8006b66:	e007      	b.n	8006b78 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b76:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	7c9b      	ldrb	r3, [r3, #18]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d108      	bne.n	8006b92 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699a      	ldr	r2, [r3, #24]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b8e:	619a      	str	r2, [r3, #24]
 8006b90:	e007      	b.n	8006ba2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	699a      	ldr	r2, [r3, #24]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ba0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006bc6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691a      	ldr	r2, [r3, #16]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0210 	bic.w	r2, r2, #16
 8006bd6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d108      	bne.n	8006bf2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0204 	orr.w	r2, r2, #4
 8006bee:	619a      	str	r2, [r3, #24]
 8006bf0:	e030      	b.n	8006c54 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d02c      	beq.n	8006c54 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d020      	beq.n	8006c44 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	699a      	ldr	r2, [r3, #24]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c10:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f042 0210 	orr.w	r2, r2, #16
 8006c20:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d114      	bne.n	8006c54 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	699a      	ldr	r2, [r3, #24]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0220 	orr.w	r2, r2, #32
 8006c38:	619a      	str	r2, [r3, #24]
 8006c3a:	e00b      	b.n	8006c54 <HAL_FDCAN_Init+0x234>
 8006c3c:	0801ae64 	.word	0x0801ae64
 8006c40:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0220 	orr.w	r2, r2, #32
 8006c52:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c64:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c6c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c7c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c7e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c88:	d115      	bne.n	8006cb6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	3b01      	subs	r3, #1
 8006c96:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c98:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006ca2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	3b01      	subs	r3, #1
 8006cac:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006cb2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006cb4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cdc:	4413      	add	r3, r2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d012      	beq.n	8006d08 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006cea:	f023 0107 	bic.w	r1, r3, #7
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d012      	beq.n	8006d36 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d18:	f023 0107 	bic.w	r1, r3, #7
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d26:	4413      	add	r3, r2
 8006d28:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d013      	beq.n	8006d66 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d46:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d54:	4413      	add	r3, r2
 8006d56:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d5a:	011a      	lsls	r2, r3, #4
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d013      	beq.n	8006d96 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d76:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d84:	4413      	add	r3, r2
 8006d86:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d8a:	021a      	lsls	r2, r3, #8
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a11      	ldr	r2, [pc, #68]	; (8006de0 <HAL_FDCAN_Init+0x3c0>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d107      	bne.n	8006db0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f022 0203 	bic.w	r2, r2, #3
 8006dae:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fddf 	bl	800798c <FDCAN_CalcultateRamBlockAddresses>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006dd4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3760      	adds	r7, #96	; 0x60
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	4000a000 	.word	0x4000a000

08006de4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006df4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d002      	beq.n	8006e02 <HAL_FDCAN_ConfigFilter+0x1e>
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d157      	bne.n	8006eb2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d12b      	bne.n	8006e62 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	2b07      	cmp	r3, #7
 8006e10:	d10d      	bne.n	8006e2e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8006e1e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006e24:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8006e26:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	e00e      	b.n	8006e4c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006e3a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8006e42:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	e025      	b.n	8006eae <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	075a      	lsls	r2, r3, #29
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	2b07      	cmp	r3, #7
 8006e76:	d103      	bne.n	8006e80 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	613b      	str	r3, [r7, #16]
 8006e7e:	e006      	b.n	8006e8e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	079a      	lsls	r2, r3, #30
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	4413      	add	r3, r2
 8006e9a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e008      	b.n	8006ec4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006eb8:	f043 0202 	orr.w	r2, r3, #2
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
  }
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	371c      	adds	r7, #28
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d110      	bne.n	8006f0c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006ef2:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006ef8:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e008      	b.n	8006f1e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f12:	f043 0204 	orr.w	r2, r3, #4
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
  }
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d109      	bne.n	8006f52 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006f4c:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	e008      	b.n	8006f64 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f58:	f043 0204 	orr.w	r2, r3, #4
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
  }
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d111      	bne.n	8006fa8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0201 	bic.w	r2, r2, #1
 8006f9a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e008      	b.n	8006fba <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fae:	f043 0204 	orr.w	r2, r3, #4
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
  }
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
	...

08006fc8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b08b      	sub	sp, #44	; 0x2c
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006fe0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8006fe2:	7efb      	ldrb	r3, [r7, #27]
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	f040 813b 	bne.w	8007260 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b40      	cmp	r3, #64	; 0x40
 8006fee:	d145      	bne.n	800707c <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ff8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d109      	bne.n	8007014 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007006:	f043 0220 	orr.w	r2, r3, #32
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e12e      	b.n	8007272 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800701c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007020:	2b00      	cmp	r3, #0
 8007022:	d109      	bne.n	8007038 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800702a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e11c      	b.n	8007272 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007040:	0e1b      	lsrs	r3, r3, #24
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b01      	cmp	r3, #1
 8007048:	d103      	bne.n	8007052 <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800705a:	0a1b      	lsrs	r3, r3, #8
 800705c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007060:	69fa      	ldr	r2, [r7, #28]
 8007062:	4413      	add	r3, r2
 8007064:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706e:	69f9      	ldr	r1, [r7, #28]
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
 800707a:	e061      	b.n	8007140 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b41      	cmp	r3, #65	; 0x41
 8007080:	d145      	bne.n	800710e <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800708a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d109      	bne.n	80070a6 <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007098:	f043 0220 	orr.w	r2, r3, #32
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e0e5      	b.n	8007272 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d109      	bne.n	80070ca <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e0d3      	b.n	8007272 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070d2:	0e1b      	lsrs	r3, r3, #24
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d103      	bne.n	80070e4 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	4413      	add	r3, r2
 80070f6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007100:	69f9      	ldr	r1, [r7, #28]
 8007102:	fb01 f303 	mul.w	r3, r1, r3
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	627b      	str	r3, [r7, #36]	; 0x24
 800710c:	e018      	b.n	8007140 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	429a      	cmp	r2, r3
 8007116:	d309      	bcc.n	800712c <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800711e:	f043 0220 	orr.w	r2, r3, #32
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e0a2      	b.n	8007272 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007134:	68b9      	ldr	r1, [r7, #8]
 8007136:	fb01 f303 	mul.w	r3, r1, r3
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d107      	bne.n	8007164 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	0c9b      	lsrs	r3, r3, #18
 800715a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	e005      	b.n	8007170 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	3304      	adds	r3, #4
 800718c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	b29a      	uxth	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	0e1b      	lsrs	r3, r3, #24
 80071c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	0fda      	lsrs	r2, r3, #31
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	3304      	adds	r3, #4
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80071de:	2300      	movs	r3, #0
 80071e0:	623b      	str	r3, [r7, #32]
 80071e2:	e00a      	b.n	80071fa <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	441a      	add	r2, r3
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	440b      	add	r3, r1
 80071f0:	7812      	ldrb	r2, [r2, #0]
 80071f2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	3301      	adds	r3, #1
 80071f8:	623b      	str	r3, [r7, #32]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	0c1b      	lsrs	r3, r3, #16
 8007200:	4a1f      	ldr	r2, [pc, #124]	; (8007280 <HAL_FDCAN_GetRxMessage+0x2b8>)
 8007202:	5cd3      	ldrb	r3, [r2, r3]
 8007204:	461a      	mov	r2, r3
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	4293      	cmp	r3, r2
 800720a:	d3eb      	bcc.n	80071e4 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b40      	cmp	r3, #64	; 0x40
 8007210:	d105      	bne.n	800721e <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800721c:	e01e      	b.n	800725c <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b41      	cmp	r3, #65	; 0x41
 8007222:	d105      	bne.n	8007230 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	69fa      	ldr	r2, [r7, #28]
 800722a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800722e:	e015      	b.n	800725c <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b1f      	cmp	r3, #31
 8007234:	d808      	bhi.n	8007248 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2101      	movs	r1, #1
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	fa01 f202 	lsl.w	r2, r1, r2
 8007242:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007246:	e009      	b.n	800725c <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f003 021f 	and.w	r2, r3, #31
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2101      	movs	r1, #1
 8007254:	fa01 f202 	lsl.w	r2, r1, r2
 8007258:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	e008      	b.n	8007272 <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007266:	f043 0208 	orr.w	r2, r3, #8
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
  }
}
 8007272:	4618      	mov	r0, r3
 8007274:	372c      	adds	r7, #44	; 0x2c
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	0801af60 	.word	0x0801af60

08007284 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007296:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d002      	beq.n	80072a4 <HAL_FDCAN_ActivateNotification+0x20>
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d155      	bne.n	8007350 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4013      	ands	r3, r2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d108      	bne.n	80072c4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0201 	orr.w	r2, r2, #1
 80072c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80072c2:	e014      	b.n	80072ee <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	4013      	ands	r3, r2
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d108      	bne.n	80072e6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f042 0202 	orr.w	r2, r2, #2
 80072e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80072e4:	e003      	b.n	80072ee <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2203      	movs	r2, #3
 80072ec:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d009      	beq.n	800730c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	430a      	orrs	r2, r1
 8007308:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007312:	2b00      	cmp	r3, #0
 8007314:	d009      	beq.n	800732a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	430a      	orrs	r2, r1
 8007326:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	4b0f      	ldr	r3, [pc, #60]	; (8007370 <HAL_FDCAN_ActivateNotification+0xec>)
 8007334:	4013      	ands	r3, r2
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	6812      	ldr	r2, [r2, #0]
 800733a:	430b      	orrs	r3, r1
 800733c:	6553      	str	r3, [r2, #84]	; 0x54
 800733e:	4b0d      	ldr	r3, [pc, #52]	; (8007374 <HAL_FDCAN_ActivateNotification+0xf0>)
 8007340:	695a      	ldr	r2, [r3, #20]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	0f9b      	lsrs	r3, r3, #30
 8007346:	490b      	ldr	r1, [pc, #44]	; (8007374 <HAL_FDCAN_ActivateNotification+0xf0>)
 8007348:	4313      	orrs	r3, r2
 800734a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	e008      	b.n	8007362 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007356:	f043 0202 	orr.w	r2, r3, #2
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
  }
}
 8007362:	4618      	mov	r0, r3
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	3fcfffff 	.word	0x3fcfffff
 8007374:	4000a800 	.word	0x4000a800

08007378 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b092      	sub	sp, #72	; 0x48
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8007380:	4b90      	ldr	r3, [pc, #576]	; (80075c4 <HAL_FDCAN_IRQHandler+0x24c>)
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	079b      	lsls	r3, r3, #30
 8007386:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007388:	4b8e      	ldr	r3, [pc, #568]	; (80075c4 <HAL_FDCAN_IRQHandler+0x24c>)
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	079b      	lsls	r3, r3, #30
 800738e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007390:	4013      	ands	r3, r2
 8007392:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800739e:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073a8:	4013      	ands	r3, r2
 80073aa:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073c0:	4013      	ands	r3, r2
 80073c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073d8:	4013      	ands	r3, r2
 80073da:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80073e6:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073f0:	4013      	ands	r3, r2
 80073f2:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fa:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80073fe:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007408:	4013      	ands	r3, r2
 800740a:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007416:	2b00      	cmp	r3, #0
 8007418:	d011      	beq.n	800743e <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007430:	651a      	str	r2, [r3, #80]	; 0x50
 8007432:	4b64      	ldr	r3, [pc, #400]	; (80075c4 <HAL_FDCAN_IRQHandler+0x24c>)
 8007434:	2200      	movs	r2, #0
 8007436:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fa5a 	bl	80078f2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01e      	beq.n	800748a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007456:	2b00      	cmp	r3, #0
 8007458:	d017      	beq.n	800748a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007462:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800746c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800746e:	4013      	ands	r3, r2
 8007470:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800747a:	651a      	str	r2, [r3, #80]	; 0x50
 800747c:	4b51      	ldr	r3, [pc, #324]	; (80075c4 <HAL_FDCAN_IRQHandler+0x24c>)
 800747e:	2200      	movs	r2, #0
 8007480:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fa0b 	bl	80078a0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800748a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00d      	beq.n	80074ac <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007496:	4b4c      	ldr	r3, [pc, #304]	; (80075c8 <HAL_FDCAN_IRQHandler+0x250>)
 8007498:	400b      	ands	r3, r1
 800749a:	6513      	str	r3, [r2, #80]	; 0x50
 800749c:	4a49      	ldr	r2, [pc, #292]	; (80075c4 <HAL_FDCAN_IRQHandler+0x24c>)
 800749e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a0:	0f9b      	lsrs	r3, r3, #30
 80074a2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80074a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f9c4 	bl	8007834 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80074ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00d      	beq.n	80074ce <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074b8:	4b43      	ldr	r3, [pc, #268]	; (80075c8 <HAL_FDCAN_IRQHandler+0x250>)
 80074ba:	400b      	ands	r3, r1
 80074bc:	6513      	str	r3, [r2, #80]	; 0x50
 80074be:	4a41      	ldr	r2, [pc, #260]	; (80075c4 <HAL_FDCAN_IRQHandler+0x24c>)
 80074c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c2:	0f9b      	lsrs	r3, r3, #30
 80074c4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80074c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f9be 	bl	800784a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80074ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00d      	beq.n	80074f0 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074da:	4b3b      	ldr	r3, [pc, #236]	; (80075c8 <HAL_FDCAN_IRQHandler+0x250>)
 80074dc:	400b      	ands	r3, r1
 80074de:	6513      	str	r3, [r2, #80]	; 0x50
 80074e0:	4a38      	ldr	r2, [pc, #224]	; (80075c4 <HAL_FDCAN_IRQHandler+0x24c>)
 80074e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e4:	0f9b      	lsrs	r3, r3, #30
 80074e6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80074e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7f9 f90e 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80074f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00d      	beq.n	8007512 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074fc:	4b32      	ldr	r3, [pc, #200]	; (80075c8 <HAL_FDCAN_IRQHandler+0x250>)
 80074fe:	400b      	ands	r3, r1
 8007500:	6513      	str	r3, [r2, #80]	; 0x50
 8007502:	4a30      	ldr	r2, [pc, #192]	; (80075c4 <HAL_FDCAN_IRQHandler+0x24c>)
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	0f9b      	lsrs	r3, r3, #30
 8007508:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800750a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f9a7 	bl	8007860 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800751c:	2b00      	cmp	r3, #0
 800751e:	d011      	beq.n	8007544 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007536:	651a      	str	r2, [r3, #80]	; 0x50
 8007538:	4b22      	ldr	r3, [pc, #136]	; (80075c4 <HAL_FDCAN_IRQHandler+0x24c>)
 800753a:	2200      	movs	r2, #0
 800753c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f999 	bl	8007876 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800754e:	2b00      	cmp	r3, #0
 8007550:	d01e      	beq.n	8007590 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800755c:	2b00      	cmp	r3, #0
 800755e:	d017      	beq.n	8007590 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007568:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007574:	4013      	ands	r3, r2
 8007576:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007580:	651a      	str	r2, [r3, #80]	; 0x50
 8007582:	4b10      	ldr	r3, [pc, #64]	; (80075c4 <HAL_FDCAN_IRQHandler+0x24c>)
 8007584:	2200      	movs	r2, #0
 8007586:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f97d 	bl	800788a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d016      	beq.n	80075cc <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00f      	beq.n	80075cc <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80075b4:	651a      	str	r2, [r3, #80]	; 0x50
 80075b6:	4b03      	ldr	r3, [pc, #12]	; (80075c4 <HAL_FDCAN_IRQHandler+0x24c>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f97a 	bl	80078b6 <HAL_FDCAN_RxBufferNewMessageCallback>
 80075c2:	e003      	b.n	80075cc <HAL_FDCAN_IRQHandler+0x254>
 80075c4:	4000a800 	.word	0x4000a800
 80075c8:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d011      	beq.n	80075fe <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00a      	beq.n	80075fe <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80075f0:	651a      	str	r2, [r3, #80]	; 0x50
 80075f2:	4b8d      	ldr	r3, [pc, #564]	; (8007828 <HAL_FDCAN_IRQHandler+0x4b0>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f966 	bl	80078ca <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d011      	beq.n	8007630 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007622:	651a      	str	r2, [r3, #80]	; 0x50
 8007624:	4b80      	ldr	r3, [pc, #512]	; (8007828 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007626:	2200      	movs	r2, #0
 8007628:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f957 	bl	80078de <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d016      	beq.n	800766c <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00f      	beq.n	800766c <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007654:	651a      	str	r2, [r3, #80]	; 0x50
 8007656:	4b74      	ldr	r3, [pc, #464]	; (8007828 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007658:	2200      	movs	r2, #0
 800765a:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007662:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00d      	beq.n	800768e <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007678:	4b6c      	ldr	r3, [pc, #432]	; (800782c <HAL_FDCAN_IRQHandler+0x4b4>)
 800767a:	400b      	ands	r3, r1
 800767c:	6513      	str	r3, [r2, #80]	; 0x50
 800767e:	4a6a      	ldr	r2, [pc, #424]	; (8007828 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	0f9b      	lsrs	r3, r3, #30
 8007684:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007686:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f946 	bl	800791a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800768e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007690:	2b00      	cmp	r3, #0
 8007692:	d011      	beq.n	80076b8 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800769a:	4b64      	ldr	r3, [pc, #400]	; (800782c <HAL_FDCAN_IRQHandler+0x4b4>)
 800769c:	400b      	ands	r3, r1
 800769e:	6513      	str	r3, [r2, #80]	; 0x50
 80076a0:	4a61      	ldr	r2, [pc, #388]	; (8007828 <HAL_FDCAN_IRQHandler+0x4b0>)
 80076a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a4:	0f9b      	lsrs	r3, r3, #30
 80076a6:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80076ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b0:	431a      	orrs	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a5c      	ldr	r2, [pc, #368]	; (8007830 <HAL_FDCAN_IRQHandler+0x4b8>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	f040 80a6 	bne.w	8007810 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 809e 	beq.w	8007810 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e8:	4013      	ands	r3, r2
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076f6:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	6a3a      	ldr	r2, [r7, #32]
 8007700:	4013      	ands	r3, r2
 8007702:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800770e:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	4013      	ands	r3, r2
 800771a:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8007726:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	4013      	ands	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800773e:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4013      	ands	r3, r2
 800774a:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	2b00      	cmp	r3, #0
 8007750:	d007      	beq.n	8007762 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007758:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800775a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f8e7 	bl	8007930 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d007      	beq.n	8007778 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	6a3a      	ldr	r2, [r7, #32]
 800776e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007770:	6a39      	ldr	r1, [r7, #32]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f8e7 	bl	8007946 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007782:	2b00      	cmp	r3, #0
 8007784:	d01b      	beq.n	80077be <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	6a1b      	ldr	r3, [r3, #32]
 800778c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007790:	2b00      	cmp	r3, #0
 8007792:	d014      	beq.n	80077be <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779a:	0c1b      	lsrs	r3, r3, #16
 800779c:	b29b      	uxth	r3, r3
 800779e:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077aa:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	2240      	movs	r2, #64	; 0x40
 80077b2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	6939      	ldr	r1, [r7, #16]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f8cf 	bl	800795c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d007      	beq.n	80077d4 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80077cc:	69f9      	ldr	r1, [r7, #28]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f8d0 	bl	8007974 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00b      	beq.n	80077f2 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	69ba      	ldr	r2, [r7, #24]
 80077e0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	431a      	orrs	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00b      	beq.n	8007810 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	431a      	orrs	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f873 	bl	8007906 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007820:	bf00      	nop
 8007822:	3748      	adds	r7, #72	; 0x48
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	4000a800 	.word	0x4000a800
 800782c:	3fcfffff 	.word	0x3fcfffff
 8007830:	4000a000 	.word	0x4000a000

08007834 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800783e:	bf00      	nop
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80078aa:	bf00      	nop
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80078d2:	bf00      	nop
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800793a:	bf00      	nop
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8007968:	bf00      	nop
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800797e:	bf00      	nop
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
	...

0800798c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007998:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80079a2:	4ba7      	ldr	r3, [pc, #668]	; (8007c40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079a4:	4013      	ands	r3, r2
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	0091      	lsls	r1, r2, #2
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	6812      	ldr	r2, [r2, #0]
 80079ae:	430b      	orrs	r3, r1
 80079b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079bc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	041a      	lsls	r2, r3, #16
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	4413      	add	r3, r2
 80079d8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80079e2:	4b97      	ldr	r3, [pc, #604]	; (8007c40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079e4:	4013      	ands	r3, r2
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	0091      	lsls	r1, r2, #2
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6812      	ldr	r2, [r2, #0]
 80079ee:	430b      	orrs	r3, r1
 80079f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079fc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a04:	041a      	lsls	r2, r3, #16
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	4413      	add	r3, r2
 8007a1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007a24:	4b86      	ldr	r3, [pc, #536]	; (8007c40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a26:	4013      	ands	r3, r2
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	0091      	lsls	r1, r2, #2
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6812      	ldr	r2, [r2, #0]
 8007a30:	430b      	orrs	r3, r1
 8007a32:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a3e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	041a      	lsls	r2, r3, #16
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007a5a:	fb02 f303 	mul.w	r3, r2, r3
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	4413      	add	r3, r2
 8007a62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007a6c:	4b74      	ldr	r3, [pc, #464]	; (8007c40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a6e:	4013      	ands	r3, r2
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	0091      	lsls	r1, r2, #2
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6812      	ldr	r2, [r2, #0]
 8007a78:	430b      	orrs	r3, r1
 8007a7a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a86:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8e:	041a      	lsls	r2, r3, #16
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	430a      	orrs	r2, r1
 8007a96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007aa2:	fb02 f303 	mul.w	r3, r2, r3
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007ab4:	4b62      	ldr	r3, [pc, #392]	; (8007c40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	0091      	lsls	r1, r2, #2
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	6812      	ldr	r2, [r2, #0]
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007ace:	fb02 f303 	mul.w	r3, r2, r3
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007ae0:	4b57      	ldr	r3, [pc, #348]	; (8007c40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	0091      	lsls	r1, r2, #2
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	430b      	orrs	r3, r1
 8007aee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007afa:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b02:	041a      	lsls	r2, r3, #16
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	4413      	add	r3, r2
 8007b18:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007b22:	4b47      	ldr	r3, [pc, #284]	; (8007c40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b24:	4013      	ands	r3, r2
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	0091      	lsls	r1, r2, #2
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6812      	ldr	r2, [r2, #0]
 8007b2e:	430b      	orrs	r3, r1
 8007b30:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b3c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b44:	041a      	lsls	r2, r3, #16
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b58:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b60:	061a      	lsls	r2, r3, #24
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b70:	4b34      	ldr	r3, [pc, #208]	; (8007c44 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007b72:	4413      	add	r3, r2
 8007b74:	009a      	lsls	r2, r3, #2
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	441a      	add	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	441a      	add	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007ba6:	fb01 f303 	mul.w	r3, r1, r3
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	441a      	add	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007bbe:	fb01 f303 	mul.w	r3, r1, r3
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	441a      	add	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007bd6:	fb01 f303 	mul.w	r3, r1, r3
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	441a      	add	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	441a      	add	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007c06:	fb01 f303 	mul.w	r3, r1, r3
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	441a      	add	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007c22:	fb01 f303 	mul.w	r3, r1, r3
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	441a      	add	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c36:	4a04      	ldr	r2, [pc, #16]	; (8007c48 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d915      	bls.n	8007c68 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007c3c:	e006      	b.n	8007c4c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007c3e:	bf00      	nop
 8007c40:	ffff0003 	.word	0xffff0003
 8007c44:	10002b00 	.word	0x10002b00
 8007c48:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c52:	f043 0220 	orr.w	r2, r3, #32
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2203      	movs	r2, #3
 8007c60:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e010      	b.n	8007c8a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	e005      	b.n	8007c7c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d3f3      	bcc.n	8007c70 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop

08007c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b089      	sub	sp, #36	; 0x24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007ca6:	4b89      	ldr	r3, [pc, #548]	; (8007ecc <HAL_GPIO_Init+0x234>)
 8007ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007caa:	e194      	b.n	8007fd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb8:	4013      	ands	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 8186 	beq.w	8007fd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d00b      	beq.n	8007ce4 <HAL_GPIO_Init+0x4c>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d007      	beq.n	8007ce4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cd8:	2b11      	cmp	r3, #17
 8007cda:	d003      	beq.n	8007ce4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	2b12      	cmp	r3, #18
 8007ce2:	d130      	bne.n	8007d46 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	2203      	movs	r2, #3
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	43db      	mvns	r3, r3
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	68da      	ldr	r2, [r3, #12]
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	fa02 f303 	lsl.w	r3, r2, r3
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d22:	43db      	mvns	r3, r3
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	4013      	ands	r3, r2
 8007d28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	091b      	lsrs	r3, r3, #4
 8007d30:	f003 0201 	and.w	r2, r3, #1
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	005b      	lsls	r3, r3, #1
 8007d50:	2203      	movs	r2, #3
 8007d52:	fa02 f303 	lsl.w	r3, r2, r3
 8007d56:	43db      	mvns	r3, r3
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	689a      	ldr	r2, [r3, #8]
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d003      	beq.n	8007d86 <HAL_GPIO_Init+0xee>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2b12      	cmp	r3, #18
 8007d84:	d123      	bne.n	8007dce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	08da      	lsrs	r2, r3, #3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3208      	adds	r2, #8
 8007d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	220f      	movs	r2, #15
 8007d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007da2:	43db      	mvns	r3, r3
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	4013      	ands	r3, r2
 8007da8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	691a      	ldr	r2, [r3, #16]
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	08da      	lsrs	r2, r3, #3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3208      	adds	r2, #8
 8007dc8:	69b9      	ldr	r1, [r7, #24]
 8007dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	2203      	movs	r2, #3
 8007dda:	fa02 f303 	lsl.w	r3, r2, r3
 8007dde:	43db      	mvns	r3, r3
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	4013      	ands	r3, r2
 8007de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f003 0203 	and.w	r2, r3, #3
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	005b      	lsls	r3, r3, #1
 8007df2:	fa02 f303 	lsl.w	r3, r2, r3
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f000 80e0 	beq.w	8007fd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e10:	4b2f      	ldr	r3, [pc, #188]	; (8007ed0 <HAL_GPIO_Init+0x238>)
 8007e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e16:	4a2e      	ldr	r2, [pc, #184]	; (8007ed0 <HAL_GPIO_Init+0x238>)
 8007e18:	f043 0302 	orr.w	r3, r3, #2
 8007e1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e20:	4b2b      	ldr	r3, [pc, #172]	; (8007ed0 <HAL_GPIO_Init+0x238>)
 8007e22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e26:	f003 0302 	and.w	r3, r3, #2
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e2e:	4a29      	ldr	r2, [pc, #164]	; (8007ed4 <HAL_GPIO_Init+0x23c>)
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	089b      	lsrs	r3, r3, #2
 8007e34:	3302      	adds	r3, #2
 8007e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f003 0303 	and.w	r3, r3, #3
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	220f      	movs	r2, #15
 8007e46:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4a:	43db      	mvns	r3, r3
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a20      	ldr	r2, [pc, #128]	; (8007ed8 <HAL_GPIO_Init+0x240>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d052      	beq.n	8007f00 <HAL_GPIO_Init+0x268>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a1f      	ldr	r2, [pc, #124]	; (8007edc <HAL_GPIO_Init+0x244>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d031      	beq.n	8007ec6 <HAL_GPIO_Init+0x22e>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a1e      	ldr	r2, [pc, #120]	; (8007ee0 <HAL_GPIO_Init+0x248>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d02b      	beq.n	8007ec2 <HAL_GPIO_Init+0x22a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ee4 <HAL_GPIO_Init+0x24c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d025      	beq.n	8007ebe <HAL_GPIO_Init+0x226>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a1c      	ldr	r2, [pc, #112]	; (8007ee8 <HAL_GPIO_Init+0x250>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d01f      	beq.n	8007eba <HAL_GPIO_Init+0x222>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a1b      	ldr	r2, [pc, #108]	; (8007eec <HAL_GPIO_Init+0x254>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d019      	beq.n	8007eb6 <HAL_GPIO_Init+0x21e>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a1a      	ldr	r2, [pc, #104]	; (8007ef0 <HAL_GPIO_Init+0x258>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d013      	beq.n	8007eb2 <HAL_GPIO_Init+0x21a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a19      	ldr	r2, [pc, #100]	; (8007ef4 <HAL_GPIO_Init+0x25c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d00d      	beq.n	8007eae <HAL_GPIO_Init+0x216>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a18      	ldr	r2, [pc, #96]	; (8007ef8 <HAL_GPIO_Init+0x260>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d007      	beq.n	8007eaa <HAL_GPIO_Init+0x212>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a17      	ldr	r2, [pc, #92]	; (8007efc <HAL_GPIO_Init+0x264>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d101      	bne.n	8007ea6 <HAL_GPIO_Init+0x20e>
 8007ea2:	2309      	movs	r3, #9
 8007ea4:	e02d      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007ea6:	230a      	movs	r3, #10
 8007ea8:	e02b      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007eaa:	2308      	movs	r3, #8
 8007eac:	e029      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007eae:	2307      	movs	r3, #7
 8007eb0:	e027      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007eb2:	2306      	movs	r3, #6
 8007eb4:	e025      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007eb6:	2305      	movs	r3, #5
 8007eb8:	e023      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007eba:	2304      	movs	r3, #4
 8007ebc:	e021      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e01f      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e01d      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e01b      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007eca:	bf00      	nop
 8007ecc:	58000080 	.word	0x58000080
 8007ed0:	58024400 	.word	0x58024400
 8007ed4:	58000400 	.word	0x58000400
 8007ed8:	58020000 	.word	0x58020000
 8007edc:	58020400 	.word	0x58020400
 8007ee0:	58020800 	.word	0x58020800
 8007ee4:	58020c00 	.word	0x58020c00
 8007ee8:	58021000 	.word	0x58021000
 8007eec:	58021400 	.word	0x58021400
 8007ef0:	58021800 	.word	0x58021800
 8007ef4:	58021c00 	.word	0x58021c00
 8007ef8:	58022000 	.word	0x58022000
 8007efc:	58022400 	.word	0x58022400
 8007f00:	2300      	movs	r3, #0
 8007f02:	69fa      	ldr	r2, [r7, #28]
 8007f04:	f002 0203 	and.w	r2, r2, #3
 8007f08:	0092      	lsls	r2, r2, #2
 8007f0a:	4093      	lsls	r3, r2
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f12:	4938      	ldr	r1, [pc, #224]	; (8007ff4 <HAL_GPIO_Init+0x35c>)
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	089b      	lsrs	r3, r3, #2
 8007f18:	3302      	adds	r3, #2
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	43db      	mvns	r3, r3
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d003      	beq.n	8007f44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	43db      	mvns	r3, r3
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	4013      	ands	r3, r2
 8007f58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	43db      	mvns	r3, r3
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	4013      	ands	r3, r2
 8007f84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	43db      	mvns	r3, r3
 8007fae:	69ba      	ldr	r2, [r7, #24]
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d003      	beq.n	8007fc8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f47f ae63 	bne.w	8007cac <HAL_GPIO_Init+0x14>
  }
}
 8007fe6:	bf00      	nop
 8007fe8:	3724      	adds	r7, #36	; 0x24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	58000400 	.word	0x58000400

08007ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	691a      	ldr	r2, [r3, #16]
 8008008:	887b      	ldrh	r3, [r7, #2]
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008010:	2301      	movs	r3, #1
 8008012:	73fb      	strb	r3, [r7, #15]
 8008014:	e001      	b.n	800801a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	807b      	strh	r3, [r7, #2]
 8008034:	4613      	mov	r3, r2
 8008036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008038:	787b      	ldrb	r3, [r7, #1]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800803e:	887a      	ldrh	r2, [r7, #2]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008044:	e003      	b.n	800804e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008046:	887b      	ldrh	r3, [r7, #2]
 8008048:	041a      	lsls	r2, r3, #16
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	619a      	str	r2, [r3, #24]
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695a      	ldr	r2, [r3, #20]
 800806a:	887b      	ldrh	r3, [r7, #2]
 800806c:	401a      	ands	r2, r3
 800806e:	887b      	ldrh	r3, [r7, #2]
 8008070:	429a      	cmp	r2, r3
 8008072:	d104      	bne.n	800807e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008074:	887b      	ldrh	r3, [r7, #2]
 8008076:	041a      	lsls	r2, r3, #16
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800807c:	e002      	b.n	8008084 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800807e:	887a      	ldrh	r2, [r7, #2]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	619a      	str	r2, [r3, #24]
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800809a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800809e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80080a2:	88fb      	ldrh	r3, [r7, #6]
 80080a4:	4013      	ands	r3, r2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d008      	beq.n	80080bc <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80080aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080ae:	88fb      	ldrh	r3, [r7, #6]
 80080b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080b4:	88fb      	ldrh	r3, [r7, #6]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fb fd8c 	bl	8003bd4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080cc:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80080ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080d2:	4a0c      	ldr	r2, [pc, #48]	; (8008104 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80080d4:	f043 0302 	orr.w	r3, r3, #2
 80080d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80080dc:	4b09      	ldr	r3, [pc, #36]	; (8008104 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80080de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80080ea:	4b07      	ldr	r3, [pc, #28]	; (8008108 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	4906      	ldr	r1, [pc, #24]	; (8008108 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	604b      	str	r3, [r1, #4]
}
 80080f6:	bf00      	nop
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	58024400 	.word	0x58024400
 8008108:	58000400 	.word	0x58000400

0800810c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800810c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800810e:	b08f      	sub	sp, #60	; 0x3c
 8008110:	af0a      	add	r7, sp, #40	; 0x28
 8008112:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e116      	b.n	800834c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d106      	bne.n	800813e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f010 fe4d 	bl	8018dd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2203      	movs	r2, #3
 8008142:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814e:	2b00      	cmp	r3, #0
 8008150:	d102      	bne.n	8008158 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4618      	mov	r0, r3
 800815e:	f009 fe52 	bl	8011e06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	687e      	ldr	r6, [r7, #4]
 800816a:	466d      	mov	r5, sp
 800816c:	f106 0410 	add.w	r4, r6, #16
 8008170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008178:	e894 0003 	ldmia.w	r4, {r0, r1}
 800817c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008180:	1d33      	adds	r3, r6, #4
 8008182:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008184:	6838      	ldr	r0, [r7, #0]
 8008186:	f009 fd29 	bl	8011bdc <USB_CoreInit>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d005      	beq.n	800819c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e0d7      	b.n	800834c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2100      	movs	r1, #0
 80081a2:	4618      	mov	r0, r3
 80081a4:	f009 fe40 	bl	8011e28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081a8:	2300      	movs	r3, #0
 80081aa:	73fb      	strb	r3, [r7, #15]
 80081ac:	e04a      	b.n	8008244 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80081ae:	7bfa      	ldrb	r2, [r7, #15]
 80081b0:	6879      	ldr	r1, [r7, #4]
 80081b2:	4613      	mov	r3, r2
 80081b4:	00db      	lsls	r3, r3, #3
 80081b6:	1a9b      	subs	r3, r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	440b      	add	r3, r1
 80081bc:	333d      	adds	r3, #61	; 0x3d
 80081be:	2201      	movs	r2, #1
 80081c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80081c2:	7bfa      	ldrb	r2, [r7, #15]
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	4613      	mov	r3, r2
 80081c8:	00db      	lsls	r3, r3, #3
 80081ca:	1a9b      	subs	r3, r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	440b      	add	r3, r1
 80081d0:	333c      	adds	r3, #60	; 0x3c
 80081d2:	7bfa      	ldrb	r2, [r7, #15]
 80081d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80081d6:	7bfa      	ldrb	r2, [r7, #15]
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
 80081da:	b298      	uxth	r0, r3
 80081dc:	6879      	ldr	r1, [r7, #4]
 80081de:	4613      	mov	r3, r2
 80081e0:	00db      	lsls	r3, r3, #3
 80081e2:	1a9b      	subs	r3, r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	440b      	add	r3, r1
 80081e8:	3342      	adds	r3, #66	; 0x42
 80081ea:	4602      	mov	r2, r0
 80081ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80081ee:	7bfa      	ldrb	r2, [r7, #15]
 80081f0:	6879      	ldr	r1, [r7, #4]
 80081f2:	4613      	mov	r3, r2
 80081f4:	00db      	lsls	r3, r3, #3
 80081f6:	1a9b      	subs	r3, r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	440b      	add	r3, r1
 80081fc:	333f      	adds	r3, #63	; 0x3f
 80081fe:	2200      	movs	r2, #0
 8008200:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008202:	7bfa      	ldrb	r2, [r7, #15]
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	4613      	mov	r3, r2
 8008208:	00db      	lsls	r3, r3, #3
 800820a:	1a9b      	subs	r3, r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	440b      	add	r3, r1
 8008210:	3344      	adds	r3, #68	; 0x44
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008216:	7bfa      	ldrb	r2, [r7, #15]
 8008218:	6879      	ldr	r1, [r7, #4]
 800821a:	4613      	mov	r3, r2
 800821c:	00db      	lsls	r3, r3, #3
 800821e:	1a9b      	subs	r3, r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	440b      	add	r3, r1
 8008224:	3348      	adds	r3, #72	; 0x48
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800822a:	7bfa      	ldrb	r2, [r7, #15]
 800822c:	6879      	ldr	r1, [r7, #4]
 800822e:	4613      	mov	r3, r2
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	1a9b      	subs	r3, r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	440b      	add	r3, r1
 8008238:	3350      	adds	r3, #80	; 0x50
 800823a:	2200      	movs	r2, #0
 800823c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	3301      	adds	r3, #1
 8008242:	73fb      	strb	r3, [r7, #15]
 8008244:	7bfa      	ldrb	r2, [r7, #15]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	429a      	cmp	r2, r3
 800824c:	d3af      	bcc.n	80081ae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800824e:	2300      	movs	r3, #0
 8008250:	73fb      	strb	r3, [r7, #15]
 8008252:	e044      	b.n	80082de <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008254:	7bfa      	ldrb	r2, [r7, #15]
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	4613      	mov	r3, r2
 800825a:	00db      	lsls	r3, r3, #3
 800825c:	1a9b      	subs	r3, r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	440b      	add	r3, r1
 8008262:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008266:	2200      	movs	r2, #0
 8008268:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800826a:	7bfa      	ldrb	r2, [r7, #15]
 800826c:	6879      	ldr	r1, [r7, #4]
 800826e:	4613      	mov	r3, r2
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	1a9b      	subs	r3, r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	440b      	add	r3, r1
 8008278:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800827c:	7bfa      	ldrb	r2, [r7, #15]
 800827e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008280:	7bfa      	ldrb	r2, [r7, #15]
 8008282:	6879      	ldr	r1, [r7, #4]
 8008284:	4613      	mov	r3, r2
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	1a9b      	subs	r3, r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	440b      	add	r3, r1
 800828e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008292:	2200      	movs	r2, #0
 8008294:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008296:	7bfa      	ldrb	r2, [r7, #15]
 8008298:	6879      	ldr	r1, [r7, #4]
 800829a:	4613      	mov	r3, r2
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	1a9b      	subs	r3, r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	440b      	add	r3, r1
 80082a4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80082ac:	7bfa      	ldrb	r2, [r7, #15]
 80082ae:	6879      	ldr	r1, [r7, #4]
 80082b0:	4613      	mov	r3, r2
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	1a9b      	subs	r3, r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	440b      	add	r3, r1
 80082ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80082be:	2200      	movs	r2, #0
 80082c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80082c2:	7bfa      	ldrb	r2, [r7, #15]
 80082c4:	6879      	ldr	r1, [r7, #4]
 80082c6:	4613      	mov	r3, r2
 80082c8:	00db      	lsls	r3, r3, #3
 80082ca:	1a9b      	subs	r3, r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	440b      	add	r3, r1
 80082d0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	3301      	adds	r3, #1
 80082dc:	73fb      	strb	r3, [r7, #15]
 80082de:	7bfa      	ldrb	r2, [r7, #15]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d3b5      	bcc.n	8008254 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	603b      	str	r3, [r7, #0]
 80082ee:	687e      	ldr	r6, [r7, #4]
 80082f0:	466d      	mov	r5, sp
 80082f2:	f106 0410 	add.w	r4, r6, #16
 80082f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008302:	e885 0003 	stmia.w	r5, {r0, r1}
 8008306:	1d33      	adds	r3, r6, #4
 8008308:	cb0e      	ldmia	r3, {r1, r2, r3}
 800830a:	6838      	ldr	r0, [r7, #0]
 800830c:	f009 fdb6 	bl	8011e7c <USB_DevInit>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d005      	beq.n	8008322 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2202      	movs	r2, #2
 800831a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e014      	b.n	800834c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	2b01      	cmp	r3, #1
 8008338:	d102      	bne.n	8008340 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 f8be 	bl	80094bc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4618      	mov	r0, r3
 8008346:	f00a fdf5 	bl	8012f34 <USB_DevDisconnect>

  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008354 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008368:	2b01      	cmp	r3, #1
 800836a:	d101      	bne.n	8008370 <HAL_PCD_Start+0x1c>
 800836c:	2302      	movs	r3, #2
 800836e:	e020      	b.n	80083b2 <HAL_PCD_Start+0x5e>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837c:	2b01      	cmp	r3, #1
 800837e:	d109      	bne.n	8008394 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008384:	2b01      	cmp	r3, #1
 8008386:	d005      	beq.n	8008394 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4618      	mov	r0, r3
 800839a:	f00a fdb3 	bl	8012f04 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f009 fd1e 	bl	8011de4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80083ba:	b590      	push	{r4, r7, lr}
 80083bc:	b08d      	sub	sp, #52	; 0x34
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f00a fe5a 	bl	801308a <USB_GetMode>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f040 83ca 	bne.w	8008b72 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f00a fdbe 	bl	8012f64 <USB_ReadInterrupts>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 83c0 	beq.w	8008b70 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f00a fdb5 	bl	8012f64 <USB_ReadInterrupts>
 80083fa:	4603      	mov	r3, r0
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b02      	cmp	r3, #2
 8008402:	d107      	bne.n	8008414 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	695a      	ldr	r2, [r3, #20]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f002 0202 	and.w	r2, r2, #2
 8008412:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4618      	mov	r0, r3
 800841a:	f00a fda3 	bl	8012f64 <USB_ReadInterrupts>
 800841e:	4603      	mov	r3, r0
 8008420:	f003 0310 	and.w	r3, r3, #16
 8008424:	2b10      	cmp	r3, #16
 8008426:	d161      	bne.n	80084ec <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699a      	ldr	r2, [r3, #24]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0210 	bic.w	r2, r2, #16
 8008436:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	f003 020f 	and.w	r2, r3, #15
 8008444:	4613      	mov	r3, r2
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	1a9b      	subs	r3, r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	4413      	add	r3, r2
 8008454:	3304      	adds	r3, #4
 8008456:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	0c5b      	lsrs	r3, r3, #17
 800845c:	f003 030f 	and.w	r3, r3, #15
 8008460:	2b02      	cmp	r3, #2
 8008462:	d124      	bne.n	80084ae <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800846a:	4013      	ands	r3, r2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d035      	beq.n	80084dc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	091b      	lsrs	r3, r3, #4
 8008478:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800847a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800847e:	b29b      	uxth	r3, r3
 8008480:	461a      	mov	r2, r3
 8008482:	6a38      	ldr	r0, [r7, #32]
 8008484:	f00a fc1b 	bl	8012cbe <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	091b      	lsrs	r3, r3, #4
 8008490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008494:	441a      	add	r2, r3
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	699a      	ldr	r2, [r3, #24]
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	091b      	lsrs	r3, r3, #4
 80084a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084a6:	441a      	add	r2, r3
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	619a      	str	r2, [r3, #24]
 80084ac:	e016      	b.n	80084dc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	0c5b      	lsrs	r3, r3, #17
 80084b2:	f003 030f 	and.w	r3, r3, #15
 80084b6:	2b06      	cmp	r3, #6
 80084b8:	d110      	bne.n	80084dc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80084c0:	2208      	movs	r2, #8
 80084c2:	4619      	mov	r1, r3
 80084c4:	6a38      	ldr	r0, [r7, #32]
 80084c6:	f00a fbfa 	bl	8012cbe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	699a      	ldr	r2, [r3, #24]
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	091b      	lsrs	r3, r3, #4
 80084d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084d6:	441a      	add	r2, r3
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	699a      	ldr	r2, [r3, #24]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f042 0210 	orr.w	r2, r2, #16
 80084ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f00a fd37 	bl	8012f64 <USB_ReadInterrupts>
 80084f6:	4603      	mov	r3, r0
 80084f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008500:	d16e      	bne.n	80085e0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008502:	2300      	movs	r3, #0
 8008504:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4618      	mov	r0, r3
 800850c:	f00a fd3d 	bl	8012f8a <USB_ReadDevAllOutEpInterrupt>
 8008510:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008512:	e062      	b.n	80085da <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	2b00      	cmp	r3, #0
 800851c:	d057      	beq.n	80085ce <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008524:	b2d2      	uxtb	r2, r2
 8008526:	4611      	mov	r1, r2
 8008528:	4618      	mov	r0, r3
 800852a:	f00a fd62 	bl	8012ff2 <USB_ReadDevOutEPInterrupt>
 800852e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00c      	beq.n	8008554 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	4413      	add	r3, r2
 8008542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008546:	461a      	mov	r2, r3
 8008548:	2301      	movs	r3, #1
 800854a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800854c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fe0a 	bl	8009168 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f003 0308 	and.w	r3, r3, #8
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00c      	beq.n	8008578 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	4413      	add	r3, r2
 8008566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856a:	461a      	mov	r2, r3
 800856c:	2308      	movs	r3, #8
 800856e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 ff04 	bl	8009380 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	f003 0310 	and.w	r3, r3, #16
 800857e:	2b00      	cmp	r3, #0
 8008580:	d008      	beq.n	8008594 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	4413      	add	r3, r2
 800858a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858e:	461a      	mov	r2, r3
 8008590:	2310      	movs	r3, #16
 8008592:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f003 0320 	and.w	r3, r3, #32
 800859a:	2b00      	cmp	r3, #0
 800859c:	d008      	beq.n	80085b0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085aa:	461a      	mov	r2, r3
 80085ac:	2320      	movs	r3, #32
 80085ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d009      	beq.n	80085ce <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c6:	461a      	mov	r2, r3
 80085c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	3301      	adds	r3, #1
 80085d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	085b      	lsrs	r3, r3, #1
 80085d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d199      	bne.n	8008514 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f00a fcbd 	bl	8012f64 <USB_ReadInterrupts>
 80085ea:	4603      	mov	r3, r0
 80085ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085f4:	f040 80c0 	bne.w	8008778 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f00a fcde 	bl	8012fbe <USB_ReadDevAllInEpInterrupt>
 8008602:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008608:	e0b2      	b.n	8008770 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800860a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 80a7 	beq.w	8008764 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800861c:	b2d2      	uxtb	r2, r2
 800861e:	4611      	mov	r1, r2
 8008620:	4618      	mov	r0, r3
 8008622:	f00a fd04 	bl	801302e <USB_ReadDevInEPInterrupt>
 8008626:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	d057      	beq.n	80086e2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	f003 030f 	and.w	r3, r3, #15
 8008638:	2201      	movs	r2, #1
 800863a:	fa02 f303 	lsl.w	r3, r2, r3
 800863e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	43db      	mvns	r3, r3
 800864c:	69f9      	ldr	r1, [r7, #28]
 800864e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008652:	4013      	ands	r3, r2
 8008654:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	4413      	add	r3, r2
 800865e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008662:	461a      	mov	r2, r3
 8008664:	2301      	movs	r3, #1
 8008666:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d132      	bne.n	80086d6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008670:	6879      	ldr	r1, [r7, #4]
 8008672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008674:	4613      	mov	r3, r2
 8008676:	00db      	lsls	r3, r3, #3
 8008678:	1a9b      	subs	r3, r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	440b      	add	r3, r1
 800867e:	3348      	adds	r3, #72	; 0x48
 8008680:	6819      	ldr	r1, [r3, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008686:	4613      	mov	r3, r2
 8008688:	00db      	lsls	r3, r3, #3
 800868a:	1a9b      	subs	r3, r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4403      	add	r3, r0
 8008690:	3344      	adds	r3, #68	; 0x44
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4419      	add	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800869a:	4613      	mov	r3, r2
 800869c:	00db      	lsls	r3, r3, #3
 800869e:	1a9b      	subs	r3, r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4403      	add	r3, r0
 80086a4:	3348      	adds	r3, #72	; 0x48
 80086a6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d113      	bne.n	80086d6 <HAL_PCD_IRQHandler+0x31c>
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b2:	4613      	mov	r3, r2
 80086b4:	00db      	lsls	r3, r3, #3
 80086b6:	1a9b      	subs	r3, r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	440b      	add	r3, r1
 80086bc:	3350      	adds	r3, #80	; 0x50
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d108      	bne.n	80086d6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80086ce:	461a      	mov	r2, r3
 80086d0:	2101      	movs	r1, #1
 80086d2:	f00a fd0d 	bl	80130f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f010 fbfa 	bl	8018ed6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f003 0308 	and.w	r3, r3, #8
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d008      	beq.n	80086fe <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f8:	461a      	mov	r2, r3
 80086fa:	2308      	movs	r3, #8
 80086fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f003 0310 	and.w	r3, r3, #16
 8008704:	2b00      	cmp	r3, #0
 8008706:	d008      	beq.n	800871a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008714:	461a      	mov	r2, r3
 8008716:	2310      	movs	r3, #16
 8008718:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008720:	2b00      	cmp	r3, #0
 8008722:	d008      	beq.n	8008736 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	015a      	lsls	r2, r3, #5
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	4413      	add	r3, r2
 800872c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008730:	461a      	mov	r2, r3
 8008732:	2340      	movs	r3, #64	; 0x40
 8008734:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	f003 0302 	and.w	r3, r3, #2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d008      	beq.n	8008752 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	4413      	add	r3, r2
 8008748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800874c:	461a      	mov	r2, r3
 800874e:	2302      	movs	r3, #2
 8008750:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800875c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fc75 	bl	800904e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	3301      	adds	r3, #1
 8008768:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800876a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876c:	085b      	lsrs	r3, r3, #1
 800876e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	2b00      	cmp	r3, #0
 8008774:	f47f af49 	bne.w	800860a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4618      	mov	r0, r3
 800877e:	f00a fbf1 	bl	8012f64 <USB_ReadInterrupts>
 8008782:	4603      	mov	r3, r0
 8008784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800878c:	d122      	bne.n	80087d4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	69fa      	ldr	r2, [r7, #28]
 8008798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800879c:	f023 0301 	bic.w	r3, r3, #1
 80087a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d108      	bne.n	80087be <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80087b4:	2100      	movs	r1, #0
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fea4 	bl	8009504 <HAL_PCDEx_LPM_Callback>
 80087bc:	e002      	b.n	80087c4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f010 fc00 	bl	8018fc4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	695a      	ldr	r2, [r3, #20]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80087d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f00a fbc3 	bl	8012f64 <USB_ReadInterrupts>
 80087de:	4603      	mov	r3, r0
 80087e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087e8:	d112      	bne.n	8008810 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d102      	bne.n	8008800 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f010 fbbc 	bl	8018f78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	695a      	ldr	r2, [r3, #20]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800880e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4618      	mov	r0, r3
 8008816:	f00a fba5 	bl	8012f64 <USB_ReadInterrupts>
 800881a:	4603      	mov	r3, r0
 800881c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008824:	d121      	bne.n	800886a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	695a      	ldr	r2, [r3, #20]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008834:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800883c:	2b00      	cmp	r3, #0
 800883e:	d111      	bne.n	8008864 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884e:	089b      	lsrs	r3, r3, #2
 8008850:	f003 020f 	and.w	r2, r3, #15
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800885a:	2101      	movs	r1, #1
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fe51 	bl	8009504 <HAL_PCDEx_LPM_Callback>
 8008862:	e002      	b.n	800886a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f010 fb87 	bl	8018f78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4618      	mov	r0, r3
 8008870:	f00a fb78 	bl	8012f64 <USB_ReadInterrupts>
 8008874:	4603      	mov	r3, r0
 8008876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800887a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800887e:	f040 80c7 	bne.w	8008a10 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	69fa      	ldr	r2, [r7, #28]
 800888c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008890:	f023 0301 	bic.w	r3, r3, #1
 8008894:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2110      	movs	r1, #16
 800889c:	4618      	mov	r0, r3
 800889e:	f009 fc4b 	bl	8012138 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088a2:	2300      	movs	r3, #0
 80088a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088a6:	e056      	b.n	8008956 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80088a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b4:	461a      	mov	r2, r3
 80088b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088ba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088cc:	0151      	lsls	r1, r2, #5
 80088ce:	69fa      	ldr	r2, [r7, #28]
 80088d0:	440a      	add	r2, r1
 80088d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088da:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80088dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088ec:	0151      	lsls	r1, r2, #5
 80088ee:	69fa      	ldr	r2, [r7, #28]
 80088f0:	440a      	add	r2, r1
 80088f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80088fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008908:	461a      	mov	r2, r3
 800890a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800890e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008920:	0151      	lsls	r1, r2, #5
 8008922:	69fa      	ldr	r2, [r7, #28]
 8008924:	440a      	add	r2, r1
 8008926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800892a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800892e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008940:	0151      	lsls	r1, r2, #5
 8008942:	69fa      	ldr	r2, [r7, #28]
 8008944:	440a      	add	r2, r1
 8008946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800894a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800894e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	3301      	adds	r3, #1
 8008954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800895c:	429a      	cmp	r2, r3
 800895e:	d3a3      	bcc.n	80088a8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008966:	69db      	ldr	r3, [r3, #28]
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800896e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008972:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008978:	2b00      	cmp	r3, #0
 800897a:	d016      	beq.n	80089aa <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008986:	69fa      	ldr	r2, [r7, #28]
 8008988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800898c:	f043 030b 	orr.w	r3, r3, #11
 8008990:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800899a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899c:	69fa      	ldr	r2, [r7, #28]
 800899e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089a2:	f043 030b 	orr.w	r3, r3, #11
 80089a6:	6453      	str	r3, [r2, #68]	; 0x44
 80089a8:	e015      	b.n	80089d6 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b0:	695a      	ldr	r2, [r3, #20]
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b8:	4619      	mov	r1, r3
 80089ba:	f242 032b 	movw	r3, #8235	; 0x202b
 80089be:	4313      	orrs	r3, r2
 80089c0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	69fa      	ldr	r2, [r7, #28]
 80089cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089d0:	f043 030b 	orr.w	r3, r3, #11
 80089d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	69fa      	ldr	r2, [r7, #28]
 80089e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80089e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80089fa:	461a      	mov	r2, r3
 80089fc:	f00a fb78 	bl	80130f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	695a      	ldr	r2, [r3, #20]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008a0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f00a faa5 	bl	8012f64 <USB_ReadInterrupts>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a24:	d124      	bne.n	8008a70 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f00a fb3c 	bl	80130a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f009 fbe0 	bl	80121fa <USB_GetDevSpeed>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681c      	ldr	r4, [r3, #0]
 8008a46:	f001 fdd9 	bl	800a5fc <HAL_RCC_GetHCLKFreq>
 8008a4a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	461a      	mov	r2, r3
 8008a54:	4620      	mov	r0, r4
 8008a56:	f009 f923 	bl	8011ca0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f010 fa63 	bl	8018f26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	695a      	ldr	r2, [r3, #20]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f00a fa75 	bl	8012f64 <USB_ReadInterrupts>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	f003 0308 	and.w	r3, r3, #8
 8008a80:	2b08      	cmp	r3, #8
 8008a82:	d10a      	bne.n	8008a9a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f010 fa40 	bl	8018f0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	695a      	ldr	r2, [r3, #20]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f002 0208 	and.w	r2, r2, #8
 8008a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f00a fa60 	bl	8012f64 <USB_ReadInterrupts>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aae:	d10f      	bne.n	8008ad0 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f010 faa2 	bl	8019004 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	695a      	ldr	r2, [r3, #20]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f00a fa45 	bl	8012f64 <USB_ReadInterrupts>
 8008ada:	4603      	mov	r3, r0
 8008adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ae0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ae4:	d10f      	bne.n	8008b06 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	4619      	mov	r1, r3
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f010 fa75 	bl	8018fe0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	695a      	ldr	r2, [r3, #20]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f00a fa2a 	bl	8012f64 <USB_ReadInterrupts>
 8008b10:	4603      	mov	r3, r0
 8008b12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b1a:	d10a      	bne.n	8008b32 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f010 fa83 	bl	8019028 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	695a      	ldr	r2, [r3, #20]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f00a fa14 	bl	8012f64 <USB_ReadInterrupts>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	f003 0304 	and.w	r3, r3, #4
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	d115      	bne.n	8008b72 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	f003 0304 	and.w	r3, r3, #4
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f010 fa73 	bl	8019044 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6859      	ldr	r1, [r3, #4]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	605a      	str	r2, [r3, #4]
 8008b6e:	e000      	b.n	8008b72 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8008b70:	bf00      	nop
    }
  }
}
 8008b72:	3734      	adds	r7, #52	; 0x34
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd90      	pop	{r4, r7, pc}

08008b78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d101      	bne.n	8008b92 <HAL_PCD_SetAddress+0x1a>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e013      	b.n	8008bba <HAL_PCD_SetAddress+0x42>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	78fa      	ldrb	r2, [r7, #3]
 8008b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	78fa      	ldrb	r2, [r7, #3]
 8008ba8:	4611      	mov	r1, r2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f00a f984 	bl	8012eb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	4608      	mov	r0, r1
 8008bcc:	4611      	mov	r1, r2
 8008bce:	461a      	mov	r2, r3
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	70fb      	strb	r3, [r7, #3]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	803b      	strh	r3, [r7, #0]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	da0f      	bge.n	8008c08 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008be8:	78fb      	ldrb	r3, [r7, #3]
 8008bea:	f003 020f 	and.w	r2, r3, #15
 8008bee:	4613      	mov	r3, r2
 8008bf0:	00db      	lsls	r3, r3, #3
 8008bf2:	1a9b      	subs	r3, r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	3338      	adds	r3, #56	; 0x38
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2201      	movs	r2, #1
 8008c04:	705a      	strb	r2, [r3, #1]
 8008c06:	e00f      	b.n	8008c28 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	f003 020f 	and.w	r2, r3, #15
 8008c0e:	4613      	mov	r3, r2
 8008c10:	00db      	lsls	r3, r3, #3
 8008c12:	1a9b      	subs	r3, r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	3304      	adds	r3, #4
 8008c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008c28:	78fb      	ldrb	r3, [r7, #3]
 8008c2a:	f003 030f 	and.w	r3, r3, #15
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008c34:	883a      	ldrh	r2, [r7, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	78ba      	ldrb	r2, [r7, #2]
 8008c3e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	785b      	ldrb	r3, [r3, #1]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d004      	beq.n	8008c52 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008c52:	78bb      	ldrb	r3, [r7, #2]
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d102      	bne.n	8008c5e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d101      	bne.n	8008c6c <HAL_PCD_EP_Open+0xaa>
 8008c68:	2302      	movs	r3, #2
 8008c6a:	e00e      	b.n	8008c8a <HAL_PCD_EP_Open+0xc8>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68f9      	ldr	r1, [r7, #12]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f009 fae2 	bl	8012244 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008c88:	7afb      	ldrb	r3, [r7, #11]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008c9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	da0f      	bge.n	8008cc6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ca6:	78fb      	ldrb	r3, [r7, #3]
 8008ca8:	f003 020f 	and.w	r2, r3, #15
 8008cac:	4613      	mov	r3, r2
 8008cae:	00db      	lsls	r3, r3, #3
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	3338      	adds	r3, #56	; 0x38
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	4413      	add	r3, r2
 8008cba:	3304      	adds	r3, #4
 8008cbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	705a      	strb	r2, [r3, #1]
 8008cc4:	e00f      	b.n	8008ce6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cc6:	78fb      	ldrb	r3, [r7, #3]
 8008cc8:	f003 020f 	and.w	r2, r3, #15
 8008ccc:	4613      	mov	r3, r2
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	1a9b      	subs	r3, r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	4413      	add	r3, r2
 8008cdc:	3304      	adds	r3, #4
 8008cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008ce6:	78fb      	ldrb	r3, [r7, #3]
 8008ce8:	f003 030f 	and.w	r3, r3, #15
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d101      	bne.n	8008d00 <HAL_PCD_EP_Close+0x6e>
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	e00e      	b.n	8008d1e <HAL_PCD_EP_Close+0x8c>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68f9      	ldr	r1, [r7, #12]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f009 fb20 	bl	8012354 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b086      	sub	sp, #24
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	603b      	str	r3, [r7, #0]
 8008d32:	460b      	mov	r3, r1
 8008d34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d36:	7afb      	ldrb	r3, [r7, #11]
 8008d38:	f003 020f 	and.w	r2, r3, #15
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	00db      	lsls	r3, r3, #3
 8008d40:	1a9b      	subs	r3, r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	3304      	adds	r3, #4
 8008d4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2200      	movs	r2, #0
 8008d66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d68:	7afb      	ldrb	r3, [r7, #11]
 8008d6a:	f003 030f 	and.w	r3, r3, #15
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d102      	bne.n	8008d82 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008d82:	7afb      	ldrb	r3, [r7, #11]
 8008d84:	f003 030f 	and.w	r3, r3, #15
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d109      	bne.n	8008da0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6818      	ldr	r0, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	461a      	mov	r2, r3
 8008d98:	6979      	ldr	r1, [r7, #20]
 8008d9a:	f009 fe03 	bl	80129a4 <USB_EP0StartXfer>
 8008d9e:	e008      	b.n	8008db2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6818      	ldr	r0, [r3, #0]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	461a      	mov	r2, r3
 8008dac:	6979      	ldr	r1, [r7, #20]
 8008dae:	f009 fbad 	bl	801250c <USB_EPStartXfer>
  }

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3718      	adds	r7, #24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	f003 020f 	and.w	r2, r3, #15
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	1a9b      	subs	r3, r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	440b      	add	r3, r1
 8008dda:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008dde:	681b      	ldr	r3, [r3, #0]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	607a      	str	r2, [r7, #4]
 8008df6:	603b      	str	r3, [r7, #0]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008dfc:	7afb      	ldrb	r3, [r7, #11]
 8008dfe:	f003 020f 	and.w	r2, r3, #15
 8008e02:	4613      	mov	r3, r2
 8008e04:	00db      	lsls	r3, r3, #3
 8008e06:	1a9b      	subs	r3, r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	3338      	adds	r3, #56	; 0x38
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	4413      	add	r3, r2
 8008e10:	3304      	adds	r3, #4
 8008e12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	683a      	ldr	r2, [r7, #0]
 8008e1e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	2200      	movs	r2, #0
 8008e24:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e2c:	7afb      	ldrb	r3, [r7, #11]
 8008e2e:	f003 030f 	and.w	r3, r3, #15
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d102      	bne.n	8008e46 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e46:	7afb      	ldrb	r3, [r7, #11]
 8008e48:	f003 030f 	and.w	r3, r3, #15
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d109      	bne.n	8008e64 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	6979      	ldr	r1, [r7, #20]
 8008e5e:	f009 fda1 	bl	80129a4 <USB_EP0StartXfer>
 8008e62:	e008      	b.n	8008e76 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	461a      	mov	r2, r3
 8008e70:	6979      	ldr	r1, [r7, #20]
 8008e72:	f009 fb4b 	bl	801250c <USB_EPStartXfer>
  }

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3718      	adds	r7, #24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008e8c:	78fb      	ldrb	r3, [r7, #3]
 8008e8e:	f003 020f 	and.w	r2, r3, #15
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d901      	bls.n	8008e9e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e050      	b.n	8008f40 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008e9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	da0f      	bge.n	8008ec6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ea6:	78fb      	ldrb	r3, [r7, #3]
 8008ea8:	f003 020f 	and.w	r2, r3, #15
 8008eac:	4613      	mov	r3, r2
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	1a9b      	subs	r3, r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	3338      	adds	r3, #56	; 0x38
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	4413      	add	r3, r2
 8008eba:	3304      	adds	r3, #4
 8008ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	705a      	strb	r2, [r3, #1]
 8008ec4:	e00d      	b.n	8008ee2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008ec6:	78fa      	ldrb	r2, [r7, #3]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	00db      	lsls	r3, r3, #3
 8008ecc:	1a9b      	subs	r3, r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	3304      	adds	r3, #4
 8008eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ee8:	78fb      	ldrb	r3, [r7, #3]
 8008eea:	f003 030f 	and.w	r3, r3, #15
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d101      	bne.n	8008f02 <HAL_PCD_EP_SetStall+0x82>
 8008efe:	2302      	movs	r3, #2
 8008f00:	e01e      	b.n	8008f40 <HAL_PCD_EP_SetStall+0xc0>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68f9      	ldr	r1, [r7, #12]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f009 fefd 	bl	8012d10 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008f16:	78fb      	ldrb	r3, [r7, #3]
 8008f18:	f003 030f 	and.w	r3, r3, #15
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6818      	ldr	r0, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	b2d9      	uxtb	r1, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f30:	461a      	mov	r2, r3
 8008f32:	f00a f8dd 	bl	80130f0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008f54:	78fb      	ldrb	r3, [r7, #3]
 8008f56:	f003 020f 	and.w	r2, r3, #15
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d901      	bls.n	8008f66 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e042      	b.n	8008fec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008f66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	da0f      	bge.n	8008f8e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	f003 020f 	and.w	r2, r3, #15
 8008f74:	4613      	mov	r3, r2
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	1a9b      	subs	r3, r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	3338      	adds	r3, #56	; 0x38
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	4413      	add	r3, r2
 8008f82:	3304      	adds	r3, #4
 8008f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	705a      	strb	r2, [r3, #1]
 8008f8c:	e00f      	b.n	8008fae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f8e:	78fb      	ldrb	r3, [r7, #3]
 8008f90:	f003 020f 	and.w	r2, r3, #15
 8008f94:	4613      	mov	r3, r2
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	1a9b      	subs	r3, r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	f003 030f 	and.w	r3, r3, #15
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d101      	bne.n	8008fce <HAL_PCD_EP_ClrStall+0x86>
 8008fca:	2302      	movs	r3, #2
 8008fcc:	e00e      	b.n	8008fec <HAL_PCD_EP_ClrStall+0xa4>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68f9      	ldr	r1, [r7, #12]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f009 ff05 	bl	8012dec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009006:	2b01      	cmp	r3, #1
 8009008:	d101      	bne.n	800900e <HAL_PCD_EP_Flush+0x1a>
 800900a:	2302      	movs	r3, #2
 800900c:	e01b      	b.n	8009046 <HAL_PCD_EP_Flush+0x52>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8009016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800901a:	2b00      	cmp	r3, #0
 800901c:	da09      	bge.n	8009032 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	78fb      	ldrb	r3, [r7, #3]
 8009024:	f003 030f 	and.w	r3, r3, #15
 8009028:	4619      	mov	r1, r3
 800902a:	4610      	mov	r0, r2
 800902c:	f009 f884 	bl	8012138 <USB_FlushTxFifo>
 8009030:	e004      	b.n	800903c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4618      	mov	r0, r3
 8009038:	f009 f8a4 	bl	8012184 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b08a      	sub	sp, #40	; 0x28
 8009052:	af02      	add	r7, sp, #8
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	4613      	mov	r3, r2
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	1a9b      	subs	r3, r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	3338      	adds	r3, #56	; 0x38
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	4413      	add	r3, r2
 8009072:	3304      	adds	r3, #4
 8009074:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	699a      	ldr	r2, [r3, #24]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	429a      	cmp	r2, r3
 8009080:	d901      	bls.n	8009086 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e06c      	b.n	8009160 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	695a      	ldr	r2, [r3, #20]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	429a      	cmp	r2, r3
 800909a:	d902      	bls.n	80090a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	3303      	adds	r3, #3
 80090a6:	089b      	lsrs	r3, r3, #2
 80090a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80090aa:	e02b      	b.n	8009104 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	695a      	ldr	r2, [r3, #20]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	69fa      	ldr	r2, [r7, #28]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d902      	bls.n	80090c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	3303      	adds	r3, #3
 80090cc:	089b      	lsrs	r3, r3, #2
 80090ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	68d9      	ldr	r1, [r3, #12]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	4603      	mov	r3, r0
 80090e6:	6978      	ldr	r0, [r7, #20]
 80090e8:	f009 fdb4 	bl	8012c54 <USB_WritePacket>

    ep->xfer_buff  += len;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	441a      	add	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	699a      	ldr	r2, [r3, #24]
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	441a      	add	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	b29b      	uxth	r3, r3
 8009114:	69ba      	ldr	r2, [r7, #24]
 8009116:	429a      	cmp	r2, r3
 8009118:	d809      	bhi.n	800912e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	699a      	ldr	r2, [r3, #24]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009122:	429a      	cmp	r2, r3
 8009124:	d203      	bcs.n	800912e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1be      	bne.n	80090ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	695a      	ldr	r2, [r3, #20]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	429a      	cmp	r2, r3
 8009138:	d811      	bhi.n	800915e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	f003 030f 	and.w	r3, r3, #15
 8009140:	2201      	movs	r2, #1
 8009142:	fa02 f303 	lsl.w	r3, r2, r3
 8009146:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800914e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	43db      	mvns	r3, r3
 8009154:	6939      	ldr	r1, [r7, #16]
 8009156:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800915a:	4013      	ands	r3, r2
 800915c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3720      	adds	r7, #32
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	333c      	adds	r3, #60	; 0x3c
 8009180:	3304      	adds	r3, #4
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b01      	cmp	r3, #1
 800919c:	f040 80a0 	bne.w	80092e0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f003 0308 	and.w	r3, r3, #8
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d015      	beq.n	80091d6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4a72      	ldr	r2, [pc, #456]	; (8009378 <PCD_EP_OutXfrComplete_int+0x210>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	f240 80dd 	bls.w	800936e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 80d7 	beq.w	800936e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	015a      	lsls	r2, r3, #5
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	4413      	add	r3, r2
 80091c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091cc:	461a      	mov	r2, r3
 80091ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091d2:	6093      	str	r3, [r2, #8]
 80091d4:	e0cb      	b.n	800936e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	f003 0320 	and.w	r3, r3, #32
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d009      	beq.n	80091f4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ec:	461a      	mov	r2, r3
 80091ee:	2320      	movs	r3, #32
 80091f0:	6093      	str	r3, [r2, #8]
 80091f2:	e0bc      	b.n	800936e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f040 80b7 	bne.w	800936e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4a5d      	ldr	r2, [pc, #372]	; (8009378 <PCD_EP_OutXfrComplete_int+0x210>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d90f      	bls.n	8009228 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00a      	beq.n	8009228 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921e:	461a      	mov	r2, r3
 8009220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009224:	6093      	str	r3, [r2, #8]
 8009226:	e0a2      	b.n	800936e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009228:	6879      	ldr	r1, [r7, #4]
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	4613      	mov	r3, r2
 800922e:	00db      	lsls	r3, r3, #3
 8009230:	1a9b      	subs	r3, r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	440b      	add	r3, r1
 8009236:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800923a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	0159      	lsls	r1, r3, #5
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	440b      	add	r3, r1
 8009244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800924e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	4613      	mov	r3, r2
 8009256:	00db      	lsls	r3, r3, #3
 8009258:	1a9b      	subs	r3, r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4403      	add	r3, r0
 800925e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009262:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	4613      	mov	r3, r2
 800926a:	00db      	lsls	r3, r3, #3
 800926c:	1a9b      	subs	r3, r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	440b      	add	r3, r1
 8009272:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009276:	6819      	ldr	r1, [r3, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	4613      	mov	r3, r2
 800927e:	00db      	lsls	r3, r3, #3
 8009280:	1a9b      	subs	r3, r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4403      	add	r3, r0
 8009286:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4419      	add	r1, r3
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	4613      	mov	r3, r2
 8009294:	00db      	lsls	r3, r3, #3
 8009296:	1a9b      	subs	r3, r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4403      	add	r3, r0
 800929c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80092a0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d114      	bne.n	80092d2 <PCD_EP_OutXfrComplete_int+0x16a>
 80092a8:	6879      	ldr	r1, [r7, #4]
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	4613      	mov	r3, r2
 80092ae:	00db      	lsls	r3, r3, #3
 80092b0:	1a9b      	subs	r3, r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	440b      	add	r3, r1
 80092b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d108      	bne.n	80092d2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6818      	ldr	r0, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80092ca:	461a      	mov	r2, r3
 80092cc:	2101      	movs	r1, #1
 80092ce:	f009 ff0f 	bl	80130f0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f00f fde1 	bl	8018ea0 <HAL_PCD_DataOutStageCallback>
 80092de:	e046      	b.n	800936e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4a26      	ldr	r2, [pc, #152]	; (800937c <PCD_EP_OutXfrComplete_int+0x214>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d124      	bne.n	8009332 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00a      	beq.n	8009308 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fe:	461a      	mov	r2, r3
 8009300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009304:	6093      	str	r3, [r2, #8]
 8009306:	e032      	b.n	800936e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f003 0320 	and.w	r3, r3, #32
 800930e:	2b00      	cmp	r3, #0
 8009310:	d008      	beq.n	8009324 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	4413      	add	r3, r2
 800931a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800931e:	461a      	mov	r2, r3
 8009320:	2320      	movs	r3, #32
 8009322:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	b2db      	uxtb	r3, r3
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f00f fdb8 	bl	8018ea0 <HAL_PCD_DataOutStageCallback>
 8009330:	e01d      	b.n	800936e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d114      	bne.n	8009362 <PCD_EP_OutXfrComplete_int+0x1fa>
 8009338:	6879      	ldr	r1, [r7, #4]
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	4613      	mov	r3, r2
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	1a9b      	subs	r3, r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	440b      	add	r3, r1
 8009346:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d108      	bne.n	8009362 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800935a:	461a      	mov	r2, r3
 800935c:	2100      	movs	r1, #0
 800935e:	f009 fec7 	bl	80130f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	b2db      	uxtb	r3, r3
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f00f fd99 	bl	8018ea0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	4f54300a 	.word	0x4f54300a
 800937c:	4f54310a 	.word	0x4f54310a

08009380 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	333c      	adds	r3, #60	; 0x3c
 8009398:	3304      	adds	r3, #4
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4a15      	ldr	r2, [pc, #84]	; (8009408 <PCD_EP_OutSetupPacket_int+0x88>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d90e      	bls.n	80093d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d009      	beq.n	80093d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093cc:	461a      	mov	r2, r3
 80093ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f00f fd51 	bl	8018e7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	4a0a      	ldr	r2, [pc, #40]	; (8009408 <PCD_EP_OutSetupPacket_int+0x88>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d90c      	bls.n	80093fc <PCD_EP_OutSetupPacket_int+0x7c>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d108      	bne.n	80093fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6818      	ldr	r0, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80093f4:	461a      	mov	r2, r3
 80093f6:	2101      	movs	r1, #1
 80093f8:	f009 fe7a 	bl	80130f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	4f54300a 	.word	0x4f54300a

0800940c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
 8009418:	4613      	mov	r3, r2
 800941a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009422:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d107      	bne.n	800943a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800942a:	883b      	ldrh	r3, [r7, #0]
 800942c:	0419      	lsls	r1, r3, #16
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	430a      	orrs	r2, r1
 8009436:	629a      	str	r2, [r3, #40]	; 0x28
 8009438:	e028      	b.n	800948c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009440:	0c1b      	lsrs	r3, r3, #16
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	4413      	add	r3, r2
 8009446:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009448:	2300      	movs	r3, #0
 800944a:	73fb      	strb	r3, [r7, #15]
 800944c:	e00d      	b.n	800946a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	7bfb      	ldrb	r3, [r7, #15]
 8009454:	3340      	adds	r3, #64	; 0x40
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	0c1b      	lsrs	r3, r3, #16
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	4413      	add	r3, r2
 8009462:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	3301      	adds	r3, #1
 8009468:	73fb      	strb	r3, [r7, #15]
 800946a:	7bfa      	ldrb	r2, [r7, #15]
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	3b01      	subs	r3, #1
 8009470:	429a      	cmp	r2, r3
 8009472:	d3ec      	bcc.n	800944e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009474:	883b      	ldrh	r3, [r7, #0]
 8009476:	0418      	lsls	r0, r3, #16
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6819      	ldr	r1, [r3, #0]
 800947c:	78fb      	ldrb	r3, [r7, #3]
 800947e:	3b01      	subs	r3, #1
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	4302      	orrs	r2, r0
 8009484:	3340      	adds	r3, #64	; 0x40
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	440b      	add	r3, r1
 800948a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800949a:	b480      	push	{r7}
 800949c:	b083      	sub	sp, #12
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	460b      	mov	r3, r1
 80094a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	887a      	ldrh	r2, [r7, #2]
 80094ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094ea:	4b05      	ldr	r3, [pc, #20]	; (8009500 <HAL_PCDEx_ActivateLPM+0x44>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	10000003 	.word	0x10000003

08009504 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009520:	4b05      	ldr	r3, [pc, #20]	; (8009538 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a04      	ldr	r2, [pc, #16]	; (8009538 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800952a:	6013      	str	r3, [r2, #0]
}
 800952c:	bf00      	nop
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	58024800 	.word	0x58024800

0800953c <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d069      	beq.n	800961e <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 800954a:	4b38      	ldr	r3, [pc, #224]	; (800962c <HAL_PWR_ConfigPVD+0xf0>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4935      	ldr	r1, [pc, #212]	; (800962c <HAL_PWR_ConfigPVD+0xf0>)
 8009558:	4313      	orrs	r3, r2
 800955a:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 800955c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800956c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 8009570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009578:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800957c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009580:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 8009584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800958e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009592:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 8009594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800959e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095a2:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d009      	beq.n	80095c4 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 80095b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d009      	beq.n	80095e4 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 80095d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f003 0301 	and.w	r3, r3, #1
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d007      	beq.n	8009600 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 80095f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095fe:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	f003 0302 	and.w	r3, r3, #2
 8009608:	2b00      	cmp	r3, #0
 800960a:	d009      	beq.n	8009620 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 800960c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800961a:	6053      	str	r3, [r2, #4]
 800961c:	e000      	b.n	8009620 <HAL_PWR_ConfigPVD+0xe4>
    return;
 800961e:	bf00      	nop
  }
}
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	58024800 	.word	0x58024800

08009630 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 8009630:	b480      	push	{r7}
 8009632:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8009634:	4b05      	ldr	r3, [pc, #20]	; (800964c <HAL_PWR_EnablePVD+0x1c>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a04      	ldr	r2, [pc, #16]	; (800964c <HAL_PWR_EnablePVD+0x1c>)
 800963a:	f043 0310 	orr.w	r3, r3, #16
 800963e:	6013      	str	r3, [r2, #0]
}
 8009640:	bf00      	nop
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	58024800 	.word	0x58024800

08009650 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009658:	4b19      	ldr	r3, [pc, #100]	; (80096c0 <HAL_PWREx_ConfigSupply+0x70>)
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f003 0304 	and.w	r3, r3, #4
 8009660:	2b04      	cmp	r3, #4
 8009662:	d00a      	beq.n	800967a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009664:	4b16      	ldr	r3, [pc, #88]	; (80096c0 <HAL_PWREx_ConfigSupply+0x70>)
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f003 0307 	and.w	r3, r3, #7
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	429a      	cmp	r2, r3
 8009670:	d001      	beq.n	8009676 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e01f      	b.n	80096b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	e01d      	b.n	80096b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800967a:	4b11      	ldr	r3, [pc, #68]	; (80096c0 <HAL_PWREx_ConfigSupply+0x70>)
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	f023 0207 	bic.w	r2, r3, #7
 8009682:	490f      	ldr	r1, [pc, #60]	; (80096c0 <HAL_PWREx_ConfigSupply+0x70>)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4313      	orrs	r3, r2
 8009688:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800968a:	f7fa ffa7 	bl	80045dc <HAL_GetTick>
 800968e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009690:	e009      	b.n	80096a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009692:	f7fa ffa3 	bl	80045dc <HAL_GetTick>
 8009696:	4602      	mov	r2, r0
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	1ad3      	subs	r3, r2, r3
 800969c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096a0:	d901      	bls.n	80096a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e007      	b.n	80096b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80096a6:	4b06      	ldr	r3, [pc, #24]	; (80096c0 <HAL_PWREx_ConfigSupply+0x70>)
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096b2:	d1ee      	bne.n	8009692 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	58024800 	.word	0x58024800

080096c4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80096c4:	b480      	push	{r7}
 80096c6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80096c8:	4b05      	ldr	r3, [pc, #20]	; (80096e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	4a04      	ldr	r2, [pc, #16]	; (80096e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80096ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096d2:	60d3      	str	r3, [r2, #12]
}
 80096d4:	bf00      	nop
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	58024800 	.word	0x58024800

080096e4 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 80096e8:	4b1b      	ldr	r3, [pc, #108]	; (8009758 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0310 	and.w	r3, r3, #16
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d014      	beq.n	800971e <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 80096f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009704:	d10b      	bne.n	800971e <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 8009706:	f7fa fa75 	bl	8003bf4 <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 800970a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800970e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009712:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800971a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 800971e:	4b0e      	ldr	r3, [pc, #56]	; (8009758 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d014      	beq.n	8009754 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 800972a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800972e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800973a:	d10b      	bne.n	8009754 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 800973c:	f000 f80e 	bl	800975c <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 8009740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800974c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 8009754:	bf00      	nop
 8009756:	bd80      	pop	{r7, pc}
 8009758:	58024800 	.word	0x58024800

0800975c <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 800975c:	b480      	push	{r7}
 800975e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 8009760:	bf00      	nop
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
	...

0800976c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b08c      	sub	sp, #48	; 0x30
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d101      	bne.n	800977e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e3ff      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 8087 	beq.w	800989a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800978c:	4b99      	ldr	r3, [pc, #612]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009794:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009796:	4b97      	ldr	r3, [pc, #604]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 8009798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800979c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979e:	2b10      	cmp	r3, #16
 80097a0:	d007      	beq.n	80097b2 <HAL_RCC_OscConfig+0x46>
 80097a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a4:	2b18      	cmp	r3, #24
 80097a6:	d110      	bne.n	80097ca <HAL_RCC_OscConfig+0x5e>
 80097a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097aa:	f003 0303 	and.w	r3, r3, #3
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d10b      	bne.n	80097ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097b2:	4b90      	ldr	r3, [pc, #576]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d06c      	beq.n	8009898 <HAL_RCC_OscConfig+0x12c>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d168      	bne.n	8009898 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e3d9      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097d2:	d106      	bne.n	80097e2 <HAL_RCC_OscConfig+0x76>
 80097d4:	4b87      	ldr	r3, [pc, #540]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a86      	ldr	r2, [pc, #536]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80097da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	e02e      	b.n	8009840 <HAL_RCC_OscConfig+0xd4>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10c      	bne.n	8009804 <HAL_RCC_OscConfig+0x98>
 80097ea:	4b82      	ldr	r3, [pc, #520]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a81      	ldr	r2, [pc, #516]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80097f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097f4:	6013      	str	r3, [r2, #0]
 80097f6:	4b7f      	ldr	r3, [pc, #508]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a7e      	ldr	r2, [pc, #504]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80097fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	e01d      	b.n	8009840 <HAL_RCC_OscConfig+0xd4>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800980c:	d10c      	bne.n	8009828 <HAL_RCC_OscConfig+0xbc>
 800980e:	4b79      	ldr	r3, [pc, #484]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a78      	ldr	r2, [pc, #480]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 8009814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	4b76      	ldr	r3, [pc, #472]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a75      	ldr	r2, [pc, #468]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 8009820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009824:	6013      	str	r3, [r2, #0]
 8009826:	e00b      	b.n	8009840 <HAL_RCC_OscConfig+0xd4>
 8009828:	4b72      	ldr	r3, [pc, #456]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a71      	ldr	r2, [pc, #452]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 800982e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	4b6f      	ldr	r3, [pc, #444]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a6e      	ldr	r2, [pc, #440]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 800983a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800983e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d013      	beq.n	8009870 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009848:	f7fa fec8 	bl	80045dc <HAL_GetTick>
 800984c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800984e:	e008      	b.n	8009862 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009850:	f7fa fec4 	bl	80045dc <HAL_GetTick>
 8009854:	4602      	mov	r2, r0
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	2b64      	cmp	r3, #100	; 0x64
 800985c:	d901      	bls.n	8009862 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e38d      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009862:	4b64      	ldr	r3, [pc, #400]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800986a:	2b00      	cmp	r3, #0
 800986c:	d0f0      	beq.n	8009850 <HAL_RCC_OscConfig+0xe4>
 800986e:	e014      	b.n	800989a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009870:	f7fa feb4 	bl	80045dc <HAL_GetTick>
 8009874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009876:	e008      	b.n	800988a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009878:	f7fa feb0 	bl	80045dc <HAL_GetTick>
 800987c:	4602      	mov	r2, r0
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	2b64      	cmp	r3, #100	; 0x64
 8009884:	d901      	bls.n	800988a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009886:	2303      	movs	r3, #3
 8009888:	e379      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800988a:	4b5a      	ldr	r3, [pc, #360]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1f0      	bne.n	8009878 <HAL_RCC_OscConfig+0x10c>
 8009896:	e000      	b.n	800989a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 0302 	and.w	r3, r3, #2
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 80ae 	beq.w	8009a04 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098a8:	4b52      	ldr	r3, [pc, #328]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098b2:	4b50      	ldr	r3, [pc, #320]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80098b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d007      	beq.n	80098ce <HAL_RCC_OscConfig+0x162>
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	2b18      	cmp	r3, #24
 80098c2:	d13a      	bne.n	800993a <HAL_RCC_OscConfig+0x1ce>
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	f003 0303 	and.w	r3, r3, #3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d135      	bne.n	800993a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098ce:	4b49      	ldr	r3, [pc, #292]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 0304 	and.w	r3, r3, #4
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d005      	beq.n	80098e6 <HAL_RCC_OscConfig+0x17a>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d101      	bne.n	80098e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e34b      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098e6:	f7fa fea7 	bl	8004638 <HAL_GetREVID>
 80098ea:	4602      	mov	r2, r0
 80098ec:	f241 0303 	movw	r3, #4099	; 0x1003
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d817      	bhi.n	8009924 <HAL_RCC_OscConfig+0x1b8>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	2b40      	cmp	r3, #64	; 0x40
 80098fa:	d108      	bne.n	800990e <HAL_RCC_OscConfig+0x1a2>
 80098fc:	4b3d      	ldr	r3, [pc, #244]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009904:	4a3b      	ldr	r2, [pc, #236]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 8009906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800990a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800990c:	e07a      	b.n	8009a04 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800990e:	4b39      	ldr	r3, [pc, #228]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	031b      	lsls	r3, r3, #12
 800991c:	4935      	ldr	r1, [pc, #212]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 800991e:	4313      	orrs	r3, r2
 8009920:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009922:	e06f      	b.n	8009a04 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009924:	4b33      	ldr	r3, [pc, #204]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	061b      	lsls	r3, r3, #24
 8009932:	4930      	ldr	r1, [pc, #192]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 8009934:	4313      	orrs	r3, r2
 8009936:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009938:	e064      	b.n	8009a04 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d045      	beq.n	80099ce <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009942:	4b2c      	ldr	r3, [pc, #176]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f023 0219 	bic.w	r2, r3, #25
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	4929      	ldr	r1, [pc, #164]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 8009950:	4313      	orrs	r3, r2
 8009952:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009954:	f7fa fe42 	bl	80045dc <HAL_GetTick>
 8009958:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800995a:	e008      	b.n	800996e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800995c:	f7fa fe3e 	bl	80045dc <HAL_GetTick>
 8009960:	4602      	mov	r2, r0
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	2b02      	cmp	r3, #2
 8009968:	d901      	bls.n	800996e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800996a:	2303      	movs	r3, #3
 800996c:	e307      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800996e:	4b21      	ldr	r3, [pc, #132]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f003 0304 	and.w	r3, r3, #4
 8009976:	2b00      	cmp	r3, #0
 8009978:	d0f0      	beq.n	800995c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800997a:	f7fa fe5d 	bl	8004638 <HAL_GetREVID>
 800997e:	4602      	mov	r2, r0
 8009980:	f241 0303 	movw	r3, #4099	; 0x1003
 8009984:	429a      	cmp	r2, r3
 8009986:	d817      	bhi.n	80099b8 <HAL_RCC_OscConfig+0x24c>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	2b40      	cmp	r3, #64	; 0x40
 800998e:	d108      	bne.n	80099a2 <HAL_RCC_OscConfig+0x236>
 8009990:	4b18      	ldr	r3, [pc, #96]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009998:	4a16      	ldr	r2, [pc, #88]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 800999a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800999e:	6053      	str	r3, [r2, #4]
 80099a0:	e030      	b.n	8009a04 <HAL_RCC_OscConfig+0x298>
 80099a2:	4b14      	ldr	r3, [pc, #80]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	031b      	lsls	r3, r3, #12
 80099b0:	4910      	ldr	r1, [pc, #64]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	604b      	str	r3, [r1, #4]
 80099b6:	e025      	b.n	8009a04 <HAL_RCC_OscConfig+0x298>
 80099b8:	4b0e      	ldr	r3, [pc, #56]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	061b      	lsls	r3, r3, #24
 80099c6:	490b      	ldr	r1, [pc, #44]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80099c8:	4313      	orrs	r3, r2
 80099ca:	604b      	str	r3, [r1, #4]
 80099cc:	e01a      	b.n	8009a04 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099ce:	4b09      	ldr	r3, [pc, #36]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a08      	ldr	r2, [pc, #32]	; (80099f4 <HAL_RCC_OscConfig+0x288>)
 80099d4:	f023 0301 	bic.w	r3, r3, #1
 80099d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099da:	f7fa fdff 	bl	80045dc <HAL_GetTick>
 80099de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099e0:	e00a      	b.n	80099f8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099e2:	f7fa fdfb 	bl	80045dc <HAL_GetTick>
 80099e6:	4602      	mov	r2, r0
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	1ad3      	subs	r3, r2, r3
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d903      	bls.n	80099f8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e2c4      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
 80099f4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099f8:	4ba4      	ldr	r3, [pc, #656]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0304 	and.w	r3, r3, #4
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1ee      	bne.n	80099e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0310 	and.w	r3, r3, #16
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 80a9 	beq.w	8009b64 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a12:	4b9e      	ldr	r3, [pc, #632]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a1c:	4b9b      	ldr	r3, [pc, #620]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a20:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	2b08      	cmp	r3, #8
 8009a26:	d007      	beq.n	8009a38 <HAL_RCC_OscConfig+0x2cc>
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	2b18      	cmp	r3, #24
 8009a2c:	d13a      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x338>
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f003 0303 	and.w	r3, r3, #3
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d135      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a38:	4b94      	ldr	r3, [pc, #592]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d005      	beq.n	8009a50 <HAL_RCC_OscConfig+0x2e4>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	69db      	ldr	r3, [r3, #28]
 8009a48:	2b80      	cmp	r3, #128	; 0x80
 8009a4a:	d001      	beq.n	8009a50 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e296      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a50:	f7fa fdf2 	bl	8004638 <HAL_GetREVID>
 8009a54:	4602      	mov	r2, r0
 8009a56:	f241 0303 	movw	r3, #4099	; 0x1003
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d817      	bhi.n	8009a8e <HAL_RCC_OscConfig+0x322>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	2b20      	cmp	r3, #32
 8009a64:	d108      	bne.n	8009a78 <HAL_RCC_OscConfig+0x30c>
 8009a66:	4b89      	ldr	r3, [pc, #548]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a6e:	4a87      	ldr	r2, [pc, #540]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009a70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a74:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a76:	e075      	b.n	8009b64 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a78:	4b84      	ldr	r3, [pc, #528]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a1b      	ldr	r3, [r3, #32]
 8009a84:	069b      	lsls	r3, r3, #26
 8009a86:	4981      	ldr	r1, [pc, #516]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a8c:	e06a      	b.n	8009b64 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a8e:	4b7f      	ldr	r3, [pc, #508]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	061b      	lsls	r3, r3, #24
 8009a9c:	497b      	ldr	r1, [pc, #492]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009aa2:	e05f      	b.n	8009b64 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	69db      	ldr	r3, [r3, #28]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d042      	beq.n	8009b32 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009aac:	4b77      	ldr	r3, [pc, #476]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a76      	ldr	r2, [pc, #472]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ab8:	f7fa fd90 	bl	80045dc <HAL_GetTick>
 8009abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009abe:	e008      	b.n	8009ad2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009ac0:	f7fa fd8c 	bl	80045dc <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d901      	bls.n	8009ad2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e255      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ad2:	4b6e      	ldr	r3, [pc, #440]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0f0      	beq.n	8009ac0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ade:	f7fa fdab 	bl	8004638 <HAL_GetREVID>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	f241 0303 	movw	r3, #4099	; 0x1003
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d817      	bhi.n	8009b1c <HAL_RCC_OscConfig+0x3b0>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a1b      	ldr	r3, [r3, #32]
 8009af0:	2b20      	cmp	r3, #32
 8009af2:	d108      	bne.n	8009b06 <HAL_RCC_OscConfig+0x39a>
 8009af4:	4b65      	ldr	r3, [pc, #404]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009afc:	4a63      	ldr	r2, [pc, #396]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009afe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b02:	6053      	str	r3, [r2, #4]
 8009b04:	e02e      	b.n	8009b64 <HAL_RCC_OscConfig+0x3f8>
 8009b06:	4b61      	ldr	r3, [pc, #388]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
 8009b12:	069b      	lsls	r3, r3, #26
 8009b14:	495d      	ldr	r1, [pc, #372]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	604b      	str	r3, [r1, #4]
 8009b1a:	e023      	b.n	8009b64 <HAL_RCC_OscConfig+0x3f8>
 8009b1c:	4b5b      	ldr	r3, [pc, #364]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a1b      	ldr	r3, [r3, #32]
 8009b28:	061b      	lsls	r3, r3, #24
 8009b2a:	4958      	ldr	r1, [pc, #352]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	60cb      	str	r3, [r1, #12]
 8009b30:	e018      	b.n	8009b64 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009b32:	4b56      	ldr	r3, [pc, #344]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a55      	ldr	r2, [pc, #340]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b3e:	f7fa fd4d 	bl	80045dc <HAL_GetTick>
 8009b42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b44:	e008      	b.n	8009b58 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009b46:	f7fa fd49 	bl	80045dc <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d901      	bls.n	8009b58 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009b54:	2303      	movs	r3, #3
 8009b56:	e212      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b58:	4b4c      	ldr	r3, [pc, #304]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1f0      	bne.n	8009b46 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0308 	and.w	r3, r3, #8
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d036      	beq.n	8009bde <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	695b      	ldr	r3, [r3, #20]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d019      	beq.n	8009bac <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b78:	4b44      	ldr	r3, [pc, #272]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b7c:	4a43      	ldr	r2, [pc, #268]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009b7e:	f043 0301 	orr.w	r3, r3, #1
 8009b82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b84:	f7fa fd2a 	bl	80045dc <HAL_GetTick>
 8009b88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b8a:	e008      	b.n	8009b9e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b8c:	f7fa fd26 	bl	80045dc <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d901      	bls.n	8009b9e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e1ef      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b9e:	4b3b      	ldr	r3, [pc, #236]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ba2:	f003 0302 	and.w	r3, r3, #2
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d0f0      	beq.n	8009b8c <HAL_RCC_OscConfig+0x420>
 8009baa:	e018      	b.n	8009bde <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009bac:	4b37      	ldr	r3, [pc, #220]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bb0:	4a36      	ldr	r2, [pc, #216]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009bb2:	f023 0301 	bic.w	r3, r3, #1
 8009bb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bb8:	f7fa fd10 	bl	80045dc <HAL_GetTick>
 8009bbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009bbe:	e008      	b.n	8009bd2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009bc0:	f7fa fd0c 	bl	80045dc <HAL_GetTick>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d901      	bls.n	8009bd2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e1d5      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009bd2:	4b2e      	ldr	r3, [pc, #184]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bd6:	f003 0302 	and.w	r3, r3, #2
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1f0      	bne.n	8009bc0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 0320 	and.w	r3, r3, #32
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d036      	beq.n	8009c58 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d019      	beq.n	8009c26 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009bf2:	4b26      	ldr	r3, [pc, #152]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a25      	ldr	r2, [pc, #148]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009bfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009bfe:	f7fa fced 	bl	80045dc <HAL_GetTick>
 8009c02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c04:	e008      	b.n	8009c18 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009c06:	f7fa fce9 	bl	80045dc <HAL_GetTick>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d901      	bls.n	8009c18 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009c14:	2303      	movs	r3, #3
 8009c16:	e1b2      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c18:	4b1c      	ldr	r3, [pc, #112]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d0f0      	beq.n	8009c06 <HAL_RCC_OscConfig+0x49a>
 8009c24:	e018      	b.n	8009c58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c26:	4b19      	ldr	r3, [pc, #100]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a18      	ldr	r2, [pc, #96]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c32:	f7fa fcd3 	bl	80045dc <HAL_GetTick>
 8009c36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c38:	e008      	b.n	8009c4c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009c3a:	f7fa fccf 	bl	80045dc <HAL_GetTick>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	d901      	bls.n	8009c4c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	e198      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c4c:	4b0f      	ldr	r3, [pc, #60]	; (8009c8c <HAL_RCC_OscConfig+0x520>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1f0      	bne.n	8009c3a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 0304 	and.w	r3, r3, #4
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f000 8085 	beq.w	8009d70 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009c66:	4b0a      	ldr	r3, [pc, #40]	; (8009c90 <HAL_RCC_OscConfig+0x524>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a09      	ldr	r2, [pc, #36]	; (8009c90 <HAL_RCC_OscConfig+0x524>)
 8009c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c72:	f7fa fcb3 	bl	80045dc <HAL_GetTick>
 8009c76:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c78:	e00c      	b.n	8009c94 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009c7a:	f7fa fcaf 	bl	80045dc <HAL_GetTick>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	2b64      	cmp	r3, #100	; 0x64
 8009c86:	d905      	bls.n	8009c94 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e178      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
 8009c8c:	58024400 	.word	0x58024400
 8009c90:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c94:	4b96      	ldr	r3, [pc, #600]	; (8009ef0 <HAL_RCC_OscConfig+0x784>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d0ec      	beq.n	8009c7a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d106      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x54a>
 8009ca8:	4b92      	ldr	r3, [pc, #584]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cac:	4a91      	ldr	r2, [pc, #580]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009cae:	f043 0301 	orr.w	r3, r3, #1
 8009cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8009cb4:	e02d      	b.n	8009d12 <HAL_RCC_OscConfig+0x5a6>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10c      	bne.n	8009cd8 <HAL_RCC_OscConfig+0x56c>
 8009cbe:	4b8d      	ldr	r3, [pc, #564]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc2:	4a8c      	ldr	r2, [pc, #560]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009cc4:	f023 0301 	bic.w	r3, r3, #1
 8009cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8009cca:	4b8a      	ldr	r3, [pc, #552]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cce:	4a89      	ldr	r2, [pc, #548]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009cd0:	f023 0304 	bic.w	r3, r3, #4
 8009cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8009cd6:	e01c      	b.n	8009d12 <HAL_RCC_OscConfig+0x5a6>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	2b05      	cmp	r3, #5
 8009cde:	d10c      	bne.n	8009cfa <HAL_RCC_OscConfig+0x58e>
 8009ce0:	4b84      	ldr	r3, [pc, #528]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce4:	4a83      	ldr	r2, [pc, #524]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009ce6:	f043 0304 	orr.w	r3, r3, #4
 8009cea:	6713      	str	r3, [r2, #112]	; 0x70
 8009cec:	4b81      	ldr	r3, [pc, #516]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf0:	4a80      	ldr	r2, [pc, #512]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009cf2:	f043 0301 	orr.w	r3, r3, #1
 8009cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8009cf8:	e00b      	b.n	8009d12 <HAL_RCC_OscConfig+0x5a6>
 8009cfa:	4b7e      	ldr	r3, [pc, #504]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cfe:	4a7d      	ldr	r2, [pc, #500]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009d00:	f023 0301 	bic.w	r3, r3, #1
 8009d04:	6713      	str	r3, [r2, #112]	; 0x70
 8009d06:	4b7b      	ldr	r3, [pc, #492]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d0a:	4a7a      	ldr	r2, [pc, #488]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009d0c:	f023 0304 	bic.w	r3, r3, #4
 8009d10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d015      	beq.n	8009d46 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d1a:	f7fa fc5f 	bl	80045dc <HAL_GetTick>
 8009d1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d20:	e00a      	b.n	8009d38 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d22:	f7fa fc5b 	bl	80045dc <HAL_GetTick>
 8009d26:	4602      	mov	r2, r0
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d901      	bls.n	8009d38 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8009d34:	2303      	movs	r3, #3
 8009d36:	e122      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d38:	4b6e      	ldr	r3, [pc, #440]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d3c:	f003 0302 	and.w	r3, r3, #2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d0ee      	beq.n	8009d22 <HAL_RCC_OscConfig+0x5b6>
 8009d44:	e014      	b.n	8009d70 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d46:	f7fa fc49 	bl	80045dc <HAL_GetTick>
 8009d4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d4c:	e00a      	b.n	8009d64 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d4e:	f7fa fc45 	bl	80045dc <HAL_GetTick>
 8009d52:	4602      	mov	r2, r0
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d901      	bls.n	8009d64 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e10c      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d64:	4b63      	ldr	r3, [pc, #396]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d68:	f003 0302 	and.w	r3, r3, #2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1ee      	bne.n	8009d4e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 8101 	beq.w	8009f7c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009d7a:	4b5e      	ldr	r3, [pc, #376]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d82:	2b18      	cmp	r3, #24
 8009d84:	f000 80bc 	beq.w	8009f00 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	f040 8095 	bne.w	8009ebc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d92:	4b58      	ldr	r3, [pc, #352]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a57      	ldr	r2, [pc, #348]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009d98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d9e:	f7fa fc1d 	bl	80045dc <HAL_GetTick>
 8009da2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009da4:	e008      	b.n	8009db8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009da6:	f7fa fc19 	bl	80045dc <HAL_GetTick>
 8009daa:	4602      	mov	r2, r0
 8009dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d901      	bls.n	8009db8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e0e2      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009db8:	4b4e      	ldr	r3, [pc, #312]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1f0      	bne.n	8009da6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009dc4:	4b4b      	ldr	r3, [pc, #300]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dc8:	4b4b      	ldr	r3, [pc, #300]	; (8009ef8 <HAL_RCC_OscConfig+0x78c>)
 8009dca:	4013      	ands	r3, r2
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009dd4:	0112      	lsls	r2, r2, #4
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	4946      	ldr	r1, [pc, #280]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	628b      	str	r3, [r1, #40]	; 0x28
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de2:	3b01      	subs	r3, #1
 8009de4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dec:	3b01      	subs	r3, #1
 8009dee:	025b      	lsls	r3, r3, #9
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	431a      	orrs	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	041b      	lsls	r3, r3, #16
 8009dfc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e00:	431a      	orrs	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e06:	3b01      	subs	r3, #1
 8009e08:	061b      	lsls	r3, r3, #24
 8009e0a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e0e:	4939      	ldr	r1, [pc, #228]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e10:	4313      	orrs	r3, r2
 8009e12:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009e14:	4b37      	ldr	r3, [pc, #220]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e18:	4a36      	ldr	r2, [pc, #216]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e1a:	f023 0301 	bic.w	r3, r3, #1
 8009e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e20:	4b34      	ldr	r3, [pc, #208]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e24:	4b35      	ldr	r3, [pc, #212]	; (8009efc <HAL_RCC_OscConfig+0x790>)
 8009e26:	4013      	ands	r3, r2
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009e2c:	00d2      	lsls	r2, r2, #3
 8009e2e:	4931      	ldr	r1, [pc, #196]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e30:	4313      	orrs	r3, r2
 8009e32:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009e34:	4b2f      	ldr	r3, [pc, #188]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e38:	f023 020c 	bic.w	r2, r3, #12
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e40:	492c      	ldr	r1, [pc, #176]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e42:	4313      	orrs	r3, r2
 8009e44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009e46:	4b2b      	ldr	r3, [pc, #172]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4a:	f023 0202 	bic.w	r2, r3, #2
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e52:	4928      	ldr	r1, [pc, #160]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e58:	4b26      	ldr	r3, [pc, #152]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5c:	4a25      	ldr	r2, [pc, #148]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e64:	4b23      	ldr	r3, [pc, #140]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e68:	4a22      	ldr	r2, [pc, #136]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009e70:	4b20      	ldr	r3, [pc, #128]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e74:	4a1f      	ldr	r2, [pc, #124]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009e7c:	4b1d      	ldr	r3, [pc, #116]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e80:	4a1c      	ldr	r2, [pc, #112]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e82:	f043 0301 	orr.w	r3, r3, #1
 8009e86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e88:	4b1a      	ldr	r3, [pc, #104]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a19      	ldr	r2, [pc, #100]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e94:	f7fa fba2 	bl	80045dc <HAL_GetTick>
 8009e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e9a:	e008      	b.n	8009eae <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e9c:	f7fa fb9e 	bl	80045dc <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d901      	bls.n	8009eae <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e067      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009eae:	4b11      	ldr	r3, [pc, #68]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d0f0      	beq.n	8009e9c <HAL_RCC_OscConfig+0x730>
 8009eba:	e05f      	b.n	8009f7c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ebc:	4b0d      	ldr	r3, [pc, #52]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a0c      	ldr	r2, [pc, #48]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec8:	f7fa fb88 	bl	80045dc <HAL_GetTick>
 8009ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ece:	e008      	b.n	8009ee2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ed0:	f7fa fb84 	bl	80045dc <HAL_GetTick>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d901      	bls.n	8009ee2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e04d      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ee2:	4b04      	ldr	r3, [pc, #16]	; (8009ef4 <HAL_RCC_OscConfig+0x788>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1f0      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x764>
 8009eee:	e045      	b.n	8009f7c <HAL_RCC_OscConfig+0x810>
 8009ef0:	58024800 	.word	0x58024800
 8009ef4:	58024400 	.word	0x58024400
 8009ef8:	fffffc0c 	.word	0xfffffc0c
 8009efc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009f00:	4b21      	ldr	r3, [pc, #132]	; (8009f88 <HAL_RCC_OscConfig+0x81c>)
 8009f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f06:	4b20      	ldr	r3, [pc, #128]	; (8009f88 <HAL_RCC_OscConfig+0x81c>)
 8009f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d031      	beq.n	8009f78 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f003 0203 	and.w	r2, r3, #3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d12a      	bne.n	8009f78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	091b      	lsrs	r3, r3, #4
 8009f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d122      	bne.n	8009f78 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d11a      	bne.n	8009f78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	0a5b      	lsrs	r3, r3, #9
 8009f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d111      	bne.n	8009f78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	0c1b      	lsrs	r3, r3, #16
 8009f58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f60:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d108      	bne.n	8009f78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	0e1b      	lsrs	r3, r3, #24
 8009f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d001      	beq.n	8009f7c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e000      	b.n	8009f7e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3730      	adds	r7, #48	; 0x30
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	58024400 	.word	0x58024400

08009f8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d101      	bne.n	8009fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e19c      	b.n	800a2da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009fa0:	4b8a      	ldr	r3, [pc, #552]	; (800a1cc <HAL_RCC_ClockConfig+0x240>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 030f 	and.w	r3, r3, #15
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d910      	bls.n	8009fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fae:	4b87      	ldr	r3, [pc, #540]	; (800a1cc <HAL_RCC_ClockConfig+0x240>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f023 020f 	bic.w	r2, r3, #15
 8009fb6:	4985      	ldr	r1, [pc, #532]	; (800a1cc <HAL_RCC_ClockConfig+0x240>)
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fbe:	4b83      	ldr	r3, [pc, #524]	; (800a1cc <HAL_RCC_ClockConfig+0x240>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 030f 	and.w	r3, r3, #15
 8009fc6:	683a      	ldr	r2, [r7, #0]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d001      	beq.n	8009fd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e184      	b.n	800a2da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0304 	and.w	r3, r3, #4
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d010      	beq.n	8009ffe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	691a      	ldr	r2, [r3, #16]
 8009fe0:	4b7b      	ldr	r3, [pc, #492]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d908      	bls.n	8009ffe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fec:	4b78      	ldr	r3, [pc, #480]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	4975      	ldr	r1, [pc, #468]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0308 	and.w	r3, r3, #8
 800a006:	2b00      	cmp	r3, #0
 800a008:	d010      	beq.n	800a02c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	695a      	ldr	r2, [r3, #20]
 800a00e:	4b70      	ldr	r3, [pc, #448]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a010:	69db      	ldr	r3, [r3, #28]
 800a012:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a016:	429a      	cmp	r2, r3
 800a018:	d908      	bls.n	800a02c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a01a:	4b6d      	ldr	r3, [pc, #436]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	695b      	ldr	r3, [r3, #20]
 800a026:	496a      	ldr	r1, [pc, #424]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a028:	4313      	orrs	r3, r2
 800a02a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 0310 	and.w	r3, r3, #16
 800a034:	2b00      	cmp	r3, #0
 800a036:	d010      	beq.n	800a05a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	699a      	ldr	r2, [r3, #24]
 800a03c:	4b64      	ldr	r3, [pc, #400]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a03e:	69db      	ldr	r3, [r3, #28]
 800a040:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a044:	429a      	cmp	r2, r3
 800a046:	d908      	bls.n	800a05a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a048:	4b61      	ldr	r3, [pc, #388]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	495e      	ldr	r1, [pc, #376]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a056:	4313      	orrs	r3, r2
 800a058:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 0320 	and.w	r3, r3, #32
 800a062:	2b00      	cmp	r3, #0
 800a064:	d010      	beq.n	800a088 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	69da      	ldr	r2, [r3, #28]
 800a06a:	4b59      	ldr	r3, [pc, #356]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a072:	429a      	cmp	r2, r3
 800a074:	d908      	bls.n	800a088 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a076:	4b56      	ldr	r3, [pc, #344]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	69db      	ldr	r3, [r3, #28]
 800a082:	4953      	ldr	r1, [pc, #332]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a084:	4313      	orrs	r3, r2
 800a086:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 0302 	and.w	r3, r3, #2
 800a090:	2b00      	cmp	r3, #0
 800a092:	d010      	beq.n	800a0b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68da      	ldr	r2, [r3, #12]
 800a098:	4b4d      	ldr	r3, [pc, #308]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	f003 030f 	and.w	r3, r3, #15
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d908      	bls.n	800a0b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0a4:	4b4a      	ldr	r3, [pc, #296]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	f023 020f 	bic.w	r2, r3, #15
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	4947      	ldr	r1, [pc, #284]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d055      	beq.n	800a16e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a0c2:	4b43      	ldr	r3, [pc, #268]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	4940      	ldr	r1, [pc, #256]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d107      	bne.n	800a0ec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0dc:	4b3c      	ldr	r3, [pc, #240]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d121      	bne.n	800a12c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e0f6      	b.n	800a2da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	2b03      	cmp	r3, #3
 800a0f2:	d107      	bne.n	800a104 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0f4:	4b36      	ldr	r3, [pc, #216]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d115      	bne.n	800a12c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	e0ea      	b.n	800a2da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d107      	bne.n	800a11c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a10c:	4b30      	ldr	r3, [pc, #192]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a114:	2b00      	cmp	r3, #0
 800a116:	d109      	bne.n	800a12c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e0de      	b.n	800a2da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a11c:	4b2c      	ldr	r3, [pc, #176]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 0304 	and.w	r3, r3, #4
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e0d6      	b.n	800a2da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a12c:	4b28      	ldr	r3, [pc, #160]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	f023 0207 	bic.w	r2, r3, #7
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	4925      	ldr	r1, [pc, #148]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a13e:	f7fa fa4d 	bl	80045dc <HAL_GetTick>
 800a142:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a144:	e00a      	b.n	800a15c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a146:	f7fa fa49 	bl	80045dc <HAL_GetTick>
 800a14a:	4602      	mov	r2, r0
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	f241 3288 	movw	r2, #5000	; 0x1388
 800a154:	4293      	cmp	r3, r2
 800a156:	d901      	bls.n	800a15c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a158:	2303      	movs	r3, #3
 800a15a:	e0be      	b.n	800a2da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a15c:	4b1c      	ldr	r3, [pc, #112]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	00db      	lsls	r3, r3, #3
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d1eb      	bne.n	800a146 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0302 	and.w	r3, r3, #2
 800a176:	2b00      	cmp	r3, #0
 800a178:	d010      	beq.n	800a19c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68da      	ldr	r2, [r3, #12]
 800a17e:	4b14      	ldr	r3, [pc, #80]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	f003 030f 	and.w	r3, r3, #15
 800a186:	429a      	cmp	r2, r3
 800a188:	d208      	bcs.n	800a19c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a18a:	4b11      	ldr	r3, [pc, #68]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	f023 020f 	bic.w	r2, r3, #15
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	490e      	ldr	r1, [pc, #56]	; (800a1d0 <HAL_RCC_ClockConfig+0x244>)
 800a198:	4313      	orrs	r3, r2
 800a19a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a19c:	4b0b      	ldr	r3, [pc, #44]	; (800a1cc <HAL_RCC_ClockConfig+0x240>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 030f 	and.w	r3, r3, #15
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d214      	bcs.n	800a1d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1aa:	4b08      	ldr	r3, [pc, #32]	; (800a1cc <HAL_RCC_ClockConfig+0x240>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f023 020f 	bic.w	r2, r3, #15
 800a1b2:	4906      	ldr	r1, [pc, #24]	; (800a1cc <HAL_RCC_ClockConfig+0x240>)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1ba:	4b04      	ldr	r3, [pc, #16]	; (800a1cc <HAL_RCC_ClockConfig+0x240>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 030f 	and.w	r3, r3, #15
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d005      	beq.n	800a1d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e086      	b.n	800a2da <HAL_RCC_ClockConfig+0x34e>
 800a1cc:	52002000 	.word	0x52002000
 800a1d0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 0304 	and.w	r3, r3, #4
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d010      	beq.n	800a202 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	691a      	ldr	r2, [r3, #16]
 800a1e4:	4b3f      	ldr	r3, [pc, #252]	; (800a2e4 <HAL_RCC_ClockConfig+0x358>)
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d208      	bcs.n	800a202 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1f0:	4b3c      	ldr	r3, [pc, #240]	; (800a2e4 <HAL_RCC_ClockConfig+0x358>)
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	4939      	ldr	r1, [pc, #228]	; (800a2e4 <HAL_RCC_ClockConfig+0x358>)
 800a1fe:	4313      	orrs	r3, r2
 800a200:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 0308 	and.w	r3, r3, #8
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d010      	beq.n	800a230 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	695a      	ldr	r2, [r3, #20]
 800a212:	4b34      	ldr	r3, [pc, #208]	; (800a2e4 <HAL_RCC_ClockConfig+0x358>)
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d208      	bcs.n	800a230 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a21e:	4b31      	ldr	r3, [pc, #196]	; (800a2e4 <HAL_RCC_ClockConfig+0x358>)
 800a220:	69db      	ldr	r3, [r3, #28]
 800a222:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	695b      	ldr	r3, [r3, #20]
 800a22a:	492e      	ldr	r1, [pc, #184]	; (800a2e4 <HAL_RCC_ClockConfig+0x358>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 0310 	and.w	r3, r3, #16
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d010      	beq.n	800a25e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	699a      	ldr	r2, [r3, #24]
 800a240:	4b28      	ldr	r3, [pc, #160]	; (800a2e4 <HAL_RCC_ClockConfig+0x358>)
 800a242:	69db      	ldr	r3, [r3, #28]
 800a244:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a248:	429a      	cmp	r2, r3
 800a24a:	d208      	bcs.n	800a25e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a24c:	4b25      	ldr	r3, [pc, #148]	; (800a2e4 <HAL_RCC_ClockConfig+0x358>)
 800a24e:	69db      	ldr	r3, [r3, #28]
 800a250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	4922      	ldr	r1, [pc, #136]	; (800a2e4 <HAL_RCC_ClockConfig+0x358>)
 800a25a:	4313      	orrs	r3, r2
 800a25c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f003 0320 	and.w	r3, r3, #32
 800a266:	2b00      	cmp	r3, #0
 800a268:	d010      	beq.n	800a28c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	69da      	ldr	r2, [r3, #28]
 800a26e:	4b1d      	ldr	r3, [pc, #116]	; (800a2e4 <HAL_RCC_ClockConfig+0x358>)
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a276:	429a      	cmp	r2, r3
 800a278:	d208      	bcs.n	800a28c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a27a:	4b1a      	ldr	r3, [pc, #104]	; (800a2e4 <HAL_RCC_ClockConfig+0x358>)
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	69db      	ldr	r3, [r3, #28]
 800a286:	4917      	ldr	r1, [pc, #92]	; (800a2e4 <HAL_RCC_ClockConfig+0x358>)
 800a288:	4313      	orrs	r3, r2
 800a28a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a28c:	f000 f844 	bl	800a318 <HAL_RCC_GetSysClockFreq>
 800a290:	4601      	mov	r1, r0
 800a292:	4b14      	ldr	r3, [pc, #80]	; (800a2e4 <HAL_RCC_ClockConfig+0x358>)
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	0a1b      	lsrs	r3, r3, #8
 800a298:	f003 030f 	and.w	r3, r3, #15
 800a29c:	4a12      	ldr	r2, [pc, #72]	; (800a2e8 <HAL_RCC_ClockConfig+0x35c>)
 800a29e:	5cd3      	ldrb	r3, [r2, r3]
 800a2a0:	f003 031f 	and.w	r3, r3, #31
 800a2a4:	fa21 f303 	lsr.w	r3, r1, r3
 800a2a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a2aa:	4b0e      	ldr	r3, [pc, #56]	; (800a2e4 <HAL_RCC_ClockConfig+0x358>)
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	f003 030f 	and.w	r3, r3, #15
 800a2b2:	4a0d      	ldr	r2, [pc, #52]	; (800a2e8 <HAL_RCC_ClockConfig+0x35c>)
 800a2b4:	5cd3      	ldrb	r3, [r2, r3]
 800a2b6:	f003 031f 	and.w	r3, r3, #31
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c0:	4a0a      	ldr	r2, [pc, #40]	; (800a2ec <HAL_RCC_ClockConfig+0x360>)
 800a2c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a2c4:	4a0a      	ldr	r2, [pc, #40]	; (800a2f0 <HAL_RCC_ClockConfig+0x364>)
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a2ca:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <HAL_RCC_ClockConfig+0x368>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fa f93a 	bl	8004548 <HAL_InitTick>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3718      	adds	r7, #24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	58024400 	.word	0x58024400
 800a2e8:	0801af48 	.word	0x0801af48
 800a2ec:	24000014 	.word	0x24000014
 800a2f0:	24000010 	.word	0x24000010
 800a2f4:	24000018 	.word	0x24000018

0800a2f8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800a2fc:	4b05      	ldr	r3, [pc, #20]	; (800a314 <HAL_RCC_EnableCSS+0x1c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a04      	ldr	r2, [pc, #16]	; (800a314 <HAL_RCC_EnableCSS+0x1c>)
 800a302:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a306:	6013      	str	r3, [r2, #0]
}
 800a308:	bf00      	nop
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	58024400 	.word	0x58024400

0800a318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a318:	b480      	push	{r7}
 800a31a:	b089      	sub	sp, #36	; 0x24
 800a31c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a31e:	4baf      	ldr	r3, [pc, #700]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a326:	2b18      	cmp	r3, #24
 800a328:	f200 814e 	bhi.w	800a5c8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800a32c:	a201      	add	r2, pc, #4	; (adr r2, 800a334 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a332:	bf00      	nop
 800a334:	0800a399 	.word	0x0800a399
 800a338:	0800a5c9 	.word	0x0800a5c9
 800a33c:	0800a5c9 	.word	0x0800a5c9
 800a340:	0800a5c9 	.word	0x0800a5c9
 800a344:	0800a5c9 	.word	0x0800a5c9
 800a348:	0800a5c9 	.word	0x0800a5c9
 800a34c:	0800a5c9 	.word	0x0800a5c9
 800a350:	0800a5c9 	.word	0x0800a5c9
 800a354:	0800a3bf 	.word	0x0800a3bf
 800a358:	0800a5c9 	.word	0x0800a5c9
 800a35c:	0800a5c9 	.word	0x0800a5c9
 800a360:	0800a5c9 	.word	0x0800a5c9
 800a364:	0800a5c9 	.word	0x0800a5c9
 800a368:	0800a5c9 	.word	0x0800a5c9
 800a36c:	0800a5c9 	.word	0x0800a5c9
 800a370:	0800a5c9 	.word	0x0800a5c9
 800a374:	0800a3c5 	.word	0x0800a3c5
 800a378:	0800a5c9 	.word	0x0800a5c9
 800a37c:	0800a5c9 	.word	0x0800a5c9
 800a380:	0800a5c9 	.word	0x0800a5c9
 800a384:	0800a5c9 	.word	0x0800a5c9
 800a388:	0800a5c9 	.word	0x0800a5c9
 800a38c:	0800a5c9 	.word	0x0800a5c9
 800a390:	0800a5c9 	.word	0x0800a5c9
 800a394:	0800a3cb 	.word	0x0800a3cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a398:	4b90      	ldr	r3, [pc, #576]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0320 	and.w	r3, r3, #32
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d009      	beq.n	800a3b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3a4:	4b8d      	ldr	r3, [pc, #564]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	08db      	lsrs	r3, r3, #3
 800a3aa:	f003 0303 	and.w	r3, r3, #3
 800a3ae:	4a8c      	ldr	r2, [pc, #560]	; (800a5e0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a3b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a3b6:	e10a      	b.n	800a5ce <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a3b8:	4b89      	ldr	r3, [pc, #548]	; (800a5e0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a3ba:	61bb      	str	r3, [r7, #24]
    break;
 800a3bc:	e107      	b.n	800a5ce <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a3be:	4b89      	ldr	r3, [pc, #548]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800a3c0:	61bb      	str	r3, [r7, #24]
    break;
 800a3c2:	e104      	b.n	800a5ce <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a3c4:	4b88      	ldr	r3, [pc, #544]	; (800a5e8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800a3c6:	61bb      	str	r3, [r7, #24]
    break;
 800a3c8:	e101      	b.n	800a5ce <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a3ca:	4b84      	ldr	r3, [pc, #528]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ce:	f003 0303 	and.w	r3, r3, #3
 800a3d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a3d4:	4b81      	ldr	r3, [pc, #516]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d8:	091b      	lsrs	r3, r3, #4
 800a3da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a3e0:	4b7e      	ldr	r3, [pc, #504]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e4:	f003 0301 	and.w	r3, r3, #1
 800a3e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a3ea:	4b7c      	ldr	r3, [pc, #496]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ee:	08db      	lsrs	r3, r3, #3
 800a3f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	fb02 f303 	mul.w	r3, r2, r3
 800a3fa:	ee07 3a90 	vmov	s15, r3
 800a3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a402:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 80da 	beq.w	800a5c2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d05a      	beq.n	800a4ca <HAL_RCC_GetSysClockFreq+0x1b2>
 800a414:	2b01      	cmp	r3, #1
 800a416:	d302      	bcc.n	800a41e <HAL_RCC_GetSysClockFreq+0x106>
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d078      	beq.n	800a50e <HAL_RCC_GetSysClockFreq+0x1f6>
 800a41c:	e099      	b.n	800a552 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a41e:	4b6f      	ldr	r3, [pc, #444]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 0320 	and.w	r3, r3, #32
 800a426:	2b00      	cmp	r3, #0
 800a428:	d02d      	beq.n	800a486 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a42a:	4b6c      	ldr	r3, [pc, #432]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	08db      	lsrs	r3, r3, #3
 800a430:	f003 0303 	and.w	r3, r3, #3
 800a434:	4a6a      	ldr	r2, [pc, #424]	; (800a5e0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a436:	fa22 f303 	lsr.w	r3, r2, r3
 800a43a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	ee07 3a90 	vmov	s15, r3
 800a442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	ee07 3a90 	vmov	s15, r3
 800a44c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a454:	4b61      	ldr	r3, [pc, #388]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a45c:	ee07 3a90 	vmov	s15, r3
 800a460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a464:	ed97 6a02 	vldr	s12, [r7, #8]
 800a468:	eddf 5a60 	vldr	s11, [pc, #384]	; 800a5ec <HAL_RCC_GetSysClockFreq+0x2d4>
 800a46c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a470:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a474:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a47c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a480:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a484:	e087      	b.n	800a596 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	ee07 3a90 	vmov	s15, r3
 800a48c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a490:	eddf 6a57 	vldr	s13, [pc, #348]	; 800a5f0 <HAL_RCC_GetSysClockFreq+0x2d8>
 800a494:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a498:	4b50      	ldr	r3, [pc, #320]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4a0:	ee07 3a90 	vmov	s15, r3
 800a4a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4a8:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4ac:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800a5ec <HAL_RCC_GetSysClockFreq+0x2d4>
 800a4b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4c8:	e065      	b.n	800a596 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	ee07 3a90 	vmov	s15, r3
 800a4d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4d4:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a5f4 <HAL_RCC_GetSysClockFreq+0x2dc>
 800a4d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4dc:	4b3f      	ldr	r3, [pc, #252]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4e4:	ee07 3a90 	vmov	s15, r3
 800a4e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ec:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4f0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a5ec <HAL_RCC_GetSysClockFreq+0x2d4>
 800a4f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a504:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a508:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a50c:	e043      	b.n	800a596 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	ee07 3a90 	vmov	s15, r3
 800a514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a518:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a5f8 <HAL_RCC_GetSysClockFreq+0x2e0>
 800a51c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a520:	4b2e      	ldr	r3, [pc, #184]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a528:	ee07 3a90 	vmov	s15, r3
 800a52c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a530:	ed97 6a02 	vldr	s12, [r7, #8]
 800a534:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800a5ec <HAL_RCC_GetSysClockFreq+0x2d4>
 800a538:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a53c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a540:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a54c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a550:	e021      	b.n	800a596 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	ee07 3a90 	vmov	s15, r3
 800a558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a55c:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a5f4 <HAL_RCC_GetSysClockFreq+0x2dc>
 800a560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a564:	4b1d      	ldr	r3, [pc, #116]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a56c:	ee07 3a90 	vmov	s15, r3
 800a570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a574:	ed97 6a02 	vldr	s12, [r7, #8]
 800a578:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800a5ec <HAL_RCC_GetSysClockFreq+0x2d4>
 800a57c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a58c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a590:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a594:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a596:	4b11      	ldr	r3, [pc, #68]	; (800a5dc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59a:	0a5b      	lsrs	r3, r3, #9
 800a59c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	ee07 3a90 	vmov	s15, r3
 800a5aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a5ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5ba:	ee17 3a90 	vmov	r3, s15
 800a5be:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a5c0:	e005      	b.n	800a5ce <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	61bb      	str	r3, [r7, #24]
    break;
 800a5c6:	e002      	b.n	800a5ce <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800a5c8:	4b06      	ldr	r3, [pc, #24]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800a5ca:	61bb      	str	r3, [r7, #24]
    break;
 800a5cc:	bf00      	nop
  }

  return sysclockfreq;
 800a5ce:	69bb      	ldr	r3, [r7, #24]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3724      	adds	r7, #36	; 0x24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr
 800a5dc:	58024400 	.word	0x58024400
 800a5e0:	03d09000 	.word	0x03d09000
 800a5e4:	003d0900 	.word	0x003d0900
 800a5e8:	017d7840 	.word	0x017d7840
 800a5ec:	46000000 	.word	0x46000000
 800a5f0:	4c742400 	.word	0x4c742400
 800a5f4:	4a742400 	.word	0x4a742400
 800a5f8:	4bbebc20 	.word	0x4bbebc20

0800a5fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a602:	f7ff fe89 	bl	800a318 <HAL_RCC_GetSysClockFreq>
 800a606:	4601      	mov	r1, r0
 800a608:	4b10      	ldr	r3, [pc, #64]	; (800a64c <HAL_RCC_GetHCLKFreq+0x50>)
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	0a1b      	lsrs	r3, r3, #8
 800a60e:	f003 030f 	and.w	r3, r3, #15
 800a612:	4a0f      	ldr	r2, [pc, #60]	; (800a650 <HAL_RCC_GetHCLKFreq+0x54>)
 800a614:	5cd3      	ldrb	r3, [r2, r3]
 800a616:	f003 031f 	and.w	r3, r3, #31
 800a61a:	fa21 f303 	lsr.w	r3, r1, r3
 800a61e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a620:	4b0a      	ldr	r3, [pc, #40]	; (800a64c <HAL_RCC_GetHCLKFreq+0x50>)
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	f003 030f 	and.w	r3, r3, #15
 800a628:	4a09      	ldr	r2, [pc, #36]	; (800a650 <HAL_RCC_GetHCLKFreq+0x54>)
 800a62a:	5cd3      	ldrb	r3, [r2, r3]
 800a62c:	f003 031f 	and.w	r3, r3, #31
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	fa22 f303 	lsr.w	r3, r2, r3
 800a636:	4a07      	ldr	r2, [pc, #28]	; (800a654 <HAL_RCC_GetHCLKFreq+0x58>)
 800a638:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a63a:	4a07      	ldr	r2, [pc, #28]	; (800a658 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a640:	4b04      	ldr	r3, [pc, #16]	; (800a654 <HAL_RCC_GetHCLKFreq+0x58>)
 800a642:	681b      	ldr	r3, [r3, #0]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	58024400 	.word	0x58024400
 800a650:	0801af48 	.word	0x0801af48
 800a654:	24000014 	.word	0x24000014
 800a658:	24000010 	.word	0x24000010

0800a65c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a660:	f7ff ffcc 	bl	800a5fc <HAL_RCC_GetHCLKFreq>
 800a664:	4601      	mov	r1, r0
 800a666:	4b06      	ldr	r3, [pc, #24]	; (800a680 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a668:	69db      	ldr	r3, [r3, #28]
 800a66a:	091b      	lsrs	r3, r3, #4
 800a66c:	f003 0307 	and.w	r3, r3, #7
 800a670:	4a04      	ldr	r2, [pc, #16]	; (800a684 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a672:	5cd3      	ldrb	r3, [r2, r3]
 800a674:	f003 031f 	and.w	r3, r3, #31
 800a678:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	58024400 	.word	0x58024400
 800a684:	0801af48 	.word	0x0801af48

0800a688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a68c:	f7ff ffb6 	bl	800a5fc <HAL_RCC_GetHCLKFreq>
 800a690:	4601      	mov	r1, r0
 800a692:	4b06      	ldr	r3, [pc, #24]	; (800a6ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800a694:	69db      	ldr	r3, [r3, #28]
 800a696:	0a1b      	lsrs	r3, r3, #8
 800a698:	f003 0307 	and.w	r3, r3, #7
 800a69c:	4a04      	ldr	r2, [pc, #16]	; (800a6b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a69e:	5cd3      	ldrb	r3, [r2, r3]
 800a6a0:	f003 031f 	and.w	r3, r3, #31
 800a6a4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	58024400 	.word	0x58024400
 800a6b0:	0801af48 	.word	0x0801af48

0800a6b4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a6b8:	4b07      	ldr	r3, [pc, #28]	; (800a6d8 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a6ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6c4:	d105      	bne.n	800a6d2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800a6c6:	f000 f809 	bl	800a6dc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a6ca:	4b03      	ldr	r3, [pc, #12]	; (800a6d8 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a6cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a6d0:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800a6d2:	bf00      	nop
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	58024400 	.word	0x58024400

0800a6dc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800a6e0:	bf00      	nop
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
	...

0800a6ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a704:	2b00      	cmp	r3, #0
 800a706:	d03d      	beq.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a70c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a710:	d013      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a716:	d802      	bhi.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d007      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800a71c:	e01f      	b.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800a71e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a722:	d013      	beq.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x60>
 800a724:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a728:	d01c      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800a72a:	e018      	b.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a72c:	4baf      	ldr	r3, [pc, #700]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a730:	4aae      	ldr	r2, [pc, #696]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a736:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a738:	e015      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	3304      	adds	r3, #4
 800a73e:	2102      	movs	r1, #2
 800a740:	4618      	mov	r0, r3
 800a742:	f001 fd33 	bl	800c1ac <RCCEx_PLL2_Config>
 800a746:	4603      	mov	r3, r0
 800a748:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a74a:	e00c      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3324      	adds	r3, #36	; 0x24
 800a750:	2102      	movs	r1, #2
 800a752:	4618      	mov	r0, r3
 800a754:	f001 fddc 	bl	800c310 <RCCEx_PLL3_Config>
 800a758:	4603      	mov	r3, r0
 800a75a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a75c:	e003      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	75fb      	strb	r3, [r7, #23]
      break;
 800a762:	e000      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800a764:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a766:	7dfb      	ldrb	r3, [r7, #23]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d109      	bne.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a76c:	4b9f      	ldr	r3, [pc, #636]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a76e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a770:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a778:	499c      	ldr	r1, [pc, #624]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a77a:	4313      	orrs	r3, r2
 800a77c:	650b      	str	r3, [r1, #80]	; 0x50
 800a77e:	e001      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a780:	7dfb      	ldrb	r3, [r7, #23]
 800a782:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d03d      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a794:	2b04      	cmp	r3, #4
 800a796:	d826      	bhi.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800a798:	a201      	add	r2, pc, #4	; (adr r2, 800a7a0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800a79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79e:	bf00      	nop
 800a7a0:	0800a7b5 	.word	0x0800a7b5
 800a7a4:	0800a7c3 	.word	0x0800a7c3
 800a7a8:	0800a7d5 	.word	0x0800a7d5
 800a7ac:	0800a7ed 	.word	0x0800a7ed
 800a7b0:	0800a7ed 	.word	0x0800a7ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7b4:	4b8d      	ldr	r3, [pc, #564]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b8:	4a8c      	ldr	r2, [pc, #560]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a7c0:	e015      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f001 fcef 	bl	800c1ac <RCCEx_PLL2_Config>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a7d2:	e00c      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3324      	adds	r3, #36	; 0x24
 800a7d8:	2100      	movs	r1, #0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f001 fd98 	bl	800c310 <RCCEx_PLL3_Config>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a7e4:	e003      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a7ea:	e000      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800a7ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d109      	bne.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a7f4:	4b7d      	ldr	r3, [pc, #500]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f8:	f023 0207 	bic.w	r2, r3, #7
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a800:	497a      	ldr	r1, [pc, #488]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a802:	4313      	orrs	r3, r2
 800a804:	650b      	str	r3, [r1, #80]	; 0x50
 800a806:	e001      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a808:	7dfb      	ldrb	r3, [r7, #23]
 800a80a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a814:	2b00      	cmp	r3, #0
 800a816:	d03e      	beq.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a81c:	2b80      	cmp	r3, #128	; 0x80
 800a81e:	d01c      	beq.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800a820:	2b80      	cmp	r3, #128	; 0x80
 800a822:	d804      	bhi.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x142>
 800a824:	2b00      	cmp	r3, #0
 800a826:	d008      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a828:	2b40      	cmp	r3, #64	; 0x40
 800a82a:	d00d      	beq.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a82c:	e01e      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a82e:	2bc0      	cmp	r3, #192	; 0xc0
 800a830:	d01f      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800a832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a836:	d01e      	beq.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a838:	e018      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a83a:	4b6c      	ldr	r3, [pc, #432]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83e:	4a6b      	ldr	r2, [pc, #428]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a844:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a846:	e017      	b.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	3304      	adds	r3, #4
 800a84c:	2100      	movs	r1, #0
 800a84e:	4618      	mov	r0, r3
 800a850:	f001 fcac 	bl	800c1ac <RCCEx_PLL2_Config>
 800a854:	4603      	mov	r3, r0
 800a856:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a858:	e00e      	b.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	3324      	adds	r3, #36	; 0x24
 800a85e:	2100      	movs	r1, #0
 800a860:	4618      	mov	r0, r3
 800a862:	f001 fd55 	bl	800c310 <RCCEx_PLL3_Config>
 800a866:	4603      	mov	r3, r0
 800a868:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a86a:	e005      	b.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	75fb      	strb	r3, [r7, #23]
      break;
 800a870:	e002      	b.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a872:	bf00      	nop
 800a874:	e000      	b.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a876:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a878:	7dfb      	ldrb	r3, [r7, #23]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d109      	bne.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a87e:	4b5b      	ldr	r3, [pc, #364]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a882:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a88a:	4958      	ldr	r1, [pc, #352]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a88c:	4313      	orrs	r3, r2
 800a88e:	650b      	str	r3, [r1, #80]	; 0x50
 800a890:	e001      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a892:	7dfb      	ldrb	r3, [r7, #23]
 800a894:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d044      	beq.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a8a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8ac:	d01f      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a8ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8b2:	d805      	bhi.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00a      	beq.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a8b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8bc:	d00e      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800a8be:	e01f      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x214>
 800a8c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a8c4:	d01f      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800a8c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8ca:	d01e      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a8cc:	e018      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8ce:	4b47      	ldr	r3, [pc, #284]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d2:	4a46      	ldr	r2, [pc, #280]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8da:	e017      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	3304      	adds	r3, #4
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f001 fc62 	bl	800c1ac <RCCEx_PLL2_Config>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a8ec:	e00e      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	3324      	adds	r3, #36	; 0x24
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f001 fd0b 	bl	800c310 <RCCEx_PLL3_Config>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8fe:	e005      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	75fb      	strb	r3, [r7, #23]
      break;
 800a904:	e002      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a906:	bf00      	nop
 800a908:	e000      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a90a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10a      	bne.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a912:	4b36      	ldr	r3, [pc, #216]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a916:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a920:	4932      	ldr	r1, [pc, #200]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a922:	4313      	orrs	r3, r2
 800a924:	658b      	str	r3, [r1, #88]	; 0x58
 800a926:	e001      	b.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a928:	7dfb      	ldrb	r3, [r7, #23]
 800a92a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a934:	2b00      	cmp	r3, #0
 800a936:	d044      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a93e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a942:	d01f      	beq.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a944:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a948:	d805      	bhi.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00a      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800a94e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a952:	d00e      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a954:	e01f      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800a956:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a95a:	d01f      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a95c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a960:	d01e      	beq.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a962:	e018      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a964:	4b21      	ldr	r3, [pc, #132]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a968:	4a20      	ldr	r2, [pc, #128]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a96a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a96e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a970:	e017      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	3304      	adds	r3, #4
 800a976:	2100      	movs	r1, #0
 800a978:	4618      	mov	r0, r3
 800a97a:	f001 fc17 	bl	800c1ac <RCCEx_PLL2_Config>
 800a97e:	4603      	mov	r3, r0
 800a980:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a982:	e00e      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	3324      	adds	r3, #36	; 0x24
 800a988:	2100      	movs	r1, #0
 800a98a:	4618      	mov	r0, r3
 800a98c:	f001 fcc0 	bl	800c310 <RCCEx_PLL3_Config>
 800a990:	4603      	mov	r3, r0
 800a992:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a994:	e005      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	75fb      	strb	r3, [r7, #23]
      break;
 800a99a:	e002      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a99c:	bf00      	nop
 800a99e:	e000      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a9a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10a      	bne.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a9a8:	4b10      	ldr	r3, [pc, #64]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a9aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a9b6:	490d      	ldr	r1, [pc, #52]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	658b      	str	r3, [r1, #88]	; 0x58
 800a9bc:	e001      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9be:	7dfb      	ldrb	r3, [r7, #23]
 800a9c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d035      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9d2:	2b10      	cmp	r3, #16
 800a9d4:	d00c      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800a9d6:	2b10      	cmp	r3, #16
 800a9d8:	d802      	bhi.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d01b      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800a9de:	e017      	b.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a9e0:	2b20      	cmp	r3, #32
 800a9e2:	d00c      	beq.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x312>
 800a9e4:	2b30      	cmp	r3, #48	; 0x30
 800a9e6:	d018      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800a9e8:	e012      	b.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a9ea:	bf00      	nop
 800a9ec:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9f0:	4baf      	ldr	r3, [pc, #700]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f4:	4aae      	ldr	r2, [pc, #696]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a9fc:	e00e      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	3304      	adds	r3, #4
 800aa02:	2102      	movs	r1, #2
 800aa04:	4618      	mov	r0, r3
 800aa06:	f001 fbd1 	bl	800c1ac <RCCEx_PLL2_Config>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800aa0e:	e005      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	75fb      	strb	r3, [r7, #23]
      break;
 800aa14:	e002      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800aa16:	bf00      	nop
 800aa18:	e000      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800aa1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa1c:	7dfb      	ldrb	r3, [r7, #23]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d109      	bne.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800aa22:	4ba3      	ldr	r3, [pc, #652]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa2e:	49a0      	ldr	r1, [pc, #640]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa30:	4313      	orrs	r3, r2
 800aa32:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aa34:	e001      	b.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa36:	7dfb      	ldrb	r3, [r7, #23]
 800aa38:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d042      	beq.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa4e:	d01f      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800aa50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa54:	d805      	bhi.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00a      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800aa5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa5e:	d00e      	beq.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x392>
 800aa60:	e01f      	b.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800aa62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa66:	d01f      	beq.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800aa68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa6c:	d01e      	beq.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800aa6e:	e018      	b.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa70:	4b8f      	ldr	r3, [pc, #572]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa74:	4a8e      	ldr	r2, [pc, #568]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa7c:	e017      	b.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	3304      	adds	r3, #4
 800aa82:	2100      	movs	r1, #0
 800aa84:	4618      	mov	r0, r3
 800aa86:	f001 fb91 	bl	800c1ac <RCCEx_PLL2_Config>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa8e:	e00e      	b.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	3324      	adds	r3, #36	; 0x24
 800aa94:	2100      	movs	r1, #0
 800aa96:	4618      	mov	r0, r3
 800aa98:	f001 fc3a 	bl	800c310 <RCCEx_PLL3_Config>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aaa0:	e005      	b.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	75fb      	strb	r3, [r7, #23]
      break;
 800aaa6:	e002      	b.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800aaa8:	bf00      	nop
 800aaaa:	e000      	b.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800aaac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aaae:	7dfb      	ldrb	r3, [r7, #23]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d109      	bne.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800aab4:	4b7e      	ldr	r3, [pc, #504]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aab8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aac0:	497b      	ldr	r1, [pc, #492]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aac2:	4313      	orrs	r3, r2
 800aac4:	650b      	str	r3, [r1, #80]	; 0x50
 800aac6:	e001      	b.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
 800aaca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d042      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aadc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aae0:	d01b      	beq.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800aae2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aae6:	d805      	bhi.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d022      	beq.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800aaec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaf0:	d00a      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800aaf2:	e01b      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x440>
 800aaf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aaf8:	d01d      	beq.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800aafa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aafe:	d01c      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800ab00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ab04:	d01b      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x452>
 800ab06:	e011      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	2101      	movs	r1, #1
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f001 fb4c 	bl	800c1ac <RCCEx_PLL2_Config>
 800ab14:	4603      	mov	r3, r0
 800ab16:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ab18:	e012      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	3324      	adds	r3, #36	; 0x24
 800ab1e:	2101      	movs	r1, #1
 800ab20:	4618      	mov	r0, r3
 800ab22:	f001 fbf5 	bl	800c310 <RCCEx_PLL3_Config>
 800ab26:	4603      	mov	r3, r0
 800ab28:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ab2a:	e009      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab30:	e006      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ab32:	bf00      	nop
 800ab34:	e004      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ab36:	bf00      	nop
 800ab38:	e002      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ab3a:	bf00      	nop
 800ab3c:	e000      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ab3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab40:	7dfb      	ldrb	r3, [r7, #23]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d109      	bne.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ab46:	4b5a      	ldr	r3, [pc, #360]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab4a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab52:	4957      	ldr	r1, [pc, #348]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab54:	4313      	orrs	r3, r2
 800ab56:	650b      	str	r3, [r1, #80]	; 0x50
 800ab58:	e001      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab5a:	7dfb      	ldrb	r3, [r7, #23]
 800ab5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d044      	beq.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab74:	d01b      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800ab76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab7a:	d805      	bhi.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d022      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ab80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab84:	d00a      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800ab86:	e01b      	b.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800ab88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab8c:	d01d      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ab8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab92:	d01c      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800ab94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ab98:	d01b      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ab9a:	e011      	b.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	3304      	adds	r3, #4
 800aba0:	2101      	movs	r1, #1
 800aba2:	4618      	mov	r0, r3
 800aba4:	f001 fb02 	bl	800c1ac <RCCEx_PLL2_Config>
 800aba8:	4603      	mov	r3, r0
 800abaa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800abac:	e012      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	3324      	adds	r3, #36	; 0x24
 800abb2:	2101      	movs	r1, #1
 800abb4:	4618      	mov	r0, r3
 800abb6:	f001 fbab 	bl	800c310 <RCCEx_PLL3_Config>
 800abba:	4603      	mov	r3, r0
 800abbc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800abbe:	e009      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	75fb      	strb	r3, [r7, #23]
      break;
 800abc4:	e006      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800abc6:	bf00      	nop
 800abc8:	e004      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800abca:	bf00      	nop
 800abcc:	e002      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800abce:	bf00      	nop
 800abd0:	e000      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800abd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abd4:	7dfb      	ldrb	r3, [r7, #23]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10a      	bne.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800abda:	4b35      	ldr	r3, [pc, #212]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800abdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abde:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800abe8:	4931      	ldr	r1, [pc, #196]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800abea:	4313      	orrs	r3, r2
 800abec:	658b      	str	r3, [r1, #88]	; 0x58
 800abee:	e001      	b.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abf0:	7dfb      	ldrb	r3, [r7, #23]
 800abf2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d02d      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac08:	d005      	beq.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800ac0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac0e:	d009      	beq.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d013      	beq.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x550>
 800ac14:	e00f      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac16:	4b26      	ldr	r3, [pc, #152]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1a:	4a25      	ldr	r2, [pc, #148]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ac22:	e00c      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	3304      	adds	r3, #4
 800ac28:	2101      	movs	r1, #1
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f001 fabe 	bl	800c1ac <RCCEx_PLL2_Config>
 800ac30:	4603      	mov	r3, r0
 800ac32:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ac34:	e003      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	75fb      	strb	r3, [r7, #23]
      break;
 800ac3a:	e000      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800ac3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d109      	bne.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ac44:	4b1a      	ldr	r3, [pc, #104]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac50:	4917      	ldr	r1, [pc, #92]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac52:	4313      	orrs	r3, r2
 800ac54:	650b      	str	r3, [r1, #80]	; 0x50
 800ac56:	e001      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
 800ac5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d035      	beq.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac6c:	2b03      	cmp	r3, #3
 800ac6e:	d81b      	bhi.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ac70:	a201      	add	r2, pc, #4	; (adr r2, 800ac78 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800ac72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac76:	bf00      	nop
 800ac78:	0800acb5 	.word	0x0800acb5
 800ac7c:	0800ac89 	.word	0x0800ac89
 800ac80:	0800ac97 	.word	0x0800ac97
 800ac84:	0800acb5 	.word	0x0800acb5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac88:	4b09      	ldr	r3, [pc, #36]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8c:	4a08      	ldr	r2, [pc, #32]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ac94:	e00f      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	3304      	adds	r3, #4
 800ac9a:	2102      	movs	r1, #2
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f001 fa85 	bl	800c1ac <RCCEx_PLL2_Config>
 800aca2:	4603      	mov	r3, r0
 800aca4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800aca6:	e006      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	75fb      	strb	r3, [r7, #23]
      break;
 800acac:	e003      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800acae:	bf00      	nop
 800acb0:	58024400 	.word	0x58024400
      break;
 800acb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acb6:	7dfb      	ldrb	r3, [r7, #23]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d109      	bne.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800acbc:	4bba      	ldr	r3, [pc, #744]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800acbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acc0:	f023 0203 	bic.w	r2, r3, #3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc8:	49b7      	ldr	r1, [pc, #732]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800acca:	4313      	orrs	r3, r2
 800accc:	64cb      	str	r3, [r1, #76]	; 0x4c
 800acce:	e001      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd0:	7dfb      	ldrb	r3, [r7, #23]
 800acd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f000 8086 	beq.w	800adee <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ace2:	4bb2      	ldr	r3, [pc, #712]	; (800afac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4ab1      	ldr	r2, [pc, #708]	; (800afac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800ace8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800acee:	f7f9 fc75 	bl	80045dc <HAL_GetTick>
 800acf2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acf4:	e009      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acf6:	f7f9 fc71 	bl	80045dc <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	2b64      	cmp	r3, #100	; 0x64
 800ad02:	d902      	bls.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800ad04:	2303      	movs	r3, #3
 800ad06:	75fb      	strb	r3, [r7, #23]
        break;
 800ad08:	e005      	b.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad0a:	4ba8      	ldr	r3, [pc, #672]	; (800afac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d0ef      	beq.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800ad16:	7dfb      	ldrb	r3, [r7, #23]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d166      	bne.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ad1c:	4ba2      	ldr	r3, [pc, #648]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad26:	4053      	eors	r3, r2
 800ad28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d013      	beq.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ad30:	4b9d      	ldr	r3, [pc, #628]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad38:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ad3a:	4b9b      	ldr	r3, [pc, #620]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3e:	4a9a      	ldr	r2, [pc, #616]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad44:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ad46:	4b98      	ldr	r3, [pc, #608]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad4a:	4a97      	ldr	r2, [pc, #604]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad50:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ad52:	4a95      	ldr	r2, [pc, #596]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad62:	d115      	bne.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad64:	f7f9 fc3a 	bl	80045dc <HAL_GetTick>
 800ad68:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad6a:	e00b      	b.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad6c:	f7f9 fc36 	bl	80045dc <HAL_GetTick>
 800ad70:	4602      	mov	r2, r0
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d902      	bls.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	75fb      	strb	r3, [r7, #23]
            break;
 800ad82:	e005      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad84:	4b88      	ldr	r3, [pc, #544]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad88:	f003 0302 	and.w	r3, r3, #2
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d0ed      	beq.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800ad90:	7dfb      	ldrb	r3, [r7, #23]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d126      	bne.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ada0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ada4:	d10d      	bne.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800ada6:	4b80      	ldr	r3, [pc, #512]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800adb4:	0919      	lsrs	r1, r3, #4
 800adb6:	4b7e      	ldr	r3, [pc, #504]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800adb8:	400b      	ands	r3, r1
 800adba:	497b      	ldr	r1, [pc, #492]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800adbc:	4313      	orrs	r3, r2
 800adbe:	610b      	str	r3, [r1, #16]
 800adc0:	e005      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800adc2:	4b79      	ldr	r3, [pc, #484]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	4a78      	ldr	r2, [pc, #480]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800adc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800adcc:	6113      	str	r3, [r2, #16]
 800adce:	4b76      	ldr	r3, [pc, #472]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800add0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800add8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800addc:	4972      	ldr	r1, [pc, #456]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800adde:	4313      	orrs	r3, r2
 800ade0:	670b      	str	r3, [r1, #112]	; 0x70
 800ade2:	e004      	b.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ade4:	7dfb      	ldrb	r3, [r7, #23]
 800ade6:	75bb      	strb	r3, [r7, #22]
 800ade8:	e001      	b.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adea:	7dfb      	ldrb	r3, [r7, #23]
 800adec:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 0301 	and.w	r3, r3, #1
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d07d      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adfe:	2b28      	cmp	r3, #40	; 0x28
 800ae00:	d866      	bhi.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800ae02:	a201      	add	r2, pc, #4	; (adr r2, 800ae08 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ae04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae08:	0800aed7 	.word	0x0800aed7
 800ae0c:	0800aed1 	.word	0x0800aed1
 800ae10:	0800aed1 	.word	0x0800aed1
 800ae14:	0800aed1 	.word	0x0800aed1
 800ae18:	0800aed1 	.word	0x0800aed1
 800ae1c:	0800aed1 	.word	0x0800aed1
 800ae20:	0800aed1 	.word	0x0800aed1
 800ae24:	0800aed1 	.word	0x0800aed1
 800ae28:	0800aead 	.word	0x0800aead
 800ae2c:	0800aed1 	.word	0x0800aed1
 800ae30:	0800aed1 	.word	0x0800aed1
 800ae34:	0800aed1 	.word	0x0800aed1
 800ae38:	0800aed1 	.word	0x0800aed1
 800ae3c:	0800aed1 	.word	0x0800aed1
 800ae40:	0800aed1 	.word	0x0800aed1
 800ae44:	0800aed1 	.word	0x0800aed1
 800ae48:	0800aebf 	.word	0x0800aebf
 800ae4c:	0800aed1 	.word	0x0800aed1
 800ae50:	0800aed1 	.word	0x0800aed1
 800ae54:	0800aed1 	.word	0x0800aed1
 800ae58:	0800aed1 	.word	0x0800aed1
 800ae5c:	0800aed1 	.word	0x0800aed1
 800ae60:	0800aed1 	.word	0x0800aed1
 800ae64:	0800aed1 	.word	0x0800aed1
 800ae68:	0800aed7 	.word	0x0800aed7
 800ae6c:	0800aed1 	.word	0x0800aed1
 800ae70:	0800aed1 	.word	0x0800aed1
 800ae74:	0800aed1 	.word	0x0800aed1
 800ae78:	0800aed1 	.word	0x0800aed1
 800ae7c:	0800aed1 	.word	0x0800aed1
 800ae80:	0800aed1 	.word	0x0800aed1
 800ae84:	0800aed1 	.word	0x0800aed1
 800ae88:	0800aed7 	.word	0x0800aed7
 800ae8c:	0800aed1 	.word	0x0800aed1
 800ae90:	0800aed1 	.word	0x0800aed1
 800ae94:	0800aed1 	.word	0x0800aed1
 800ae98:	0800aed1 	.word	0x0800aed1
 800ae9c:	0800aed1 	.word	0x0800aed1
 800aea0:	0800aed1 	.word	0x0800aed1
 800aea4:	0800aed1 	.word	0x0800aed1
 800aea8:	0800aed7 	.word	0x0800aed7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3304      	adds	r3, #4
 800aeb0:	2101      	movs	r1, #1
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f001 f97a 	bl	800c1ac <RCCEx_PLL2_Config>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800aebc:	e00c      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	3324      	adds	r3, #36	; 0x24
 800aec2:	2101      	movs	r1, #1
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 fa23 	bl	800c310 <RCCEx_PLL3_Config>
 800aeca:	4603      	mov	r3, r0
 800aecc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800aece:	e003      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	75fb      	strb	r3, [r7, #23]
      break;
 800aed4:	e000      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800aed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d109      	bne.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800aede:	4b32      	ldr	r3, [pc, #200]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aeea:	492f      	ldr	r1, [pc, #188]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aeec:	4313      	orrs	r3, r2
 800aeee:	654b      	str	r3, [r1, #84]	; 0x54
 800aef0:	e001      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aef2:	7dfb      	ldrb	r3, [r7, #23]
 800aef4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0302 	and.w	r3, r3, #2
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d037      	beq.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af06:	2b05      	cmp	r3, #5
 800af08:	d820      	bhi.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800af0a:	a201      	add	r2, pc, #4	; (adr r2, 800af10 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800af0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af10:	0800af53 	.word	0x0800af53
 800af14:	0800af29 	.word	0x0800af29
 800af18:	0800af3b 	.word	0x0800af3b
 800af1c:	0800af53 	.word	0x0800af53
 800af20:	0800af53 	.word	0x0800af53
 800af24:	0800af53 	.word	0x0800af53
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	3304      	adds	r3, #4
 800af2c:	2101      	movs	r1, #1
 800af2e:	4618      	mov	r0, r3
 800af30:	f001 f93c 	bl	800c1ac <RCCEx_PLL2_Config>
 800af34:	4603      	mov	r3, r0
 800af36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800af38:	e00c      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3324      	adds	r3, #36	; 0x24
 800af3e:	2101      	movs	r1, #1
 800af40:	4618      	mov	r0, r3
 800af42:	f001 f9e5 	bl	800c310 <RCCEx_PLL3_Config>
 800af46:	4603      	mov	r3, r0
 800af48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800af4a:	e003      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	75fb      	strb	r3, [r7, #23]
      break;
 800af50:	e000      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800af52:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af54:	7dfb      	ldrb	r3, [r7, #23]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d109      	bne.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800af5a:	4b13      	ldr	r3, [pc, #76]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800af5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af5e:	f023 0207 	bic.w	r2, r3, #7
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af66:	4910      	ldr	r1, [pc, #64]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800af68:	4313      	orrs	r3, r2
 800af6a:	654b      	str	r3, [r1, #84]	; 0x54
 800af6c:	e001      	b.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af6e:	7dfb      	ldrb	r3, [r7, #23]
 800af70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 0304 	and.w	r3, r3, #4
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d040      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af84:	2b05      	cmp	r3, #5
 800af86:	d827      	bhi.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800af88:	a201      	add	r2, pc, #4	; (adr r2, 800af90 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800af8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8e:	bf00      	nop
 800af90:	0800afdf 	.word	0x0800afdf
 800af94:	0800afb5 	.word	0x0800afb5
 800af98:	0800afc7 	.word	0x0800afc7
 800af9c:	0800afdf 	.word	0x0800afdf
 800afa0:	0800afdf 	.word	0x0800afdf
 800afa4:	0800afdf 	.word	0x0800afdf
 800afa8:	58024400 	.word	0x58024400
 800afac:	58024800 	.word	0x58024800
 800afb0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	3304      	adds	r3, #4
 800afb8:	2101      	movs	r1, #1
 800afba:	4618      	mov	r0, r3
 800afbc:	f001 f8f6 	bl	800c1ac <RCCEx_PLL2_Config>
 800afc0:	4603      	mov	r3, r0
 800afc2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800afc4:	e00c      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	3324      	adds	r3, #36	; 0x24
 800afca:	2101      	movs	r1, #1
 800afcc:	4618      	mov	r0, r3
 800afce:	f001 f99f 	bl	800c310 <RCCEx_PLL3_Config>
 800afd2:	4603      	mov	r3, r0
 800afd4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800afd6:	e003      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	75fb      	strb	r3, [r7, #23]
      break;
 800afdc:	e000      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800afde:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afe0:	7dfb      	ldrb	r3, [r7, #23]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10a      	bne.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800afe6:	4bb2      	ldr	r3, [pc, #712]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800afe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afea:	f023 0207 	bic.w	r2, r3, #7
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aff4:	49ae      	ldr	r1, [pc, #696]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800aff6:	4313      	orrs	r3, r2
 800aff8:	658b      	str	r3, [r1, #88]	; 0x58
 800affa:	e001      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800affc:	7dfb      	ldrb	r3, [r7, #23]
 800affe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 0320 	and.w	r3, r3, #32
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d044      	beq.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b016:	d01b      	beq.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800b018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b01c:	d805      	bhi.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d022      	beq.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800b022:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b026:	d00a      	beq.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x952>
 800b028:	e01b      	b.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800b02a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b02e:	d01d      	beq.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x980>
 800b030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b034:	d01c      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800b036:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b03a:	d01b      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800b03c:	e011      	b.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	3304      	adds	r3, #4
 800b042:	2100      	movs	r1, #0
 800b044:	4618      	mov	r0, r3
 800b046:	f001 f8b1 	bl	800c1ac <RCCEx_PLL2_Config>
 800b04a:	4603      	mov	r3, r0
 800b04c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b04e:	e012      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	3324      	adds	r3, #36	; 0x24
 800b054:	2102      	movs	r1, #2
 800b056:	4618      	mov	r0, r3
 800b058:	f001 f95a 	bl	800c310 <RCCEx_PLL3_Config>
 800b05c:	4603      	mov	r3, r0
 800b05e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b060:	e009      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	75fb      	strb	r3, [r7, #23]
      break;
 800b066:	e006      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b068:	bf00      	nop
 800b06a:	e004      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b06c:	bf00      	nop
 800b06e:	e002      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b070:	bf00      	nop
 800b072:	e000      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b074:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b076:	7dfb      	ldrb	r3, [r7, #23]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10a      	bne.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b07c:	4b8c      	ldr	r3, [pc, #560]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b07e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b080:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b08a:	4989      	ldr	r1, [pc, #548]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b08c:	4313      	orrs	r3, r2
 800b08e:	654b      	str	r3, [r1, #84]	; 0x54
 800b090:	e001      	b.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b092:	7dfb      	ldrb	r3, [r7, #23]
 800b094:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d044      	beq.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0ac:	d01b      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800b0ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0b2:	d805      	bhi.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d022      	beq.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b0b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0bc:	d00a      	beq.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800b0be:	e01b      	b.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800b0c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0c4:	d01d      	beq.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800b0c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b0ca:	d01c      	beq.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800b0cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b0d0:	d01b      	beq.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800b0d2:	e011      	b.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	2100      	movs	r1, #0
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f001 f866 	bl	800c1ac <RCCEx_PLL2_Config>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b0e4:	e012      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	3324      	adds	r3, #36	; 0x24
 800b0ea:	2102      	movs	r1, #2
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f001 f90f 	bl	800c310 <RCCEx_PLL3_Config>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b0f6:	e009      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b0fc:	e006      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b0fe:	bf00      	nop
 800b100:	e004      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b102:	bf00      	nop
 800b104:	e002      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b106:	bf00      	nop
 800b108:	e000      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b10a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b10c:	7dfb      	ldrb	r3, [r7, #23]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10a      	bne.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b112:	4b67      	ldr	r3, [pc, #412]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b116:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b120:	4963      	ldr	r1, [pc, #396]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b122:	4313      	orrs	r3, r2
 800b124:	658b      	str	r3, [r1, #88]	; 0x58
 800b126:	e001      	b.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b128:	7dfb      	ldrb	r3, [r7, #23]
 800b12a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b134:	2b00      	cmp	r3, #0
 800b136:	d044      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b13e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b142:	d01b      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800b144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b148:	d805      	bhi.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d022      	beq.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b14e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b152:	d00a      	beq.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b154:	e01b      	b.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800b156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b15a:	d01d      	beq.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b15c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b160:	d01c      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800b162:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b166:	d01b      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800b168:	e011      	b.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	3304      	adds	r3, #4
 800b16e:	2100      	movs	r1, #0
 800b170:	4618      	mov	r0, r3
 800b172:	f001 f81b 	bl	800c1ac <RCCEx_PLL2_Config>
 800b176:	4603      	mov	r3, r0
 800b178:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b17a:	e012      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3324      	adds	r3, #36	; 0x24
 800b180:	2102      	movs	r1, #2
 800b182:	4618      	mov	r0, r3
 800b184:	f001 f8c4 	bl	800c310 <RCCEx_PLL3_Config>
 800b188:	4603      	mov	r3, r0
 800b18a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b18c:	e009      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	75fb      	strb	r3, [r7, #23]
      break;
 800b192:	e006      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b194:	bf00      	nop
 800b196:	e004      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b198:	bf00      	nop
 800b19a:	e002      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b19c:	bf00      	nop
 800b19e:	e000      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b1a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1a2:	7dfb      	ldrb	r3, [r7, #23]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d10a      	bne.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b1a8:	4b41      	ldr	r3, [pc, #260]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b1aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1b6:	493e      	ldr	r1, [pc, #248]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	658b      	str	r3, [r1, #88]	; 0x58
 800b1bc:	e001      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1be:	7dfb      	ldrb	r3, [r7, #23]
 800b1c0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 0308 	and.w	r3, r3, #8
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d01a      	beq.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1d8:	d10a      	bne.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	3324      	adds	r3, #36	; 0x24
 800b1de:	2102      	movs	r1, #2
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f001 f895 	bl	800c310 <RCCEx_PLL3_Config>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b1f0:	4b2f      	ldr	r3, [pc, #188]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b1f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1fe:	492c      	ldr	r1, [pc, #176]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b200:	4313      	orrs	r3, r2
 800b202:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f003 0310 	and.w	r3, r3, #16
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d01a      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b21a:	d10a      	bne.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	3324      	adds	r3, #36	; 0x24
 800b220:	2102      	movs	r1, #2
 800b222:	4618      	mov	r0, r3
 800b224:	f001 f874 	bl	800c310 <RCCEx_PLL3_Config>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b232:	4b1f      	ldr	r3, [pc, #124]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b236:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b240:	491b      	ldr	r1, [pc, #108]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b242:	4313      	orrs	r3, r2
 800b244:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d032      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b25c:	d00d      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800b25e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b262:	d016      	beq.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800b264:	2b00      	cmp	r3, #0
 800b266:	d111      	bne.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3304      	adds	r3, #4
 800b26c:	2100      	movs	r1, #0
 800b26e:	4618      	mov	r0, r3
 800b270:	f000 ff9c 	bl	800c1ac <RCCEx_PLL2_Config>
 800b274:	4603      	mov	r3, r0
 800b276:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b278:	e00c      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	3324      	adds	r3, #36	; 0x24
 800b27e:	2102      	movs	r1, #2
 800b280:	4618      	mov	r0, r3
 800b282:	f001 f845 	bl	800c310 <RCCEx_PLL3_Config>
 800b286:	4603      	mov	r3, r0
 800b288:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b28a:	e003      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b28c:	2301      	movs	r3, #1
 800b28e:	75fb      	strb	r3, [r7, #23]
      break;
 800b290:	e000      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800b292:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b294:	7dfb      	ldrb	r3, [r7, #23]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10c      	bne.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b29a:	4b05      	ldr	r3, [pc, #20]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b29e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b2a8:	4901      	ldr	r1, [pc, #4]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	658b      	str	r3, [r1, #88]	; 0x58
 800b2ae:	e003      	b.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800b2b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b4:	7dfb      	ldrb	r3, [r7, #23]
 800b2b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d02f      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2ce:	d00c      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b2d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2d4:	d015      	beq.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800b2d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2da:	d10f      	bne.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2dc:	4b79      	ldr	r3, [pc, #484]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e0:	4a78      	ldr	r2, [pc, #480]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b2e8:	e00c      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	3324      	adds	r3, #36	; 0x24
 800b2ee:	2101      	movs	r1, #1
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f001 f80d 	bl	800c310 <RCCEx_PLL3_Config>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b2fa:	e003      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	75fb      	strb	r3, [r7, #23]
      break;
 800b300:	e000      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800b302:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b304:	7dfb      	ldrb	r3, [r7, #23]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d10a      	bne.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b30a:	4b6e      	ldr	r3, [pc, #440]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b30e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b318:	496a      	ldr	r1, [pc, #424]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b31a:	4313      	orrs	r3, r2
 800b31c:	654b      	str	r3, [r1, #84]	; 0x54
 800b31e:	e001      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b320:	7dfb      	ldrb	r3, [r7, #23]
 800b322:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d029      	beq.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b334:	2b00      	cmp	r3, #0
 800b336:	d003      	beq.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800b338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b33c:	d007      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800b33e:	e00f      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b340:	4b60      	ldr	r3, [pc, #384]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b344:	4a5f      	ldr	r2, [pc, #380]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b34a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b34c:	e00b      	b.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	3304      	adds	r3, #4
 800b352:	2102      	movs	r1, #2
 800b354:	4618      	mov	r0, r3
 800b356:	f000 ff29 	bl	800c1ac <RCCEx_PLL2_Config>
 800b35a:	4603      	mov	r3, r0
 800b35c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b35e:	e002      	b.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	75fb      	strb	r3, [r7, #23]
      break;
 800b364:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b366:	7dfb      	ldrb	r3, [r7, #23]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d109      	bne.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b36c:	4b55      	ldr	r3, [pc, #340]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b36e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b370:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b378:	4952      	ldr	r1, [pc, #328]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b37a:	4313      	orrs	r3, r2
 800b37c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b37e:	e001      	b.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b380:	7dfb      	ldrb	r3, [r7, #23]
 800b382:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00a      	beq.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3324      	adds	r3, #36	; 0x24
 800b394:	2102      	movs	r1, #2
 800b396:	4618      	mov	r0, r3
 800b398:	f000 ffba 	bl	800c310 <RCCEx_PLL3_Config>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d001      	beq.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d02f      	beq.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3ba:	d00c      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b3bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3c0:	d802      	bhi.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d011      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800b3c6:	e00d      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800b3c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3cc:	d00f      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800b3ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3d2:	d00e      	beq.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800b3d4:	e006      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3d6:	4b3b      	ldr	r3, [pc, #236]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3da:	4a3a      	ldr	r2, [pc, #232]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b3e2:	e007      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	75fb      	strb	r3, [r7, #23]
      break;
 800b3e8:	e004      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b3ea:	bf00      	nop
 800b3ec:	e002      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b3ee:	bf00      	nop
 800b3f0:	e000      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b3f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d109      	bne.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b3fa:	4b32      	ldr	r3, [pc, #200]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b406:	492f      	ldr	r1, [pc, #188]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b408:	4313      	orrs	r3, r2
 800b40a:	654b      	str	r3, [r1, #84]	; 0x54
 800b40c:	e001      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b40e:	7dfb      	ldrb	r3, [r7, #23]
 800b410:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d008      	beq.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b41e:	4b29      	ldr	r3, [pc, #164]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b422:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b42a:	4926      	ldr	r1, [pc, #152]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b42c:	4313      	orrs	r3, r2
 800b42e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d009      	beq.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b43c:	4b21      	ldr	r3, [pc, #132]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b44a:	491e      	ldr	r1, [pc, #120]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b44c:	4313      	orrs	r3, r2
 800b44e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d008      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b45c:	4b19      	ldr	r3, [pc, #100]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b45e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b460:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b468:	4916      	ldr	r1, [pc, #88]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b46a:	4313      	orrs	r3, r2
 800b46c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00d      	beq.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b47a:	4b12      	ldr	r3, [pc, #72]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	4a11      	ldr	r2, [pc, #68]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b480:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b484:	6113      	str	r3, [r2, #16]
 800b486:	4b0f      	ldr	r3, [pc, #60]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b488:	691a      	ldr	r2, [r3, #16]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b490:	490c      	ldr	r1, [pc, #48]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b492:	4313      	orrs	r3, r2
 800b494:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	da08      	bge.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b49e:	4b09      	ldr	r3, [pc, #36]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4aa:	4906      	ldr	r1, [pc, #24]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800b4b0:	7dbb      	ldrb	r3, [r7, #22]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d101      	bne.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	e000      	b.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3718      	adds	r7, #24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	58024400 	.word	0x58024400

0800b4c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b090      	sub	sp, #64	; 0x40
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4d6:	d150      	bne.n	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b4d8:	4ba1      	ldr	r3, [pc, #644]	; (800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b4da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4dc:	f003 0307 	and.w	r3, r3, #7
 800b4e0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e4:	2b04      	cmp	r3, #4
 800b4e6:	d844      	bhi.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800b4e8:	a201      	add	r2, pc, #4	; (adr r2, 800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800b4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ee:	bf00      	nop
 800b4f0:	0800b505 	.word	0x0800b505
 800b4f4:	0800b515 	.word	0x0800b515
 800b4f8:	0800b525 	.word	0x0800b525
 800b4fc:	0800b56d 	.word	0x0800b56d
 800b500:	0800b535 	.word	0x0800b535
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b508:	4618      	mov	r0, r3
 800b50a:	f000 fd03 	bl	800bf14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b510:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b512:	e241      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b514:	f107 0318 	add.w	r3, r7, #24
 800b518:	4618      	mov	r0, r3
 800b51a:	f000 fa63 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b522:	e239      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b524:	f107 030c 	add.w	r3, r7, #12
 800b528:	4618      	mov	r0, r3
 800b52a:	f000 fba7 	bl	800bc7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b532:	e231      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b534:	4b8a      	ldr	r3, [pc, #552]	; (800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b538:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b53c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b540:	2b00      	cmp	r3, #0
 800b542:	d102      	bne.n	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b544:	4b87      	ldr	r3, [pc, #540]	; (800b764 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b546:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b548:	e226      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b54c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b550:	d102      	bne.n	800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800b552:	4b85      	ldr	r3, [pc, #532]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b554:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b556:	e21f      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b55a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b55e:	d102      	bne.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800b560:	4b82      	ldr	r3, [pc, #520]	; (800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b562:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b564:	e218      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b566:	2300      	movs	r3, #0
 800b568:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b56a:	e215      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b56c:	4b80      	ldr	r3, [pc, #512]	; (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b56e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b570:	e212      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b572:	2300      	movs	r3, #0
 800b574:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b576:	bf00      	nop
 800b578:	e20e      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b580:	d14f      	bne.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b582:	4b77      	ldr	r3, [pc, #476]	; (800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b586:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b58a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58e:	2b80      	cmp	r3, #128	; 0x80
 800b590:	d01c      	beq.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b592:	2b80      	cmp	r3, #128	; 0x80
 800b594:	d804      	bhi.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800b596:	2b00      	cmp	r3, #0
 800b598:	d008      	beq.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800b59a:	2b40      	cmp	r3, #64	; 0x40
 800b59c:	d00e      	beq.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800b59e:	e03c      	b.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800b5a0:	2bc0      	cmp	r3, #192	; 0xc0
 800b5a2:	d037      	beq.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800b5a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5a8:	d018      	beq.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800b5aa:	e036      	b.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f000 fcaf 	bl	800bf14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5ba:	e1ed      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5bc:	f107 0318 	add.w	r3, r7, #24
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f000 fa0f 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5ca:	e1e5      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5cc:	f107 030c 	add.w	r3, r7, #12
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f000 fb53 	bl	800bc7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5da:	e1dd      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b5dc:	4b60      	ldr	r3, [pc, #384]	; (800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b5de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5e4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d102      	bne.n	800b5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b5ec:	4b5d      	ldr	r3, [pc, #372]	; (800b764 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b5f0:	e1d2      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5f8:	d102      	bne.n	800b600 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800b5fa:	4b5b      	ldr	r3, [pc, #364]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5fe:	e1cb      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b606:	d102      	bne.n	800b60e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800b608:	4b58      	ldr	r3, [pc, #352]	; (800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b60a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b60c:	e1c4      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b60e:	2300      	movs	r3, #0
 800b610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b612:	e1c1      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b614:	4b56      	ldr	r3, [pc, #344]	; (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b616:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b618:	e1be      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b61a:	2300      	movs	r3, #0
 800b61c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b61e:	bf00      	nop
 800b620:	e1ba      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b628:	d153      	bne.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b62a:	4b4d      	ldr	r3, [pc, #308]	; (800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b62c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b62e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b632:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b63a:	d01f      	beq.n	800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800b63c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b640:	d805      	bhi.n	800b64e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00a      	beq.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800b646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b64a:	d00f      	beq.n	800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800b64c:	e03d      	b.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800b64e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b652:	d037      	beq.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800b654:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b658:	d018      	beq.n	800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800b65a:	e036      	b.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b65c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b660:	4618      	mov	r0, r3
 800b662:	f000 fc57 	bl	800bf14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b668:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b66a:	e195      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b66c:	f107 0318 	add.w	r3, r7, #24
 800b670:	4618      	mov	r0, r3
 800b672:	f000 f9b7 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b67a:	e18d      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b67c:	f107 030c 	add.w	r3, r7, #12
 800b680:	4618      	mov	r0, r3
 800b682:	f000 fafb 	bl	800bc7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b68a:	e185      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b68c:	4b34      	ldr	r3, [pc, #208]	; (800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b68e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b690:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b694:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d102      	bne.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b69c:	4b31      	ldr	r3, [pc, #196]	; (800b764 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b69e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b6a0:	e17a      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6a8:	d102      	bne.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800b6aa:	4b2f      	ldr	r3, [pc, #188]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6ae:	e173      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6b6:	d102      	bne.n	800b6be <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800b6b8:	4b2c      	ldr	r3, [pc, #176]	; (800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6bc:	e16c      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6c2:	e169      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b6c4:	4b2a      	ldr	r3, [pc, #168]	; (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6c8:	e166      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6ce:	bf00      	nop
 800b6d0:	e162      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6d8:	d15d      	bne.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b6da:	4b21      	ldr	r3, [pc, #132]	; (800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b6dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6de:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b6e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6ea:	d01f      	beq.n	800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b6ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6f0:	d805      	bhi.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00a      	beq.n	800b70c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b6f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b6fa:	d00f      	beq.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800b6fc:	e047      	b.n	800b78e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800b6fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b702:	d041      	beq.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800b704:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b708:	d018      	beq.n	800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800b70a:	e040      	b.n	800b78e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b70c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b710:	4618      	mov	r0, r3
 800b712:	f000 fbff 	bl	800bf14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b71a:	e13d      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b71c:	f107 0318 	add.w	r3, r7, #24
 800b720:	4618      	mov	r0, r3
 800b722:	f000 f95f 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b72a:	e135      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b72c:	f107 030c 	add.w	r3, r7, #12
 800b730:	4618      	mov	r0, r3
 800b732:	f000 faa3 	bl	800bc7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b73a:	e12d      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b73c:	4b08      	ldr	r3, [pc, #32]	; (800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b73e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b740:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b744:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d102      	bne.n	800b752 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b74c:	4b05      	ldr	r3, [pc, #20]	; (800b764 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b74e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b750:	e122      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b758:	d10c      	bne.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800b75a:	4b03      	ldr	r3, [pc, #12]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b75c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b75e:	e11b      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b760:	58024400 	.word	0x58024400
 800b764:	03d09000 	.word	0x03d09000
 800b768:	003d0900 	.word	0x003d0900
 800b76c:	017d7840 	.word	0x017d7840
 800b770:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b77a:	d102      	bne.n	800b782 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800b77c:	4b89      	ldr	r3, [pc, #548]	; (800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b77e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b780:	e10a      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b782:	2300      	movs	r3, #0
 800b784:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b786:	e107      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b788:	4b87      	ldr	r3, [pc, #540]	; (800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b78a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b78c:	e104      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b792:	bf00      	nop
 800b794:	e100      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b79c:	d153      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b79e:	4b83      	ldr	r3, [pc, #524]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b7a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b7a6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7ae:	d01f      	beq.n	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b7b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7b4:	d805      	bhi.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00a      	beq.n	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800b7ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7be:	d00f      	beq.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800b7c0:	e03d      	b.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800b7c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7c6:	d037      	beq.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800b7c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7cc:	d018      	beq.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b7ce:	e036      	b.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f000 fb9d 	bl	800bf14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7de:	e0db      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7e0:	f107 0318 	add.w	r3, r7, #24
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f000 f8fd 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7ee:	e0d3      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7f0:	f107 030c 	add.w	r3, r7, #12
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f000 fa41 	bl	800bc7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7fe:	e0cb      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b800:	4b6a      	ldr	r3, [pc, #424]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b804:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b808:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d102      	bne.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b810:	4b67      	ldr	r3, [pc, #412]	; (800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b812:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b814:	e0c0      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b81c:	d102      	bne.n	800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800b81e:	4b65      	ldr	r3, [pc, #404]	; (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b820:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b822:	e0b9      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b82a:	d102      	bne.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800b82c:	4b5d      	ldr	r3, [pc, #372]	; (800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b82e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b830:	e0b2      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b832:	2300      	movs	r3, #0
 800b834:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b836:	e0af      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b838:	4b5b      	ldr	r3, [pc, #364]	; (800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b83a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b83c:	e0ac      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b83e:	2300      	movs	r3, #0
 800b840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b842:	bf00      	nop
 800b844:	e0a8      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b84c:	d13d      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b84e:	4b57      	ldr	r3, [pc, #348]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b852:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b856:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b85e:	d00c      	beq.n	800b87a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b860:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b864:	d011      	beq.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b866:	2b00      	cmp	r3, #0
 800b868:	d12b      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b86a:	f107 0318 	add.w	r3, r7, #24
 800b86e:	4618      	mov	r0, r3
 800b870:	f000 f8b8 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b878:	e08e      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b87a:	f107 030c 	add.w	r3, r7, #12
 800b87e:	4618      	mov	r0, r3
 800b880:	f000 f9fc 	bl	800bc7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b888:	e086      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b88a:	4b48      	ldr	r3, [pc, #288]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b88c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b88e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b892:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b896:	2b00      	cmp	r3, #0
 800b898:	d102      	bne.n	800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b89a:	4b45      	ldr	r3, [pc, #276]	; (800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b89c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b89e:	e07b      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8a6:	d102      	bne.n	800b8ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800b8a8:	4b42      	ldr	r3, [pc, #264]	; (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8ac:	e074      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8b4:	d102      	bne.n	800b8bc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800b8b6:	4b3b      	ldr	r3, [pc, #236]	; (800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8ba:	e06d      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8c0:	e06a      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8c6:	bf00      	nop
 800b8c8:	e066      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8d0:	d11f      	bne.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b8d2:	4b36      	ldr	r3, [pc, #216]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b8d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8da:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d003      	beq.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b8e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8e6:	d008      	beq.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800b8e8:	e00f      	b.n	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f000 fb10 	bl	800bf14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8f8:	e04e      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8fa:	f107 0318 	add.w	r3, r7, #24
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 f870 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b904:	6a3b      	ldr	r3, [r7, #32]
 800b906:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b908:	e046      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b90a:	2300      	movs	r3, #0
 800b90c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b90e:	bf00      	nop
 800b910:	e042      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b918:	d13c      	bne.n	800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b91a:	4b24      	ldr	r3, [pc, #144]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b91c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b91e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b922:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b92a:	d01e      	beq.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800b92c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b930:	d805      	bhi.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00d      	beq.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b93a:	d00e      	beq.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800b93c:	e026      	b.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800b93e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b942:	d01d      	beq.n	800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800b944:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b948:	d01d      	beq.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b94a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b94e:	d014      	beq.n	800b97a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b950:	e01c      	b.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b952:	f000 f831 	bl	800b9b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b956:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b958:	e01e      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b95a:	f107 0318 	add.w	r3, r7, #24
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 f840 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b964:	69fb      	ldr	r3, [r7, #28]
 800b966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b968:	e016      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b96a:	f107 030c 	add.w	r3, r7, #12
 800b96e:	4618      	mov	r0, r3
 800b970:	f000 f984 	bl	800bc7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b978:	e00e      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800b97a:	4b0d      	ldr	r3, [pc, #52]	; (800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b97c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b97e:	e00b      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800b980:	4b0c      	ldr	r3, [pc, #48]	; (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b982:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b984:	e008      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800b986:	4b07      	ldr	r3, [pc, #28]	; (800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b988:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b98a:	e005      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b98c:	2300      	movs	r3, #0
 800b98e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b990:	bf00      	nop
 800b992:	e001      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800b994:	2300      	movs	r3, #0
 800b996:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3740      	adds	r7, #64	; 0x40
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	017d7840 	.word	0x017d7840
 800b9a8:	00bb8000 	.word	0x00bb8000
 800b9ac:	58024400 	.word	0x58024400
 800b9b0:	03d09000 	.word	0x03d09000
 800b9b4:	003d0900 	.word	0x003d0900

0800b9b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b9bc:	f7fe fe1e 	bl	800a5fc <HAL_RCC_GetHCLKFreq>
 800b9c0:	4601      	mov	r1, r0
 800b9c2:	4b06      	ldr	r3, [pc, #24]	; (800b9dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	091b      	lsrs	r3, r3, #4
 800b9c8:	f003 0307 	and.w	r3, r3, #7
 800b9cc:	4a04      	ldr	r2, [pc, #16]	; (800b9e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b9ce:	5cd3      	ldrb	r3, [r2, r3]
 800b9d0:	f003 031f 	and.w	r3, r3, #31
 800b9d4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	58024400 	.word	0x58024400
 800b9e0:	0801af48 	.word	0x0801af48

0800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b089      	sub	sp, #36	; 0x24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9ec:	4b9d      	ldr	r3, [pc, #628]	; (800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f0:	f003 0303 	and.w	r3, r3, #3
 800b9f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b9f6:	4b9b      	ldr	r3, [pc, #620]	; (800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fa:	0b1b      	lsrs	r3, r3, #12
 800b9fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ba02:	4b98      	ldr	r3, [pc, #608]	; (800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba06:	091b      	lsrs	r3, r3, #4
 800ba08:	f003 0301 	and.w	r3, r3, #1
 800ba0c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ba0e:	4b95      	ldr	r3, [pc, #596]	; (800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba12:	08db      	lsrs	r3, r3, #3
 800ba14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba18:	693a      	ldr	r2, [r7, #16]
 800ba1a:	fb02 f303 	mul.w	r3, r2, r3
 800ba1e:	ee07 3a90 	vmov	s15, r3
 800ba22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f000 810a 	beq.w	800bc46 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d05a      	beq.n	800baee <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d302      	bcc.n	800ba42 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800ba3c:	2b02      	cmp	r3, #2
 800ba3e:	d078      	beq.n	800bb32 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800ba40:	e099      	b.n	800bb76 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba42:	4b88      	ldr	r3, [pc, #544]	; (800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 0320 	and.w	r3, r3, #32
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d02d      	beq.n	800baaa <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba4e:	4b85      	ldr	r3, [pc, #532]	; (800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	08db      	lsrs	r3, r3, #3
 800ba54:	f003 0303 	and.w	r3, r3, #3
 800ba58:	4a83      	ldr	r2, [pc, #524]	; (800bc68 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800ba5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba5e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	ee07 3a90 	vmov	s15, r3
 800ba66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	ee07 3a90 	vmov	s15, r3
 800ba70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba78:	4b7a      	ldr	r3, [pc, #488]	; (800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba80:	ee07 3a90 	vmov	s15, r3
 800ba84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba88:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba8c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ba90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baa4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800baa8:	e087      	b.n	800bbba <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	ee07 3a90 	vmov	s15, r3
 800bab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bab4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bc70 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800bab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800babc:	4b69      	ldr	r3, [pc, #420]	; (800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800babe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bac4:	ee07 3a90 	vmov	s15, r3
 800bac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bacc:	ed97 6a03 	vldr	s12, [r7, #12]
 800bad0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bad4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bad8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800badc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bae8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800baec:	e065      	b.n	800bbba <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	ee07 3a90 	vmov	s15, r3
 800baf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800bafc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb00:	4b58      	ldr	r3, [pc, #352]	; (800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb08:	ee07 3a90 	vmov	s15, r3
 800bb0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb10:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb14:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bb18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb30:	e043      	b.n	800bbba <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	ee07 3a90 	vmov	s15, r3
 800bb38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb3c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800bb40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb44:	4b47      	ldr	r3, [pc, #284]	; (800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb4c:	ee07 3a90 	vmov	s15, r3
 800bb50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb54:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb58:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bb5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb74:	e021      	b.n	800bbba <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	ee07 3a90 	vmov	s15, r3
 800bb7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb80:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800bb84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb88:	4b36      	ldr	r3, [pc, #216]	; (800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb90:	ee07 3a90 	vmov	s15, r3
 800bb94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb98:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb9c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bba0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bba8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bbb8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bbba:	4b2a      	ldr	r3, [pc, #168]	; (800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bbbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbbe:	0a5b      	lsrs	r3, r3, #9
 800bbc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbc4:	ee07 3a90 	vmov	s15, r3
 800bbc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbe0:	ee17 2a90 	vmov	r2, s15
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bbe8:	4b1e      	ldr	r3, [pc, #120]	; (800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbec:	0c1b      	lsrs	r3, r3, #16
 800bbee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbf2:	ee07 3a90 	vmov	s15, r3
 800bbf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc02:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc0e:	ee17 2a90 	vmov	r2, s15
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bc16:	4b13      	ldr	r3, [pc, #76]	; (800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bc18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc1a:	0e1b      	lsrs	r3, r3, #24
 800bc1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc20:	ee07 3a90 	vmov	s15, r3
 800bc24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc30:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc3c:	ee17 2a90 	vmov	r2, s15
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bc44:	e008      	b.n	800bc58 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2200      	movs	r2, #0
 800bc56:	609a      	str	r2, [r3, #8]
}
 800bc58:	bf00      	nop
 800bc5a:	3724      	adds	r7, #36	; 0x24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr
 800bc64:	58024400 	.word	0x58024400
 800bc68:	03d09000 	.word	0x03d09000
 800bc6c:	46000000 	.word	0x46000000
 800bc70:	4c742400 	.word	0x4c742400
 800bc74:	4a742400 	.word	0x4a742400
 800bc78:	4bbebc20 	.word	0x4bbebc20

0800bc7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b089      	sub	sp, #36	; 0x24
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc84:	4b9d      	ldr	r3, [pc, #628]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc88:	f003 0303 	and.w	r3, r3, #3
 800bc8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bc8e:	4b9b      	ldr	r3, [pc, #620]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc92:	0d1b      	lsrs	r3, r3, #20
 800bc94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bc9a:	4b98      	ldr	r3, [pc, #608]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9e:	0a1b      	lsrs	r3, r3, #8
 800bca0:	f003 0301 	and.w	r3, r3, #1
 800bca4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bca6:	4b95      	ldr	r3, [pc, #596]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcaa:	08db      	lsrs	r3, r3, #3
 800bcac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	fb02 f303 	mul.w	r3, r2, r3
 800bcb6:	ee07 3a90 	vmov	s15, r3
 800bcba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f000 810a 	beq.w	800bede <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d05a      	beq.n	800bd86 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d302      	bcc.n	800bcda <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	d078      	beq.n	800bdca <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800bcd8:	e099      	b.n	800be0e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcda:	4b88      	ldr	r3, [pc, #544]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f003 0320 	and.w	r3, r3, #32
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d02d      	beq.n	800bd42 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bce6:	4b85      	ldr	r3, [pc, #532]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	08db      	lsrs	r3, r3, #3
 800bcec:	f003 0303 	and.w	r3, r3, #3
 800bcf0:	4a83      	ldr	r2, [pc, #524]	; (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800bcf2:	fa22 f303 	lsr.w	r3, r2, r3
 800bcf6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	ee07 3a90 	vmov	s15, r3
 800bcfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	ee07 3a90 	vmov	s15, r3
 800bd08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd10:	4b7a      	ldr	r3, [pc, #488]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd18:	ee07 3a90 	vmov	s15, r3
 800bd1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd20:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd24:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bd28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd3c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bd40:	e087      	b.n	800be52 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	ee07 3a90 	vmov	s15, r3
 800bd48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd4c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800bd50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd54:	4b69      	ldr	r3, [pc, #420]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd5c:	ee07 3a90 	vmov	s15, r3
 800bd60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd64:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd68:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bd6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd84:	e065      	b.n	800be52 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	ee07 3a90 	vmov	s15, r3
 800bd8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd90:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800bd94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd98:	4b58      	ldr	r3, [pc, #352]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda0:	ee07 3a90 	vmov	s15, r3
 800bda4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bda8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdac:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bdb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdc8:	e043      	b.n	800be52 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	ee07 3a90 	vmov	s15, r3
 800bdd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdd4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bf10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800bdd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bddc:	4b47      	ldr	r3, [pc, #284]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bdde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bde4:	ee07 3a90 	vmov	s15, r3
 800bde8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdec:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdf0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bdf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be0c:	e021      	b.n	800be52 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	ee07 3a90 	vmov	s15, r3
 800be14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be18:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800be1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be20:	4b36      	ldr	r3, [pc, #216]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be28:	ee07 3a90 	vmov	s15, r3
 800be2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be30:	ed97 6a03 	vldr	s12, [r7, #12]
 800be34:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800be38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be50:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800be52:	4b2a      	ldr	r3, [pc, #168]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be56:	0a5b      	lsrs	r3, r3, #9
 800be58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be5c:	ee07 3a90 	vmov	s15, r3
 800be60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800be70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be78:	ee17 2a90 	vmov	r2, s15
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800be80:	4b1e      	ldr	r3, [pc, #120]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be84:	0c1b      	lsrs	r3, r3, #16
 800be86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be8a:	ee07 3a90 	vmov	s15, r3
 800be8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800be9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bea6:	ee17 2a90 	vmov	r2, s15
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800beae:	4b13      	ldr	r3, [pc, #76]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800beb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb2:	0e1b      	lsrs	r3, r3, #24
 800beb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beb8:	ee07 3a90 	vmov	s15, r3
 800bebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bec4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bec8:	edd7 6a07 	vldr	s13, [r7, #28]
 800becc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bed4:	ee17 2a90 	vmov	r2, s15
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bedc:	e008      	b.n	800bef0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	609a      	str	r2, [r3, #8]
}
 800bef0:	bf00      	nop
 800bef2:	3724      	adds	r7, #36	; 0x24
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr
 800befc:	58024400 	.word	0x58024400
 800bf00:	03d09000 	.word	0x03d09000
 800bf04:	46000000 	.word	0x46000000
 800bf08:	4c742400 	.word	0x4c742400
 800bf0c:	4a742400 	.word	0x4a742400
 800bf10:	4bbebc20 	.word	0x4bbebc20

0800bf14 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b089      	sub	sp, #36	; 0x24
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf1c:	4b9d      	ldr	r3, [pc, #628]	; (800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf20:	f003 0303 	and.w	r3, r3, #3
 800bf24:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bf26:	4b9b      	ldr	r3, [pc, #620]	; (800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf2a:	091b      	lsrs	r3, r3, #4
 800bf2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf30:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bf32:	4b98      	ldr	r3, [pc, #608]	; (800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bf3c:	4b95      	ldr	r3, [pc, #596]	; (800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf40:	08db      	lsrs	r3, r3, #3
 800bf42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf46:	693a      	ldr	r2, [r7, #16]
 800bf48:	fb02 f303 	mul.w	r3, r2, r3
 800bf4c:	ee07 3a90 	vmov	s15, r3
 800bf50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf54:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f000 810a 	beq.w	800c174 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d05a      	beq.n	800c01c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d302      	bcc.n	800bf70 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	d078      	beq.n	800c060 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800bf6e:	e099      	b.n	800c0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf70:	4b88      	ldr	r3, [pc, #544]	; (800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 0320 	and.w	r3, r3, #32
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d02d      	beq.n	800bfd8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf7c:	4b85      	ldr	r3, [pc, #532]	; (800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	08db      	lsrs	r3, r3, #3
 800bf82:	f003 0303 	and.w	r3, r3, #3
 800bf86:	4a84      	ldr	r2, [pc, #528]	; (800c198 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800bf88:	fa22 f303 	lsr.w	r3, r2, r3
 800bf8c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	ee07 3a90 	vmov	s15, r3
 800bf94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	ee07 3a90 	vmov	s15, r3
 800bf9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfa6:	4b7b      	ldr	r3, [pc, #492]	; (800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfae:	ee07 3a90 	vmov	s15, r3
 800bfb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800bfbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfd2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bfd6:	e087      	b.n	800c0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	ee07 3a90 	vmov	s15, r3
 800bfde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800bfe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfea:	4b6a      	ldr	r3, [pc, #424]	; (800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bfec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff2:	ee07 3a90 	vmov	s15, r3
 800bff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bffa:	ed97 6a03 	vldr	s12, [r7, #12]
 800bffe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c00a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c012:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c016:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c01a:	e065      	b.n	800c0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	ee07 3a90 	vmov	s15, r3
 800c022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c026:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c02e:	4b59      	ldr	r3, [pc, #356]	; (800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c036:	ee07 3a90 	vmov	s15, r3
 800c03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c03e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c042:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c04e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c05a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c05e:	e043      	b.n	800c0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	ee07 3a90 	vmov	s15, r3
 800c066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c06a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c06e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c072:	4b48      	ldr	r3, [pc, #288]	; (800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c07a:	ee07 3a90 	vmov	s15, r3
 800c07e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c082:	ed97 6a03 	vldr	s12, [r7, #12]
 800c086:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c08a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c08e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c09a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c09e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0a2:	e021      	b.n	800c0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	ee07 3a90 	vmov	s15, r3
 800c0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c0b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0b6:	4b37      	ldr	r3, [pc, #220]	; (800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0be:	ee07 3a90 	vmov	s15, r3
 800c0c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c0ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0e6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c0e8:	4b2a      	ldr	r3, [pc, #168]	; (800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ec:	0a5b      	lsrs	r3, r3, #9
 800c0ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0f2:	ee07 3a90 	vmov	s15, r3
 800c0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c102:	edd7 6a07 	vldr	s13, [r7, #28]
 800c106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c10a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c10e:	ee17 2a90 	vmov	r2, s15
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c116:	4b1f      	ldr	r3, [pc, #124]	; (800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c11a:	0c1b      	lsrs	r3, r3, #16
 800c11c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c120:	ee07 3a90 	vmov	s15, r3
 800c124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c128:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c12c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c130:	edd7 6a07 	vldr	s13, [r7, #28]
 800c134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c13c:	ee17 2a90 	vmov	r2, s15
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c144:	4b13      	ldr	r3, [pc, #76]	; (800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c148:	0e1b      	lsrs	r3, r3, #24
 800c14a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c14e:	ee07 3a90 	vmov	s15, r3
 800c152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c15a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c15e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c16a:	ee17 2a90 	vmov	r2, s15
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c172:	e008      	b.n	800c186 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	609a      	str	r2, [r3, #8]
}
 800c186:	bf00      	nop
 800c188:	3724      	adds	r7, #36	; 0x24
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop
 800c194:	58024400 	.word	0x58024400
 800c198:	03d09000 	.word	0x03d09000
 800c19c:	46000000 	.word	0x46000000
 800c1a0:	4c742400 	.word	0x4c742400
 800c1a4:	4a742400 	.word	0x4a742400
 800c1a8:	4bbebc20 	.word	0x4bbebc20

0800c1ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c1ba:	4b53      	ldr	r3, [pc, #332]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1be:	f003 0303 	and.w	r3, r3, #3
 800c1c2:	2b03      	cmp	r3, #3
 800c1c4:	d101      	bne.n	800c1ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e099      	b.n	800c2fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c1ca:	4b4f      	ldr	r3, [pc, #316]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a4e      	ldr	r2, [pc, #312]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c1d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c1d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1d6:	f7f8 fa01 	bl	80045dc <HAL_GetTick>
 800c1da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1dc:	e008      	b.n	800c1f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c1de:	f7f8 f9fd 	bl	80045dc <HAL_GetTick>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	d901      	bls.n	800c1f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	e086      	b.n	800c2fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1f0:	4b45      	ldr	r3, [pc, #276]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1f0      	bne.n	800c1de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c1fc:	4b42      	ldr	r3, [pc, #264]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c200:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	031b      	lsls	r3, r3, #12
 800c20a:	493f      	ldr	r1, [pc, #252]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c20c:	4313      	orrs	r3, r2
 800c20e:	628b      	str	r3, [r1, #40]	; 0x28
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	3b01      	subs	r3, #1
 800c216:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	3b01      	subs	r3, #1
 800c220:	025b      	lsls	r3, r3, #9
 800c222:	b29b      	uxth	r3, r3
 800c224:	431a      	orrs	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	3b01      	subs	r3, #1
 800c22c:	041b      	lsls	r3, r3, #16
 800c22e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c232:	431a      	orrs	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	3b01      	subs	r3, #1
 800c23a:	061b      	lsls	r3, r3, #24
 800c23c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c240:	4931      	ldr	r1, [pc, #196]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c242:	4313      	orrs	r3, r2
 800c244:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c246:	4b30      	ldr	r3, [pc, #192]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c24a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	695b      	ldr	r3, [r3, #20]
 800c252:	492d      	ldr	r1, [pc, #180]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c254:	4313      	orrs	r3, r2
 800c256:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c258:	4b2b      	ldr	r3, [pc, #172]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c25c:	f023 0220 	bic.w	r2, r3, #32
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	699b      	ldr	r3, [r3, #24]
 800c264:	4928      	ldr	r1, [pc, #160]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c266:	4313      	orrs	r3, r2
 800c268:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c26a:	4b27      	ldr	r3, [pc, #156]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26e:	4a26      	ldr	r2, [pc, #152]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c270:	f023 0310 	bic.w	r3, r3, #16
 800c274:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c276:	4b24      	ldr	r3, [pc, #144]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c278:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c27a:	4b24      	ldr	r3, [pc, #144]	; (800c30c <RCCEx_PLL2_Config+0x160>)
 800c27c:	4013      	ands	r3, r2
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	69d2      	ldr	r2, [r2, #28]
 800c282:	00d2      	lsls	r2, r2, #3
 800c284:	4920      	ldr	r1, [pc, #128]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c286:	4313      	orrs	r3, r2
 800c288:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c28a:	4b1f      	ldr	r3, [pc, #124]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28e:	4a1e      	ldr	r2, [pc, #120]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c290:	f043 0310 	orr.w	r3, r3, #16
 800c294:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d106      	bne.n	800c2aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c29c:	4b1a      	ldr	r3, [pc, #104]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a0:	4a19      	ldr	r2, [pc, #100]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c2a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2a8:	e00f      	b.n	800c2ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d106      	bne.n	800c2be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c2b0:	4b15      	ldr	r3, [pc, #84]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b4:	4a14      	ldr	r2, [pc, #80]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c2b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2bc:	e005      	b.n	800c2ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c2be:	4b12      	ldr	r3, [pc, #72]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c2:	4a11      	ldr	r2, [pc, #68]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c2c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c2c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c2ca:	4b0f      	ldr	r3, [pc, #60]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a0e      	ldr	r2, [pc, #56]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c2d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c2d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2d6:	f7f8 f981 	bl	80045dc <HAL_GetTick>
 800c2da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2dc:	e008      	b.n	800c2f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c2de:	f7f8 f97d 	bl	80045dc <HAL_GetTick>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	2b02      	cmp	r3, #2
 800c2ea:	d901      	bls.n	800c2f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	e006      	b.n	800c2fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2f0:	4b05      	ldr	r3, [pc, #20]	; (800c308 <RCCEx_PLL2_Config+0x15c>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d0f0      	beq.n	800c2de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	58024400 	.word	0x58024400
 800c30c:	ffff0007 	.word	0xffff0007

0800c310 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c31a:	2300      	movs	r3, #0
 800c31c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c31e:	4b53      	ldr	r3, [pc, #332]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c322:	f003 0303 	and.w	r3, r3, #3
 800c326:	2b03      	cmp	r3, #3
 800c328:	d101      	bne.n	800c32e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c32a:	2301      	movs	r3, #1
 800c32c:	e099      	b.n	800c462 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c32e:	4b4f      	ldr	r3, [pc, #316]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a4e      	ldr	r2, [pc, #312]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c33a:	f7f8 f94f 	bl	80045dc <HAL_GetTick>
 800c33e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c340:	e008      	b.n	800c354 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c342:	f7f8 f94b 	bl	80045dc <HAL_GetTick>
 800c346:	4602      	mov	r2, r0
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	1ad3      	subs	r3, r2, r3
 800c34c:	2b02      	cmp	r3, #2
 800c34e:	d901      	bls.n	800c354 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c350:	2303      	movs	r3, #3
 800c352:	e086      	b.n	800c462 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c354:	4b45      	ldr	r3, [pc, #276]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1f0      	bne.n	800c342 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c360:	4b42      	ldr	r3, [pc, #264]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c364:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	051b      	lsls	r3, r3, #20
 800c36e:	493f      	ldr	r1, [pc, #252]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c370:	4313      	orrs	r3, r2
 800c372:	628b      	str	r3, [r1, #40]	; 0x28
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	3b01      	subs	r3, #1
 800c37a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	3b01      	subs	r3, #1
 800c384:	025b      	lsls	r3, r3, #9
 800c386:	b29b      	uxth	r3, r3
 800c388:	431a      	orrs	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	3b01      	subs	r3, #1
 800c390:	041b      	lsls	r3, r3, #16
 800c392:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c396:	431a      	orrs	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	3b01      	subs	r3, #1
 800c39e:	061b      	lsls	r3, r3, #24
 800c3a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c3a4:	4931      	ldr	r1, [pc, #196]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c3aa:	4b30      	ldr	r3, [pc, #192]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	695b      	ldr	r3, [r3, #20]
 800c3b6:	492d      	ldr	r1, [pc, #180]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c3bc:	4b2b      	ldr	r3, [pc, #172]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	699b      	ldr	r3, [r3, #24]
 800c3c8:	4928      	ldr	r1, [pc, #160]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c3ce:	4b27      	ldr	r3, [pc, #156]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d2:	4a26      	ldr	r2, [pc, #152]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c3d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c3da:	4b24      	ldr	r3, [pc, #144]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c3dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3de:	4b24      	ldr	r3, [pc, #144]	; (800c470 <RCCEx_PLL3_Config+0x160>)
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	69d2      	ldr	r2, [r2, #28]
 800c3e6:	00d2      	lsls	r2, r2, #3
 800c3e8:	4920      	ldr	r1, [pc, #128]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c3ee:	4b1f      	ldr	r3, [pc, #124]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f2:	4a1e      	ldr	r2, [pc, #120]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c3f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d106      	bne.n	800c40e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c400:	4b1a      	ldr	r3, [pc, #104]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	4a19      	ldr	r2, [pc, #100]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c406:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c40a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c40c:	e00f      	b.n	800c42e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d106      	bne.n	800c422 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c414:	4b15      	ldr	r3, [pc, #84]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c418:	4a14      	ldr	r2, [pc, #80]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c41a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c41e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c420:	e005      	b.n	800c42e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c422:	4b12      	ldr	r3, [pc, #72]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c426:	4a11      	ldr	r2, [pc, #68]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c42c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c42e:	4b0f      	ldr	r3, [pc, #60]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a0e      	ldr	r2, [pc, #56]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c43a:	f7f8 f8cf 	bl	80045dc <HAL_GetTick>
 800c43e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c440:	e008      	b.n	800c454 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c442:	f7f8 f8cb 	bl	80045dc <HAL_GetTick>
 800c446:	4602      	mov	r2, r0
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	1ad3      	subs	r3, r2, r3
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d901      	bls.n	800c454 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c450:	2303      	movs	r3, #3
 800c452:	e006      	b.n	800c462 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c454:	4b05      	ldr	r3, [pc, #20]	; (800c46c <RCCEx_PLL3_Config+0x15c>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d0f0      	beq.n	800c442 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c460:	7bfb      	ldrb	r3, [r7, #15]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	58024400 	.word	0x58024400
 800c470:	ffff0007 	.word	0xffff0007

0800c474 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c47c:	2301      	movs	r3, #1
 800c47e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d067      	beq.n	800c556 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d106      	bne.n	800c4a0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f7f7 fce2 	bl	8003e64 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2202      	movs	r2, #2
 800c4a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	22ca      	movs	r2, #202	; 0xca
 800c4ae:	625a      	str	r2, [r3, #36]	; 0x24
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2253      	movs	r2, #83	; 0x53
 800c4b6:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 fa49 	bl	800c950 <RTC_EnterInitMode>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800c4c2:	7bfb      	ldrb	r3, [r7, #15]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d13b      	bne.n	800c540 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	6899      	ldr	r1, [r3, #8]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	4b23      	ldr	r3, [pc, #140]	; (800c560 <HAL_RTC_Init+0xec>)
 800c4d4:	400b      	ands	r3, r1
 800c4d6:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6899      	ldr	r1, [r3, #8]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	685a      	ldr	r2, [r3, #4]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	431a      	orrs	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	431a      	orrs	r2, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	430a      	orrs	r2, r1
 800c4f4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	0419      	lsls	r1, r3, #16
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	68da      	ldr	r2, [r3, #12]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	430a      	orrs	r2, r1
 800c506:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 fa51 	bl	800c9b0 <RTC_ExitInitMode>
 800c50e:	4603      	mov	r3, r0
 800c510:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800c512:	7bfb      	ldrb	r3, [r7, #15]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d113      	bne.n	800c540 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f022 0203 	bic.w	r2, r2, #3
 800c526:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	69da      	ldr	r2, [r3, #28]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	695b      	ldr	r3, [r3, #20]
 800c536:	431a      	orrs	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	430a      	orrs	r2, r1
 800c53e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	22ff      	movs	r2, #255	; 0xff
 800c546:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800c548:	7bfb      	ldrb	r3, [r7, #15]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d103      	bne.n	800c556 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2201      	movs	r2, #1
 800c552:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c556:	7bfb      	ldrb	r3, [r7, #15]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3710      	adds	r7, #16
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	ff8fffbf 	.word	0xff8fffbf

0800c564 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c564:	b590      	push	{r4, r7, lr}
 800c566:	b087      	sub	sp, #28
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c576:	2b01      	cmp	r3, #1
 800c578:	d101      	bne.n	800c57e <HAL_RTC_SetTime+0x1a>
 800c57a:	2302      	movs	r3, #2
 800c57c:	e089      	b.n	800c692 <HAL_RTC_SetTime+0x12e>
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2201      	movs	r2, #1
 800c582:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2202      	movs	r2, #2
 800c58a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	22ca      	movs	r2, #202	; 0xca
 800c594:	625a      	str	r2, [r3, #36]	; 0x24
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2253      	movs	r2, #83	; 0x53
 800c59c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f000 f9d6 	bl	800c950 <RTC_EnterInitMode>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c5a8:	7cfb      	ldrb	r3, [r7, #19]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d161      	bne.n	800c672 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d126      	bne.n	800c602 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d102      	bne.n	800c5c8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f000 fa2d 	bl	800ca2c <RTC_ByteToBcd2>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	785b      	ldrb	r3, [r3, #1]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 fa26 	bl	800ca2c <RTC_ByteToBcd2>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5e4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	789b      	ldrb	r3, [r3, #2]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 fa1e 	bl	800ca2c <RTC_ByteToBcd2>
 800c5f0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c5f2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	78db      	ldrb	r3, [r3, #3]
 800c5fa:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	617b      	str	r3, [r7, #20]
 800c600:	e018      	b.n	800c634 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d102      	bne.n	800c616 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	2200      	movs	r2, #0
 800c614:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	785b      	ldrb	r3, [r3, #1]
 800c620:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c622:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c628:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	78db      	ldrb	r3, [r3, #3]
 800c62e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c630:	4313      	orrs	r3, r2
 800c632:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	6979      	ldr	r1, [r7, #20]
 800c63a:	4b18      	ldr	r3, [pc, #96]	; (800c69c <HAL_RTC_SetTime+0x138>)
 800c63c:	400b      	ands	r3, r1
 800c63e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	689a      	ldr	r2, [r3, #8]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c64e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	6899      	ldr	r1, [r3, #8]
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	68da      	ldr	r2, [r3, #12]
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	431a      	orrs	r2, r3
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	430a      	orrs	r2, r1
 800c666:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f000 f9a1 	bl	800c9b0 <RTC_ExitInitMode>
 800c66e:	4603      	mov	r3, r0
 800c670:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	22ff      	movs	r2, #255	; 0xff
 800c678:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c67a:	7cfb      	ldrb	r3, [r7, #19]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d103      	bne.n	800c688 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c690:	7cfb      	ldrb	r3, [r7, #19]
}
 800c692:	4618      	mov	r0, r3
 800c694:	371c      	adds	r7, #28
 800c696:	46bd      	mov	sp, r7
 800c698:	bd90      	pop	{r4, r7, pc}
 800c69a:	bf00      	nop
 800c69c:	007f7f7f 	.word	0x007f7f7f

0800c6a0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b086      	sub	sp, #24
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	4b22      	ldr	r3, [pc, #136]	; (800c754 <HAL_RTC_GetTime+0xb4>)
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	0c1b      	lsrs	r3, r3, #16
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6da:	b2da      	uxtb	r2, r3
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	0a1b      	lsrs	r3, r3, #8
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6f8:	b2da      	uxtb	r2, r3
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	0d9b      	lsrs	r3, r3, #22
 800c702:	b2db      	uxtb	r3, r3
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	b2da      	uxtb	r2, r3
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d11a      	bne.n	800c74a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	4618      	mov	r0, r3
 800c71a:	f000 f9a7 	bl	800ca6c <RTC_Bcd2ToByte>
 800c71e:	4603      	mov	r3, r0
 800c720:	461a      	mov	r2, r3
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	785b      	ldrb	r3, [r3, #1]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f000 f99e 	bl	800ca6c <RTC_Bcd2ToByte>
 800c730:	4603      	mov	r3, r0
 800c732:	461a      	mov	r2, r3
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	789b      	ldrb	r3, [r3, #2]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f000 f995 	bl	800ca6c <RTC_Bcd2ToByte>
 800c742:	4603      	mov	r3, r0
 800c744:	461a      	mov	r2, r3
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3718      	adds	r7, #24
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	007f7f7f 	.word	0x007f7f7f

0800c758 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c758:	b590      	push	{r4, r7, lr}
 800c75a:	b087      	sub	sp, #28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d101      	bne.n	800c772 <HAL_RTC_SetDate+0x1a>
 800c76e:	2302      	movs	r3, #2
 800c770:	e073      	b.n	800c85a <HAL_RTC_SetDate+0x102>
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2201      	movs	r2, #1
 800c776:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2202      	movs	r2, #2
 800c77e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d10e      	bne.n	800c7a6 <HAL_RTC_SetDate+0x4e>
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	785b      	ldrb	r3, [r3, #1]
 800c78c:	f003 0310 	and.w	r3, r3, #16
 800c790:	2b00      	cmp	r3, #0
 800c792:	d008      	beq.n	800c7a6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	785b      	ldrb	r3, [r3, #1]
 800c798:	f023 0310 	bic.w	r3, r3, #16
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	330a      	adds	r3, #10
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d11c      	bne.n	800c7e6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	78db      	ldrb	r3, [r3, #3]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f000 f93b 	bl	800ca2c <RTC_ByteToBcd2>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	785b      	ldrb	r3, [r3, #1]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f000 f934 	bl	800ca2c <RTC_ByteToBcd2>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c7c8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	789b      	ldrb	r3, [r3, #2]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f000 f92c 	bl	800ca2c <RTC_ByteToBcd2>
 800c7d4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c7d6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	617b      	str	r3, [r7, #20]
 800c7e4:	e00e      	b.n	800c804 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	78db      	ldrb	r3, [r3, #3]
 800c7ea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	785b      	ldrb	r3, [r3, #1]
 800c7f0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c7f2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c7f8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c800:	4313      	orrs	r3, r2
 800c802:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	22ca      	movs	r2, #202	; 0xca
 800c80a:	625a      	str	r2, [r3, #36]	; 0x24
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2253      	movs	r2, #83	; 0x53
 800c812:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f000 f89b 	bl	800c950 <RTC_EnterInitMode>
 800c81a:	4603      	mov	r3, r0
 800c81c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c81e:	7cfb      	ldrb	r3, [r7, #19]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10a      	bne.n	800c83a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	6979      	ldr	r1, [r7, #20]
 800c82a:	4b0e      	ldr	r3, [pc, #56]	; (800c864 <HAL_RTC_SetDate+0x10c>)
 800c82c:	400b      	ands	r3, r1
 800c82e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f000 f8bd 	bl	800c9b0 <RTC_ExitInitMode>
 800c836:	4603      	mov	r3, r0
 800c838:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	22ff      	movs	r2, #255	; 0xff
 800c840:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c842:	7cfb      	ldrb	r3, [r7, #19]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d103      	bne.n	800c850 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2200      	movs	r2, #0
 800c854:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c858:	7cfb      	ldrb	r3, [r7, #19]


}
 800c85a:	4618      	mov	r0, r3
 800c85c:	371c      	adds	r7, #28
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd90      	pop	{r4, r7, pc}
 800c862:	bf00      	nop
 800c864:	00ffff3f 	.word	0x00ffff3f

0800c868 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	685a      	ldr	r2, [r3, #4]
 800c87a:	4b21      	ldr	r3, [pc, #132]	; (800c900 <HAL_RTC_GetDate+0x98>)
 800c87c:	4013      	ands	r3, r2
 800c87e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	0c1b      	lsrs	r3, r3, #16
 800c884:	b2da      	uxtb	r2, r3
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	0a1b      	lsrs	r3, r3, #8
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	f003 031f 	and.w	r3, r3, #31
 800c894:	b2da      	uxtb	r2, r3
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8a2:	b2da      	uxtb	r2, r3
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	0b5b      	lsrs	r3, r3, #13
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	f003 0307 	and.w	r3, r3, #7
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d11a      	bne.n	800c8f4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	78db      	ldrb	r3, [r3, #3]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f000 f8d2 	bl	800ca6c <RTC_Bcd2ToByte>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	785b      	ldrb	r3, [r3, #1]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f000 f8c9 	bl	800ca6c <RTC_Bcd2ToByte>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	461a      	mov	r2, r3
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	789b      	ldrb	r3, [r3, #2]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f000 f8c0 	bl	800ca6c <RTC_Bcd2ToByte>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c8f4:	2300      	movs	r3, #0
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3718      	adds	r7, #24
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	00ffff3f 	.word	0x00ffff3f

0800c904 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	68da      	ldr	r2, [r3, #12]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c91a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800c91c:	f7f7 fe5e 	bl	80045dc <HAL_GetTick>
 800c920:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c922:	e009      	b.n	800c938 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c924:	f7f7 fe5a 	bl	80045dc <HAL_GetTick>
 800c928:	4602      	mov	r2, r0
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	1ad3      	subs	r3, r2, r3
 800c92e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c932:	d901      	bls.n	800c938 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800c934:	2303      	movs	r3, #3
 800c936:	e007      	b.n	800c948 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	f003 0320 	and.w	r3, r3, #32
 800c942:	2b00      	cmp	r3, #0
 800c944:	d0ee      	beq.n	800c924 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800c946:	2300      	movs	r3, #0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c958:	2300      	movs	r3, #0
 800c95a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c966:	2b00      	cmp	r3, #0
 800c968:	d11d      	bne.n	800c9a6 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f04f 32ff 	mov.w	r2, #4294967295
 800c972:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c974:	f7f7 fe32 	bl	80045dc <HAL_GetTick>
 800c978:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c97a:	e00d      	b.n	800c998 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c97c:	f7f7 fe2e 	bl	80045dc <HAL_GetTick>
 800c980:	4602      	mov	r2, r0
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	1ad3      	subs	r3, r2, r3
 800c986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c98a:	d905      	bls.n	800c998 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c98c:	2303      	movs	r3, #3
 800c98e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2203      	movs	r2, #3
 800c994:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d0ea      	beq.n	800c97c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800c9a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3710      	adds	r7, #16
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800c9bc:	4b1a      	ldr	r3, [pc, #104]	; (800ca28 <RTC_ExitInitMode+0x78>)
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	4a19      	ldr	r2, [pc, #100]	; (800ca28 <RTC_ExitInitMode+0x78>)
 800c9c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9c6:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c9c8:	4b17      	ldr	r3, [pc, #92]	; (800ca28 <RTC_ExitInitMode+0x78>)
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	f003 0320 	and.w	r3, r3, #32
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d10c      	bne.n	800c9ee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7ff ff95 	bl	800c904 <HAL_RTC_WaitForSynchro>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d01e      	beq.n	800ca1e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2203      	movs	r2, #3
 800c9e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c9e8:	2303      	movs	r3, #3
 800c9ea:	73fb      	strb	r3, [r7, #15]
 800c9ec:	e017      	b.n	800ca1e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c9ee:	4b0e      	ldr	r3, [pc, #56]	; (800ca28 <RTC_ExitInitMode+0x78>)
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	4a0d      	ldr	r2, [pc, #52]	; (800ca28 <RTC_ExitInitMode+0x78>)
 800c9f4:	f023 0320 	bic.w	r3, r3, #32
 800c9f8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7ff ff82 	bl	800c904 <HAL_RTC_WaitForSynchro>
 800ca00:	4603      	mov	r3, r0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d005      	beq.n	800ca12 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2203      	movs	r2, #3
 800ca0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ca0e:	2303      	movs	r3, #3
 800ca10:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ca12:	4b05      	ldr	r3, [pc, #20]	; (800ca28 <RTC_ExitInitMode+0x78>)
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	4a04      	ldr	r2, [pc, #16]	; (800ca28 <RTC_ExitInitMode+0x78>)
 800ca18:	f043 0320 	orr.w	r3, r3, #32
 800ca1c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800ca1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3710      	adds	r7, #16
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	58004000 	.word	0x58004000

0800ca2c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	4603      	mov	r3, r0
 800ca34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ca36:	2300      	movs	r3, #0
 800ca38:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800ca3a:	79fb      	ldrb	r3, [r7, #7]
 800ca3c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800ca3e:	e005      	b.n	800ca4c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	3301      	adds	r3, #1
 800ca44:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800ca46:	7afb      	ldrb	r3, [r7, #11]
 800ca48:	3b0a      	subs	r3, #10
 800ca4a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800ca4c:	7afb      	ldrb	r3, [r7, #11]
 800ca4e:	2b09      	cmp	r3, #9
 800ca50:	d8f6      	bhi.n	800ca40 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	011b      	lsls	r3, r3, #4
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	7afb      	ldrb	r3, [r7, #11]
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	b2db      	uxtb	r3, r3
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3714      	adds	r7, #20
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b085      	sub	sp, #20
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	4603      	mov	r3, r0
 800ca74:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800ca76:	79fb      	ldrb	r3, [r7, #7]
 800ca78:	091b      	lsrs	r3, r3, #4
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	0092      	lsls	r2, r2, #2
 800ca80:	4413      	add	r3, r2
 800ca82:	005b      	lsls	r3, r3, #1
 800ca84:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800ca86:	79fb      	ldrb	r3, [r7, #7]
 800ca88:	f003 030f 	and.w	r3, r3, #15
 800ca8c:	b2da      	uxtb	r2, r3
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
 800ca90:	4413      	add	r3, r2
 800ca92:	b2db      	uxtb	r3, r3
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3714      	adds	r7, #20
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr

0800caa0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b08a      	sub	sp, #40	; 0x28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d101      	bne.n	800cab2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	e07c      	b.n	800cbac <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10c      	bne.n	800cad8 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2200      	movs	r2, #0
 800cac2:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	699b      	ldr	r3, [r3, #24]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d102      	bne.n	800cad2 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2202      	movs	r2, #2
 800cad0:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f7f7 f9e0 	bl	8003e98 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2203      	movs	r2, #3
 800cadc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f000 f867 	bl	800cbb4 <HAL_SD_InitCard>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d001      	beq.n	800caf0 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800caec:	2301      	movs	r3, #1
 800caee:	e05d      	b.n	800cbac <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800caf0:	f107 0308 	add.w	r3, r7, #8
 800caf4:	4619      	mov	r1, r3
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f001 f8ce 	bl	800dc98 <HAL_SD_GetCardStatus>
 800cafc:	4603      	mov	r3, r0
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d001      	beq.n	800cb06 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800cb02:	2301      	movs	r3, #1
 800cb04:	e052      	b.n	800cbac <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cb06:	7e3b      	ldrb	r3, [r7, #24]
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cb0c:	7e7b      	ldrb	r3, [r7, #25]
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d10a      	bne.n	800cb30 <HAL_SD_Init+0x90>
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d102      	bne.n	800cb26 <HAL_SD_Init+0x86>
 800cb20:	6a3b      	ldr	r3, [r7, #32]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d004      	beq.n	800cb30 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb2c:	65da      	str	r2, [r3, #92]	; 0x5c
 800cb2e:	e00b      	b.n	800cb48 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d104      	bne.n	800cb42 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb3e:	65da      	str	r2, [r3, #92]	; 0x5c
 800cb40:	e002      	b.n	800cb48 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f001 f984 	bl	800de5c <HAL_SD_ConfigWideBusOperation>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d001      	beq.n	800cb5e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e026      	b.n	800cbac <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cb5e:	f7f7 fd3d 	bl	80045dc <HAL_GetTick>
 800cb62:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cb64:	e011      	b.n	800cb8a <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800cb66:	f7f7 fd39 	bl	80045dc <HAL_GetTick>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb74:	d109      	bne.n	800cb8a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2201      	movs	r2, #1
 800cb82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800cb86:	2303      	movs	r3, #3
 800cb88:	e010      	b.n	800cbac <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f001 fa10 	bl	800dfb0 <HAL_SD_GetCardState>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b04      	cmp	r3, #4
 800cb94:	d1e7      	bne.n	800cb66 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2201      	movs	r2, #1
 800cba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3728      	adds	r7, #40	; 0x28
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cbb4:	b5b0      	push	{r4, r5, r7, lr}
 800cbb6:	b08e      	sub	sp, #56	; 0x38
 800cbb8:	af04      	add	r7, sp, #16
 800cbba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cbcc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cbd0:	f7fe fc7a 	bl	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800cbd4:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800cbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd8:	0a1b      	lsrs	r3, r3, #8
 800cbda:	4a40      	ldr	r2, [pc, #256]	; (800ccdc <HAL_SD_InitCard+0x128>)
 800cbdc:	fba2 2303 	umull	r2, r3, r2, r3
 800cbe0:	091b      	lsrs	r3, r3, #4
 800cbe2:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	699b      	ldr	r3, [r3, #24]
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d107      	bne.n	800cbfc <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f042 0210 	orr.w	r2, r2, #16
 800cbfa:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681d      	ldr	r5, [r3, #0]
 800cc00:	466c      	mov	r4, sp
 800cc02:	f107 0314 	add.w	r3, r7, #20
 800cc06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cc0e:	f107 0308 	add.w	r3, r7, #8
 800cc12:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc14:	4628      	mov	r0, r5
 800cc16:	f004 f9f5 	bl	8011004 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f004 fa38 	bl	8011094 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	005b      	lsls	r3, r3, #1
 800cc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc2e:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800cc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d008      	beq.n	800cc48 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800cc36:	4a2a      	ldr	r2, [pc, #168]	; (800cce0 <HAL_SD_InitCard+0x12c>)
 800cc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc3e:	3301      	adds	r3, #1
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7f7 fcd7 	bl	80045f4 <HAL_Delay>
 800cc46:	e002      	b.n	800cc4e <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800cc48:	2002      	movs	r0, #2
 800cc4a:	f7f7 fcd3 	bl	80045f4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f001 fa8c 	bl	800e16c <SD_PowerON>
 800cc54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc56:	6a3b      	ldr	r3, [r7, #32]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d00b      	beq.n	800cc74 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc68:	6a3b      	ldr	r3, [r7, #32]
 800cc6a:	431a      	orrs	r2, r3
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc70:	2301      	movs	r3, #1
 800cc72:	e02e      	b.n	800ccd2 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f001 f9bb 	bl	800dff0 <SD_InitCard>
 800cc7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc7c:	6a3b      	ldr	r3, [r7, #32]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00b      	beq.n	800cc9a <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2201      	movs	r2, #1
 800cc86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc8e:	6a3b      	ldr	r3, [r7, #32]
 800cc90:	431a      	orrs	r2, r3
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc96:	2301      	movs	r3, #1
 800cc98:	e01b      	b.n	800ccd2 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cca2:	4618      	mov	r0, r3
 800cca4:	f004 fa8c 	bl	80111c0 <SDMMC_CmdBlockLength>
 800cca8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ccaa:	6a3b      	ldr	r3, [r7, #32]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00f      	beq.n	800ccd0 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a0b      	ldr	r2, [pc, #44]	; (800cce4 <HAL_SD_InitCard+0x130>)
 800ccb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccbc:	6a3b      	ldr	r3, [r7, #32]
 800ccbe:	431a      	orrs	r2, r3
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cccc:	2301      	movs	r3, #1
 800ccce:	e000      	b.n	800ccd2 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800ccd0:	2300      	movs	r3, #0
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3728      	adds	r7, #40	; 0x28
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bdb0      	pop	{r4, r5, r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	014f8b59 	.word	0x014f8b59
 800cce0:	00012110 	.word	0x00012110
 800cce4:	1fe00fff 	.word	0x1fe00fff

0800cce8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b092      	sub	sp, #72	; 0x48
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
 800ccf4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ccf6:	f7f7 fc71 	bl	80045dc <HAL_GetTick>
 800ccfa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d107      	bne.n	800cd1a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cd16:	2301      	movs	r3, #1
 800cd18:	e167      	b.n	800cfea <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	f040 815a 	bne.w	800cfdc <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cd2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	441a      	add	r2, r3
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d907      	bls.n	800cd4c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd40:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	e14e      	b.n	800cfea <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2203      	movs	r2, #3
 800cd50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d002      	beq.n	800cd6a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800cd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd66:	025b      	lsls	r3, r3, #9
 800cd68:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd6a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd6e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	025b      	lsls	r3, r3, #9
 800cd74:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cd76:	2390      	movs	r3, #144	; 0x90
 800cd78:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cd7a:	2302      	movs	r3, #2
 800cd7c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cd82:	2300      	movs	r3, #0
 800cd84:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f107 0214 	add.w	r2, r7, #20
 800cd8e:	4611      	mov	r1, r2
 800cd90:	4618      	mov	r0, r3
 800cd92:	f004 f9e9 	bl	8011168 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	68da      	ldr	r2, [r3, #12]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cda4:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d90a      	bls.n	800cdc2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2202      	movs	r2, #2
 800cdb0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f004 fa47 	bl	801124c <SDMMC_CmdReadMultiBlock>
 800cdbe:	6478      	str	r0, [r7, #68]	; 0x44
 800cdc0:	e009      	b.n	800cdd6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f004 fa19 	bl	8011206 <SDMMC_CmdReadSingleBlock>
 800cdd4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cdd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d012      	beq.n	800ce02 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a84      	ldr	r2, [pc, #528]	; (800cff4 <HAL_SD_ReadBlocks+0x30c>)
 800cde2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cde8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdea:	431a      	orrs	r2, r3
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e0f3      	b.n	800cfea <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ce06:	e058      	b.n	800ceba <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d033      	beq.n	800ce7e <HAL_SD_ReadBlocks+0x196>
 800ce16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce18:	2b1f      	cmp	r3, #31
 800ce1a:	d930      	bls.n	800ce7e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	643b      	str	r3, [r7, #64]	; 0x40
 800ce20:	e027      	b.n	800ce72 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f004 f916 	bl	8011058 <SDMMC_ReadFIFO>
 800ce2c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800ce2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce34:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce38:	3301      	adds	r3, #1
 800ce3a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3e:	0a1b      	lsrs	r3, r3, #8
 800ce40:	b2da      	uxtb	r2, r3
 800ce42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce44:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce48:	3301      	adds	r3, #1
 800ce4a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800ce4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4e:	0c1b      	lsrs	r3, r3, #16
 800ce50:	b2da      	uxtb	r2, r3
 800ce52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce54:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce58:	3301      	adds	r3, #1
 800ce5a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800ce5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5e:	0e1b      	lsrs	r3, r3, #24
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce64:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce68:	3301      	adds	r3, #1
 800ce6a:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800ce6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce6e:	3301      	adds	r3, #1
 800ce70:	643b      	str	r3, [r7, #64]	; 0x40
 800ce72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce74:	2b07      	cmp	r3, #7
 800ce76:	d9d4      	bls.n	800ce22 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800ce78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce7a:	3b20      	subs	r3, #32
 800ce7c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ce7e:	f7f7 fbad 	bl	80045dc <HAL_GetTick>
 800ce82:	4602      	mov	r2, r0
 800ce84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d902      	bls.n	800ce94 <HAL_SD_ReadBlocks+0x1ac>
 800ce8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d112      	bne.n	800ceba <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a56      	ldr	r2, [pc, #344]	; (800cff4 <HAL_SD_ReadBlocks+0x30c>)
 800ce9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800ceb6:	2303      	movs	r3, #3
 800ceb8:	e097      	b.n	800cfea <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cec0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d09f      	beq.n	800ce08 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68da      	ldr	r2, [r3, #12]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ced6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d022      	beq.n	800cf2c <HAL_SD_ReadBlocks+0x244>
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d91f      	bls.n	800cf2c <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef0:	2b03      	cmp	r3, #3
 800cef2:	d01b      	beq.n	800cf2c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4618      	mov	r0, r3
 800cefa:	f004 fa11 	bl	8011320 <SDMMC_CmdStopTransfer>
 800cefe:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800cf00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d012      	beq.n	800cf2c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a3a      	ldr	r2, [pc, #232]	; (800cff4 <HAL_SD_ReadBlocks+0x30c>)
 800cf0c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf14:	431a      	orrs	r2, r3
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2200      	movs	r2, #0
 800cf26:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e05e      	b.n	800cfea <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf32:	f003 0308 	and.w	r3, r3, #8
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d012      	beq.n	800cf60 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a2d      	ldr	r2, [pc, #180]	; (800cff4 <HAL_SD_ReadBlocks+0x30c>)
 800cf40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf46:	f043 0208 	orr.w	r2, r3, #8
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e044      	b.n	800cfea <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf66:	f003 0302 	and.w	r3, r3, #2
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d012      	beq.n	800cf94 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4a20      	ldr	r2, [pc, #128]	; (800cff4 <HAL_SD_ReadBlocks+0x30c>)
 800cf74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf7a:	f043 0202 	orr.w	r2, r3, #2
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf90:	2301      	movs	r3, #1
 800cf92:	e02a      	b.n	800cfea <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf9a:	f003 0320 	and.w	r3, r3, #32
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d012      	beq.n	800cfc8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4a13      	ldr	r2, [pc, #76]	; (800cff4 <HAL_SD_ReadBlocks+0x30c>)
 800cfa8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfae:	f043 0220 	orr.w	r2, r3, #32
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	e010      	b.n	800cfea <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a0a      	ldr	r2, [pc, #40]	; (800cff8 <HAL_SD_ReadBlocks+0x310>)
 800cfce:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	e006      	b.n	800cfea <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cfe8:	2301      	movs	r3, #1
  }
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3748      	adds	r7, #72	; 0x48
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	1fe00fff 	.word	0x1fe00fff
 800cff8:	18000f3a 	.word	0x18000f3a

0800cffc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b092      	sub	sp, #72	; 0x48
 800d000:	af00      	add	r7, sp, #0
 800d002:	60f8      	str	r0, [r7, #12]
 800d004:	60b9      	str	r1, [r7, #8]
 800d006:	607a      	str	r2, [r7, #4]
 800d008:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d00a:	f7f7 fae7 	bl	80045dc <HAL_GetTick>
 800d00e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d107      	bne.n	800d02e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d022:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	e16b      	b.n	800d306 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d034:	b2db      	uxtb	r3, r3
 800d036:	2b01      	cmp	r3, #1
 800d038:	f040 815e 	bne.w	800d2f8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2200      	movs	r2, #0
 800d040:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	441a      	add	r2, r3
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d907      	bls.n	800d060 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d054:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d05c:	2301      	movs	r3, #1
 800d05e:	e152      	b.n	800d306 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2203      	movs	r2, #3
 800d064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2200      	movs	r2, #0
 800d06e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d074:	2b01      	cmp	r3, #1
 800d076:	d002      	beq.n	800d07e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07a:	025b      	lsls	r3, r3, #9
 800d07c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d07e:	f04f 33ff 	mov.w	r3, #4294967295
 800d082:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	025b      	lsls	r3, r3, #9
 800d088:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d08a:	2390      	movs	r3, #144	; 0x90
 800d08c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d08e:	2300      	movs	r3, #0
 800d090:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d092:	2300      	movs	r3, #0
 800d094:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d096:	2300      	movs	r3, #0
 800d098:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f107 0218 	add.w	r2, r7, #24
 800d0a2:	4611      	mov	r1, r2
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f004 f85f 	bl	8011168 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	68da      	ldr	r2, [r3, #12]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0b8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d90a      	bls.n	800d0d6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2220      	movs	r2, #32
 800d0c4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f004 f903 	bl	80112d8 <SDMMC_CmdWriteMultiBlock>
 800d0d2:	6478      	str	r0, [r7, #68]	; 0x44
 800d0d4:	e009      	b.n	800d0ea <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2210      	movs	r2, #16
 800d0da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f004 f8d5 	bl	8011292 <SDMMC_CmdWriteSingleBlock>
 800d0e8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d012      	beq.n	800d116 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a86      	ldr	r2, [pc, #536]	; (800d310 <HAL_SD_WriteBlocks+0x314>)
 800d0f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0fe:	431a      	orrs	r2, r3
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2201      	movs	r2, #1
 800d108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2200      	movs	r2, #0
 800d110:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d112:	2301      	movs	r3, #1
 800d114:	e0f7      	b.n	800d306 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d11a:	e05c      	b.n	800d1d6 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d126:	2b00      	cmp	r3, #0
 800d128:	d037      	beq.n	800d19a <HAL_SD_WriteBlocks+0x19e>
 800d12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d12c:	2b1f      	cmp	r3, #31
 800d12e:	d934      	bls.n	800d19a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d130:	2300      	movs	r3, #0
 800d132:	643b      	str	r3, [r7, #64]	; 0x40
 800d134:	e02b      	b.n	800d18e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800d136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d13e:	3301      	adds	r3, #1
 800d140:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	021a      	lsls	r2, r3, #8
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	4313      	orrs	r3, r2
 800d14c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d150:	3301      	adds	r3, #1
 800d152:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	041a      	lsls	r2, r3, #16
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	4313      	orrs	r3, r2
 800d15e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d162:	3301      	adds	r3, #1
 800d164:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	061a      	lsls	r2, r3, #24
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	4313      	orrs	r3, r2
 800d170:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d174:	3301      	adds	r3, #1
 800d176:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f107 0214 	add.w	r2, r7, #20
 800d180:	4611      	mov	r1, r2
 800d182:	4618      	mov	r0, r3
 800d184:	f003 ff75 	bl	8011072 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d18a:	3301      	adds	r3, #1
 800d18c:	643b      	str	r3, [r7, #64]	; 0x40
 800d18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d190:	2b07      	cmp	r3, #7
 800d192:	d9d0      	bls.n	800d136 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800d194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d196:	3b20      	subs	r3, #32
 800d198:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d19a:	f7f7 fa1f 	bl	80045dc <HAL_GetTick>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d902      	bls.n	800d1b0 <HAL_SD_WriteBlocks+0x1b4>
 800d1aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d112      	bne.n	800d1d6 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a56      	ldr	r2, [pc, #344]	; (800d310 <HAL_SD_WriteBlocks+0x314>)
 800d1b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1be:	431a      	orrs	r2, r3
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d1d2:	2303      	movs	r3, #3
 800d1d4:	e097      	b.n	800d306 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1dc:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d09b      	beq.n	800d11c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	68da      	ldr	r2, [r3, #12]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1f2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d022      	beq.n	800d248 <HAL_SD_WriteBlocks+0x24c>
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	2b01      	cmp	r3, #1
 800d206:	d91f      	bls.n	800d248 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d20c:	2b03      	cmp	r3, #3
 800d20e:	d01b      	beq.n	800d248 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4618      	mov	r0, r3
 800d216:	f004 f883 	bl	8011320 <SDMMC_CmdStopTransfer>
 800d21a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d21c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d012      	beq.n	800d248 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a3a      	ldr	r2, [pc, #232]	; (800d310 <HAL_SD_WriteBlocks+0x314>)
 800d228:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d22e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d230:	431a      	orrs	r2, r3
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2201      	movs	r2, #1
 800d23a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2200      	movs	r2, #0
 800d242:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d244:	2301      	movs	r3, #1
 800d246:	e05e      	b.n	800d306 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d24e:	f003 0308 	and.w	r3, r3, #8
 800d252:	2b00      	cmp	r3, #0
 800d254:	d012      	beq.n	800d27c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4a2d      	ldr	r2, [pc, #180]	; (800d310 <HAL_SD_WriteBlocks+0x314>)
 800d25c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d262:	f043 0208 	orr.w	r2, r3, #8
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2201      	movs	r2, #1
 800d26e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2200      	movs	r2, #0
 800d276:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d278:	2301      	movs	r3, #1
 800d27a:	e044      	b.n	800d306 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d282:	f003 0302 	and.w	r3, r3, #2
 800d286:	2b00      	cmp	r3, #0
 800d288:	d012      	beq.n	800d2b0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4a20      	ldr	r2, [pc, #128]	; (800d310 <HAL_SD_WriteBlocks+0x314>)
 800d290:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d296:	f043 0202 	orr.w	r2, r3, #2
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e02a      	b.n	800d306 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2b6:	f003 0310 	and.w	r3, r3, #16
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d012      	beq.n	800d2e4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a13      	ldr	r2, [pc, #76]	; (800d310 <HAL_SD_WriteBlocks+0x314>)
 800d2c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ca:	f043 0210 	orr.w	r2, r3, #16
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e010      	b.n	800d306 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4a0a      	ldr	r2, [pc, #40]	; (800d314 <HAL_SD_WriteBlocks+0x318>)
 800d2ea:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	e006      	b.n	800d306 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d304:	2301      	movs	r3, #1
  }
}
 800d306:	4618      	mov	r0, r3
 800d308:	3748      	adds	r7, #72	; 0x48
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	1fe00fff 	.word	0x1fe00fff
 800d314:	18000f3a 	.word	0x18000f3a

0800d318 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b08c      	sub	sp, #48	; 0x30
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	607a      	str	r2, [r7, #4]
 800d324:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d107      	bne.n	800d340 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d334:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d33c:	2301      	movs	r3, #1
 800d33e:	e08d      	b.n	800d45c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d346:	b2db      	uxtb	r3, r3
 800d348:	2b01      	cmp	r3, #1
 800d34a:	f040 8086 	bne.w	800d45a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2200      	movs	r2, #0
 800d352:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	441a      	add	r2, r3
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d35e:	429a      	cmp	r2, r3
 800d360:	d907      	bls.n	800d372 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d366:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	e074      	b.n	800d45c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2203      	movs	r2, #3
 800d376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2200      	movs	r2, #0
 800d380:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	68ba      	ldr	r2, [r7, #8]
 800d386:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	025a      	lsls	r2, r3, #9
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d394:	2b01      	cmp	r3, #1
 800d396:	d002      	beq.n	800d39e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39a:	025b      	lsls	r3, r3, #9
 800d39c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d39e:	f04f 33ff 	mov.w	r3, #4294967295
 800d3a2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	025b      	lsls	r3, r3, #9
 800d3a8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d3aa:	2390      	movs	r3, #144	; 0x90
 800d3ac:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d3ae:	2302      	movs	r3, #2
 800d3b0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f107 0210 	add.w	r2, r7, #16
 800d3c2:	4611      	mov	r1, r2
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f003 fecf 	bl	8011168 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	68da      	ldr	r2, [r3, #12]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3d8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	68ba      	ldr	r2, [r7, #8]
 800d3e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d90a      	bls.n	800d406 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2282      	movs	r2, #130	; 0x82
 800d3f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f003 ff25 	bl	801124c <SDMMC_CmdReadMultiBlock>
 800d402:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d404:	e009      	b.n	800d41a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2281      	movs	r2, #129	; 0x81
 800d40a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d412:	4618      	mov	r0, r3
 800d414:	f003 fef7 	bl	8011206 <SDMMC_CmdReadSingleBlock>
 800d418:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d012      	beq.n	800d446 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4a0f      	ldr	r2, [pc, #60]	; (800d464 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d426:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42e:	431a      	orrs	r2, r3
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2201      	movs	r2, #1
 800d438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2200      	movs	r2, #0
 800d440:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	e00a      	b.n	800d45c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d454:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d456:	2300      	movs	r3, #0
 800d458:	e000      	b.n	800d45c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d45a:	2302      	movs	r3, #2
  }
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3730      	adds	r7, #48	; 0x30
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	1fe00fff 	.word	0x1fe00fff

0800d468 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b08c      	sub	sp, #48	; 0x30
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	60b9      	str	r1, [r7, #8]
 800d472:	607a      	str	r2, [r7, #4]
 800d474:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d107      	bne.n	800d490 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d484:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d48c:	2301      	movs	r3, #1
 800d48e:	e08d      	b.n	800d5ac <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d496:	b2db      	uxtb	r3, r3
 800d498:	2b01      	cmp	r3, #1
 800d49a:	f040 8086 	bne.w	800d5aa <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d4a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	441a      	add	r2, r3
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d907      	bls.n	800d4c2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e074      	b.n	800d5ac <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2203      	movs	r2, #3
 800d4c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	68ba      	ldr	r2, [r7, #8]
 800d4d6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	025a      	lsls	r2, r3, #9
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d002      	beq.n	800d4ee <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ea:	025b      	lsls	r3, r3, #9
 800d4ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d4ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d4f2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	025b      	lsls	r3, r3, #9
 800d4f8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d4fa:	2390      	movs	r3, #144	; 0x90
 800d4fc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d4fe:	2300      	movs	r3, #0
 800d500:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d502:	2300      	movs	r3, #0
 800d504:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d506:	2300      	movs	r3, #0
 800d508:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f107 0210 	add.w	r2, r7, #16
 800d512:	4611      	mov	r1, r2
 800d514:	4618      	mov	r0, r3
 800d516:	f003 fe27 	bl	8011168 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	68da      	ldr	r2, [r3, #12]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d528:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	68ba      	ldr	r2, [r7, #8]
 800d530:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	2201      	movs	r2, #1
 800d538:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d90a      	bls.n	800d556 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	22a0      	movs	r2, #160	; 0xa0
 800d544:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d54c:	4618      	mov	r0, r3
 800d54e:	f003 fec3 	bl	80112d8 <SDMMC_CmdWriteMultiBlock>
 800d552:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d554:	e009      	b.n	800d56a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2290      	movs	r2, #144	; 0x90
 800d55a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d562:	4618      	mov	r0, r3
 800d564:	f003 fe95 	bl	8011292 <SDMMC_CmdWriteSingleBlock>
 800d568:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d012      	beq.n	800d596 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4a0f      	ldr	r2, [pc, #60]	; (800d5b4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d576:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d57e:	431a      	orrs	r2, r3
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2201      	movs	r2, #1
 800d588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2200      	movs	r2, #0
 800d590:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d592:	2301      	movs	r3, #1
 800d594:	e00a      	b.n	800d5ac <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d5a4:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	e000      	b.n	800d5ac <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d5aa:	2302      	movs	r3, #2
  }
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3730      	adds	r7, #48	; 0x30
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	1fe00fff 	.word	0x1fe00fff

0800d5b8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d008      	beq.n	800d5e6 <HAL_SD_IRQHandler+0x2e>
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f003 0308 	and.w	r3, r3, #8
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d003      	beq.n	800d5e6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f001 f92a 	bl	800e838 <SD_Read_IT>
 800d5e4:	e19a      	b.n	800d91c <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f000 80ac 	beq.w	800d74e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d5fe:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	4b9d      	ldr	r3, [pc, #628]	; (800d880 <HAL_SD_IRQHandler+0x2c8>)
 800d60c:	400b      	ands	r3, r1
 800d60e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d61e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	68da      	ldr	r2, [r3, #12]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d62e:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f003 0308 	and.w	r3, r3, #8
 800d636:	2b00      	cmp	r3, #0
 800d638:	d038      	beq.n	800d6ac <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f003 0302 	and.w	r3, r3, #2
 800d640:	2b00      	cmp	r3, #0
 800d642:	d104      	bne.n	800d64e <HAL_SD_IRQHandler+0x96>
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f003 0320 	and.w	r3, r3, #32
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d011      	beq.n	800d672 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4618      	mov	r0, r3
 800d654:	f003 fe64 	bl	8011320 <SDMMC_CmdStopTransfer>
 800d658:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d008      	beq.n	800d672 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	431a      	orrs	r2, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 f959 	bl	800d924 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a83      	ldr	r2, [pc, #524]	; (800d884 <HAL_SD_IRQHandler+0x2cc>)
 800d678:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2201      	movs	r2, #1
 800d67e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f003 0301 	and.w	r3, r3, #1
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d104      	bne.n	800d69c <HAL_SD_IRQHandler+0xe4>
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f003 0302 	and.w	r3, r3, #2
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d003      	beq.n	800d6a4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f005 fe55 	bl	801334c <HAL_SD_RxCpltCallback>
 800d6a2:	e13b      	b.n	800d91c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f005 fe47 	bl	8013338 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d6aa:	e137      	b.n	800d91c <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	f000 8132 	beq.w	800d91c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f003 0302 	and.w	r3, r3, #2
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d104      	bne.n	800d6e4 <HAL_SD_IRQHandler+0x12c>
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	f003 0320 	and.w	r3, r3, #32
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d011      	beq.n	800d708 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f003 fe19 	bl	8011320 <SDMMC_CmdStopTransfer>
 800d6ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d008      	beq.n	800d708 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	431a      	orrs	r2, r3
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 f90e 	bl	800d924 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2201      	movs	r2, #1
 800d70c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f003 0310 	and.w	r3, r3, #16
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d104      	bne.n	800d72a <HAL_SD_IRQHandler+0x172>
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f003 0320 	and.w	r3, r3, #32
 800d726:	2b00      	cmp	r3, #0
 800d728:	d002      	beq.n	800d730 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f005 fe04 	bl	8013338 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f003 0301 	and.w	r3, r3, #1
 800d736:	2b00      	cmp	r3, #0
 800d738:	d105      	bne.n	800d746 <HAL_SD_IRQHandler+0x18e>
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f003 0302 	and.w	r3, r3, #2
 800d740:	2b00      	cmp	r3, #0
 800d742:	f000 80eb 	beq.w	800d91c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f005 fe00 	bl	801334c <HAL_SD_RxCpltCallback>
}
 800d74c:	e0e6      	b.n	800d91c <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d008      	beq.n	800d76e <HAL_SD_IRQHandler+0x1b6>
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f003 0308 	and.w	r3, r3, #8
 800d762:	2b00      	cmp	r3, #0
 800d764:	d003      	beq.n	800d76e <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f001 f8ac 	bl	800e8c4 <SD_Write_IT>
 800d76c:	e0d6      	b.n	800d91c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d774:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f000 80a2 	beq.w	800d8c2 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d784:	f003 0302 	and.w	r3, r3, #2
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d005      	beq.n	800d798 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d790:	f043 0202 	orr.w	r2, r3, #2
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d79e:	f003 0308 	and.w	r3, r3, #8
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d005      	beq.n	800d7b2 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7aa:	f043 0208 	orr.w	r2, r3, #8
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7b8:	f003 0320 	and.w	r3, r3, #32
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d005      	beq.n	800d7cc <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c4:	f043 0220 	orr.w	r2, r3, #32
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d2:	f003 0310 	and.w	r3, r3, #16
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d005      	beq.n	800d7e6 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7de:	f043 0210 	orr.w	r2, r3, #16
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4a26      	ldr	r2, [pc, #152]	; (800d884 <HAL_SD_IRQHandler+0x2cc>)
 800d7ec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d7fc:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	68da      	ldr	r2, [r3, #12]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d80c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d81c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	68da      	ldr	r2, [r3, #12]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d82c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4618      	mov	r0, r3
 800d834:	f003 fd74 	bl	8011320 <SDMMC_CmdStopTransfer>
 800d838:	4602      	mov	r2, r0
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83e:	431a      	orrs	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	68da      	ldr	r2, [r3, #12]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d852:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d85c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f003 0308 	and.w	r3, r3, #8
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00f      	beq.n	800d888 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2201      	movs	r2, #1
 800d86c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2200      	movs	r2, #0
 800d874:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 f854 	bl	800d924 <HAL_SD_ErrorCallback>
}
 800d87c:	e04e      	b.n	800d91c <HAL_SD_IRQHandler+0x364>
 800d87e:	bf00      	nop
 800d880:	ffff3ec5 	.word	0xffff3ec5
 800d884:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d044      	beq.n	800d91c <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d896:	2b00      	cmp	r3, #0
 800d898:	d040      	beq.n	800d91c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d8a8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 f832 	bl	800d924 <HAL_SD_ErrorCallback>
}
 800d8c0:	e02c      	b.n	800d91c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d025      	beq.n	800d91c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8e0:	f003 0304 	and.w	r3, r3, #4
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d10c      	bne.n	800d902 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f003 0320 	and.w	r3, r3, #32
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d003      	beq.n	800d8fa <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f001 f84e 	bl	800e994 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d8f8:	e010      	b.n	800d91c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f001 f836 	bl	800e96c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d900:	e00c      	b.n	800d91c <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f003 0320 	and.w	r3, r3, #32
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d003      	beq.n	800d914 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f001 f837 	bl	800e980 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d912:	e003      	b.n	800d91c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f001 f81f 	bl	800e958 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d91a:	e7ff      	b.n	800d91c <HAL_SD_IRQHandler+0x364>
 800d91c:	bf00      	nop
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d92c:	bf00      	nop
 800d92e:	370c      	adds	r7, #12
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	4603      	mov	r3, r0
 800d940:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800d942:	bf00      	nop
 800d944:	370c      	adds	r7, #12
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr
	...

0800d950 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d95e:	0f9b      	lsrs	r3, r3, #30
 800d960:	b2da      	uxtb	r2, r3
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d96a:	0e9b      	lsrs	r3, r3, #26
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	f003 030f 	and.w	r3, r3, #15
 800d972:	b2da      	uxtb	r2, r3
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d97c:	0e1b      	lsrs	r3, r3, #24
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	f003 0303 	and.w	r3, r3, #3
 800d984:	b2da      	uxtb	r2, r3
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d98e:	0c1b      	lsrs	r3, r3, #16
 800d990:	b2da      	uxtb	r2, r3
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d99a:	0a1b      	lsrs	r3, r3, #8
 800d99c:	b2da      	uxtb	r2, r3
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b0:	0d1b      	lsrs	r3, r3, #20
 800d9b2:	b29a      	uxth	r2, r3
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9bc:	0c1b      	lsrs	r3, r3, #16
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	f003 030f 	and.w	r3, r3, #15
 800d9c4:	b2da      	uxtb	r2, r3
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9ce:	0bdb      	lsrs	r3, r3, #15
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	f003 0301 	and.w	r3, r3, #1
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9e0:	0b9b      	lsrs	r3, r3, #14
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	f003 0301 	and.w	r3, r3, #1
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9f2:	0b5b      	lsrs	r3, r3, #13
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	f003 0301 	and.w	r3, r3, #1
 800d9fa:	b2da      	uxtb	r2, r3
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da04:	0b1b      	lsrs	r3, r3, #12
 800da06:	b2db      	uxtb	r3, r3
 800da08:	f003 0301 	and.w	r3, r3, #1
 800da0c:	b2da      	uxtb	r2, r3
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	2200      	movs	r2, #0
 800da16:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d163      	bne.n	800dae8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da24:	009a      	lsls	r2, r3, #2
 800da26:	f640 73fc 	movw	r3, #4092	; 0xffc
 800da2a:	4013      	ands	r3, r2
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800da30:	0f92      	lsrs	r2, r2, #30
 800da32:	431a      	orrs	r2, r3
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da3c:	0edb      	lsrs	r3, r3, #27
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	f003 0307 	and.w	r3, r3, #7
 800da44:	b2da      	uxtb	r2, r3
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da4e:	0e1b      	lsrs	r3, r3, #24
 800da50:	b2db      	uxtb	r3, r3
 800da52:	f003 0307 	and.w	r3, r3, #7
 800da56:	b2da      	uxtb	r2, r3
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da60:	0d5b      	lsrs	r3, r3, #21
 800da62:	b2db      	uxtb	r3, r3
 800da64:	f003 0307 	and.w	r3, r3, #7
 800da68:	b2da      	uxtb	r2, r3
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da72:	0c9b      	lsrs	r3, r3, #18
 800da74:	b2db      	uxtb	r3, r3
 800da76:	f003 0307 	and.w	r3, r3, #7
 800da7a:	b2da      	uxtb	r2, r3
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da84:	0bdb      	lsrs	r3, r3, #15
 800da86:	b2db      	uxtb	r3, r3
 800da88:	f003 0307 	and.w	r3, r3, #7
 800da8c:	b2da      	uxtb	r2, r3
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	691b      	ldr	r3, [r3, #16]
 800da96:	1c5a      	adds	r2, r3, #1
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	7e1b      	ldrb	r3, [r3, #24]
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	f003 0307 	and.w	r3, r3, #7
 800daa6:	3302      	adds	r3, #2
 800daa8:	2201      	movs	r2, #1
 800daaa:	fa02 f303 	lsl.w	r3, r2, r3
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800dab2:	fb02 f203 	mul.w	r2, r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	7a1b      	ldrb	r3, [r3, #8]
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	f003 030f 	and.w	r3, r3, #15
 800dac4:	2201      	movs	r2, #1
 800dac6:	409a      	lsls	r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800dad4:	0a52      	lsrs	r2, r2, #9
 800dad6:	fb02 f203 	mul.w	r2, r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dae4:	659a      	str	r2, [r3, #88]	; 0x58
 800dae6:	e031      	b.n	800db4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daec:	2b01      	cmp	r3, #1
 800daee:	d11d      	bne.n	800db2c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daf4:	041b      	lsls	r3, r3, #16
 800daf6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dafe:	0c1b      	lsrs	r3, r3, #16
 800db00:	431a      	orrs	r2, r3
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	691b      	ldr	r3, [r3, #16]
 800db0a:	3301      	adds	r3, #1
 800db0c:	029a      	lsls	r2, r3, #10
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db20:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	659a      	str	r2, [r3, #88]	; 0x58
 800db2a:	e00f      	b.n	800db4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a58      	ldr	r2, [pc, #352]	; (800dc94 <HAL_SD_GetCardCSD+0x344>)
 800db32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2201      	movs	r2, #1
 800db44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800db48:	2301      	movs	r3, #1
 800db4a:	e09d      	b.n	800dc88 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db50:	0b9b      	lsrs	r3, r3, #14
 800db52:	b2db      	uxtb	r3, r3
 800db54:	f003 0301 	and.w	r3, r3, #1
 800db58:	b2da      	uxtb	r2, r3
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db62:	09db      	lsrs	r3, r3, #7
 800db64:	b2db      	uxtb	r3, r3
 800db66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db6a:	b2da      	uxtb	r2, r3
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db74:	b2db      	uxtb	r3, r3
 800db76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db7a:	b2da      	uxtb	r2, r3
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db84:	0fdb      	lsrs	r3, r3, #31
 800db86:	b2da      	uxtb	r2, r3
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db90:	0f5b      	lsrs	r3, r3, #29
 800db92:	b2db      	uxtb	r3, r3
 800db94:	f003 0303 	and.w	r3, r3, #3
 800db98:	b2da      	uxtb	r2, r3
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dba2:	0e9b      	lsrs	r3, r3, #26
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	f003 0307 	and.w	r3, r3, #7
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbb4:	0d9b      	lsrs	r3, r3, #22
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	f003 030f 	and.w	r3, r3, #15
 800dbbc:	b2da      	uxtb	r2, r3
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbc6:	0d5b      	lsrs	r3, r3, #21
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	f003 0301 	and.w	r3, r3, #1
 800dbce:	b2da      	uxtb	r2, r3
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbe2:	0c1b      	lsrs	r3, r3, #16
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	f003 0301 	and.w	r3, r3, #1
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbf6:	0bdb      	lsrs	r3, r3, #15
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	f003 0301 	and.w	r3, r3, #1
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc0a:	0b9b      	lsrs	r3, r3, #14
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	f003 0301 	and.w	r3, r3, #1
 800dc12:	b2da      	uxtb	r2, r3
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc1e:	0b5b      	lsrs	r3, r3, #13
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	f003 0301 	and.w	r3, r3, #1
 800dc26:	b2da      	uxtb	r2, r3
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc32:	0b1b      	lsrs	r3, r3, #12
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	f003 0301 	and.w	r3, r3, #1
 800dc3a:	b2da      	uxtb	r2, r3
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc46:	0a9b      	lsrs	r3, r3, #10
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	f003 0303 	and.w	r3, r3, #3
 800dc4e:	b2da      	uxtb	r2, r3
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc5a:	0a1b      	lsrs	r3, r3, #8
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	f003 0303 	and.w	r3, r3, #3
 800dc62:	b2da      	uxtb	r2, r3
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc6e:	085b      	lsrs	r3, r3, #1
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc76:	b2da      	uxtb	r2, r3
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	2201      	movs	r2, #1
 800dc82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dc86:	2300      	movs	r3, #0
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	370c      	adds	r7, #12
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr
 800dc94:	1fe00fff 	.word	0x1fe00fff

0800dc98 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b094      	sub	sp, #80	; 0x50
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dca2:	2300      	movs	r3, #0
 800dca4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dca8:	f107 0308 	add.w	r3, r7, #8
 800dcac:	4619      	mov	r1, r3
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 fb64 	bl	800e37c <SD_SendSDStatus>
 800dcb4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d011      	beq.n	800dce0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a4f      	ldr	r2, [pc, #316]	; (800de00 <HAL_SD_GetCardStatus+0x168>)
 800dcc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcca:	431a      	orrs	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dcde:	e070      	b.n	800ddc2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	099b      	lsrs	r3, r3, #6
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	f003 0303 	and.w	r3, r3, #3
 800dcea:	b2da      	uxtb	r2, r3
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	095b      	lsrs	r3, r3, #5
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	f003 0301 	and.w	r3, r3, #1
 800dcfa:	b2da      	uxtb	r2, r3
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	0a1b      	lsrs	r3, r3, #8
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	0e1b      	lsrs	r3, r3, #24
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	4313      	orrs	r3, r2
 800dd14:	b29a      	uxth	r2, r3
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	061a      	lsls	r2, r3, #24
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	021b      	lsls	r3, r3, #8
 800dd22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd26:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	0a1b      	lsrs	r3, r3, #8
 800dd2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dd30:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	0e1b      	lsrs	r3, r3, #24
 800dd36:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	b2da      	uxtb	r2, r3
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	0a1b      	lsrs	r3, r3, #8
 800dd48:	b2da      	uxtb	r2, r3
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	0d1b      	lsrs	r3, r3, #20
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	f003 030f 	and.w	r3, r3, #15
 800dd58:	b2da      	uxtb	r2, r3
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	0c1b      	lsrs	r3, r3, #16
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd68:	b29a      	uxth	r2, r3
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	4313      	orrs	r3, r2
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	0a9b      	lsrs	r3, r3, #10
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd84:	b2da      	uxtb	r2, r3
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	0a1b      	lsrs	r3, r3, #8
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	f003 0303 	and.w	r3, r3, #3
 800dd94:	b2da      	uxtb	r2, r3
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	091b      	lsrs	r3, r3, #4
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	f003 030f 	and.w	r3, r3, #15
 800dda4:	b2da      	uxtb	r2, r3
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	f003 030f 	and.w	r3, r3, #15
 800ddb2:	b2da      	uxtb	r2, r3
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	0e1b      	lsrs	r3, r3, #24
 800ddbc:	b2da      	uxtb	r2, r3
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f003 f9f8 	bl	80111c0 <SDMMC_CmdBlockLength>
 800ddd0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800ddd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00d      	beq.n	800ddf4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4a08      	ldr	r2, [pc, #32]	; (800de00 <HAL_SD_GetCardStatus+0x168>)
 800ddde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dde4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2201      	movs	r2, #1
 800ddea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800ddf4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3750      	adds	r7, #80	; 0x50
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	1fe00fff 	.word	0x1fe00fff

0800de04 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800de4e:	2300      	movs	r3, #0
}
 800de50:	4618      	mov	r0, r3
 800de52:	370c      	adds	r7, #12
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr

0800de5c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800de5c:	b5b0      	push	{r4, r5, r7, lr}
 800de5e:	b08e      	sub	sp, #56	; 0x38
 800de60:	af04      	add	r7, sp, #16
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800de66:	2300      	movs	r3, #0
 800de68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2203      	movs	r2, #3
 800de70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de78:	2b03      	cmp	r3, #3
 800de7a:	d02e      	beq.n	800deda <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de82:	d106      	bne.n	800de92 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	639a      	str	r2, [r3, #56]	; 0x38
 800de90:	e029      	b.n	800dee6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de98:	d10a      	bne.n	800deb0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 fb66 	bl	800e56c <SD_WideBus_Enable>
 800dea0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	431a      	orrs	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	639a      	str	r2, [r3, #56]	; 0x38
 800deae:	e01a      	b.n	800dee6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d10a      	bne.n	800decc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 fba3 	bl	800e602 <SD_WideBus_Disable>
 800debc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dec2:	6a3b      	ldr	r3, [r7, #32]
 800dec4:	431a      	orrs	r2, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	639a      	str	r2, [r3, #56]	; 0x38
 800deca:	e00c      	b.n	800dee6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	639a      	str	r2, [r3, #56]	; 0x38
 800ded8:	e005      	b.n	800dee6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dede:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deea:	2b00      	cmp	r3, #0
 800deec:	d007      	beq.n	800defe <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a2e      	ldr	r2, [pc, #184]	; (800dfac <HAL_SD_ConfigWideBusOperation+0x150>)
 800def4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800def6:	2301      	movs	r3, #1
 800def8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800defc:	e034      	b.n	800df68 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	691b      	ldr	r3, [r3, #16]
 800df12:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	695b      	ldr	r3, [r3, #20]
 800df18:	2b03      	cmp	r3, #3
 800df1a:	d903      	bls.n	800df24 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	695b      	ldr	r3, [r3, #20]
 800df20:	61bb      	str	r3, [r7, #24]
 800df22:	e012      	b.n	800df4a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df2c:	d103      	bne.n	800df36 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	695b      	ldr	r3, [r3, #20]
 800df32:	61bb      	str	r3, [r7, #24]
 800df34:	e009      	b.n	800df4a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df3e:	d102      	bne.n	800df46 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800df40:	2302      	movs	r3, #2
 800df42:	61bb      	str	r3, [r7, #24]
 800df44:	e001      	b.n	800df4a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800df46:	2304      	movs	r3, #4
 800df48:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681d      	ldr	r5, [r3, #0]
 800df4e:	466c      	mov	r4, sp
 800df50:	f107 0314 	add.w	r3, r7, #20
 800df54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800df5c:	f107 0308 	add.w	r3, r7, #8
 800df60:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df62:	4628      	mov	r0, r5
 800df64:	f003 f84e 	bl	8011004 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df70:	4618      	mov	r0, r3
 800df72:	f003 f925 	bl	80111c0 <SDMMC_CmdBlockLength>
 800df76:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df78:	6a3b      	ldr	r3, [r7, #32]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00c      	beq.n	800df98 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4a0a      	ldr	r2, [pc, #40]	; (800dfac <HAL_SD_ConfigWideBusOperation+0x150>)
 800df84:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	431a      	orrs	r2, r3
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800df92:	2301      	movs	r3, #1
 800df94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2201      	movs	r2, #1
 800df9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800dfa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3728      	adds	r7, #40	; 0x28
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bdb0      	pop	{r4, r5, r7, pc}
 800dfac:	1fe00fff 	.word	0x1fe00fff

0800dfb0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b086      	sub	sp, #24
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dfbc:	f107 030c 	add.w	r3, r7, #12
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 faaa 	bl	800e51c <SD_SendStatus>
 800dfc8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d005      	beq.n	800dfdc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	431a      	orrs	r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	0a5b      	lsrs	r3, r3, #9
 800dfe0:	f003 030f 	and.w	r3, r3, #15
 800dfe4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dfe6:	693b      	ldr	r3, [r7, #16]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3718      	adds	r7, #24
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dff0:	b590      	push	{r4, r7, lr}
 800dff2:	b091      	sub	sp, #68	; 0x44
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dff8:	2301      	movs	r3, #1
 800dffa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4618      	mov	r0, r3
 800e002:	f003 f858 	bl	80110b6 <SDMMC_GetPowerState>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d102      	bne.n	800e012 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e00c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e010:	e0a8      	b.n	800e164 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e016:	2b03      	cmp	r3, #3
 800e018:	d02e      	beq.n	800e078 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4618      	mov	r0, r3
 800e020:	f003 faa4 	bl	801156c <SDMMC_CmdSendCID>
 800e024:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d001      	beq.n	800e030 <SD_InitCard+0x40>
    {
      return errorstate;
 800e02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e02e:	e099      	b.n	800e164 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	2100      	movs	r1, #0
 800e036:	4618      	mov	r0, r3
 800e038:	f003 f883 	bl	8011142 <SDMMC_GetResponse>
 800e03c:	4602      	mov	r2, r0
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2104      	movs	r1, #4
 800e048:	4618      	mov	r0, r3
 800e04a:	f003 f87a 	bl	8011142 <SDMMC_GetResponse>
 800e04e:	4602      	mov	r2, r0
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2108      	movs	r1, #8
 800e05a:	4618      	mov	r0, r3
 800e05c:	f003 f871 	bl	8011142 <SDMMC_GetResponse>
 800e060:	4602      	mov	r2, r0
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	210c      	movs	r1, #12
 800e06c:	4618      	mov	r0, r3
 800e06e:	f003 f868 	bl	8011142 <SDMMC_GetResponse>
 800e072:	4602      	mov	r2, r0
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e07c:	2b03      	cmp	r3, #3
 800e07e:	d00d      	beq.n	800e09c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f107 020e 	add.w	r2, r7, #14
 800e088:	4611      	mov	r1, r2
 800e08a:	4618      	mov	r0, r3
 800e08c:	f003 faad 	bl	80115ea <SDMMC_CmdSetRelAdd>
 800e090:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e094:	2b00      	cmp	r3, #0
 800e096:	d001      	beq.n	800e09c <SD_InitCard+0xac>
    {
      return errorstate;
 800e098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e09a:	e063      	b.n	800e164 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0a0:	2b03      	cmp	r3, #3
 800e0a2:	d036      	beq.n	800e112 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e0a4:	89fb      	ldrh	r3, [r7, #14]
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0b4:	041b      	lsls	r3, r3, #16
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	f003 fa76 	bl	80115aa <SDMMC_CmdSendCSD>
 800e0be:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d001      	beq.n	800e0ca <SD_InitCard+0xda>
    {
      return errorstate;
 800e0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0c8:	e04c      	b.n	800e164 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2100      	movs	r1, #0
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f003 f836 	bl	8011142 <SDMMC_GetResponse>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2104      	movs	r1, #4
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f003 f82d 	bl	8011142 <SDMMC_GetResponse>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2108      	movs	r1, #8
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f003 f824 	bl	8011142 <SDMMC_GetResponse>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	210c      	movs	r1, #12
 800e106:	4618      	mov	r0, r3
 800e108:	f003 f81b 	bl	8011142 <SDMMC_GetResponse>
 800e10c:	4602      	mov	r2, r0
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2104      	movs	r1, #4
 800e118:	4618      	mov	r0, r3
 800e11a:	f003 f812 	bl	8011142 <SDMMC_GetResponse>
 800e11e:	4603      	mov	r3, r0
 800e120:	0d1a      	lsrs	r2, r3, #20
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e126:	f107 0310 	add.w	r3, r7, #16
 800e12a:	4619      	mov	r1, r3
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f7ff fc0f 	bl	800d950 <HAL_SD_GetCardCSD>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d002      	beq.n	800e13e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e138:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e13c:	e012      	b.n	800e164 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6819      	ldr	r1, [r3, #0]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e146:	041b      	lsls	r3, r3, #16
 800e148:	f04f 0400 	mov.w	r4, #0
 800e14c:	461a      	mov	r2, r3
 800e14e:	4623      	mov	r3, r4
 800e150:	4608      	mov	r0, r1
 800e152:	f003 f921 	bl	8011398 <SDMMC_CmdSelDesel>
 800e156:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d001      	beq.n	800e162 <SD_InitCard+0x172>
  {
    return errorstate;
 800e15e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e160:	e000      	b.n	800e164 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e162:	2300      	movs	r3, #0
}
 800e164:	4618      	mov	r0, r3
 800e166:	3744      	adds	r7, #68	; 0x44
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd90      	pop	{r4, r7, pc}

0800e16c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b088      	sub	sp, #32
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e174:	2300      	movs	r3, #0
 800e176:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800e178:	2300      	movs	r3, #0
 800e17a:	61fb      	str	r3, [r7, #28]
 800e17c:	2300      	movs	r3, #0
 800e17e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800e180:	f7f6 fa2c 	bl	80045dc <HAL_GetTick>
 800e184:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f003 f928 	bl	80113e0 <SDMMC_CmdGoIdleState>
 800e190:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <SD_PowerON+0x30>
  {
    return errorstate;
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	e0e9      	b.n	800e370 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f003 f93b 	bl	801141c <SDMMC_CmdOperCond>
 800e1a6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d00d      	beq.n	800e1ca <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f003 f911 	bl	80113e0 <SDMMC_CmdGoIdleState>
 800e1be:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d004      	beq.n	800e1d0 <SD_PowerON+0x64>
    {
      return errorstate;
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	e0d2      	b.n	800e370 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1d4:	2b01      	cmp	r3, #1
 800e1d6:	d137      	bne.n	800e248 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2100      	movs	r1, #0
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f003 f93c 	bl	801145c <SDMMC_CmdAppCommand>
 800e1e4:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d02d      	beq.n	800e248 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1f0:	e0be      	b.n	800e370 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f003 f92f 	bl	801145c <SDMMC_CmdAppCommand>
 800e1fe:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d001      	beq.n	800e20a <SD_PowerON+0x9e>
    {
      return errorstate;
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	e0b2      	b.n	800e370 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	495a      	ldr	r1, [pc, #360]	; (800e378 <SD_PowerON+0x20c>)
 800e210:	4618      	mov	r0, r3
 800e212:	f003 f946 	bl	80114a2 <SDMMC_CmdAppOperCommand>
 800e216:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d002      	beq.n	800e224 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e21e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e222:	e0a5      	b.n	800e370 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	2100      	movs	r1, #0
 800e22a:	4618      	mov	r0, r3
 800e22c:	f002 ff89 	bl	8011142 <SDMMC_GetResponse>
 800e230:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	0fdb      	lsrs	r3, r3, #31
 800e236:	2b01      	cmp	r3, #1
 800e238:	d101      	bne.n	800e23e <SD_PowerON+0xd2>
 800e23a:	2301      	movs	r3, #1
 800e23c:	e000      	b.n	800e240 <SD_PowerON+0xd4>
 800e23e:	2300      	movs	r3, #0
 800e240:	61bb      	str	r3, [r7, #24]

    count++;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	3301      	adds	r3, #1
 800e246:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e24e:	4293      	cmp	r3, r2
 800e250:	d802      	bhi.n	800e258 <SD_PowerON+0xec>
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d0cc      	beq.n	800e1f2 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e25e:	4293      	cmp	r3, r2
 800e260:	d902      	bls.n	800e268 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e262:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e266:	e083      	b.n	800e370 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d07d      	beq.n	800e36e <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2201      	movs	r2, #1
 800e276:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	699b      	ldr	r3, [r3, #24]
 800e27c:	2b02      	cmp	r3, #2
 800e27e:	d176      	bne.n	800e36e <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e286:	2b00      	cmp	r3, #0
 800e288:	d071      	beq.n	800e36e <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e290:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f042 0208 	orr.w	r2, r2, #8
 800e2a0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f003 fa06 	bl	80116b8 <SDMMC_CmdVoltageSwitch>
 800e2ac:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d00c      	beq.n	800e2ce <SD_PowerON+0x162>
        {
          return errorstate;
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	e05b      	b.n	800e370 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e2b8:	f7f6 f990 	bl	80045dc <HAL_GetTick>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	1ad3      	subs	r3, r2, r3
 800e2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c6:	d102      	bne.n	800e2ce <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800e2c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2cc:	e050      	b.n	800e370 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e2d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e2dc:	d1ec      	bne.n	800e2b8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800e2e6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e2f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2f6:	d002      	beq.n	800e2fe <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800e2f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e2fc:	e038      	b.n	800e370 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800e2fe:	2001      	movs	r0, #1
 800e300:	f7ff fb1a 	bl	800d938 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	681a      	ldr	r2, [r3, #0]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f042 0204 	orr.w	r2, r2, #4
 800e312:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e314:	e00a      	b.n	800e32c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e316:	f7f6 f961 	bl	80045dc <HAL_GetTick>
 800e31a:	4602      	mov	r2, r0
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	1ad3      	subs	r3, r2, r3
 800e320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e324:	d102      	bne.n	800e32c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800e326:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e32a:	e021      	b.n	800e370 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e336:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e33a:	d1ec      	bne.n	800e316 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e344:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e34c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e354:	d102      	bne.n	800e35c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e35a:	e009      	b.n	800e370 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2213      	movs	r2, #19
 800e362:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f04f 32ff 	mov.w	r2, #4294967295
 800e36c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e36e:	2300      	movs	r3, #0
}
 800e370:	4618      	mov	r0, r3
 800e372:	3720      	adds	r7, #32
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	c1100000 	.word	0xc1100000

0800e37c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b08c      	sub	sp, #48	; 0x30
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e386:	f7f6 f929 	bl	80045dc <HAL_GetTick>
 800e38a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	2100      	movs	r1, #0
 800e396:	4618      	mov	r0, r3
 800e398:	f002 fed3 	bl	8011142 <SDMMC_GetResponse>
 800e39c:	4603      	mov	r3, r0
 800e39e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3a6:	d102      	bne.n	800e3ae <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e3a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3ac:	e0b0      	b.n	800e510 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2140      	movs	r1, #64	; 0x40
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f002 ff03 	bl	80111c0 <SDMMC_CmdBlockLength>
 800e3ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3bc:	6a3b      	ldr	r3, [r7, #32]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d005      	beq.n	800e3ce <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e3ca:	6a3b      	ldr	r3, [r7, #32]
 800e3cc:	e0a0      	b.n	800e510 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3d6:	041b      	lsls	r3, r3, #16
 800e3d8:	4619      	mov	r1, r3
 800e3da:	4610      	mov	r0, r2
 800e3dc:	f003 f83e 	bl	801145c <SDMMC_CmdAppCommand>
 800e3e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3e2:	6a3b      	ldr	r3, [r7, #32]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d005      	beq.n	800e3f4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e3f0:	6a3b      	ldr	r3, [r7, #32]
 800e3f2:	e08d      	b.n	800e510 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3f8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e3fa:	2340      	movs	r3, #64	; 0x40
 800e3fc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e3fe:	2360      	movs	r3, #96	; 0x60
 800e400:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e402:	2302      	movs	r3, #2
 800e404:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e406:	2300      	movs	r3, #0
 800e408:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e40a:	2301      	movs	r3, #1
 800e40c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f107 0208 	add.w	r2, r7, #8
 800e416:	4611      	mov	r1, r2
 800e418:	4618      	mov	r0, r3
 800e41a:	f002 fea5 	bl	8011168 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4618      	mov	r0, r3
 800e424:	f003 f926 	bl	8011674 <SDMMC_CmdStatusRegister>
 800e428:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e42a:	6a3b      	ldr	r3, [r7, #32]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d02b      	beq.n	800e488 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e438:	6a3b      	ldr	r3, [r7, #32]
 800e43a:	e069      	b.n	800e510 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e446:	2b00      	cmp	r3, #0
 800e448:	d013      	beq.n	800e472 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800e44a:	2300      	movs	r3, #0
 800e44c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e44e:	e00d      	b.n	800e46c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4618      	mov	r0, r3
 800e456:	f002 fdff 	bl	8011058 <SDMMC_ReadFIFO>
 800e45a:	4602      	mov	r2, r0
 800e45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45e:	601a      	str	r2, [r3, #0]
        pData++;
 800e460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e462:	3304      	adds	r3, #4
 800e464:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800e466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e468:	3301      	adds	r3, #1
 800e46a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46e:	2b07      	cmp	r3, #7
 800e470:	d9ee      	bls.n	800e450 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e472:	f7f6 f8b3 	bl	80045dc <HAL_GetTick>
 800e476:	4602      	mov	r2, r0
 800e478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47a:	1ad3      	subs	r3, r2, r3
 800e47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e480:	d102      	bne.n	800e488 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e482:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e486:	e043      	b.n	800e510 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e48e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e492:	2b00      	cmp	r3, #0
 800e494:	d0d2      	beq.n	800e43c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e49c:	f003 0308 	and.w	r3, r3, #8
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d001      	beq.n	800e4a8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e4a4:	2308      	movs	r3, #8
 800e4a6:	e033      	b.n	800e510 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ae:	f003 0302 	and.w	r3, r3, #2
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d001      	beq.n	800e4ba <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e4b6:	2302      	movs	r3, #2
 800e4b8:	e02a      	b.n	800e510 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c0:	f003 0320 	and.w	r3, r3, #32
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d017      	beq.n	800e4f8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e4c8:	2320      	movs	r3, #32
 800e4ca:	e021      	b.n	800e510 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f002 fdc1 	bl	8011058 <SDMMC_ReadFIFO>
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4da:	601a      	str	r2, [r3, #0]
    pData++;
 800e4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4de:	3304      	adds	r3, #4
 800e4e0:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e4e2:	f7f6 f87b 	bl	80045dc <HAL_GetTick>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ea:	1ad3      	subs	r3, r2, r3
 800e4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4f0:	d102      	bne.n	800e4f8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e4f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4f6:	e00b      	b.n	800e510 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e502:	2b00      	cmp	r3, #0
 800e504:	d1e2      	bne.n	800e4cc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a03      	ldr	r2, [pc, #12]	; (800e518 <SD_SendSDStatus+0x19c>)
 800e50c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e50e:	2300      	movs	r3, #0
}
 800e510:	4618      	mov	r0, r3
 800e512:	3730      	adds	r7, #48	; 0x30
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	18000f3a 	.word	0x18000f3a

0800e51c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d102      	bne.n	800e532 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e52c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e530:	e018      	b.n	800e564 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e53a:	041b      	lsls	r3, r3, #16
 800e53c:	4619      	mov	r1, r3
 800e53e:	4610      	mov	r0, r2
 800e540:	f003 f875 	bl	801162e <SDMMC_CmdSendStatus>
 800e544:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	e009      	b.n	800e564 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	2100      	movs	r1, #0
 800e556:	4618      	mov	r0, r3
 800e558:	f002 fdf3 	bl	8011142 <SDMMC_GetResponse>
 800e55c:	4602      	mov	r2, r0
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e562:	2300      	movs	r3, #0
}
 800e564:	4618      	mov	r0, r3
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b086      	sub	sp, #24
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e574:	2300      	movs	r3, #0
 800e576:	60fb      	str	r3, [r7, #12]
 800e578:	2300      	movs	r3, #0
 800e57a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	2100      	movs	r1, #0
 800e582:	4618      	mov	r0, r3
 800e584:	f002 fddd 	bl	8011142 <SDMMC_GetResponse>
 800e588:	4603      	mov	r3, r0
 800e58a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e58e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e592:	d102      	bne.n	800e59a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e594:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e598:	e02f      	b.n	800e5fa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e59a:	f107 030c 	add.w	r3, r7, #12
 800e59e:	4619      	mov	r1, r3
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 f879 	bl	800e698 <SD_FindSCR>
 800e5a6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d001      	beq.n	800e5b2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	e023      	b.n	800e5fa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d01c      	beq.n	800e5f6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5c4:	041b      	lsls	r3, r3, #16
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	4610      	mov	r0, r2
 800e5ca:	f002 ff47 	bl	801145c <SDMMC_CmdAppCommand>
 800e5ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d001      	beq.n	800e5da <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	e00f      	b.n	800e5fa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2102      	movs	r1, #2
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f002 ff7e 	bl	80114e2 <SDMMC_CmdBusWidth>
 800e5e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d001      	beq.n	800e5f2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	e003      	b.n	800e5fa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	e001      	b.n	800e5fa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3718      	adds	r7, #24
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}

0800e602 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e602:	b580      	push	{r7, lr}
 800e604:	b086      	sub	sp, #24
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e60a:	2300      	movs	r3, #0
 800e60c:	60fb      	str	r3, [r7, #12]
 800e60e:	2300      	movs	r3, #0
 800e610:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2100      	movs	r1, #0
 800e618:	4618      	mov	r0, r3
 800e61a:	f002 fd92 	bl	8011142 <SDMMC_GetResponse>
 800e61e:	4603      	mov	r3, r0
 800e620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e628:	d102      	bne.n	800e630 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e62a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e62e:	e02f      	b.n	800e690 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e630:	f107 030c 	add.w	r3, r7, #12
 800e634:	4619      	mov	r1, r3
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f000 f82e 	bl	800e698 <SD_FindSCR>
 800e63c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d001      	beq.n	800e648 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	e023      	b.n	800e690 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d01c      	beq.n	800e68c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e65a:	041b      	lsls	r3, r3, #16
 800e65c:	4619      	mov	r1, r3
 800e65e:	4610      	mov	r0, r2
 800e660:	f002 fefc 	bl	801145c <SDMMC_CmdAppCommand>
 800e664:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d001      	beq.n	800e670 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	e00f      	b.n	800e690 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	2100      	movs	r1, #0
 800e676:	4618      	mov	r0, r3
 800e678:	f002 ff33 	bl	80114e2 <SDMMC_CmdBusWidth>
 800e67c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d001      	beq.n	800e688 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	e003      	b.n	800e690 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e688:	2300      	movs	r3, #0
 800e68a:	e001      	b.n	800e690 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e68c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e690:	4618      	mov	r0, r3
 800e692:	3718      	adds	r7, #24
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b08e      	sub	sp, #56	; 0x38
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e6a2:	f7f5 ff9b 	bl	80045dc <HAL_GetTick>
 800e6a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	60bb      	str	r3, [r7, #8]
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2108      	movs	r1, #8
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f002 fd7e 	bl	80111c0 <SDMMC_CmdBlockLength>
 800e6c4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d001      	beq.n	800e6d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ce:	e0ad      	b.n	800e82c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6d8:	041b      	lsls	r3, r3, #16
 800e6da:	4619      	mov	r1, r3
 800e6dc:	4610      	mov	r0, r2
 800e6de:	f002 febd 	bl	801145c <SDMMC_CmdAppCommand>
 800e6e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d001      	beq.n	800e6ee <SD_FindSCR+0x56>
  {
    return errorstate;
 800e6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ec:	e09e      	b.n	800e82c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e6f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e6f4:	2308      	movs	r3, #8
 800e6f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e6f8:	2330      	movs	r3, #48	; 0x30
 800e6fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e6fc:	2302      	movs	r3, #2
 800e6fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e700:	2300      	movs	r3, #0
 800e702:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e704:	2301      	movs	r3, #1
 800e706:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f107 0210 	add.w	r2, r7, #16
 800e710:	4611      	mov	r1, r2
 800e712:	4618      	mov	r0, r3
 800e714:	f002 fd28 	bl	8011168 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4618      	mov	r0, r3
 800e71e:	f002 ff03 	bl	8011528 <SDMMC_CmdSendSCR>
 800e722:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e726:	2b00      	cmp	r3, #0
 800e728:	d027      	beq.n	800e77a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72c:	e07e      	b.n	800e82c <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d113      	bne.n	800e764 <SD_FindSCR+0xcc>
 800e73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d110      	bne.n	800e764 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	4618      	mov	r0, r3
 800e748:	f002 fc86 	bl	8011058 <SDMMC_ReadFIFO>
 800e74c:	4603      	mov	r3, r0
 800e74e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4618      	mov	r0, r3
 800e756:	f002 fc7f 	bl	8011058 <SDMMC_ReadFIFO>
 800e75a:	4603      	mov	r3, r0
 800e75c:	60fb      	str	r3, [r7, #12]
      index++;
 800e75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e760:	3301      	adds	r3, #1
 800e762:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e764:	f7f5 ff3a 	bl	80045dc <HAL_GetTick>
 800e768:	4602      	mov	r2, r0
 800e76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76c:	1ad3      	subs	r3, r2, r3
 800e76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e772:	d102      	bne.n	800e77a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e774:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e778:	e058      	b.n	800e82c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e780:	f240 532a 	movw	r3, #1322	; 0x52a
 800e784:	4013      	ands	r3, r2
 800e786:	2b00      	cmp	r3, #0
 800e788:	d0d1      	beq.n	800e72e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e790:	f003 0308 	and.w	r3, r3, #8
 800e794:	2b00      	cmp	r3, #0
 800e796:	d005      	beq.n	800e7a4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2208      	movs	r2, #8
 800e79e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e7a0:	2308      	movs	r3, #8
 800e7a2:	e043      	b.n	800e82c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7aa:	f003 0302 	and.w	r3, r3, #2
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d005      	beq.n	800e7be <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2202      	movs	r2, #2
 800e7b8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e7ba:	2302      	movs	r3, #2
 800e7bc:	e036      	b.n	800e82c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7c4:	f003 0320 	and.w	r3, r3, #32
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d005      	beq.n	800e7d8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	2220      	movs	r2, #32
 800e7d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e7d4:	2320      	movs	r3, #32
 800e7d6:	e029      	b.n	800e82c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4a15      	ldr	r2, [pc, #84]	; (800e834 <SD_FindSCR+0x19c>)
 800e7de:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	061a      	lsls	r2, r3, #24
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	021b      	lsls	r3, r3, #8
 800e7e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7ec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	0a1b      	lsrs	r3, r3, #8
 800e7f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e7f6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	0e1b      	lsrs	r3, r3, #24
 800e7fc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e800:	601a      	str	r2, [r3, #0]
    scr++;
 800e802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e804:	3304      	adds	r3, #4
 800e806:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	061a      	lsls	r2, r3, #24
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	021b      	lsls	r3, r3, #8
 800e810:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e814:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	0a1b      	lsrs	r3, r3, #8
 800e81a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e81e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	0e1b      	lsrs	r3, r3, #24
 800e824:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e828:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e82a:	2300      	movs	r3, #0
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3738      	adds	r7, #56	; 0x38
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	18000f3a 	.word	0x18000f3a

0800e838 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b086      	sub	sp, #24
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e844:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e84a:	2b1f      	cmp	r3, #31
 800e84c:	d936      	bls.n	800e8bc <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e84e:	2300      	movs	r3, #0
 800e850:	617b      	str	r3, [r7, #20]
 800e852:	e027      	b.n	800e8a4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4618      	mov	r0, r3
 800e85a:	f002 fbfd 	bl	8011058 <SDMMC_ReadFIFO>
 800e85e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	b2da      	uxtb	r2, r3
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	3301      	adds	r3, #1
 800e86c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	0a1b      	lsrs	r3, r3, #8
 800e872:	b2da      	uxtb	r2, r3
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	3301      	adds	r3, #1
 800e87c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	0c1b      	lsrs	r3, r3, #16
 800e882:	b2da      	uxtb	r2, r3
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	3301      	adds	r3, #1
 800e88c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	0e1b      	lsrs	r3, r3, #24
 800e892:	b2da      	uxtb	r2, r3
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	3301      	adds	r3, #1
 800e89c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	617b      	str	r3, [r7, #20]
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	2b07      	cmp	r3, #7
 800e8a8:	d9d4      	bls.n	800e854 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	693a      	ldr	r2, [r7, #16]
 800e8ae:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8b4:	f1a3 0220 	sub.w	r2, r3, #32
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e8bc:	bf00      	nop
 800e8be:	3718      	adds	r7, #24
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b086      	sub	sp, #24
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6a1b      	ldr	r3, [r3, #32]
 800e8d0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d6:	2b1f      	cmp	r3, #31
 800e8d8:	d93a      	bls.n	800e950 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e8da:	2300      	movs	r3, #0
 800e8dc:	617b      	str	r3, [r7, #20]
 800e8de:	e02b      	b.n	800e938 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	021a      	lsls	r2, r3, #8
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	4313      	orrs	r3, r2
 800e8f6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	041a      	lsls	r2, r3, #16
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	4313      	orrs	r3, r2
 800e908:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	3301      	adds	r3, #1
 800e90e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	061a      	lsls	r2, r3, #24
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	4313      	orrs	r3, r2
 800e91a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	3301      	adds	r3, #1
 800e920:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f107 020c 	add.w	r2, r7, #12
 800e92a:	4611      	mov	r1, r2
 800e92c:	4618      	mov	r0, r3
 800e92e:	f002 fba0 	bl	8011072 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	3301      	adds	r3, #1
 800e936:	617b      	str	r3, [r7, #20]
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	2b07      	cmp	r3, #7
 800e93c:	d9d0      	bls.n	800e8e0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	693a      	ldr	r2, [r7, #16]
 800e942:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e948:	f1a3 0220 	sub.w	r2, r3, #32
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e950:	bf00      	nop
 800e952:	3718      	adds	r7, #24
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e960:	bf00      	nop
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b083      	sub	sp, #12
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e974:	bf00      	nop
 800e976:	370c      	adds	r7, #12
 800e978:	46bd      	mov	sp, r7
 800e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97e:	4770      	bx	lr

0800e980 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e980:	b480      	push	{r7}
 800e982:	b083      	sub	sp, #12
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e988:	bf00      	nop
 800e98a:	370c      	adds	r7, #12
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr

0800e994 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e994:	b480      	push	{r7}
 800e996:	b083      	sub	sp, #12
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e99c:	bf00      	nop
 800e99e:	370c      	adds	r7, #12
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr

0800e9a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d101      	bne.n	800e9be <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	e0e2      	b.n	800eb84 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4a70      	ldr	r2, [pc, #448]	; (800eb8c <HAL_SPI_Init+0x1e4>)
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d00f      	beq.n	800e9ee <HAL_SPI_Init+0x46>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4a6f      	ldr	r2, [pc, #444]	; (800eb90 <HAL_SPI_Init+0x1e8>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d00a      	beq.n	800e9ee <HAL_SPI_Init+0x46>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4a6d      	ldr	r2, [pc, #436]	; (800eb94 <HAL_SPI_Init+0x1ec>)
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d005      	beq.n	800e9ee <HAL_SPI_Init+0x46>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	2b0f      	cmp	r3, #15
 800e9e8:	d901      	bls.n	800e9ee <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e0ca      	b.n	800eb84 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f001 f870 	bl	800fad4 <SPI_GetPacketSize>
 800e9f4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4a64      	ldr	r2, [pc, #400]	; (800eb8c <HAL_SPI_Init+0x1e4>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d00c      	beq.n	800ea1a <HAL_SPI_Init+0x72>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4a62      	ldr	r2, [pc, #392]	; (800eb90 <HAL_SPI_Init+0x1e8>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d007      	beq.n	800ea1a <HAL_SPI_Init+0x72>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4a61      	ldr	r2, [pc, #388]	; (800eb94 <HAL_SPI_Init+0x1ec>)
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d002      	beq.n	800ea1a <HAL_SPI_Init+0x72>
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	2b08      	cmp	r3, #8
 800ea18:	d811      	bhi.n	800ea3e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ea1e:	4a5b      	ldr	r2, [pc, #364]	; (800eb8c <HAL_SPI_Init+0x1e4>)
 800ea20:	4293      	cmp	r3, r2
 800ea22:	d009      	beq.n	800ea38 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a59      	ldr	r2, [pc, #356]	; (800eb90 <HAL_SPI_Init+0x1e8>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d004      	beq.n	800ea38 <HAL_SPI_Init+0x90>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4a58      	ldr	r2, [pc, #352]	; (800eb94 <HAL_SPI_Init+0x1ec>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d104      	bne.n	800ea42 <HAL_SPI_Init+0x9a>
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	2b10      	cmp	r3, #16
 800ea3c:	d901      	bls.n	800ea42 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	e0a0      	b.n	800eb84 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d106      	bne.n	800ea5c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2200      	movs	r2, #0
 800ea52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f7f5 fa92 	bl	8003f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2202      	movs	r2, #2
 800ea60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f022 0201 	bic.w	r2, r2, #1
 800ea72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	699b      	ldr	r3, [r3, #24]
 800ea78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ea7c:	d110      	bne.n	800eaa0 <HAL_SPI_Init+0xf8>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea86:	d10b      	bne.n	800eaa0 <HAL_SPI_Init+0xf8>
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d107      	bne.n	800eaa0 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ea9e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	69da      	ldr	r2, [r3, #28]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaa8:	431a      	orrs	r2, r3
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	431a      	orrs	r2, r3
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eab2:	ea42 0103 	orr.w	r1, r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	68da      	ldr	r2, [r3, #12]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	430a      	orrs	r2, r1
 800eac0:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaca:	431a      	orrs	r2, r3
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead0:	431a      	orrs	r2, r3
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	699b      	ldr	r3, [r3, #24]
 800ead6:	431a      	orrs	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	691b      	ldr	r3, [r3, #16]
 800eadc:	431a      	orrs	r2, r3
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	695b      	ldr	r3, [r3, #20]
 800eae2:	431a      	orrs	r2, r3
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6a1b      	ldr	r3, [r3, #32]
 800eae8:	431a      	orrs	r2, r3
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	431a      	orrs	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eaf4:	431a      	orrs	r2, r3
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	689b      	ldr	r3, [r3, #8]
 800eafa:	431a      	orrs	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb00:	ea42 0103 	orr.w	r1, r2, r3
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	430a      	orrs	r2, r1
 800eb0e:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d113      	bne.n	800eb40 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	689b      	ldr	r3, [r3, #8]
 800eb1e:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb2a:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	689b      	ldr	r3, [r3, #8]
 800eb32:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eb3e:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f022 0201 	bic.w	r2, r2, #1
 800eb4e:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d00a      	beq.n	800eb72 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	68db      	ldr	r3, [r3, #12]
 800eb62:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	430a      	orrs	r2, r1
 800eb70:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2200      	movs	r2, #0
 800eb76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800eb82:	2300      	movs	r3, #0
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3710      	adds	r7, #16
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	40013000 	.word	0x40013000
 800eb90:	40003800 	.word	0x40003800
 800eb94:	40003c00 	.word	0x40003c00

0800eb98 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b08a      	sub	sp, #40	; 0x28
 800eb9c:	af02      	add	r7, sp, #8
 800eb9e:	60f8      	str	r0, [r7, #12]
 800eba0:	60b9      	str	r1, [r7, #8]
 800eba2:	603b      	str	r3, [r7, #0]
 800eba4:	4613      	mov	r3, r2
 800eba6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	3320      	adds	r3, #32
 800ebae:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ebba:	2b01      	cmp	r3, #1
 800ebbc:	d101      	bne.n	800ebc2 <HAL_SPI_Transmit+0x2a>
 800ebbe:	2302      	movs	r3, #2
 800ebc0:	e1d7      	b.n	800ef72 <HAL_SPI_Transmit+0x3da>
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2201      	movs	r2, #1
 800ebc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ebca:	f7f5 fd07 	bl	80045dc <HAL_GetTick>
 800ebce:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d007      	beq.n	800ebec <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ebdc:	2302      	movs	r3, #2
 800ebde:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ebe8:	7efb      	ldrb	r3, [r7, #27]
 800ebea:	e1c2      	b.n	800ef72 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d002      	beq.n	800ebf8 <HAL_SPI_Transmit+0x60>
 800ebf2:	88fb      	ldrh	r3, [r7, #6]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d107      	bne.n	800ec08 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ec04:	7efb      	ldrb	r3, [r7, #27]
 800ec06:	e1b4      	b.n	800ef72 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2203      	movs	r2, #3
 800ec0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2200      	movs	r2, #0
 800ec14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	68ba      	ldr	r2, [r7, #8]
 800ec1c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	88fa      	ldrh	r2, [r7, #6]
 800ec22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	88fa      	ldrh	r2, [r7, #6]
 800ec2a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2200      	movs	r2, #0
 800ec32:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2200      	movs	r2, #0
 800ec38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2200      	movs	r2, #0
 800ec48:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	689b      	ldr	r3, [r3, #8]
 800ec54:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ec58:	d107      	bne.n	800ec6a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec68:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	685a      	ldr	r2, [r3, #4]
 800ec70:	4b96      	ldr	r3, [pc, #600]	; (800eecc <HAL_SPI_Transmit+0x334>)
 800ec72:	4013      	ands	r3, r2
 800ec74:	88f9      	ldrh	r1, [r7, #6]
 800ec76:	68fa      	ldr	r2, [r7, #12]
 800ec78:	6812      	ldr	r2, [r2, #0]
 800ec7a:	430b      	orrs	r3, r1
 800ec7c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f042 0201 	orr.w	r2, r2, #1
 800ec8c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec96:	d107      	bne.n	800eca8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eca6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	2b0f      	cmp	r3, #15
 800ecae:	d947      	bls.n	800ed40 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ecb0:	e03f      	b.n	800ed32 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	695b      	ldr	r3, [r3, #20]
 800ecb8:	f003 0302 	and.w	r3, r3, #2
 800ecbc:	2b02      	cmp	r3, #2
 800ecbe:	d114      	bne.n	800ecea <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	6812      	ldr	r2, [r2, #0]
 800ecca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecd0:	1d1a      	adds	r2, r3, #4
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecdc:	b29b      	uxth	r3, r3
 800ecde:	3b01      	subs	r3, #1
 800ece0:	b29a      	uxth	r2, r3
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ece8:	e023      	b.n	800ed32 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ecea:	f7f5 fc77 	bl	80045dc <HAL_GetTick>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	1ad3      	subs	r3, r2, r3
 800ecf4:	683a      	ldr	r2, [r7, #0]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d803      	bhi.n	800ed02 <HAL_SPI_Transmit+0x16a>
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed00:	d102      	bne.n	800ed08 <HAL_SPI_Transmit+0x170>
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d114      	bne.n	800ed32 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f000 fe15 	bl	800f938 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2200      	movs	r2, #0
 800ed12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2201      	movs	r2, #1
 800ed2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	e11f      	b.n	800ef72 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d1b9      	bne.n	800ecb2 <HAL_SPI_Transmit+0x11a>
 800ed3e:	e0f2      	b.n	800ef26 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	68db      	ldr	r3, [r3, #12]
 800ed44:	2b07      	cmp	r3, #7
 800ed46:	f240 80e7 	bls.w	800ef18 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ed4a:	e05d      	b.n	800ee08 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	695b      	ldr	r3, [r3, #20]
 800ed52:	f003 0302 	and.w	r3, r3, #2
 800ed56:	2b02      	cmp	r3, #2
 800ed58:	d132      	bne.n	800edc0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d918      	bls.n	800ed98 <HAL_SPI_Transmit+0x200>
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d014      	beq.n	800ed98 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	6812      	ldr	r2, [r2, #0]
 800ed78:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed7e:	1d1a      	adds	r2, r3, #4
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	3b02      	subs	r3, #2
 800ed8e:	b29a      	uxth	r2, r3
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed96:	e037      	b.n	800ee08 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed9c:	881a      	ldrh	r2, [r3, #0]
 800ed9e:	69fb      	ldr	r3, [r7, #28]
 800eda0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eda6:	1c9a      	adds	r2, r3, #2
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	3b01      	subs	r3, #1
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800edbe:	e023      	b.n	800ee08 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800edc0:	f7f5 fc0c 	bl	80045dc <HAL_GetTick>
 800edc4:	4602      	mov	r2, r0
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	1ad3      	subs	r3, r2, r3
 800edca:	683a      	ldr	r2, [r7, #0]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d803      	bhi.n	800edd8 <HAL_SPI_Transmit+0x240>
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edd6:	d102      	bne.n	800edde <HAL_SPI_Transmit+0x246>
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d114      	bne.n	800ee08 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800edde:	68f8      	ldr	r0, [r7, #12]
 800ede0:	f000 fdaa 	bl	800f938 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	2200      	movs	r2, #0
 800ede8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2201      	movs	r2, #1
 800ee00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ee04:	2301      	movs	r3, #1
 800ee06:	e0b4      	b.n	800ef72 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d19b      	bne.n	800ed4c <HAL_SPI_Transmit+0x1b4>
 800ee14:	e087      	b.n	800ef26 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	695b      	ldr	r3, [r3, #20]
 800ee1c:	f003 0302 	and.w	r3, r3, #2
 800ee20:	2b02      	cmp	r3, #2
 800ee22:	d155      	bne.n	800eed0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	2b03      	cmp	r3, #3
 800ee2e:	d918      	bls.n	800ee62 <HAL_SPI_Transmit+0x2ca>
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee34:	2b40      	cmp	r3, #64	; 0x40
 800ee36:	d914      	bls.n	800ee62 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	6812      	ldr	r2, [r2, #0]
 800ee42:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee48:	1d1a      	adds	r2, r3, #4
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	3b04      	subs	r3, #4
 800ee58:	b29a      	uxth	r2, r3
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee60:	e05a      	b.n	800ef18 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee68:	b29b      	uxth	r3, r3
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d917      	bls.n	800ee9e <HAL_SPI_Transmit+0x306>
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d013      	beq.n	800ee9e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee7a:	881a      	ldrh	r2, [r3, #0]
 800ee7c:	69fb      	ldr	r3, [r7, #28]
 800ee7e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee84:	1c9a      	adds	r2, r3, #2
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	3b02      	subs	r3, #2
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee9c:	e03c      	b.n	800ef18 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	3320      	adds	r3, #32
 800eea8:	7812      	ldrb	r2, [r2, #0]
 800eeaa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eeb0:	1c5a      	adds	r2, r3, #1
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	3b01      	subs	r3, #1
 800eec0:	b29a      	uxth	r2, r3
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eec8:	e026      	b.n	800ef18 <HAL_SPI_Transmit+0x380>
 800eeca:	bf00      	nop
 800eecc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eed0:	f7f5 fb84 	bl	80045dc <HAL_GetTick>
 800eed4:	4602      	mov	r2, r0
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	1ad3      	subs	r3, r2, r3
 800eeda:	683a      	ldr	r2, [r7, #0]
 800eedc:	429a      	cmp	r2, r3
 800eede:	d803      	bhi.n	800eee8 <HAL_SPI_Transmit+0x350>
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eee6:	d102      	bne.n	800eeee <HAL_SPI_Transmit+0x356>
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d114      	bne.n	800ef18 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f000 fd22 	bl	800f938 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2200      	movs	r2, #0
 800eef8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ef14:	2301      	movs	r3, #1
 800ef16:	e02c      	b.n	800ef72 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	f47f af78 	bne.w	800ee16 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	2108      	movs	r1, #8
 800ef30:	68f8      	ldr	r0, [r7, #12]
 800ef32:	f000 fda1 	bl	800fa78 <SPI_WaitOnFlagUntilTimeout>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d007      	beq.n	800ef4c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef42:	f043 0220 	orr.w	r2, r3, #32
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ef4c:	68f8      	ldr	r0, [r7, #12]
 800ef4e:	f000 fcf3 	bl	800f938 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2200      	movs	r2, #0
 800ef56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2201      	movs	r2, #1
 800ef5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d001      	beq.n	800ef70 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	e000      	b.n	800ef72 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800ef70:	7efb      	ldrb	r3, [r7, #27]
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3720      	adds	r7, #32
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop

0800ef7c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b08a      	sub	sp, #40	; 0x28
 800ef80:	af02      	add	r7, sp, #8
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	60b9      	str	r1, [r7, #8]
 800ef86:	603b      	str	r3, [r7, #0]
 800ef88:	4613      	mov	r3, r2
 800ef8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	3330      	adds	r3, #48	; 0x30
 800ef96:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800efa0:	d112      	bne.n	800efc8 <HAL_SPI_Receive+0x4c>
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	689b      	ldr	r3, [r3, #8]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10e      	bne.n	800efc8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2204      	movs	r2, #4
 800efae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800efb2:	88fa      	ldrh	r2, [r7, #6]
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	9300      	str	r3, [sp, #0]
 800efb8:	4613      	mov	r3, r2
 800efba:	68ba      	ldr	r2, [r7, #8]
 800efbc:	68b9      	ldr	r1, [r7, #8]
 800efbe:	68f8      	ldr	r0, [r7, #12]
 800efc0:	f000 f9ce 	bl	800f360 <HAL_SPI_TransmitReceive>
 800efc4:	4603      	mov	r3, r0
 800efc6:	e1c7      	b.n	800f358 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d101      	bne.n	800efd6 <HAL_SPI_Receive+0x5a>
 800efd2:	2302      	movs	r3, #2
 800efd4:	e1c0      	b.n	800f358 <HAL_SPI_Receive+0x3dc>
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2201      	movs	r2, #1
 800efda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800efde:	f7f5 fafd 	bl	80045dc <HAL_GetTick>
 800efe2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800efea:	b2db      	uxtb	r3, r3
 800efec:	2b01      	cmp	r3, #1
 800efee:	d007      	beq.n	800f000 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800eff0:	2302      	movs	r3, #2
 800eff2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	2200      	movs	r2, #0
 800eff8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800effc:	7ffb      	ldrb	r3, [r7, #31]
 800effe:	e1ab      	b.n	800f358 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d002      	beq.n	800f00c <HAL_SPI_Receive+0x90>
 800f006:	88fb      	ldrh	r3, [r7, #6]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d107      	bne.n	800f01c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800f00c:	2301      	movs	r3, #1
 800f00e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2200      	movs	r2, #0
 800f014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f018:	7ffb      	ldrb	r3, [r7, #31]
 800f01a:	e19d      	b.n	800f358 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2204      	movs	r2, #4
 800f020:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2200      	movs	r2, #0
 800f028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	68ba      	ldr	r2, [r7, #8]
 800f030:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	88fa      	ldrh	r2, [r7, #6]
 800f036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	88fa      	ldrh	r2, [r7, #6]
 800f03e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2200      	movs	r2, #0
 800f046:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2200      	movs	r2, #0
 800f04c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2200      	movs	r2, #0
 800f054:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	2200      	movs	r2, #0
 800f05c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2200      	movs	r2, #0
 800f062:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	689b      	ldr	r3, [r3, #8]
 800f068:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f06c:	d107      	bne.n	800f07e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f07c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	685a      	ldr	r2, [r3, #4]
 800f084:	4b94      	ldr	r3, [pc, #592]	; (800f2d8 <HAL_SPI_Receive+0x35c>)
 800f086:	4013      	ands	r3, r2
 800f088:	88f9      	ldrh	r1, [r7, #6]
 800f08a:	68fa      	ldr	r2, [r7, #12]
 800f08c:	6812      	ldr	r2, [r2, #0]
 800f08e:	430b      	orrs	r3, r1
 800f090:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	f042 0201 	orr.w	r2, r2, #1
 800f0a0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f0aa:	d107      	bne.n	800f0bc <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	681a      	ldr	r2, [r3, #0]
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f0ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	2b0f      	cmp	r3, #15
 800f0c2:	d948      	bls.n	800f156 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f0c4:	e040      	b.n	800f148 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	695a      	ldr	r2, [r3, #20]
 800f0cc:	f248 0308 	movw	r3, #32776	; 0x8008
 800f0d0:	4013      	ands	r3, r2
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d014      	beq.n	800f100 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681a      	ldr	r2, [r3, #0]
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f0e0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0e6:	1d1a      	adds	r2, r3, #4
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	3b01      	subs	r3, #1
 800f0f6:	b29a      	uxth	r2, r3
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f0fe:	e023      	b.n	800f148 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f100:	f7f5 fa6c 	bl	80045dc <HAL_GetTick>
 800f104:	4602      	mov	r2, r0
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	1ad3      	subs	r3, r2, r3
 800f10a:	683a      	ldr	r2, [r7, #0]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d803      	bhi.n	800f118 <HAL_SPI_Receive+0x19c>
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f116:	d102      	bne.n	800f11e <HAL_SPI_Receive+0x1a2>
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d114      	bne.n	800f148 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f000 fc0a 	bl	800f938 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2200      	movs	r2, #0
 800f128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f132:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2201      	movs	r2, #1
 800f140:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f144:	2301      	movs	r3, #1
 800f146:	e107      	b.n	800f358 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f14e:	b29b      	uxth	r3, r3
 800f150:	2b00      	cmp	r3, #0
 800f152:	d1b8      	bne.n	800f0c6 <HAL_SPI_Receive+0x14a>
 800f154:	e0ed      	b.n	800f332 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	2b07      	cmp	r3, #7
 800f15c:	f240 80e2 	bls.w	800f324 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f160:	e05b      	b.n	800f21a <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	695b      	ldr	r3, [r3, #20]
 800f168:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d030      	beq.n	800f1d2 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	695b      	ldr	r3, [r3, #20]
 800f176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d014      	beq.n	800f1a8 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681a      	ldr	r2, [r3, #0]
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f186:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f188:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f18e:	1d1a      	adds	r2, r3, #4
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	3b02      	subs	r3, #2
 800f19e:	b29a      	uxth	r2, r3
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f1a6:	e038      	b.n	800f21a <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1ac:	69ba      	ldr	r2, [r7, #24]
 800f1ae:	8812      	ldrh	r2, [r2, #0]
 800f1b0:	b292      	uxth	r2, r2
 800f1b2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1b8:	1c9a      	adds	r2, r3, #2
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	3b01      	subs	r3, #1
 800f1c8:	b29a      	uxth	r2, r3
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f1d0:	e023      	b.n	800f21a <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1d2:	f7f5 fa03 	bl	80045dc <HAL_GetTick>
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	1ad3      	subs	r3, r2, r3
 800f1dc:	683a      	ldr	r2, [r7, #0]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d803      	bhi.n	800f1ea <HAL_SPI_Receive+0x26e>
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1e8:	d102      	bne.n	800f1f0 <HAL_SPI_Receive+0x274>
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d114      	bne.n	800f21a <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1f0:	68f8      	ldr	r0, [r7, #12]
 800f1f2:	f000 fba1 	bl	800f938 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f204:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2201      	movs	r2, #1
 800f212:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f216:	2301      	movs	r3, #1
 800f218:	e09e      	b.n	800f358 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f220:	b29b      	uxth	r3, r3
 800f222:	2b00      	cmp	r3, #0
 800f224:	d19d      	bne.n	800f162 <HAL_SPI_Receive+0x1e6>
 800f226:	e084      	b.n	800f332 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	695b      	ldr	r3, [r3, #20]
 800f22e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f232:	2b00      	cmp	r3, #0
 800f234:	d052      	beq.n	800f2dc <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	695b      	ldr	r3, [r3, #20]
 800f23c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f240:	2b00      	cmp	r3, #0
 800f242:	d014      	beq.n	800f26e <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681a      	ldr	r2, [r3, #0]
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f24c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f24e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f254:	1d1a      	adds	r2, r3, #4
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f260:	b29b      	uxth	r3, r3
 800f262:	3b04      	subs	r3, #4
 800f264:	b29a      	uxth	r2, r3
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f26c:	e05a      	b.n	800f324 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	695b      	ldr	r3, [r3, #20]
 800f274:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f27c:	d914      	bls.n	800f2a8 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f282:	69ba      	ldr	r2, [r7, #24]
 800f284:	8812      	ldrh	r2, [r2, #0]
 800f286:	b292      	uxth	r2, r2
 800f288:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f28e:	1c9a      	adds	r2, r3, #2
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	3b02      	subs	r3, #2
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f2a6:	e03d      	b.n	800f324 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2b4:	7812      	ldrb	r2, [r2, #0]
 800f2b6:	b2d2      	uxtb	r2, r2
 800f2b8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2be:	1c5a      	adds	r2, r3, #1
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f2ca:	b29b      	uxth	r3, r3
 800f2cc:	3b01      	subs	r3, #1
 800f2ce:	b29a      	uxth	r2, r3
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f2d6:	e025      	b.n	800f324 <HAL_SPI_Receive+0x3a8>
 800f2d8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2dc:	f7f5 f97e 	bl	80045dc <HAL_GetTick>
 800f2e0:	4602      	mov	r2, r0
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	1ad3      	subs	r3, r2, r3
 800f2e6:	683a      	ldr	r2, [r7, #0]
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d803      	bhi.n	800f2f4 <HAL_SPI_Receive+0x378>
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f2:	d102      	bne.n	800f2fa <HAL_SPI_Receive+0x37e>
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d114      	bne.n	800f324 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2fa:	68f8      	ldr	r0, [r7, #12]
 800f2fc:	f000 fb1c 	bl	800f938 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	2200      	movs	r2, #0
 800f304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f30e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	2201      	movs	r2, #1
 800f31c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f320:	2301      	movs	r3, #1
 800f322:	e019      	b.n	800f358 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	f47f af7b 	bne.w	800f228 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f332:	68f8      	ldr	r0, [r7, #12]
 800f334:	f000 fb00 	bl	800f938 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	2200      	movs	r2, #0
 800f33c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2201      	movs	r2, #1
 800f344:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d001      	beq.n	800f356 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800f352:	2301      	movs	r3, #1
 800f354:	e000      	b.n	800f358 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800f356:	7ffb      	ldrb	r3, [r7, #31]
}
 800f358:	4618      	mov	r0, r3
 800f35a:	3720      	adds	r7, #32
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b08e      	sub	sp, #56	; 0x38
 800f364:	af02      	add	r7, sp, #8
 800f366:	60f8      	str	r0, [r7, #12]
 800f368:	60b9      	str	r1, [r7, #8]
 800f36a:	607a      	str	r2, [r7, #4]
 800f36c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f36e:	2300      	movs	r3, #0
 800f370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	3320      	adds	r3, #32
 800f37a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	3330      	adds	r3, #48	; 0x30
 800f382:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	d101      	bne.n	800f392 <HAL_SPI_TransmitReceive+0x32>
 800f38e:	2302      	movs	r3, #2
 800f390:	e2ce      	b.n	800f930 <HAL_SPI_TransmitReceive+0x5d0>
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2201      	movs	r2, #1
 800f396:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f39a:	f7f5 f91f 	bl	80045dc <HAL_GetTick>
 800f39e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800f3a0:	887b      	ldrh	r3, [r7, #2]
 800f3a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800f3a4:	887b      	ldrh	r3, [r7, #2]
 800f3a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f3ae:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f3b6:	7efb      	ldrb	r3, [r7, #27]
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	d014      	beq.n	800f3e6 <HAL_SPI_TransmitReceive+0x86>
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f3c2:	d106      	bne.n	800f3d2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d102      	bne.n	800f3d2 <HAL_SPI_TransmitReceive+0x72>
 800f3cc:	7efb      	ldrb	r3, [r7, #27]
 800f3ce:	2b04      	cmp	r3, #4
 800f3d0:	d009      	beq.n	800f3e6 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800f3d2:	2302      	movs	r3, #2
 800f3d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f3e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f3e4:	e2a4      	b.n	800f930 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d005      	beq.n	800f3f8 <HAL_SPI_TransmitReceive+0x98>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d002      	beq.n	800f3f8 <HAL_SPI_TransmitReceive+0x98>
 800f3f2:	887b      	ldrh	r3, [r7, #2]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d109      	bne.n	800f40c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2200      	movs	r2, #0
 800f402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f40a:	e291      	b.n	800f930 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f412:	b2db      	uxtb	r3, r3
 800f414:	2b04      	cmp	r3, #4
 800f416:	d003      	beq.n	800f420 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2205      	movs	r2, #5
 800f41c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2200      	movs	r2, #0
 800f424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	687a      	ldr	r2, [r7, #4]
 800f42c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	887a      	ldrh	r2, [r7, #2]
 800f432:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	887a      	ldrh	r2, [r7, #2]
 800f43a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	68ba      	ldr	r2, [r7, #8]
 800f442:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	887a      	ldrh	r2, [r7, #2]
 800f448:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	887a      	ldrh	r2, [r7, #2]
 800f450:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2200      	movs	r2, #0
 800f458:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	2200      	movs	r2, #0
 800f45e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	685a      	ldr	r2, [r3, #4]
 800f466:	4b9f      	ldr	r3, [pc, #636]	; (800f6e4 <HAL_SPI_TransmitReceive+0x384>)
 800f468:	4013      	ands	r3, r2
 800f46a:	8879      	ldrh	r1, [r7, #2]
 800f46c:	68fa      	ldr	r2, [r7, #12]
 800f46e:	6812      	ldr	r2, [r2, #0]
 800f470:	430b      	orrs	r3, r1
 800f472:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	681a      	ldr	r2, [r3, #0]
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f042 0201 	orr.w	r2, r2, #1
 800f482:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f48c:	d107      	bne.n	800f49e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	681a      	ldr	r2, [r3, #0]
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f49c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	68db      	ldr	r3, [r3, #12]
 800f4a2:	2b0f      	cmp	r3, #15
 800f4a4:	d970      	bls.n	800f588 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f4a6:	e068      	b.n	800f57a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	695b      	ldr	r3, [r3, #20]
 800f4ae:	f003 0302 	and.w	r3, r3, #2
 800f4b2:	2b02      	cmp	r3, #2
 800f4b4:	d11a      	bne.n	800f4ec <HAL_SPI_TransmitReceive+0x18c>
 800f4b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d017      	beq.n	800f4ec <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	6812      	ldr	r2, [r2, #0]
 800f4c6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4cc:	1d1a      	adds	r2, r3, #4
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4d8:	b29b      	uxth	r3, r3
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	b29a      	uxth	r2, r3
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	695a      	ldr	r2, [r3, #20]
 800f4f2:	f248 0308 	movw	r3, #32776	; 0x8008
 800f4f6:	4013      	ands	r3, r2
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d01a      	beq.n	800f532 <HAL_SPI_TransmitReceive+0x1d2>
 800f4fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d017      	beq.n	800f532 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f50a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f50c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f512:	1d1a      	adds	r2, r3, #4
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f51e:	b29b      	uxth	r3, r3
 800f520:	3b01      	subs	r3, #1
 800f522:	b29a      	uxth	r2, r3
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f530:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f532:	f7f5 f853 	bl	80045dc <HAL_GetTick>
 800f536:	4602      	mov	r2, r0
 800f538:	69fb      	ldr	r3, [r7, #28]
 800f53a:	1ad3      	subs	r3, r2, r3
 800f53c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f53e:	429a      	cmp	r2, r3
 800f540:	d803      	bhi.n	800f54a <HAL_SPI_TransmitReceive+0x1ea>
 800f542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f548:	d102      	bne.n	800f550 <HAL_SPI_TransmitReceive+0x1f0>
 800f54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d114      	bne.n	800f57a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f000 f9f1 	bl	800f938 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	2200      	movs	r2, #0
 800f55a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f564:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	2201      	movs	r2, #1
 800f572:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f576:	2301      	movs	r3, #1
 800f578:	e1da      	b.n	800f930 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f57a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d193      	bne.n	800f4a8 <HAL_SPI_TransmitReceive+0x148>
 800f580:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f582:	2b00      	cmp	r3, #0
 800f584:	d190      	bne.n	800f4a8 <HAL_SPI_TransmitReceive+0x148>
 800f586:	e1ac      	b.n	800f8e2 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	2b07      	cmp	r3, #7
 800f58e:	f240 81a0 	bls.w	800f8d2 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f592:	e0a9      	b.n	800f6e8 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	695b      	ldr	r3, [r3, #20]
 800f59a:	f003 0302 	and.w	r3, r3, #2
 800f59e:	2b02      	cmp	r3, #2
 800f5a0:	d139      	bne.n	800f616 <HAL_SPI_TransmitReceive+0x2b6>
 800f5a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d036      	beq.n	800f616 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f5a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d91c      	bls.n	800f5e8 <HAL_SPI_TransmitReceive+0x288>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d018      	beq.n	800f5e8 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	6812      	ldr	r2, [r2, #0]
 800f5c0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5c6:	1d1a      	adds	r2, r3, #4
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	3b02      	subs	r3, #2
 800f5d6:	b29a      	uxth	r2, r3
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f5e6:	e016      	b.n	800f616 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5ec:	881a      	ldrh	r2, [r3, #0]
 800f5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5f6:	1c9a      	adds	r2, r3, #2
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f602:	b29b      	uxth	r3, r3
 800f604:	3b01      	subs	r3, #1
 800f606:	b29a      	uxth	r2, r3
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f614:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	695b      	ldr	r3, [r3, #20]
 800f61c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f620:	2b00      	cmp	r3, #0
 800f622:	d03a      	beq.n	800f69a <HAL_SPI_TransmitReceive+0x33a>
 800f624:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f626:	2b00      	cmp	r3, #0
 800f628:	d037      	beq.n	800f69a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	695b      	ldr	r3, [r3, #20]
 800f630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f634:	2b00      	cmp	r3, #0
 800f636:	d018      	beq.n	800f66a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f640:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f642:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f648:	1d1a      	adds	r2, r3, #4
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f654:	b29b      	uxth	r3, r3
 800f656:	3b02      	subs	r3, #2
 800f658:	b29a      	uxth	r2, r3
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f666:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f668:	e017      	b.n	800f69a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f66e:	6a3a      	ldr	r2, [r7, #32]
 800f670:	8812      	ldrh	r2, [r2, #0]
 800f672:	b292      	uxth	r2, r2
 800f674:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f67a:	1c9a      	adds	r2, r3, #2
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f686:	b29b      	uxth	r3, r3
 800f688:	3b01      	subs	r3, #1
 800f68a:	b29a      	uxth	r2, r3
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f698:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f69a:	f7f4 ff9f 	bl	80045dc <HAL_GetTick>
 800f69e:	4602      	mov	r2, r0
 800f6a0:	69fb      	ldr	r3, [r7, #28]
 800f6a2:	1ad3      	subs	r3, r2, r3
 800f6a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d803      	bhi.n	800f6b2 <HAL_SPI_TransmitReceive+0x352>
 800f6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6b0:	d102      	bne.n	800f6b8 <HAL_SPI_TransmitReceive+0x358>
 800f6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d117      	bne.n	800f6e8 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f6b8:	68f8      	ldr	r0, [r7, #12]
 800f6ba:	f000 f93d 	bl	800f938 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	2201      	movs	r2, #1
 800f6da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f6de:	2301      	movs	r3, #1
 800f6e0:	e126      	b.n	800f930 <HAL_SPI_TransmitReceive+0x5d0>
 800f6e2:	bf00      	nop
 800f6e4:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f6e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f47f af52 	bne.w	800f594 <HAL_SPI_TransmitReceive+0x234>
 800f6f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	f47f af4e 	bne.w	800f594 <HAL_SPI_TransmitReceive+0x234>
 800f6f8:	e0f3      	b.n	800f8e2 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	695b      	ldr	r3, [r3, #20]
 800f700:	f003 0302 	and.w	r3, r3, #2
 800f704:	2b02      	cmp	r3, #2
 800f706:	d15a      	bne.n	800f7be <HAL_SPI_TransmitReceive+0x45e>
 800f708:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d057      	beq.n	800f7be <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f70e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f710:	2b03      	cmp	r3, #3
 800f712:	d91c      	bls.n	800f74e <HAL_SPI_TransmitReceive+0x3ee>
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f718:	2b40      	cmp	r3, #64	; 0x40
 800f71a:	d918      	bls.n	800f74e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	6812      	ldr	r2, [r2, #0]
 800f726:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f72c:	1d1a      	adds	r2, r3, #4
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f738:	b29b      	uxth	r3, r3
 800f73a:	3b04      	subs	r3, #4
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f74a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f74c:	e037      	b.n	800f7be <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f74e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f750:	2b01      	cmp	r3, #1
 800f752:	d91b      	bls.n	800f78c <HAL_SPI_TransmitReceive+0x42c>
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d017      	beq.n	800f78c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f760:	881a      	ldrh	r2, [r3, #0]
 800f762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f764:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f76a:	1c9a      	adds	r2, r3, #2
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f776:	b29b      	uxth	r3, r3
 800f778:	3b02      	subs	r3, #2
 800f77a:	b29a      	uxth	r2, r3
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f788:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f78a:	e018      	b.n	800f7be <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	3320      	adds	r3, #32
 800f796:	7812      	ldrb	r2, [r2, #0]
 800f798:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f79e:	1c5a      	adds	r2, r3, #1
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	3b01      	subs	r3, #1
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f7bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	695b      	ldr	r3, [r3, #20]
 800f7c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d05e      	beq.n	800f88a <HAL_SPI_TransmitReceive+0x52a>
 800f7cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d05b      	beq.n	800f88a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	695b      	ldr	r3, [r3, #20]
 800f7d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d018      	beq.n	800f812 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f7ea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7f0:	1d1a      	adds	r2, r3, #4
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7fc:	b29b      	uxth	r3, r3
 800f7fe:	3b04      	subs	r3, #4
 800f800:	b29a      	uxth	r2, r3
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f80e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f810:	e03b      	b.n	800f88a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	695b      	ldr	r3, [r3, #20]
 800f818:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f81c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f820:	d918      	bls.n	800f854 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f826:	6a3a      	ldr	r2, [r7, #32]
 800f828:	8812      	ldrh	r2, [r2, #0]
 800f82a:	b292      	uxth	r2, r2
 800f82c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f832:	1c9a      	adds	r2, r3, #2
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f83e:	b29b      	uxth	r3, r3
 800f840:	3b02      	subs	r3, #2
 800f842:	b29a      	uxth	r2, r3
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f850:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f852:	e01a      	b.n	800f88a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f860:	7812      	ldrb	r2, [r2, #0]
 800f862:	b2d2      	uxtb	r2, r2
 800f864:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f86a:	1c5a      	adds	r2, r3, #1
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f876:	b29b      	uxth	r3, r3
 800f878:	3b01      	subs	r3, #1
 800f87a:	b29a      	uxth	r2, r3
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f888:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f88a:	f7f4 fea7 	bl	80045dc <HAL_GetTick>
 800f88e:	4602      	mov	r2, r0
 800f890:	69fb      	ldr	r3, [r7, #28]
 800f892:	1ad3      	subs	r3, r2, r3
 800f894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f896:	429a      	cmp	r2, r3
 800f898:	d803      	bhi.n	800f8a2 <HAL_SPI_TransmitReceive+0x542>
 800f89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8a0:	d102      	bne.n	800f8a8 <HAL_SPI_TransmitReceive+0x548>
 800f8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d114      	bne.n	800f8d2 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f8a8:	68f8      	ldr	r0, [r7, #12]
 800f8aa:	f000 f845 	bl	800f938 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2201      	movs	r2, #1
 800f8ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	e02e      	b.n	800f930 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f8d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	f47f af10 	bne.w	800f6fa <HAL_SPI_TransmitReceive+0x39a>
 800f8da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	f47f af0c 	bne.w	800f6fa <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e4:	9300      	str	r3, [sp, #0]
 800f8e6:	69fb      	ldr	r3, [r7, #28]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	2108      	movs	r1, #8
 800f8ec:	68f8      	ldr	r0, [r7, #12]
 800f8ee:	f000 f8c3 	bl	800fa78 <SPI_WaitOnFlagUntilTimeout>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d007      	beq.n	800f908 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8fe:	f043 0220 	orr.w	r2, r3, #32
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f908:	68f8      	ldr	r0, [r7, #12]
 800f90a:	f000 f815 	bl	800f938 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2200      	movs	r2, #0
 800f912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2201      	movs	r2, #1
 800f91a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f924:	2b00      	cmp	r3, #0
 800f926:	d001      	beq.n	800f92c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800f928:	2301      	movs	r3, #1
 800f92a:	e001      	b.n	800f930 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800f92c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f930:	4618      	mov	r0, r3
 800f932:	3730      	adds	r7, #48	; 0x30
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f938:	b480      	push	{r7}
 800f93a:	b085      	sub	sp, #20
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	695b      	ldr	r3, [r3, #20]
 800f946:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	699a      	ldr	r2, [r3, #24]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f042 0208 	orr.w	r2, r2, #8
 800f956:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	699a      	ldr	r2, [r3, #24]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f042 0210 	orr.w	r2, r2, #16
 800f966:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	681a      	ldr	r2, [r3, #0]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	f022 0201 	bic.w	r2, r2, #1
 800f976:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	6919      	ldr	r1, [r3, #16]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	4b3c      	ldr	r3, [pc, #240]	; (800fa74 <SPI_CloseTransfer+0x13c>)
 800f984:	400b      	ands	r3, r1
 800f986:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	689a      	ldr	r2, [r3, #8]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f996:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f99e:	b2db      	uxtb	r3, r3
 800f9a0:	2b04      	cmp	r3, #4
 800f9a2:	d014      	beq.n	800f9ce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	f003 0320 	and.w	r3, r3, #32
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d00f      	beq.n	800f9ce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	699a      	ldr	r2, [r3, #24]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f042 0220 	orr.w	r2, r2, #32
 800f9cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f9d4:	b2db      	uxtb	r3, r3
 800f9d6:	2b03      	cmp	r3, #3
 800f9d8:	d014      	beq.n	800fa04 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d00f      	beq.n	800fa04 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9ea:	f043 0204 	orr.w	r2, r3, #4
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	699a      	ldr	r2, [r3, #24]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fa02:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d00f      	beq.n	800fa2e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa14:	f043 0201 	orr.w	r2, r3, #1
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	699a      	ldr	r2, [r3, #24]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fa2c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d00f      	beq.n	800fa58 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa3e:	f043 0208 	orr.w	r2, r3, #8
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	699a      	ldr	r2, [r3, #24]
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fa56:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2200      	movs	r2, #0
 800fa64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800fa68:	bf00      	nop
 800fa6a:	3714      	adds	r7, #20
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr
 800fa74:	fffffc90 	.word	0xfffffc90

0800fa78 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	60f8      	str	r0, [r7, #12]
 800fa80:	60b9      	str	r1, [r7, #8]
 800fa82:	603b      	str	r3, [r7, #0]
 800fa84:	4613      	mov	r3, r2
 800fa86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fa88:	e010      	b.n	800faac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa8a:	f7f4 fda7 	bl	80045dc <HAL_GetTick>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	1ad3      	subs	r3, r2, r3
 800fa94:	69ba      	ldr	r2, [r7, #24]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d803      	bhi.n	800faa2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faa0:	d102      	bne.n	800faa8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800faa2:	69bb      	ldr	r3, [r7, #24]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d101      	bne.n	800faac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800faa8:	2303      	movs	r3, #3
 800faaa:	e00f      	b.n	800facc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	695a      	ldr	r2, [r3, #20]
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	4013      	ands	r3, r2
 800fab6:	68ba      	ldr	r2, [r7, #8]
 800fab8:	429a      	cmp	r2, r3
 800faba:	bf0c      	ite	eq
 800fabc:	2301      	moveq	r3, #1
 800fabe:	2300      	movne	r3, #0
 800fac0:	b2db      	uxtb	r3, r3
 800fac2:	461a      	mov	r2, r3
 800fac4:	79fb      	ldrb	r3, [r7, #7]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d0df      	beq.n	800fa8a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800faca:	2300      	movs	r3, #0
}
 800facc:	4618      	mov	r0, r3
 800face:	3710      	adds	r7, #16
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}

0800fad4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800fad4:	b480      	push	{r7}
 800fad6:	b085      	sub	sp, #20
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fae0:	095b      	lsrs	r3, r3, #5
 800fae2:	3301      	adds	r3, #1
 800fae4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	68db      	ldr	r3, [r3, #12]
 800faea:	3301      	adds	r3, #1
 800faec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	3307      	adds	r3, #7
 800faf2:	08db      	lsrs	r3, r3, #3
 800faf4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	68fa      	ldr	r2, [r7, #12]
 800fafa:	fb02 f303 	mul.w	r3, r2, r3
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3714      	adds	r7, #20
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr

0800fb0a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b082      	sub	sp, #8
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d101      	bne.n	800fb1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fb18:	2301      	movs	r3, #1
 800fb1a:	e042      	b.n	800fba2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d106      	bne.n	800fb34 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f7f4 fa70 	bl	8004014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2224      	movs	r2, #36	; 0x24
 800fb38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	681a      	ldr	r2, [r3, #0]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f022 0201 	bic.w	r2, r2, #1
 800fb4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f000 f95f 	bl	800fe10 <UART_SetConfig>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d101      	bne.n	800fb5c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800fb58:	2301      	movs	r3, #1
 800fb5a:	e022      	b.n	800fba2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d002      	beq.n	800fb6a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 ff03 	bl	8010970 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	685a      	ldr	r2, [r3, #4]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fb78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	689a      	ldr	r2, [r3, #8]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fb88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	681a      	ldr	r2, [r3, #0]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	f042 0201 	orr.w	r2, r2, #1
 800fb98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f000 ff8a 	bl	8010ab4 <UART_CheckIdleState>
 800fba0:	4603      	mov	r3, r0
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3708      	adds	r7, #8
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}

0800fbaa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fbaa:	b580      	push	{r7, lr}
 800fbac:	b08a      	sub	sp, #40	; 0x28
 800fbae:	af02      	add	r7, sp, #8
 800fbb0:	60f8      	str	r0, [r7, #12]
 800fbb2:	60b9      	str	r1, [r7, #8]
 800fbb4:	603b      	str	r3, [r7, #0]
 800fbb6:	4613      	mov	r3, r2
 800fbb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbc0:	2b20      	cmp	r3, #32
 800fbc2:	f040 8083 	bne.w	800fccc <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d002      	beq.n	800fbd2 <HAL_UART_Transmit+0x28>
 800fbcc:	88fb      	ldrh	r3, [r7, #6]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d101      	bne.n	800fbd6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	e07b      	b.n	800fcce <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d101      	bne.n	800fbe4 <HAL_UART_Transmit+0x3a>
 800fbe0:	2302      	movs	r3, #2
 800fbe2:	e074      	b.n	800fcce <HAL_UART_Transmit+0x124>
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2221      	movs	r2, #33	; 0x21
 800fbf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800fbfc:	f7f4 fcee 	bl	80045dc <HAL_GetTick>
 800fc00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	88fa      	ldrh	r2, [r7, #6]
 800fc06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	88fa      	ldrh	r2, [r7, #6]
 800fc0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	689b      	ldr	r3, [r3, #8]
 800fc16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc1a:	d108      	bne.n	800fc2e <HAL_UART_Transmit+0x84>
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	691b      	ldr	r3, [r3, #16]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d104      	bne.n	800fc2e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800fc24:	2300      	movs	r3, #0
 800fc26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	61bb      	str	r3, [r7, #24]
 800fc2c:	e003      	b.n	800fc36 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fc32:	2300      	movs	r3, #0
 800fc34:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800fc3e:	e02c      	b.n	800fc9a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	9300      	str	r3, [sp, #0]
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	2200      	movs	r2, #0
 800fc48:	2180      	movs	r1, #128	; 0x80
 800fc4a:	68f8      	ldr	r0, [r7, #12]
 800fc4c:	f000 ff7a 	bl	8010b44 <UART_WaitOnFlagUntilTimeout>
 800fc50:	4603      	mov	r3, r0
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d001      	beq.n	800fc5a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800fc56:	2303      	movs	r3, #3
 800fc58:	e039      	b.n	800fcce <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800fc5a:	69fb      	ldr	r3, [r7, #28]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d10b      	bne.n	800fc78 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fc60:	69bb      	ldr	r3, [r7, #24]
 800fc62:	881b      	ldrh	r3, [r3, #0]
 800fc64:	461a      	mov	r2, r3
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fc6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fc70:	69bb      	ldr	r3, [r7, #24]
 800fc72:	3302      	adds	r3, #2
 800fc74:	61bb      	str	r3, [r7, #24]
 800fc76:	e007      	b.n	800fc88 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	781a      	ldrb	r2, [r3, #0]
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fc82:	69fb      	ldr	r3, [r7, #28]
 800fc84:	3301      	adds	r3, #1
 800fc86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	3b01      	subs	r3, #1
 800fc92:	b29a      	uxth	r2, r3
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fca0:	b29b      	uxth	r3, r3
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d1cc      	bne.n	800fc40 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	9300      	str	r3, [sp, #0]
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	2200      	movs	r2, #0
 800fcae:	2140      	movs	r1, #64	; 0x40
 800fcb0:	68f8      	ldr	r0, [r7, #12]
 800fcb2:	f000 ff47 	bl	8010b44 <UART_WaitOnFlagUntilTimeout>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d001      	beq.n	800fcc0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800fcbc:	2303      	movs	r3, #3
 800fcbe:	e006      	b.n	800fcce <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2220      	movs	r2, #32
 800fcc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	e000      	b.n	800fcce <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800fccc:	2302      	movs	r3, #2
  }
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3720      	adds	r7, #32
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
	...

0800fcd8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	60f8      	str	r0, [r7, #12]
 800fce0:	60b9      	str	r1, [r7, #8]
 800fce2:	4613      	mov	r3, r2
 800fce4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcec:	2b20      	cmp	r3, #32
 800fcee:	d170      	bne.n	800fdd2 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d002      	beq.n	800fcfc <HAL_UART_Receive_DMA+0x24>
 800fcf6:	88fb      	ldrh	r3, [r7, #6]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d101      	bne.n	800fd00 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	e069      	b.n	800fdd4 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d101      	bne.n	800fd0e <HAL_UART_Receive_DMA+0x36>
 800fd0a:	2302      	movs	r3, #2
 800fd0c:	e062      	b.n	800fdd4 <HAL_UART_Receive_DMA+0xfc>
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	2201      	movs	r2, #1
 800fd12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	68ba      	ldr	r2, [r7, #8]
 800fd1a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	88fa      	ldrh	r2, [r7, #6]
 800fd20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2200      	movs	r2, #0
 800fd28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2222      	movs	r2, #34	; 0x22
 800fd30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d02c      	beq.n	800fd96 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd40:	4a26      	ldr	r2, [pc, #152]	; (800fddc <HAL_UART_Receive_DMA+0x104>)
 800fd42:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd48:	4a25      	ldr	r2, [pc, #148]	; (800fde0 <HAL_UART_Receive_DMA+0x108>)
 800fd4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd50:	4a24      	ldr	r2, [pc, #144]	; (800fde4 <HAL_UART_Receive_DMA+0x10c>)
 800fd52:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd58:	2200      	movs	r2, #0
 800fd5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	3324      	adds	r3, #36	; 0x24
 800fd66:	4619      	mov	r1, r3
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	88fb      	ldrh	r3, [r7, #6]
 800fd70:	f7f5 f8da 	bl	8004f28 <HAL_DMA_Start_IT>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d00d      	beq.n	800fd96 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2210      	movs	r2, #16
 800fd7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	2200      	movs	r2, #0
 800fd86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	2220      	movs	r2, #32
 800fd8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800fd92:	2301      	movs	r3, #1
 800fd94:	e01e      	b.n	800fdd4 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	681a      	ldr	r2, [r3, #0]
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fdac:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	689a      	ldr	r2, [r3, #8]
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	f042 0201 	orr.w	r2, r2, #1
 800fdbc:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	689a      	ldr	r2, [r3, #8]
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fdcc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	e000      	b.n	800fdd4 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800fdd2:	2302      	movs	r3, #2
  }
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3710      	adds	r7, #16
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	08010cc9 	.word	0x08010cc9
 800fde0:	08010d2f 	.word	0x08010d2f
 800fde4:	08010d4b 	.word	0x08010d4b

0800fde8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fde8:	b480      	push	{r7}
 800fdea:	b083      	sub	sp, #12
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fdf0:	bf00      	nop
 800fdf2:	370c      	adds	r7, #12
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfa:	4770      	bx	lr

0800fdfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b083      	sub	sp, #12
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fe04:	bf00      	nop
 800fe06:	370c      	adds	r7, #12
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0e:	4770      	bx	lr

0800fe10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fe10:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800fe14:	b08e      	sub	sp, #56	; 0x38
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	689a      	ldr	r2, [r3, #8]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	691b      	ldr	r3, [r3, #16]
 800fe28:	431a      	orrs	r2, r3
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	695b      	ldr	r3, [r3, #20]
 800fe2e:	431a      	orrs	r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	69db      	ldr	r3, [r3, #28]
 800fe34:	4313      	orrs	r3, r2
 800fe36:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe3e:	4313      	orrs	r3, r2
 800fe40:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	681a      	ldr	r2, [r3, #0]
 800fe48:	4bc1      	ldr	r3, [pc, #772]	; (8010150 <UART_SetConfig+0x340>)
 800fe4a:	4013      	ands	r3, r2
 800fe4c:	687a      	ldr	r2, [r7, #4]
 800fe4e:	6812      	ldr	r2, [r2, #0]
 800fe50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fe52:	430b      	orrs	r3, r1
 800fe54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	685b      	ldr	r3, [r3, #4]
 800fe5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	68da      	ldr	r2, [r3, #12]
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	430a      	orrs	r2, r1
 800fe6a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	699b      	ldr	r3, [r3, #24]
 800fe70:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	4ab7      	ldr	r2, [pc, #732]	; (8010154 <UART_SetConfig+0x344>)
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	d004      	beq.n	800fe86 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6a1b      	ldr	r3, [r3, #32]
 800fe80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe82:	4313      	orrs	r3, r2
 800fe84:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	689a      	ldr	r2, [r3, #8]
 800fe8c:	4bb2      	ldr	r3, [pc, #712]	; (8010158 <UART_SetConfig+0x348>)
 800fe8e:	4013      	ands	r3, r2
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	6812      	ldr	r2, [r2, #0]
 800fe94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fe96:	430b      	orrs	r3, r1
 800fe98:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fea0:	f023 010f 	bic.w	r1, r3, #15
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	430a      	orrs	r2, r1
 800feae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	4aa9      	ldr	r2, [pc, #676]	; (801015c <UART_SetConfig+0x34c>)
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d177      	bne.n	800ffaa <UART_SetConfig+0x19a>
 800feba:	4ba9      	ldr	r3, [pc, #676]	; (8010160 <UART_SetConfig+0x350>)
 800febc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800febe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fec2:	2b28      	cmp	r3, #40	; 0x28
 800fec4:	d86c      	bhi.n	800ffa0 <UART_SetConfig+0x190>
 800fec6:	a201      	add	r2, pc, #4	; (adr r2, 800fecc <UART_SetConfig+0xbc>)
 800fec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fecc:	0800ff71 	.word	0x0800ff71
 800fed0:	0800ffa1 	.word	0x0800ffa1
 800fed4:	0800ffa1 	.word	0x0800ffa1
 800fed8:	0800ffa1 	.word	0x0800ffa1
 800fedc:	0800ffa1 	.word	0x0800ffa1
 800fee0:	0800ffa1 	.word	0x0800ffa1
 800fee4:	0800ffa1 	.word	0x0800ffa1
 800fee8:	0800ffa1 	.word	0x0800ffa1
 800feec:	0800ff79 	.word	0x0800ff79
 800fef0:	0800ffa1 	.word	0x0800ffa1
 800fef4:	0800ffa1 	.word	0x0800ffa1
 800fef8:	0800ffa1 	.word	0x0800ffa1
 800fefc:	0800ffa1 	.word	0x0800ffa1
 800ff00:	0800ffa1 	.word	0x0800ffa1
 800ff04:	0800ffa1 	.word	0x0800ffa1
 800ff08:	0800ffa1 	.word	0x0800ffa1
 800ff0c:	0800ff81 	.word	0x0800ff81
 800ff10:	0800ffa1 	.word	0x0800ffa1
 800ff14:	0800ffa1 	.word	0x0800ffa1
 800ff18:	0800ffa1 	.word	0x0800ffa1
 800ff1c:	0800ffa1 	.word	0x0800ffa1
 800ff20:	0800ffa1 	.word	0x0800ffa1
 800ff24:	0800ffa1 	.word	0x0800ffa1
 800ff28:	0800ffa1 	.word	0x0800ffa1
 800ff2c:	0800ff89 	.word	0x0800ff89
 800ff30:	0800ffa1 	.word	0x0800ffa1
 800ff34:	0800ffa1 	.word	0x0800ffa1
 800ff38:	0800ffa1 	.word	0x0800ffa1
 800ff3c:	0800ffa1 	.word	0x0800ffa1
 800ff40:	0800ffa1 	.word	0x0800ffa1
 800ff44:	0800ffa1 	.word	0x0800ffa1
 800ff48:	0800ffa1 	.word	0x0800ffa1
 800ff4c:	0800ff91 	.word	0x0800ff91
 800ff50:	0800ffa1 	.word	0x0800ffa1
 800ff54:	0800ffa1 	.word	0x0800ffa1
 800ff58:	0800ffa1 	.word	0x0800ffa1
 800ff5c:	0800ffa1 	.word	0x0800ffa1
 800ff60:	0800ffa1 	.word	0x0800ffa1
 800ff64:	0800ffa1 	.word	0x0800ffa1
 800ff68:	0800ffa1 	.word	0x0800ffa1
 800ff6c:	0800ff99 	.word	0x0800ff99
 800ff70:	2301      	movs	r3, #1
 800ff72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff76:	e233      	b.n	80103e0 <UART_SetConfig+0x5d0>
 800ff78:	2304      	movs	r3, #4
 800ff7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff7e:	e22f      	b.n	80103e0 <UART_SetConfig+0x5d0>
 800ff80:	2308      	movs	r3, #8
 800ff82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff86:	e22b      	b.n	80103e0 <UART_SetConfig+0x5d0>
 800ff88:	2310      	movs	r3, #16
 800ff8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff8e:	e227      	b.n	80103e0 <UART_SetConfig+0x5d0>
 800ff90:	2320      	movs	r3, #32
 800ff92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff96:	e223      	b.n	80103e0 <UART_SetConfig+0x5d0>
 800ff98:	2340      	movs	r3, #64	; 0x40
 800ff9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff9e:	e21f      	b.n	80103e0 <UART_SetConfig+0x5d0>
 800ffa0:	2380      	movs	r3, #128	; 0x80
 800ffa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffa6:	bf00      	nop
 800ffa8:	e21a      	b.n	80103e0 <UART_SetConfig+0x5d0>
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	4a6d      	ldr	r2, [pc, #436]	; (8010164 <UART_SetConfig+0x354>)
 800ffb0:	4293      	cmp	r3, r2
 800ffb2:	d132      	bne.n	801001a <UART_SetConfig+0x20a>
 800ffb4:	4b6a      	ldr	r3, [pc, #424]	; (8010160 <UART_SetConfig+0x350>)
 800ffb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffb8:	f003 0307 	and.w	r3, r3, #7
 800ffbc:	2b05      	cmp	r3, #5
 800ffbe:	d827      	bhi.n	8010010 <UART_SetConfig+0x200>
 800ffc0:	a201      	add	r2, pc, #4	; (adr r2, 800ffc8 <UART_SetConfig+0x1b8>)
 800ffc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffc6:	bf00      	nop
 800ffc8:	0800ffe1 	.word	0x0800ffe1
 800ffcc:	0800ffe9 	.word	0x0800ffe9
 800ffd0:	0800fff1 	.word	0x0800fff1
 800ffd4:	0800fff9 	.word	0x0800fff9
 800ffd8:	08010001 	.word	0x08010001
 800ffdc:	08010009 	.word	0x08010009
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffe6:	e1fb      	b.n	80103e0 <UART_SetConfig+0x5d0>
 800ffe8:	2304      	movs	r3, #4
 800ffea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffee:	e1f7      	b.n	80103e0 <UART_SetConfig+0x5d0>
 800fff0:	2308      	movs	r3, #8
 800fff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fff6:	e1f3      	b.n	80103e0 <UART_SetConfig+0x5d0>
 800fff8:	2310      	movs	r3, #16
 800fffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fffe:	e1ef      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010000:	2320      	movs	r3, #32
 8010002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010006:	e1eb      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010008:	2340      	movs	r3, #64	; 0x40
 801000a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801000e:	e1e7      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010010:	2380      	movs	r3, #128	; 0x80
 8010012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010016:	bf00      	nop
 8010018:	e1e2      	b.n	80103e0 <UART_SetConfig+0x5d0>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	4a52      	ldr	r2, [pc, #328]	; (8010168 <UART_SetConfig+0x358>)
 8010020:	4293      	cmp	r3, r2
 8010022:	d132      	bne.n	801008a <UART_SetConfig+0x27a>
 8010024:	4b4e      	ldr	r3, [pc, #312]	; (8010160 <UART_SetConfig+0x350>)
 8010026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010028:	f003 0307 	and.w	r3, r3, #7
 801002c:	2b05      	cmp	r3, #5
 801002e:	d827      	bhi.n	8010080 <UART_SetConfig+0x270>
 8010030:	a201      	add	r2, pc, #4	; (adr r2, 8010038 <UART_SetConfig+0x228>)
 8010032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010036:	bf00      	nop
 8010038:	08010051 	.word	0x08010051
 801003c:	08010059 	.word	0x08010059
 8010040:	08010061 	.word	0x08010061
 8010044:	08010069 	.word	0x08010069
 8010048:	08010071 	.word	0x08010071
 801004c:	08010079 	.word	0x08010079
 8010050:	2300      	movs	r3, #0
 8010052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010056:	e1c3      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010058:	2304      	movs	r3, #4
 801005a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801005e:	e1bf      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010060:	2308      	movs	r3, #8
 8010062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010066:	e1bb      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010068:	2310      	movs	r3, #16
 801006a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801006e:	e1b7      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010070:	2320      	movs	r3, #32
 8010072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010076:	e1b3      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010078:	2340      	movs	r3, #64	; 0x40
 801007a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801007e:	e1af      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010080:	2380      	movs	r3, #128	; 0x80
 8010082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010086:	bf00      	nop
 8010088:	e1aa      	b.n	80103e0 <UART_SetConfig+0x5d0>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	4a37      	ldr	r2, [pc, #220]	; (801016c <UART_SetConfig+0x35c>)
 8010090:	4293      	cmp	r3, r2
 8010092:	d132      	bne.n	80100fa <UART_SetConfig+0x2ea>
 8010094:	4b32      	ldr	r3, [pc, #200]	; (8010160 <UART_SetConfig+0x350>)
 8010096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010098:	f003 0307 	and.w	r3, r3, #7
 801009c:	2b05      	cmp	r3, #5
 801009e:	d827      	bhi.n	80100f0 <UART_SetConfig+0x2e0>
 80100a0:	a201      	add	r2, pc, #4	; (adr r2, 80100a8 <UART_SetConfig+0x298>)
 80100a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100a6:	bf00      	nop
 80100a8:	080100c1 	.word	0x080100c1
 80100ac:	080100c9 	.word	0x080100c9
 80100b0:	080100d1 	.word	0x080100d1
 80100b4:	080100d9 	.word	0x080100d9
 80100b8:	080100e1 	.word	0x080100e1
 80100bc:	080100e9 	.word	0x080100e9
 80100c0:	2300      	movs	r3, #0
 80100c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100c6:	e18b      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80100c8:	2304      	movs	r3, #4
 80100ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ce:	e187      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80100d0:	2308      	movs	r3, #8
 80100d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100d6:	e183      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80100d8:	2310      	movs	r3, #16
 80100da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100de:	e17f      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80100e0:	2320      	movs	r3, #32
 80100e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100e6:	e17b      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80100e8:	2340      	movs	r3, #64	; 0x40
 80100ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ee:	e177      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80100f0:	2380      	movs	r3, #128	; 0x80
 80100f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100f6:	bf00      	nop
 80100f8:	e172      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4a1c      	ldr	r2, [pc, #112]	; (8010170 <UART_SetConfig+0x360>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d144      	bne.n	801018e <UART_SetConfig+0x37e>
 8010104:	4b16      	ldr	r3, [pc, #88]	; (8010160 <UART_SetConfig+0x350>)
 8010106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010108:	f003 0307 	and.w	r3, r3, #7
 801010c:	2b05      	cmp	r3, #5
 801010e:	d839      	bhi.n	8010184 <UART_SetConfig+0x374>
 8010110:	a201      	add	r2, pc, #4	; (adr r2, 8010118 <UART_SetConfig+0x308>)
 8010112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010116:	bf00      	nop
 8010118:	08010131 	.word	0x08010131
 801011c:	08010139 	.word	0x08010139
 8010120:	08010141 	.word	0x08010141
 8010124:	08010149 	.word	0x08010149
 8010128:	08010175 	.word	0x08010175
 801012c:	0801017d 	.word	0x0801017d
 8010130:	2300      	movs	r3, #0
 8010132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010136:	e153      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010138:	2304      	movs	r3, #4
 801013a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801013e:	e14f      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010140:	2308      	movs	r3, #8
 8010142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010146:	e14b      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010148:	2310      	movs	r3, #16
 801014a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801014e:	e147      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010150:	cfff69f3 	.word	0xcfff69f3
 8010154:	58000c00 	.word	0x58000c00
 8010158:	11fff4ff 	.word	0x11fff4ff
 801015c:	40011000 	.word	0x40011000
 8010160:	58024400 	.word	0x58024400
 8010164:	40004400 	.word	0x40004400
 8010168:	40004800 	.word	0x40004800
 801016c:	40004c00 	.word	0x40004c00
 8010170:	40005000 	.word	0x40005000
 8010174:	2320      	movs	r3, #32
 8010176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801017a:	e131      	b.n	80103e0 <UART_SetConfig+0x5d0>
 801017c:	2340      	movs	r3, #64	; 0x40
 801017e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010182:	e12d      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010184:	2380      	movs	r3, #128	; 0x80
 8010186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801018a:	bf00      	nop
 801018c:	e128      	b.n	80103e0 <UART_SetConfig+0x5d0>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	4ab6      	ldr	r2, [pc, #728]	; (801046c <UART_SetConfig+0x65c>)
 8010194:	4293      	cmp	r3, r2
 8010196:	d178      	bne.n	801028a <UART_SetConfig+0x47a>
 8010198:	4bb5      	ldr	r3, [pc, #724]	; (8010470 <UART_SetConfig+0x660>)
 801019a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801019c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80101a0:	2b28      	cmp	r3, #40	; 0x28
 80101a2:	d86d      	bhi.n	8010280 <UART_SetConfig+0x470>
 80101a4:	a201      	add	r2, pc, #4	; (adr r2, 80101ac <UART_SetConfig+0x39c>)
 80101a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101aa:	bf00      	nop
 80101ac:	08010251 	.word	0x08010251
 80101b0:	08010281 	.word	0x08010281
 80101b4:	08010281 	.word	0x08010281
 80101b8:	08010281 	.word	0x08010281
 80101bc:	08010281 	.word	0x08010281
 80101c0:	08010281 	.word	0x08010281
 80101c4:	08010281 	.word	0x08010281
 80101c8:	08010281 	.word	0x08010281
 80101cc:	08010259 	.word	0x08010259
 80101d0:	08010281 	.word	0x08010281
 80101d4:	08010281 	.word	0x08010281
 80101d8:	08010281 	.word	0x08010281
 80101dc:	08010281 	.word	0x08010281
 80101e0:	08010281 	.word	0x08010281
 80101e4:	08010281 	.word	0x08010281
 80101e8:	08010281 	.word	0x08010281
 80101ec:	08010261 	.word	0x08010261
 80101f0:	08010281 	.word	0x08010281
 80101f4:	08010281 	.word	0x08010281
 80101f8:	08010281 	.word	0x08010281
 80101fc:	08010281 	.word	0x08010281
 8010200:	08010281 	.word	0x08010281
 8010204:	08010281 	.word	0x08010281
 8010208:	08010281 	.word	0x08010281
 801020c:	08010269 	.word	0x08010269
 8010210:	08010281 	.word	0x08010281
 8010214:	08010281 	.word	0x08010281
 8010218:	08010281 	.word	0x08010281
 801021c:	08010281 	.word	0x08010281
 8010220:	08010281 	.word	0x08010281
 8010224:	08010281 	.word	0x08010281
 8010228:	08010281 	.word	0x08010281
 801022c:	08010271 	.word	0x08010271
 8010230:	08010281 	.word	0x08010281
 8010234:	08010281 	.word	0x08010281
 8010238:	08010281 	.word	0x08010281
 801023c:	08010281 	.word	0x08010281
 8010240:	08010281 	.word	0x08010281
 8010244:	08010281 	.word	0x08010281
 8010248:	08010281 	.word	0x08010281
 801024c:	08010279 	.word	0x08010279
 8010250:	2301      	movs	r3, #1
 8010252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010256:	e0c3      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010258:	2304      	movs	r3, #4
 801025a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801025e:	e0bf      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010260:	2308      	movs	r3, #8
 8010262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010266:	e0bb      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010268:	2310      	movs	r3, #16
 801026a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801026e:	e0b7      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010270:	2320      	movs	r3, #32
 8010272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010276:	e0b3      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010278:	2340      	movs	r3, #64	; 0x40
 801027a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801027e:	e0af      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010280:	2380      	movs	r3, #128	; 0x80
 8010282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010286:	bf00      	nop
 8010288:	e0aa      	b.n	80103e0 <UART_SetConfig+0x5d0>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	4a79      	ldr	r2, [pc, #484]	; (8010474 <UART_SetConfig+0x664>)
 8010290:	4293      	cmp	r3, r2
 8010292:	d132      	bne.n	80102fa <UART_SetConfig+0x4ea>
 8010294:	4b76      	ldr	r3, [pc, #472]	; (8010470 <UART_SetConfig+0x660>)
 8010296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010298:	f003 0307 	and.w	r3, r3, #7
 801029c:	2b05      	cmp	r3, #5
 801029e:	d827      	bhi.n	80102f0 <UART_SetConfig+0x4e0>
 80102a0:	a201      	add	r2, pc, #4	; (adr r2, 80102a8 <UART_SetConfig+0x498>)
 80102a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102a6:	bf00      	nop
 80102a8:	080102c1 	.word	0x080102c1
 80102ac:	080102c9 	.word	0x080102c9
 80102b0:	080102d1 	.word	0x080102d1
 80102b4:	080102d9 	.word	0x080102d9
 80102b8:	080102e1 	.word	0x080102e1
 80102bc:	080102e9 	.word	0x080102e9
 80102c0:	2300      	movs	r3, #0
 80102c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102c6:	e08b      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80102c8:	2304      	movs	r3, #4
 80102ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ce:	e087      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80102d0:	2308      	movs	r3, #8
 80102d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102d6:	e083      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80102d8:	2310      	movs	r3, #16
 80102da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102de:	e07f      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80102e0:	2320      	movs	r3, #32
 80102e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102e6:	e07b      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80102e8:	2340      	movs	r3, #64	; 0x40
 80102ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ee:	e077      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80102f0:	2380      	movs	r3, #128	; 0x80
 80102f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102f6:	bf00      	nop
 80102f8:	e072      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	4a5e      	ldr	r2, [pc, #376]	; (8010478 <UART_SetConfig+0x668>)
 8010300:	4293      	cmp	r3, r2
 8010302:	d132      	bne.n	801036a <UART_SetConfig+0x55a>
 8010304:	4b5a      	ldr	r3, [pc, #360]	; (8010470 <UART_SetConfig+0x660>)
 8010306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010308:	f003 0307 	and.w	r3, r3, #7
 801030c:	2b05      	cmp	r3, #5
 801030e:	d827      	bhi.n	8010360 <UART_SetConfig+0x550>
 8010310:	a201      	add	r2, pc, #4	; (adr r2, 8010318 <UART_SetConfig+0x508>)
 8010312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010316:	bf00      	nop
 8010318:	08010331 	.word	0x08010331
 801031c:	08010339 	.word	0x08010339
 8010320:	08010341 	.word	0x08010341
 8010324:	08010349 	.word	0x08010349
 8010328:	08010351 	.word	0x08010351
 801032c:	08010359 	.word	0x08010359
 8010330:	2300      	movs	r3, #0
 8010332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010336:	e053      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010338:	2304      	movs	r3, #4
 801033a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801033e:	e04f      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010340:	2308      	movs	r3, #8
 8010342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010346:	e04b      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010348:	2310      	movs	r3, #16
 801034a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801034e:	e047      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010350:	2320      	movs	r3, #32
 8010352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010356:	e043      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010358:	2340      	movs	r3, #64	; 0x40
 801035a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801035e:	e03f      	b.n	80103e0 <UART_SetConfig+0x5d0>
 8010360:	2380      	movs	r3, #128	; 0x80
 8010362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010366:	bf00      	nop
 8010368:	e03a      	b.n	80103e0 <UART_SetConfig+0x5d0>
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	4a43      	ldr	r2, [pc, #268]	; (801047c <UART_SetConfig+0x66c>)
 8010370:	4293      	cmp	r3, r2
 8010372:	d132      	bne.n	80103da <UART_SetConfig+0x5ca>
 8010374:	4b3e      	ldr	r3, [pc, #248]	; (8010470 <UART_SetConfig+0x660>)
 8010376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010378:	f003 0307 	and.w	r3, r3, #7
 801037c:	2b05      	cmp	r3, #5
 801037e:	d827      	bhi.n	80103d0 <UART_SetConfig+0x5c0>
 8010380:	a201      	add	r2, pc, #4	; (adr r2, 8010388 <UART_SetConfig+0x578>)
 8010382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010386:	bf00      	nop
 8010388:	080103a1 	.word	0x080103a1
 801038c:	080103a9 	.word	0x080103a9
 8010390:	080103b1 	.word	0x080103b1
 8010394:	080103b9 	.word	0x080103b9
 8010398:	080103c1 	.word	0x080103c1
 801039c:	080103c9 	.word	0x080103c9
 80103a0:	2302      	movs	r3, #2
 80103a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103a6:	e01b      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80103a8:	2304      	movs	r3, #4
 80103aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103ae:	e017      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80103b0:	2308      	movs	r3, #8
 80103b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103b6:	e013      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80103b8:	2310      	movs	r3, #16
 80103ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103be:	e00f      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80103c0:	2320      	movs	r3, #32
 80103c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103c6:	e00b      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80103c8:	2340      	movs	r3, #64	; 0x40
 80103ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103ce:	e007      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80103d0:	2380      	movs	r3, #128	; 0x80
 80103d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103d6:	bf00      	nop
 80103d8:	e002      	b.n	80103e0 <UART_SetConfig+0x5d0>
 80103da:	2380      	movs	r3, #128	; 0x80
 80103dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	4a25      	ldr	r2, [pc, #148]	; (801047c <UART_SetConfig+0x66c>)
 80103e6:	4293      	cmp	r3, r2
 80103e8:	f040 80b8 	bne.w	801055c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80103ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80103f0:	2b08      	cmp	r3, #8
 80103f2:	d019      	beq.n	8010428 <UART_SetConfig+0x618>
 80103f4:	2b08      	cmp	r3, #8
 80103f6:	dc04      	bgt.n	8010402 <UART_SetConfig+0x5f2>
 80103f8:	2b02      	cmp	r3, #2
 80103fa:	d009      	beq.n	8010410 <UART_SetConfig+0x600>
 80103fc:	2b04      	cmp	r3, #4
 80103fe:	d00b      	beq.n	8010418 <UART_SetConfig+0x608>
 8010400:	e042      	b.n	8010488 <UART_SetConfig+0x678>
 8010402:	2b20      	cmp	r3, #32
 8010404:	d02b      	beq.n	801045e <UART_SetConfig+0x64e>
 8010406:	2b40      	cmp	r3, #64	; 0x40
 8010408:	d02c      	beq.n	8010464 <UART_SetConfig+0x654>
 801040a:	2b10      	cmp	r3, #16
 801040c:	d014      	beq.n	8010438 <UART_SetConfig+0x628>
 801040e:	e03b      	b.n	8010488 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010410:	f7fb fad2 	bl	800b9b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8010414:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010416:	e03d      	b.n	8010494 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010418:	f107 0314 	add.w	r3, r7, #20
 801041c:	4618      	mov	r0, r3
 801041e:	f7fb fae1 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010422:	69bb      	ldr	r3, [r7, #24]
 8010424:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010426:	e035      	b.n	8010494 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010428:	f107 0308 	add.w	r3, r7, #8
 801042c:	4618      	mov	r0, r3
 801042e:	f7fb fc25 	bl	800bc7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010436:	e02d      	b.n	8010494 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010438:	4b0d      	ldr	r3, [pc, #52]	; (8010470 <UART_SetConfig+0x660>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f003 0320 	and.w	r3, r3, #32
 8010440:	2b00      	cmp	r3, #0
 8010442:	d009      	beq.n	8010458 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010444:	4b0a      	ldr	r3, [pc, #40]	; (8010470 <UART_SetConfig+0x660>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	08db      	lsrs	r3, r3, #3
 801044a:	f003 0303 	and.w	r3, r3, #3
 801044e:	4a0c      	ldr	r2, [pc, #48]	; (8010480 <UART_SetConfig+0x670>)
 8010450:	fa22 f303 	lsr.w	r3, r2, r3
 8010454:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010456:	e01d      	b.n	8010494 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8010458:	4b09      	ldr	r3, [pc, #36]	; (8010480 <UART_SetConfig+0x670>)
 801045a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801045c:	e01a      	b.n	8010494 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801045e:	4b09      	ldr	r3, [pc, #36]	; (8010484 <UART_SetConfig+0x674>)
 8010460:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010462:	e017      	b.n	8010494 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010468:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801046a:	e013      	b.n	8010494 <UART_SetConfig+0x684>
 801046c:	40011400 	.word	0x40011400
 8010470:	58024400 	.word	0x58024400
 8010474:	40007800 	.word	0x40007800
 8010478:	40007c00 	.word	0x40007c00
 801047c:	58000c00 	.word	0x58000c00
 8010480:	03d09000 	.word	0x03d09000
 8010484:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8010488:	2300      	movs	r3, #0
 801048a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801048c:	2301      	movs	r3, #1
 801048e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010492:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010496:	2b00      	cmp	r3, #0
 8010498:	f000 824d 	beq.w	8010936 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104a0:	4aad      	ldr	r2, [pc, #692]	; (8010758 <UART_SetConfig+0x948>)
 80104a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104a6:	461a      	mov	r2, r3
 80104a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80104ae:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	685a      	ldr	r2, [r3, #4]
 80104b4:	4613      	mov	r3, r2
 80104b6:	005b      	lsls	r3, r3, #1
 80104b8:	4413      	add	r3, r2
 80104ba:	6a3a      	ldr	r2, [r7, #32]
 80104bc:	429a      	cmp	r2, r3
 80104be:	d305      	bcc.n	80104cc <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80104c6:	6a3a      	ldr	r2, [r7, #32]
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d903      	bls.n	80104d4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80104cc:	2301      	movs	r3, #1
 80104ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80104d2:	e230      	b.n	8010936 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d6:	4618      	mov	r0, r3
 80104d8:	f04f 0100 	mov.w	r1, #0
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104e0:	4a9d      	ldr	r2, [pc, #628]	; (8010758 <UART_SetConfig+0x948>)
 80104e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	f04f 0400 	mov.w	r4, #0
 80104ec:	461a      	mov	r2, r3
 80104ee:	4623      	mov	r3, r4
 80104f0:	f7ef ff4e 	bl	8000390 <__aeabi_uldivmod>
 80104f4:	4603      	mov	r3, r0
 80104f6:	460c      	mov	r4, r1
 80104f8:	4619      	mov	r1, r3
 80104fa:	4622      	mov	r2, r4
 80104fc:	f04f 0300 	mov.w	r3, #0
 8010500:	f04f 0400 	mov.w	r4, #0
 8010504:	0214      	lsls	r4, r2, #8
 8010506:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 801050a:	020b      	lsls	r3, r1, #8
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	6852      	ldr	r2, [r2, #4]
 8010510:	0852      	lsrs	r2, r2, #1
 8010512:	4611      	mov	r1, r2
 8010514:	f04f 0200 	mov.w	r2, #0
 8010518:	eb13 0b01 	adds.w	fp, r3, r1
 801051c:	eb44 0c02 	adc.w	ip, r4, r2
 8010520:	4658      	mov	r0, fp
 8010522:	4661      	mov	r1, ip
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	f04f 0400 	mov.w	r4, #0
 801052c:	461a      	mov	r2, r3
 801052e:	4623      	mov	r3, r4
 8010530:	f7ef ff2e 	bl	8000390 <__aeabi_uldivmod>
 8010534:	4603      	mov	r3, r0
 8010536:	460c      	mov	r4, r1
 8010538:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801053a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801053c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010540:	d308      	bcc.n	8010554 <UART_SetConfig+0x744>
 8010542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010548:	d204      	bcs.n	8010554 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010550:	60da      	str	r2, [r3, #12]
 8010552:	e1f0      	b.n	8010936 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8010554:	2301      	movs	r3, #1
 8010556:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801055a:	e1ec      	b.n	8010936 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	69db      	ldr	r3, [r3, #28]
 8010560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010564:	f040 8100 	bne.w	8010768 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8010568:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801056c:	2b40      	cmp	r3, #64	; 0x40
 801056e:	f200 80b7 	bhi.w	80106e0 <UART_SetConfig+0x8d0>
 8010572:	a201      	add	r2, pc, #4	; (adr r2, 8010578 <UART_SetConfig+0x768>)
 8010574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010578:	0801067d 	.word	0x0801067d
 801057c:	08010685 	.word	0x08010685
 8010580:	080106e1 	.word	0x080106e1
 8010584:	080106e1 	.word	0x080106e1
 8010588:	0801068d 	.word	0x0801068d
 801058c:	080106e1 	.word	0x080106e1
 8010590:	080106e1 	.word	0x080106e1
 8010594:	080106e1 	.word	0x080106e1
 8010598:	0801069d 	.word	0x0801069d
 801059c:	080106e1 	.word	0x080106e1
 80105a0:	080106e1 	.word	0x080106e1
 80105a4:	080106e1 	.word	0x080106e1
 80105a8:	080106e1 	.word	0x080106e1
 80105ac:	080106e1 	.word	0x080106e1
 80105b0:	080106e1 	.word	0x080106e1
 80105b4:	080106e1 	.word	0x080106e1
 80105b8:	080106ad 	.word	0x080106ad
 80105bc:	080106e1 	.word	0x080106e1
 80105c0:	080106e1 	.word	0x080106e1
 80105c4:	080106e1 	.word	0x080106e1
 80105c8:	080106e1 	.word	0x080106e1
 80105cc:	080106e1 	.word	0x080106e1
 80105d0:	080106e1 	.word	0x080106e1
 80105d4:	080106e1 	.word	0x080106e1
 80105d8:	080106e1 	.word	0x080106e1
 80105dc:	080106e1 	.word	0x080106e1
 80105e0:	080106e1 	.word	0x080106e1
 80105e4:	080106e1 	.word	0x080106e1
 80105e8:	080106e1 	.word	0x080106e1
 80105ec:	080106e1 	.word	0x080106e1
 80105f0:	080106e1 	.word	0x080106e1
 80105f4:	080106e1 	.word	0x080106e1
 80105f8:	080106d3 	.word	0x080106d3
 80105fc:	080106e1 	.word	0x080106e1
 8010600:	080106e1 	.word	0x080106e1
 8010604:	080106e1 	.word	0x080106e1
 8010608:	080106e1 	.word	0x080106e1
 801060c:	080106e1 	.word	0x080106e1
 8010610:	080106e1 	.word	0x080106e1
 8010614:	080106e1 	.word	0x080106e1
 8010618:	080106e1 	.word	0x080106e1
 801061c:	080106e1 	.word	0x080106e1
 8010620:	080106e1 	.word	0x080106e1
 8010624:	080106e1 	.word	0x080106e1
 8010628:	080106e1 	.word	0x080106e1
 801062c:	080106e1 	.word	0x080106e1
 8010630:	080106e1 	.word	0x080106e1
 8010634:	080106e1 	.word	0x080106e1
 8010638:	080106e1 	.word	0x080106e1
 801063c:	080106e1 	.word	0x080106e1
 8010640:	080106e1 	.word	0x080106e1
 8010644:	080106e1 	.word	0x080106e1
 8010648:	080106e1 	.word	0x080106e1
 801064c:	080106e1 	.word	0x080106e1
 8010650:	080106e1 	.word	0x080106e1
 8010654:	080106e1 	.word	0x080106e1
 8010658:	080106e1 	.word	0x080106e1
 801065c:	080106e1 	.word	0x080106e1
 8010660:	080106e1 	.word	0x080106e1
 8010664:	080106e1 	.word	0x080106e1
 8010668:	080106e1 	.word	0x080106e1
 801066c:	080106e1 	.word	0x080106e1
 8010670:	080106e1 	.word	0x080106e1
 8010674:	080106e1 	.word	0x080106e1
 8010678:	080106d9 	.word	0x080106d9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801067c:	f7f9 ffee 	bl	800a65c <HAL_RCC_GetPCLK1Freq>
 8010680:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010682:	e033      	b.n	80106ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010684:	f7fa f800 	bl	800a688 <HAL_RCC_GetPCLK2Freq>
 8010688:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801068a:	e02f      	b.n	80106ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801068c:	f107 0314 	add.w	r3, r7, #20
 8010690:	4618      	mov	r0, r3
 8010692:	f7fb f9a7 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010696:	69bb      	ldr	r3, [r7, #24]
 8010698:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801069a:	e027      	b.n	80106ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801069c:	f107 0308 	add.w	r3, r7, #8
 80106a0:	4618      	mov	r0, r3
 80106a2:	f7fb faeb 	bl	800bc7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106aa:	e01f      	b.n	80106ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80106ac:	4b2b      	ldr	r3, [pc, #172]	; (801075c <UART_SetConfig+0x94c>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	f003 0320 	and.w	r3, r3, #32
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d009      	beq.n	80106cc <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80106b8:	4b28      	ldr	r3, [pc, #160]	; (801075c <UART_SetConfig+0x94c>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	08db      	lsrs	r3, r3, #3
 80106be:	f003 0303 	and.w	r3, r3, #3
 80106c2:	4a27      	ldr	r2, [pc, #156]	; (8010760 <UART_SetConfig+0x950>)
 80106c4:	fa22 f303 	lsr.w	r3, r2, r3
 80106c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80106ca:	e00f      	b.n	80106ec <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80106cc:	4b24      	ldr	r3, [pc, #144]	; (8010760 <UART_SetConfig+0x950>)
 80106ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106d0:	e00c      	b.n	80106ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80106d2:	4b24      	ldr	r3, [pc, #144]	; (8010764 <UART_SetConfig+0x954>)
 80106d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106d6:	e009      	b.n	80106ec <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80106d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80106dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106de:	e005      	b.n	80106ec <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80106e0:	2300      	movs	r3, #0
 80106e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80106e4:	2301      	movs	r3, #1
 80106e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80106ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80106ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	f000 8121 	beq.w	8010936 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f8:	4a17      	ldr	r2, [pc, #92]	; (8010758 <UART_SetConfig+0x948>)
 80106fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106fe:	461a      	mov	r2, r3
 8010700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010702:	fbb3 f3f2 	udiv	r3, r3, r2
 8010706:	005a      	lsls	r2, r3, #1
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	685b      	ldr	r3, [r3, #4]
 801070c:	085b      	lsrs	r3, r3, #1
 801070e:	441a      	add	r2, r3
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	fbb2 f3f3 	udiv	r3, r2, r3
 8010718:	b29b      	uxth	r3, r3
 801071a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801071e:	2b0f      	cmp	r3, #15
 8010720:	d916      	bls.n	8010750 <UART_SetConfig+0x940>
 8010722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010728:	d212      	bcs.n	8010750 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801072c:	b29b      	uxth	r3, r3
 801072e:	f023 030f 	bic.w	r3, r3, #15
 8010732:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010736:	085b      	lsrs	r3, r3, #1
 8010738:	b29b      	uxth	r3, r3
 801073a:	f003 0307 	and.w	r3, r3, #7
 801073e:	b29a      	uxth	r2, r3
 8010740:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010742:	4313      	orrs	r3, r2
 8010744:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801074c:	60da      	str	r2, [r3, #12]
 801074e:	e0f2      	b.n	8010936 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8010750:	2301      	movs	r3, #1
 8010752:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010756:	e0ee      	b.n	8010936 <UART_SetConfig+0xb26>
 8010758:	0801af70 	.word	0x0801af70
 801075c:	58024400 	.word	0x58024400
 8010760:	03d09000 	.word	0x03d09000
 8010764:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8010768:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801076c:	2b40      	cmp	r3, #64	; 0x40
 801076e:	f200 80b7 	bhi.w	80108e0 <UART_SetConfig+0xad0>
 8010772:	a201      	add	r2, pc, #4	; (adr r2, 8010778 <UART_SetConfig+0x968>)
 8010774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010778:	0801087d 	.word	0x0801087d
 801077c:	08010885 	.word	0x08010885
 8010780:	080108e1 	.word	0x080108e1
 8010784:	080108e1 	.word	0x080108e1
 8010788:	0801088d 	.word	0x0801088d
 801078c:	080108e1 	.word	0x080108e1
 8010790:	080108e1 	.word	0x080108e1
 8010794:	080108e1 	.word	0x080108e1
 8010798:	0801089d 	.word	0x0801089d
 801079c:	080108e1 	.word	0x080108e1
 80107a0:	080108e1 	.word	0x080108e1
 80107a4:	080108e1 	.word	0x080108e1
 80107a8:	080108e1 	.word	0x080108e1
 80107ac:	080108e1 	.word	0x080108e1
 80107b0:	080108e1 	.word	0x080108e1
 80107b4:	080108e1 	.word	0x080108e1
 80107b8:	080108ad 	.word	0x080108ad
 80107bc:	080108e1 	.word	0x080108e1
 80107c0:	080108e1 	.word	0x080108e1
 80107c4:	080108e1 	.word	0x080108e1
 80107c8:	080108e1 	.word	0x080108e1
 80107cc:	080108e1 	.word	0x080108e1
 80107d0:	080108e1 	.word	0x080108e1
 80107d4:	080108e1 	.word	0x080108e1
 80107d8:	080108e1 	.word	0x080108e1
 80107dc:	080108e1 	.word	0x080108e1
 80107e0:	080108e1 	.word	0x080108e1
 80107e4:	080108e1 	.word	0x080108e1
 80107e8:	080108e1 	.word	0x080108e1
 80107ec:	080108e1 	.word	0x080108e1
 80107f0:	080108e1 	.word	0x080108e1
 80107f4:	080108e1 	.word	0x080108e1
 80107f8:	080108d3 	.word	0x080108d3
 80107fc:	080108e1 	.word	0x080108e1
 8010800:	080108e1 	.word	0x080108e1
 8010804:	080108e1 	.word	0x080108e1
 8010808:	080108e1 	.word	0x080108e1
 801080c:	080108e1 	.word	0x080108e1
 8010810:	080108e1 	.word	0x080108e1
 8010814:	080108e1 	.word	0x080108e1
 8010818:	080108e1 	.word	0x080108e1
 801081c:	080108e1 	.word	0x080108e1
 8010820:	080108e1 	.word	0x080108e1
 8010824:	080108e1 	.word	0x080108e1
 8010828:	080108e1 	.word	0x080108e1
 801082c:	080108e1 	.word	0x080108e1
 8010830:	080108e1 	.word	0x080108e1
 8010834:	080108e1 	.word	0x080108e1
 8010838:	080108e1 	.word	0x080108e1
 801083c:	080108e1 	.word	0x080108e1
 8010840:	080108e1 	.word	0x080108e1
 8010844:	080108e1 	.word	0x080108e1
 8010848:	080108e1 	.word	0x080108e1
 801084c:	080108e1 	.word	0x080108e1
 8010850:	080108e1 	.word	0x080108e1
 8010854:	080108e1 	.word	0x080108e1
 8010858:	080108e1 	.word	0x080108e1
 801085c:	080108e1 	.word	0x080108e1
 8010860:	080108e1 	.word	0x080108e1
 8010864:	080108e1 	.word	0x080108e1
 8010868:	080108e1 	.word	0x080108e1
 801086c:	080108e1 	.word	0x080108e1
 8010870:	080108e1 	.word	0x080108e1
 8010874:	080108e1 	.word	0x080108e1
 8010878:	080108d9 	.word	0x080108d9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801087c:	f7f9 feee 	bl	800a65c <HAL_RCC_GetPCLK1Freq>
 8010880:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010882:	e033      	b.n	80108ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010884:	f7f9 ff00 	bl	800a688 <HAL_RCC_GetPCLK2Freq>
 8010888:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801088a:	e02f      	b.n	80108ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801088c:	f107 0314 	add.w	r3, r7, #20
 8010890:	4618      	mov	r0, r3
 8010892:	f7fb f8a7 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010896:	69bb      	ldr	r3, [r7, #24]
 8010898:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801089a:	e027      	b.n	80108ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801089c:	f107 0308 	add.w	r3, r7, #8
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7fb f9eb 	bl	800bc7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108aa:	e01f      	b.n	80108ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80108ac:	4b2c      	ldr	r3, [pc, #176]	; (8010960 <UART_SetConfig+0xb50>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	f003 0320 	and.w	r3, r3, #32
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d009      	beq.n	80108cc <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80108b8:	4b29      	ldr	r3, [pc, #164]	; (8010960 <UART_SetConfig+0xb50>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	08db      	lsrs	r3, r3, #3
 80108be:	f003 0303 	and.w	r3, r3, #3
 80108c2:	4a28      	ldr	r2, [pc, #160]	; (8010964 <UART_SetConfig+0xb54>)
 80108c4:	fa22 f303 	lsr.w	r3, r2, r3
 80108c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80108ca:	e00f      	b.n	80108ec <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80108cc:	4b25      	ldr	r3, [pc, #148]	; (8010964 <UART_SetConfig+0xb54>)
 80108ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108d0:	e00c      	b.n	80108ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80108d2:	4b25      	ldr	r3, [pc, #148]	; (8010968 <UART_SetConfig+0xb58>)
 80108d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108d6:	e009      	b.n	80108ec <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80108d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80108dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108de:	e005      	b.n	80108ec <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80108e0:	2300      	movs	r3, #0
 80108e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80108e4:	2301      	movs	r3, #1
 80108e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80108ea:	bf00      	nop
    }

    if (pclk != 0U)
 80108ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d021      	beq.n	8010936 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f6:	4a1d      	ldr	r2, [pc, #116]	; (801096c <UART_SetConfig+0xb5c>)
 80108f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108fc:	461a      	mov	r2, r3
 80108fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010900:	fbb3 f2f2 	udiv	r2, r3, r2
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	085b      	lsrs	r3, r3, #1
 801090a:	441a      	add	r2, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	685b      	ldr	r3, [r3, #4]
 8010910:	fbb2 f3f3 	udiv	r3, r2, r3
 8010914:	b29b      	uxth	r3, r3
 8010916:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801091a:	2b0f      	cmp	r3, #15
 801091c:	d908      	bls.n	8010930 <UART_SetConfig+0xb20>
 801091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010924:	d204      	bcs.n	8010930 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801092c:	60da      	str	r2, [r3, #12]
 801092e:	e002      	b.n	8010936 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8010930:	2301      	movs	r3, #1
 8010932:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2201      	movs	r2, #1
 801093a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2201      	movs	r2, #1
 8010942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2200      	movs	r2, #0
 801094a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2200      	movs	r2, #0
 8010950:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8010952:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8010956:	4618      	mov	r0, r3
 8010958:	3738      	adds	r7, #56	; 0x38
 801095a:	46bd      	mov	sp, r7
 801095c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8010960:	58024400 	.word	0x58024400
 8010964:	03d09000 	.word	0x03d09000
 8010968:	003d0900 	.word	0x003d0900
 801096c:	0801af70 	.word	0x0801af70

08010970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010970:	b480      	push	{r7}
 8010972:	b083      	sub	sp, #12
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801097c:	f003 0301 	and.w	r3, r3, #1
 8010980:	2b00      	cmp	r3, #0
 8010982:	d00a      	beq.n	801099a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	430a      	orrs	r2, r1
 8010998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801099e:	f003 0302 	and.w	r3, r3, #2
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d00a      	beq.n	80109bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	430a      	orrs	r2, r1
 80109ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109c0:	f003 0304 	and.w	r3, r3, #4
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d00a      	beq.n	80109de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	430a      	orrs	r2, r1
 80109dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109e2:	f003 0308 	and.w	r3, r3, #8
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d00a      	beq.n	8010a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	430a      	orrs	r2, r1
 80109fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a04:	f003 0310 	and.w	r3, r3, #16
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d00a      	beq.n	8010a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	689b      	ldr	r3, [r3, #8]
 8010a12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	430a      	orrs	r2, r1
 8010a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a26:	f003 0320 	and.w	r3, r3, #32
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00a      	beq.n	8010a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	689b      	ldr	r3, [r3, #8]
 8010a34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	430a      	orrs	r2, r1
 8010a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d01a      	beq.n	8010a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	430a      	orrs	r2, r1
 8010a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a6e:	d10a      	bne.n	8010a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	685b      	ldr	r3, [r3, #4]
 8010a76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	430a      	orrs	r2, r1
 8010a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d00a      	beq.n	8010aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	685b      	ldr	r3, [r3, #4]
 8010a98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	430a      	orrs	r2, r1
 8010aa6:	605a      	str	r2, [r3, #4]
  }
}
 8010aa8:	bf00      	nop
 8010aaa:	370c      	adds	r7, #12
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr

08010ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b086      	sub	sp, #24
 8010ab8:	af02      	add	r7, sp, #8
 8010aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8010ac4:	f7f3 fd8a 	bl	80045dc <HAL_GetTick>
 8010ac8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	f003 0308 	and.w	r3, r3, #8
 8010ad4:	2b08      	cmp	r3, #8
 8010ad6:	d10e      	bne.n	8010af6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010adc:	9300      	str	r3, [sp, #0]
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f000 f82c 	bl	8010b44 <UART_WaitOnFlagUntilTimeout>
 8010aec:	4603      	mov	r3, r0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d001      	beq.n	8010af6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010af2:	2303      	movs	r3, #3
 8010af4:	e022      	b.n	8010b3c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f003 0304 	and.w	r3, r3, #4
 8010b00:	2b04      	cmp	r3, #4
 8010b02:	d10e      	bne.n	8010b22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010b08:	9300      	str	r3, [sp, #0]
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f000 f816 	bl	8010b44 <UART_WaitOnFlagUntilTimeout>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d001      	beq.n	8010b22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b1e:	2303      	movs	r3, #3
 8010b20:	e00c      	b.n	8010b3c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2220      	movs	r2, #32
 8010b26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2220      	movs	r2, #32
 8010b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2200      	movs	r2, #0
 8010b36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010b3a:	2300      	movs	r3, #0
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3710      	adds	r7, #16
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b084      	sub	sp, #16
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	60f8      	str	r0, [r7, #12]
 8010b4c:	60b9      	str	r1, [r7, #8]
 8010b4e:	603b      	str	r3, [r7, #0]
 8010b50:	4613      	mov	r3, r2
 8010b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b54:	e062      	b.n	8010c1c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b5c:	d05e      	beq.n	8010c1c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b5e:	f7f3 fd3d 	bl	80045dc <HAL_GetTick>
 8010b62:	4602      	mov	r2, r0
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	1ad3      	subs	r3, r2, r3
 8010b68:	69ba      	ldr	r2, [r7, #24]
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d302      	bcc.n	8010b74 <UART_WaitOnFlagUntilTimeout+0x30>
 8010b6e:	69bb      	ldr	r3, [r7, #24]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d11d      	bne.n	8010bb0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010b82:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	689a      	ldr	r2, [r3, #8]
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f022 0201 	bic.w	r2, r2, #1
 8010b92:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2220      	movs	r2, #32
 8010b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	2220      	movs	r2, #32
 8010ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8010bac:	2303      	movs	r3, #3
 8010bae:	e045      	b.n	8010c3c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f003 0304 	and.w	r3, r3, #4
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d02e      	beq.n	8010c1c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	69db      	ldr	r3, [r3, #28]
 8010bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010bcc:	d126      	bne.n	8010c1c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010bd6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	681a      	ldr	r2, [r3, #0]
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010be6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	689a      	ldr	r2, [r3, #8]
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	f022 0201 	bic.w	r2, r2, #1
 8010bf6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2220      	movs	r2, #32
 8010bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	2220      	movs	r2, #32
 8010c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2220      	movs	r2, #32
 8010c0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	2200      	movs	r2, #0
 8010c14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8010c18:	2303      	movs	r3, #3
 8010c1a:	e00f      	b.n	8010c3c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	69da      	ldr	r2, [r3, #28]
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	4013      	ands	r3, r2
 8010c26:	68ba      	ldr	r2, [r7, #8]
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	bf0c      	ite	eq
 8010c2c:	2301      	moveq	r3, #1
 8010c2e:	2300      	movne	r3, #0
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	461a      	mov	r2, r3
 8010c34:	79fb      	ldrb	r3, [r7, #7]
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d08d      	beq.n	8010b56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c3a:	2300      	movs	r3, #0
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3710      	adds	r7, #16
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}

08010c44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010c44:	b480      	push	{r7}
 8010c46:	b083      	sub	sp, #12
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	681a      	ldr	r2, [r3, #0]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010c5a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	689a      	ldr	r2, [r3, #8]
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010c6a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2220      	movs	r2, #32
 8010c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8010c74:	bf00      	nop
 8010c76:	370c      	adds	r7, #12
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7e:	4770      	bx	lr

08010c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010c80:	b480      	push	{r7}
 8010c82:	b083      	sub	sp, #12
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	681a      	ldr	r2, [r3, #0]
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010c96:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	6899      	ldr	r1, [r3, #8]
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681a      	ldr	r2, [r3, #0]
 8010ca2:	4b08      	ldr	r3, [pc, #32]	; (8010cc4 <UART_EndRxTransfer+0x44>)
 8010ca4:	400b      	ands	r3, r1
 8010ca6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2220      	movs	r2, #32
 8010cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8010cb6:	bf00      	nop
 8010cb8:	370c      	adds	r7, #12
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc0:	4770      	bx	lr
 8010cc2:	bf00      	nop
 8010cc4:	effffffe 	.word	0xeffffffe

08010cc8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b084      	sub	sp, #16
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cd4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	69db      	ldr	r3, [r3, #28]
 8010cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cde:	d01f      	beq.n	8010d20 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	681a      	ldr	r2, [r3, #0]
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010cf6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	689a      	ldr	r2, [r3, #8]
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	f022 0201 	bic.w	r2, r2, #1
 8010d06:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	689a      	ldr	r2, [r3, #8]
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d16:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	2220      	movs	r2, #32
 8010d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010d20:	68f8      	ldr	r0, [r7, #12]
 8010d22:	f7ff f861 	bl	800fde8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d26:	bf00      	nop
 8010d28:	3710      	adds	r7, #16
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b084      	sub	sp, #16
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010d3c:	68f8      	ldr	r0, [r7, #12]
 8010d3e:	f7ef fef5 	bl	8000b2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d42:	bf00      	nop
 8010d44:	3710      	adds	r7, #16
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}

08010d4a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010d4a:	b580      	push	{r7, lr}
 8010d4c:	b086      	sub	sp, #24
 8010d4e:	af00      	add	r7, sp, #0
 8010d50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d56:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d5e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d66:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	689b      	ldr	r3, [r3, #8]
 8010d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d72:	2b80      	cmp	r3, #128	; 0x80
 8010d74:	d109      	bne.n	8010d8a <UART_DMAError+0x40>
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	2b21      	cmp	r3, #33	; 0x21
 8010d7a:	d106      	bne.n	8010d8a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	2200      	movs	r2, #0
 8010d80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010d84:	6978      	ldr	r0, [r7, #20]
 8010d86:	f7ff ff5d 	bl	8010c44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	689b      	ldr	r3, [r3, #8]
 8010d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d94:	2b40      	cmp	r3, #64	; 0x40
 8010d96:	d109      	bne.n	8010dac <UART_DMAError+0x62>
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	2b22      	cmp	r3, #34	; 0x22
 8010d9c:	d106      	bne.n	8010dac <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	2200      	movs	r2, #0
 8010da2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010da6:	6978      	ldr	r0, [r7, #20]
 8010da8:	f7ff ff6a 	bl	8010c80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010db2:	f043 0210 	orr.w	r2, r3, #16
 8010db6:	697b      	ldr	r3, [r7, #20]
 8010db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010dbc:	6978      	ldr	r0, [r7, #20]
 8010dbe:	f7ff f81d 	bl	800fdfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010dc2:	bf00      	nop
 8010dc4:	3718      	adds	r7, #24
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}

08010dca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010dca:	b480      	push	{r7}
 8010dcc:	b085      	sub	sp, #20
 8010dce:	af00      	add	r7, sp, #0
 8010dd0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010dd8:	2b01      	cmp	r3, #1
 8010dda:	d101      	bne.n	8010de0 <HAL_UARTEx_DisableFifoMode+0x16>
 8010ddc:	2302      	movs	r3, #2
 8010dde:	e027      	b.n	8010e30 <HAL_UARTEx_DisableFifoMode+0x66>
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2201      	movs	r2, #1
 8010de4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2224      	movs	r2, #36	; 0x24
 8010dec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	681a      	ldr	r2, [r3, #0]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	f022 0201 	bic.w	r2, r2, #1
 8010e06:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010e0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2200      	movs	r2, #0
 8010e14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	68fa      	ldr	r2, [r7, #12]
 8010e1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	2220      	movs	r2, #32
 8010e22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010e2e:	2300      	movs	r3, #0
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	3714      	adds	r7, #20
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr

08010e3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b084      	sub	sp, #16
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
 8010e44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010e4c:	2b01      	cmp	r3, #1
 8010e4e:	d101      	bne.n	8010e54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010e50:	2302      	movs	r3, #2
 8010e52:	e02d      	b.n	8010eb0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2201      	movs	r2, #1
 8010e58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2224      	movs	r2, #36	; 0x24
 8010e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	681a      	ldr	r2, [r3, #0]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f022 0201 	bic.w	r2, r2, #1
 8010e7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	689b      	ldr	r3, [r3, #8]
 8010e82:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	683a      	ldr	r2, [r7, #0]
 8010e8c:	430a      	orrs	r2, r1
 8010e8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f000 f84f 	bl	8010f34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	68fa      	ldr	r2, [r7, #12]
 8010e9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2220      	movs	r2, #32
 8010ea2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010eae:	2300      	movs	r3, #0
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3710      	adds	r7, #16
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}

08010eb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b084      	sub	sp, #16
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010ec8:	2b01      	cmp	r3, #1
 8010eca:	d101      	bne.n	8010ed0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010ecc:	2302      	movs	r3, #2
 8010ece:	e02d      	b.n	8010f2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2201      	movs	r2, #1
 8010ed4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2224      	movs	r2, #36	; 0x24
 8010edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	f022 0201 	bic.w	r2, r2, #1
 8010ef6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	689b      	ldr	r3, [r3, #8]
 8010efe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	683a      	ldr	r2, [r7, #0]
 8010f08:	430a      	orrs	r2, r1
 8010f0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f000 f811 	bl	8010f34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	68fa      	ldr	r2, [r7, #12]
 8010f18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2220      	movs	r2, #32
 8010f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2200      	movs	r2, #0
 8010f26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010f2a:	2300      	movs	r3, #0
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3710      	adds	r7, #16
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010f34:	b480      	push	{r7}
 8010f36:	b089      	sub	sp, #36	; 0x24
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8010f3c:	4a2f      	ldr	r2, [pc, #188]	; (8010ffc <UARTEx_SetNbDataToProcess+0xc8>)
 8010f3e:	f107 0314 	add.w	r3, r7, #20
 8010f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f46:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8010f4a:	4a2d      	ldr	r2, [pc, #180]	; (8011000 <UARTEx_SetNbDataToProcess+0xcc>)
 8010f4c:	f107 030c 	add.w	r3, r7, #12
 8010f50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f54:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d108      	bne.n	8010f72 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2201      	movs	r2, #1
 8010f64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2201      	movs	r2, #1
 8010f6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010f70:	e03d      	b.n	8010fee <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010f72:	2310      	movs	r3, #16
 8010f74:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010f76:	2310      	movs	r3, #16
 8010f78:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	689b      	ldr	r3, [r3, #8]
 8010f80:	0e5b      	lsrs	r3, r3, #25
 8010f82:	b2db      	uxtb	r3, r3
 8010f84:	f003 0307 	and.w	r3, r3, #7
 8010f88:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	689b      	ldr	r3, [r3, #8]
 8010f90:	0f5b      	lsrs	r3, r3, #29
 8010f92:	b2db      	uxtb	r3, r3
 8010f94:	f003 0307 	and.w	r3, r3, #7
 8010f98:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8010f9a:	7fbb      	ldrb	r3, [r7, #30]
 8010f9c:	7f3a      	ldrb	r2, [r7, #28]
 8010f9e:	f107 0120 	add.w	r1, r7, #32
 8010fa2:	440a      	add	r2, r1
 8010fa4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010fa8:	fb02 f303 	mul.w	r3, r2, r3
 8010fac:	7f3a      	ldrb	r2, [r7, #28]
 8010fae:	f107 0120 	add.w	r1, r7, #32
 8010fb2:	440a      	add	r2, r1
 8010fb4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8010fbc:	b29a      	uxth	r2, r3
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8010fc4:	7ffb      	ldrb	r3, [r7, #31]
 8010fc6:	7f7a      	ldrb	r2, [r7, #29]
 8010fc8:	f107 0120 	add.w	r1, r7, #32
 8010fcc:	440a      	add	r2, r1
 8010fce:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010fd2:	fb02 f303 	mul.w	r3, r2, r3
 8010fd6:	7f7a      	ldrb	r2, [r7, #29]
 8010fd8:	f107 0120 	add.w	r1, r7, #32
 8010fdc:	440a      	add	r2, r1
 8010fde:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010fe2:	fb93 f3f2 	sdiv	r3, r3, r2
 8010fe6:	b29a      	uxth	r2, r3
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010fee:	bf00      	nop
 8010ff0:	3724      	adds	r7, #36	; 0x24
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr
 8010ffa:	bf00      	nop
 8010ffc:	0801aeb0 	.word	0x0801aeb0
 8011000:	0801aeb8 	.word	0x0801aeb8

08011004 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011004:	b084      	sub	sp, #16
 8011006:	b480      	push	{r7}
 8011008:	b085      	sub	sp, #20
 801100a:	af00      	add	r7, sp, #0
 801100c:	6078      	str	r0, [r7, #4]
 801100e:	f107 001c 	add.w	r0, r7, #28
 8011012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011016:	2300      	movs	r3, #0
 8011018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801101a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 801101c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801101e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8011022:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011024:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8011026:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 801102a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801102c:	68fa      	ldr	r2, [r7, #12]
 801102e:	4313      	orrs	r3, r2
 8011030:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	685a      	ldr	r2, [r3, #4]
 8011036:	4b07      	ldr	r3, [pc, #28]	; (8011054 <SDMMC_Init+0x50>)
 8011038:	4013      	ands	r3, r2
 801103a:	68fa      	ldr	r2, [r7, #12]
 801103c:	431a      	orrs	r2, r3
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011042:	2300      	movs	r3, #0
}
 8011044:	4618      	mov	r0, r3
 8011046:	3714      	adds	r7, #20
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	b004      	add	sp, #16
 8011050:	4770      	bx	lr
 8011052:	bf00      	nop
 8011054:	ffc02c00 	.word	0xffc02c00

08011058 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011058:	b480      	push	{r7}
 801105a:	b083      	sub	sp, #12
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011066:	4618      	mov	r0, r3
 8011068:	370c      	adds	r7, #12
 801106a:	46bd      	mov	sp, r7
 801106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011070:	4770      	bx	lr

08011072 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011072:	b480      	push	{r7}
 8011074:	b083      	sub	sp, #12
 8011076:	af00      	add	r7, sp, #0
 8011078:	6078      	str	r0, [r7, #4]
 801107a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	681a      	ldr	r2, [r3, #0]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011086:	2300      	movs	r3, #0
}
 8011088:	4618      	mov	r0, r3
 801108a:	370c      	adds	r7, #12
 801108c:	46bd      	mov	sp, r7
 801108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011092:	4770      	bx	lr

08011094 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011094:	b480      	push	{r7}
 8011096:	b083      	sub	sp, #12
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	f043 0203 	orr.w	r2, r3, #3
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80110a8:	2300      	movs	r3, #0
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	370c      	adds	r7, #12
 80110ae:	46bd      	mov	sp, r7
 80110b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b4:	4770      	bx	lr

080110b6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80110b6:	b480      	push	{r7}
 80110b8:	b083      	sub	sp, #12
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	f003 0303 	and.w	r3, r3, #3
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	370c      	adds	r7, #12
 80110ca:	46bd      	mov	sp, r7
 80110cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d0:	4770      	bx	lr
	...

080110d4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b085      	sub	sp, #20
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80110de:	2300      	movs	r3, #0
 80110e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	681a      	ldr	r2, [r3, #0]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110f2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80110f8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80110fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011100:	68fa      	ldr	r2, [r7, #12]
 8011102:	4313      	orrs	r3, r2
 8011104:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	68da      	ldr	r2, [r3, #12]
 801110a:	4b06      	ldr	r3, [pc, #24]	; (8011124 <SDMMC_SendCommand+0x50>)
 801110c:	4013      	ands	r3, r2
 801110e:	68fa      	ldr	r2, [r7, #12]
 8011110:	431a      	orrs	r2, r3
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011116:	2300      	movs	r3, #0
}
 8011118:	4618      	mov	r0, r3
 801111a:	3714      	adds	r7, #20
 801111c:	46bd      	mov	sp, r7
 801111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011122:	4770      	bx	lr
 8011124:	fffee0c0 	.word	0xfffee0c0

08011128 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011128:	b480      	push	{r7}
 801112a:	b083      	sub	sp, #12
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	691b      	ldr	r3, [r3, #16]
 8011134:	b2db      	uxtb	r3, r3
}
 8011136:	4618      	mov	r0, r3
 8011138:	370c      	adds	r7, #12
 801113a:	46bd      	mov	sp, r7
 801113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011140:	4770      	bx	lr

08011142 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011142:	b480      	push	{r7}
 8011144:	b085      	sub	sp, #20
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
 801114a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	3314      	adds	r3, #20
 8011150:	461a      	mov	r2, r3
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	4413      	add	r3, r2
 8011156:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	681b      	ldr	r3, [r3, #0]
}
 801115c:	4618      	mov	r0, r3
 801115e:	3714      	adds	r7, #20
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr

08011168 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8011168:	b480      	push	{r7}
 801116a:	b085      	sub	sp, #20
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011172:	2300      	movs	r3, #0
 8011174:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	681a      	ldr	r2, [r3, #0]
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	685a      	ldr	r2, [r3, #4]
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801118e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011194:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801119a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801119c:	68fa      	ldr	r2, [r7, #12]
 801119e:	4313      	orrs	r3, r2
 80111a0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	431a      	orrs	r2, r3
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80111b2:	2300      	movs	r3, #0

}
 80111b4:	4618      	mov	r0, r3
 80111b6:	3714      	adds	r7, #20
 80111b8:	46bd      	mov	sp, r7
 80111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111be:	4770      	bx	lr

080111c0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b088      	sub	sp, #32
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80111ce:	2310      	movs	r3, #16
 80111d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111d8:	2300      	movs	r3, #0
 80111da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111e2:	f107 0308 	add.w	r3, r7, #8
 80111e6:	4619      	mov	r1, r3
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f7ff ff73 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80111ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80111f2:	2110      	movs	r1, #16
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f000 faaf 	bl	8011758 <SDMMC_GetCmdResp1>
 80111fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111fc:	69fb      	ldr	r3, [r7, #28]
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3720      	adds	r7, #32
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}

08011206 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011206:	b580      	push	{r7, lr}
 8011208:	b088      	sub	sp, #32
 801120a:	af00      	add	r7, sp, #0
 801120c:	6078      	str	r0, [r7, #4]
 801120e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011214:	2311      	movs	r3, #17
 8011216:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011218:	f44f 7380 	mov.w	r3, #256	; 0x100
 801121c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801121e:	2300      	movs	r3, #0
 8011220:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011226:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011228:	f107 0308 	add.w	r3, r7, #8
 801122c:	4619      	mov	r1, r3
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f7ff ff50 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011234:	f241 3288 	movw	r2, #5000	; 0x1388
 8011238:	2111      	movs	r1, #17
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f000 fa8c 	bl	8011758 <SDMMC_GetCmdResp1>
 8011240:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011242:	69fb      	ldr	r3, [r7, #28]
}
 8011244:	4618      	mov	r0, r3
 8011246:	3720      	adds	r7, #32
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}

0801124c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b088      	sub	sp, #32
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801125a:	2312      	movs	r3, #18
 801125c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801125e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011264:	2300      	movs	r3, #0
 8011266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801126c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801126e:	f107 0308 	add.w	r3, r7, #8
 8011272:	4619      	mov	r1, r3
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f7ff ff2d 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801127a:	f241 3288 	movw	r2, #5000	; 0x1388
 801127e:	2112      	movs	r1, #18
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f000 fa69 	bl	8011758 <SDMMC_GetCmdResp1>
 8011286:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011288:	69fb      	ldr	r3, [r7, #28]
}
 801128a:	4618      	mov	r0, r3
 801128c:	3720      	adds	r7, #32
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}

08011292 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011292:	b580      	push	{r7, lr}
 8011294:	b088      	sub	sp, #32
 8011296:	af00      	add	r7, sp, #0
 8011298:	6078      	str	r0, [r7, #4]
 801129a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80112a0:	2318      	movs	r3, #24
 80112a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112aa:	2300      	movs	r3, #0
 80112ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112b4:	f107 0308 	add.w	r3, r7, #8
 80112b8:	4619      	mov	r1, r3
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f7ff ff0a 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80112c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80112c4:	2118      	movs	r1, #24
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f000 fa46 	bl	8011758 <SDMMC_GetCmdResp1>
 80112cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112ce:	69fb      	ldr	r3, [r7, #28]
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3720      	adds	r7, #32
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b088      	sub	sp, #32
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80112e6:	2319      	movs	r3, #25
 80112e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112f0:	2300      	movs	r3, #0
 80112f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112fa:	f107 0308 	add.w	r3, r7, #8
 80112fe:	4619      	mov	r1, r3
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f7ff fee7 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011306:	f241 3288 	movw	r2, #5000	; 0x1388
 801130a:	2119      	movs	r1, #25
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f000 fa23 	bl	8011758 <SDMMC_GetCmdResp1>
 8011312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011314:	69fb      	ldr	r3, [r7, #28]
}
 8011316:	4618      	mov	r0, r3
 8011318:	3720      	adds	r7, #32
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}
	...

08011320 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b088      	sub	sp, #32
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011328:	2300      	movs	r3, #0
 801132a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801132c:	230c      	movs	r3, #12
 801132e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011336:	2300      	movs	r3, #0
 8011338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801133a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801133e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	68db      	ldr	r3, [r3, #12]
 8011344:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	68db      	ldr	r3, [r3, #12]
 8011350:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011358:	f107 0308 	add.w	r3, r7, #8
 801135c:	4619      	mov	r1, r3
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f7ff feb8 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011364:	4a0b      	ldr	r2, [pc, #44]	; (8011394 <SDMMC_CmdStopTransfer+0x74>)
 8011366:	210c      	movs	r1, #12
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	f000 f9f5 	bl	8011758 <SDMMC_GetCmdResp1>
 801136e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	68db      	ldr	r3, [r3, #12]
 8011374:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011382:	d101      	bne.n	8011388 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011384:	2300      	movs	r3, #0
 8011386:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011388:	69fb      	ldr	r3, [r7, #28]
}
 801138a:	4618      	mov	r0, r3
 801138c:	3720      	adds	r7, #32
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
 8011392:	bf00      	nop
 8011394:	05f5e100 	.word	0x05f5e100

08011398 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b08a      	sub	sp, #40	; 0x28
 801139c:	af00      	add	r7, sp, #0
 801139e:	60f8      	str	r0, [r7, #12]
 80113a0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80113a8:	2307      	movs	r3, #7
 80113aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80113b0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113b2:	2300      	movs	r3, #0
 80113b4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113ba:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113bc:	f107 0310 	add.w	r3, r7, #16
 80113c0:	4619      	mov	r1, r3
 80113c2:	68f8      	ldr	r0, [r7, #12]
 80113c4:	f7ff fe86 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80113c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80113cc:	2107      	movs	r1, #7
 80113ce:	68f8      	ldr	r0, [r7, #12]
 80113d0:	f000 f9c2 	bl	8011758 <SDMMC_GetCmdResp1>
 80113d4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80113d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3728      	adds	r7, #40	; 0x28
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b088      	sub	sp, #32
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80113e8:	2300      	movs	r3, #0
 80113ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80113ec:	2300      	movs	r3, #0
 80113ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80113f0:	2300      	movs	r3, #0
 80113f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113f4:	2300      	movs	r3, #0
 80113f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113fe:	f107 0308 	add.w	r3, r7, #8
 8011402:	4619      	mov	r1, r3
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f7ff fe65 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f000 f976 	bl	80116fc <SDMMC_GetCmdError>
 8011410:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011412:	69fb      	ldr	r3, [r7, #28]
}
 8011414:	4618      	mov	r0, r3
 8011416:	3720      	adds	r7, #32
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}

0801141c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b088      	sub	sp, #32
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011424:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801142a:	2308      	movs	r3, #8
 801142c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801142e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011432:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011434:	2300      	movs	r3, #0
 8011436:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801143c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801143e:	f107 0308 	add.w	r3, r7, #8
 8011442:	4619      	mov	r1, r3
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f7ff fe45 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f000 fb78 	bl	8011b40 <SDMMC_GetCmdResp7>
 8011450:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011452:	69fb      	ldr	r3, [r7, #28]
}
 8011454:	4618      	mov	r0, r3
 8011456:	3720      	adds	r7, #32
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}

0801145c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b088      	sub	sp, #32
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
 8011464:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801146a:	2337      	movs	r3, #55	; 0x37
 801146c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801146e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011472:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011474:	2300      	movs	r3, #0
 8011476:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801147c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801147e:	f107 0308 	add.w	r3, r7, #8
 8011482:	4619      	mov	r1, r3
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f7ff fe25 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801148a:	f241 3288 	movw	r2, #5000	; 0x1388
 801148e:	2137      	movs	r1, #55	; 0x37
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f000 f961 	bl	8011758 <SDMMC_GetCmdResp1>
 8011496:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011498:	69fb      	ldr	r3, [r7, #28]
}
 801149a:	4618      	mov	r0, r3
 801149c:	3720      	adds	r7, #32
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}

080114a2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80114a2:	b580      	push	{r7, lr}
 80114a4:	b088      	sub	sp, #32
 80114a6:	af00      	add	r7, sp, #0
 80114a8:	6078      	str	r0, [r7, #4]
 80114aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80114b0:	2329      	movs	r3, #41	; 0x29
 80114b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114ba:	2300      	movs	r3, #0
 80114bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114c4:	f107 0308 	add.w	r3, r7, #8
 80114c8:	4619      	mov	r1, r3
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f7ff fe02 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f000 fa7d 	bl	80119d0 <SDMMC_GetCmdResp3>
 80114d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114d8:	69fb      	ldr	r3, [r7, #28]
}
 80114da:	4618      	mov	r0, r3
 80114dc:	3720      	adds	r7, #32
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}

080114e2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80114e2:	b580      	push	{r7, lr}
 80114e4:	b088      	sub	sp, #32
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	6078      	str	r0, [r7, #4]
 80114ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80114f0:	2306      	movs	r3, #6
 80114f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114fa:	2300      	movs	r3, #0
 80114fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011502:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011504:	f107 0308 	add.w	r3, r7, #8
 8011508:	4619      	mov	r1, r3
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f7ff fde2 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011510:	f241 3288 	movw	r2, #5000	; 0x1388
 8011514:	2106      	movs	r1, #6
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f000 f91e 	bl	8011758 <SDMMC_GetCmdResp1>
 801151c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801151e:	69fb      	ldr	r3, [r7, #28]
}
 8011520:	4618      	mov	r0, r3
 8011522:	3720      	adds	r7, #32
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}

08011528 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b088      	sub	sp, #32
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011530:	2300      	movs	r3, #0
 8011532:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011534:	2333      	movs	r3, #51	; 0x33
 8011536:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011538:	f44f 7380 	mov.w	r3, #256	; 0x100
 801153c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801153e:	2300      	movs	r3, #0
 8011540:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011546:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011548:	f107 0308 	add.w	r3, r7, #8
 801154c:	4619      	mov	r1, r3
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	f7ff fdc0 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011554:	f241 3288 	movw	r2, #5000	; 0x1388
 8011558:	2133      	movs	r1, #51	; 0x33
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f000 f8fc 	bl	8011758 <SDMMC_GetCmdResp1>
 8011560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011562:	69fb      	ldr	r3, [r7, #28]
}
 8011564:	4618      	mov	r0, r3
 8011566:	3720      	adds	r7, #32
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}

0801156c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b088      	sub	sp, #32
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011574:	2300      	movs	r3, #0
 8011576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011578:	2302      	movs	r3, #2
 801157a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801157c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011582:	2300      	movs	r3, #0
 8011584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801158a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801158c:	f107 0308 	add.w	r3, r7, #8
 8011590:	4619      	mov	r1, r3
 8011592:	6878      	ldr	r0, [r7, #4]
 8011594:	f7ff fd9e 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f000 f9cf 	bl	801193c <SDMMC_GetCmdResp2>
 801159e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115a0:	69fb      	ldr	r3, [r7, #28]
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3720      	adds	r7, #32
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}

080115aa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80115aa:	b580      	push	{r7, lr}
 80115ac:	b088      	sub	sp, #32
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	6078      	str	r0, [r7, #4]
 80115b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80115b8:	2309      	movs	r3, #9
 80115ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80115bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80115c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115c2:	2300      	movs	r3, #0
 80115c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115cc:	f107 0308 	add.w	r3, r7, #8
 80115d0:	4619      	mov	r1, r3
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f7ff fd7e 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f000 f9af 	bl	801193c <SDMMC_GetCmdResp2>
 80115de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115e0:	69fb      	ldr	r3, [r7, #28]
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	3720      	adds	r7, #32
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}

080115ea <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80115ea:	b580      	push	{r7, lr}
 80115ec:	b088      	sub	sp, #32
 80115ee:	af00      	add	r7, sp, #0
 80115f0:	6078      	str	r0, [r7, #4]
 80115f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80115f4:	2300      	movs	r3, #0
 80115f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80115f8:	2303      	movs	r3, #3
 80115fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80115fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011600:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011602:	2300      	movs	r3, #0
 8011604:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801160a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801160c:	f107 0308 	add.w	r3, r7, #8
 8011610:	4619      	mov	r1, r3
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f7ff fd5e 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011618:	683a      	ldr	r2, [r7, #0]
 801161a:	2103      	movs	r1, #3
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f000 fa17 	bl	8011a50 <SDMMC_GetCmdResp6>
 8011622:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011624:	69fb      	ldr	r3, [r7, #28]
}
 8011626:	4618      	mov	r0, r3
 8011628:	3720      	adds	r7, #32
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}

0801162e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801162e:	b580      	push	{r7, lr}
 8011630:	b088      	sub	sp, #32
 8011632:	af00      	add	r7, sp, #0
 8011634:	6078      	str	r0, [r7, #4]
 8011636:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801163c:	230d      	movs	r3, #13
 801163e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011644:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011646:	2300      	movs	r3, #0
 8011648:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801164e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011650:	f107 0308 	add.w	r3, r7, #8
 8011654:	4619      	mov	r1, r3
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f7ff fd3c 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801165c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011660:	210d      	movs	r1, #13
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f000 f878 	bl	8011758 <SDMMC_GetCmdResp1>
 8011668:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801166a:	69fb      	ldr	r3, [r7, #28]
}
 801166c:	4618      	mov	r0, r3
 801166e:	3720      	adds	r7, #32
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b088      	sub	sp, #32
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801167c:	2300      	movs	r3, #0
 801167e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011680:	230d      	movs	r3, #13
 8011682:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801168a:	2300      	movs	r3, #0
 801168c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801168e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011692:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011694:	f107 0308 	add.w	r3, r7, #8
 8011698:	4619      	mov	r1, r3
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f7ff fd1a 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80116a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80116a4:	210d      	movs	r1, #13
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f000 f856 	bl	8011758 <SDMMC_GetCmdResp1>
 80116ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116ae:	69fb      	ldr	r3, [r7, #28]
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3720      	adds	r7, #32
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}

080116b8 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b088      	sub	sp, #32
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 80116c0:	2300      	movs	r3, #0
 80116c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80116c4:	230b      	movs	r3, #11
 80116c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80116c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116ce:	2300      	movs	r3, #0
 80116d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116d8:	f107 0308 	add.w	r3, r7, #8
 80116dc:	4619      	mov	r1, r3
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f7ff fcf8 	bl	80110d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80116e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80116e8:	210b      	movs	r1, #11
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f000 f834 	bl	8011758 <SDMMC_GetCmdResp1>
 80116f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116f2:	69fb      	ldr	r3, [r7, #28]
}
 80116f4:	4618      	mov	r0, r3
 80116f6:	3720      	adds	r7, #32
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}

080116fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80116fc:	b480      	push	{r7}
 80116fe:	b085      	sub	sp, #20
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011704:	4b11      	ldr	r3, [pc, #68]	; (801174c <SDMMC_GetCmdError+0x50>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	4a11      	ldr	r2, [pc, #68]	; (8011750 <SDMMC_GetCmdError+0x54>)
 801170a:	fba2 2303 	umull	r2, r3, r2, r3
 801170e:	0a5b      	lsrs	r3, r3, #9
 8011710:	f241 3288 	movw	r2, #5000	; 0x1388
 8011714:	fb02 f303 	mul.w	r3, r2, r3
 8011718:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	1e5a      	subs	r2, r3, #1
 801171e:	60fa      	str	r2, [r7, #12]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d102      	bne.n	801172a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011724:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011728:	e009      	b.n	801173e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801172e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011732:	2b00      	cmp	r3, #0
 8011734:	d0f1      	beq.n	801171a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	4a06      	ldr	r2, [pc, #24]	; (8011754 <SDMMC_GetCmdError+0x58>)
 801173a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 801173c:	2300      	movs	r3, #0
}
 801173e:	4618      	mov	r0, r3
 8011740:	3714      	adds	r7, #20
 8011742:	46bd      	mov	sp, r7
 8011744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011748:	4770      	bx	lr
 801174a:	bf00      	nop
 801174c:	24000010 	.word	0x24000010
 8011750:	10624dd3 	.word	0x10624dd3
 8011754:	002000c5 	.word	0x002000c5

08011758 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b088      	sub	sp, #32
 801175c:	af00      	add	r7, sp, #0
 801175e:	60f8      	str	r0, [r7, #12]
 8011760:	460b      	mov	r3, r1
 8011762:	607a      	str	r2, [r7, #4]
 8011764:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011766:	4b70      	ldr	r3, [pc, #448]	; (8011928 <SDMMC_GetCmdResp1+0x1d0>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	4a70      	ldr	r2, [pc, #448]	; (801192c <SDMMC_GetCmdResp1+0x1d4>)
 801176c:	fba2 2303 	umull	r2, r3, r2, r3
 8011770:	0a5a      	lsrs	r2, r3, #9
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	fb02 f303 	mul.w	r3, r2, r3
 8011778:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801177a:	69fb      	ldr	r3, [r7, #28]
 801177c:	1e5a      	subs	r2, r3, #1
 801177e:	61fa      	str	r2, [r7, #28]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d102      	bne.n	801178a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011784:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011788:	e0c9      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801178e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011790:	69ba      	ldr	r2, [r7, #24]
 8011792:	4b67      	ldr	r3, [pc, #412]	; (8011930 <SDMMC_GetCmdResp1+0x1d8>)
 8011794:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011796:	2b00      	cmp	r3, #0
 8011798:	d0ef      	beq.n	801177a <SDMMC_GetCmdResp1+0x22>
 801179a:	69bb      	ldr	r3, [r7, #24]
 801179c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d1ea      	bne.n	801177a <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117a8:	f003 0304 	and.w	r3, r3, #4
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d004      	beq.n	80117ba <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	2204      	movs	r2, #4
 80117b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80117b6:	2304      	movs	r3, #4
 80117b8:	e0b1      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117be:	f003 0301 	and.w	r3, r3, #1
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d004      	beq.n	80117d0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2201      	movs	r2, #1
 80117ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80117cc:	2301      	movs	r3, #1
 80117ce:	e0a6      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	4a58      	ldr	r2, [pc, #352]	; (8011934 <SDMMC_GetCmdResp1+0x1dc>)
 80117d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80117d6:	68f8      	ldr	r0, [r7, #12]
 80117d8:	f7ff fca6 	bl	8011128 <SDMMC_GetCommandResponse>
 80117dc:	4603      	mov	r3, r0
 80117de:	461a      	mov	r2, r3
 80117e0:	7afb      	ldrb	r3, [r7, #11]
 80117e2:	4293      	cmp	r3, r2
 80117e4:	d001      	beq.n	80117ea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80117e6:	2301      	movs	r3, #1
 80117e8:	e099      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80117ea:	2100      	movs	r1, #0
 80117ec:	68f8      	ldr	r0, [r7, #12]
 80117ee:	f7ff fca8 	bl	8011142 <SDMMC_GetResponse>
 80117f2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80117f4:	697a      	ldr	r2, [r7, #20]
 80117f6:	4b50      	ldr	r3, [pc, #320]	; (8011938 <SDMMC_GetCmdResp1+0x1e0>)
 80117f8:	4013      	ands	r3, r2
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d101      	bne.n	8011802 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80117fe:	2300      	movs	r3, #0
 8011800:	e08d      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	2b00      	cmp	r3, #0
 8011806:	da02      	bge.n	801180e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011808:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801180c:	e087      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011814:	2b00      	cmp	r3, #0
 8011816:	d001      	beq.n	801181c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011818:	2340      	movs	r3, #64	; 0x40
 801181a:	e080      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011822:	2b00      	cmp	r3, #0
 8011824:	d001      	beq.n	801182a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011826:	2380      	movs	r3, #128	; 0x80
 8011828:	e079      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011830:	2b00      	cmp	r3, #0
 8011832:	d002      	beq.n	801183a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011838:	e071      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011840:	2b00      	cmp	r3, #0
 8011842:	d002      	beq.n	801184a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011848:	e069      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011850:	2b00      	cmp	r3, #0
 8011852:	d002      	beq.n	801185a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011858:	e061      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011860:	2b00      	cmp	r3, #0
 8011862:	d002      	beq.n	801186a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011864:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011868:	e059      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011870:	2b00      	cmp	r3, #0
 8011872:	d002      	beq.n	801187a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011878:	e051      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011880:	2b00      	cmp	r3, #0
 8011882:	d002      	beq.n	801188a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011888:	e049      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011890:	2b00      	cmp	r3, #0
 8011892:	d002      	beq.n	801189a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011894:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011898:	e041      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d002      	beq.n	80118aa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80118a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118a8:	e039      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d002      	beq.n	80118ba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80118b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80118b8:	e031      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d002      	beq.n	80118ca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80118c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80118c8:	e029      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d002      	beq.n	80118da <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80118d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80118d8:	e021      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d002      	beq.n	80118ea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80118e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80118e8:	e019      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d002      	beq.n	80118fa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80118f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80118f8:	e011      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011900:	2b00      	cmp	r3, #0
 8011902:	d002      	beq.n	801190a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011904:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011908:	e009      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	f003 0308 	and.w	r3, r3, #8
 8011910:	2b00      	cmp	r3, #0
 8011912:	d002      	beq.n	801191a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011914:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011918:	e001      	b.n	801191e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801191a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801191e:	4618      	mov	r0, r3
 8011920:	3720      	adds	r7, #32
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	24000010 	.word	0x24000010
 801192c:	10624dd3 	.word	0x10624dd3
 8011930:	00200045 	.word	0x00200045
 8011934:	002000c5 	.word	0x002000c5
 8011938:	fdffe008 	.word	0xfdffe008

0801193c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801193c:	b480      	push	{r7}
 801193e:	b085      	sub	sp, #20
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011944:	4b1f      	ldr	r3, [pc, #124]	; (80119c4 <SDMMC_GetCmdResp2+0x88>)
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	4a1f      	ldr	r2, [pc, #124]	; (80119c8 <SDMMC_GetCmdResp2+0x8c>)
 801194a:	fba2 2303 	umull	r2, r3, r2, r3
 801194e:	0a5b      	lsrs	r3, r3, #9
 8011950:	f241 3288 	movw	r2, #5000	; 0x1388
 8011954:	fb02 f303 	mul.w	r3, r2, r3
 8011958:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	1e5a      	subs	r2, r3, #1
 801195e:	60fa      	str	r2, [r7, #12]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d102      	bne.n	801196a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011964:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011968:	e026      	b.n	80119b8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801196e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011976:	2b00      	cmp	r3, #0
 8011978:	d0ef      	beq.n	801195a <SDMMC_GetCmdResp2+0x1e>
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011980:	2b00      	cmp	r3, #0
 8011982:	d1ea      	bne.n	801195a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011988:	f003 0304 	and.w	r3, r3, #4
 801198c:	2b00      	cmp	r3, #0
 801198e:	d004      	beq.n	801199a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2204      	movs	r2, #4
 8011994:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011996:	2304      	movs	r3, #4
 8011998:	e00e      	b.n	80119b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801199e:	f003 0301 	and.w	r3, r3, #1
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d004      	beq.n	80119b0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2201      	movs	r2, #1
 80119aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80119ac:	2301      	movs	r3, #1
 80119ae:	e003      	b.n	80119b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	4a06      	ldr	r2, [pc, #24]	; (80119cc <SDMMC_GetCmdResp2+0x90>)
 80119b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80119b6:	2300      	movs	r3, #0
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3714      	adds	r7, #20
 80119bc:	46bd      	mov	sp, r7
 80119be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c2:	4770      	bx	lr
 80119c4:	24000010 	.word	0x24000010
 80119c8:	10624dd3 	.word	0x10624dd3
 80119cc:	002000c5 	.word	0x002000c5

080119d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80119d0:	b480      	push	{r7}
 80119d2:	b085      	sub	sp, #20
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80119d8:	4b1a      	ldr	r3, [pc, #104]	; (8011a44 <SDMMC_GetCmdResp3+0x74>)
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	4a1a      	ldr	r2, [pc, #104]	; (8011a48 <SDMMC_GetCmdResp3+0x78>)
 80119de:	fba2 2303 	umull	r2, r3, r2, r3
 80119e2:	0a5b      	lsrs	r3, r3, #9
 80119e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80119e8:	fb02 f303 	mul.w	r3, r2, r3
 80119ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	1e5a      	subs	r2, r3, #1
 80119f2:	60fa      	str	r2, [r7, #12]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d102      	bne.n	80119fe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80119f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80119fc:	e01b      	b.n	8011a36 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d0ef      	beq.n	80119ee <SDMMC_GetCmdResp3+0x1e>
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d1ea      	bne.n	80119ee <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a1c:	f003 0304 	and.w	r3, r3, #4
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d004      	beq.n	8011a2e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2204      	movs	r2, #4
 8011a28:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a2a:	2304      	movs	r3, #4
 8011a2c:	e003      	b.n	8011a36 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	4a06      	ldr	r2, [pc, #24]	; (8011a4c <SDMMC_GetCmdResp3+0x7c>)
 8011a32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011a34:	2300      	movs	r3, #0
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3714      	adds	r7, #20
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a40:	4770      	bx	lr
 8011a42:	bf00      	nop
 8011a44:	24000010 	.word	0x24000010
 8011a48:	10624dd3 	.word	0x10624dd3
 8011a4c:	002000c5 	.word	0x002000c5

08011a50 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b088      	sub	sp, #32
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	60f8      	str	r0, [r7, #12]
 8011a58:	460b      	mov	r3, r1
 8011a5a:	607a      	str	r2, [r7, #4]
 8011a5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011a5e:	4b35      	ldr	r3, [pc, #212]	; (8011b34 <SDMMC_GetCmdResp6+0xe4>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	4a35      	ldr	r2, [pc, #212]	; (8011b38 <SDMMC_GetCmdResp6+0xe8>)
 8011a64:	fba2 2303 	umull	r2, r3, r2, r3
 8011a68:	0a5b      	lsrs	r3, r3, #9
 8011a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a6e:	fb02 f303 	mul.w	r3, r2, r3
 8011a72:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011a74:	69fb      	ldr	r3, [r7, #28]
 8011a76:	1e5a      	subs	r2, r3, #1
 8011a78:	61fa      	str	r2, [r7, #28]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d102      	bne.n	8011a84 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a82:	e052      	b.n	8011b2a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a88:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d0ef      	beq.n	8011a74 <SDMMC_GetCmdResp6+0x24>
 8011a94:	69bb      	ldr	r3, [r7, #24]
 8011a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d1ea      	bne.n	8011a74 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aa2:	f003 0304 	and.w	r3, r3, #4
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d004      	beq.n	8011ab4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	2204      	movs	r2, #4
 8011aae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011ab0:	2304      	movs	r3, #4
 8011ab2:	e03a      	b.n	8011b2a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ab8:	f003 0301 	and.w	r3, r3, #1
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d004      	beq.n	8011aca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	2201      	movs	r2, #1
 8011ac4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	e02f      	b.n	8011b2a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011aca:	68f8      	ldr	r0, [r7, #12]
 8011acc:	f7ff fb2c 	bl	8011128 <SDMMC_GetCommandResponse>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	7afb      	ldrb	r3, [r7, #11]
 8011ad6:	4293      	cmp	r3, r2
 8011ad8:	d001      	beq.n	8011ade <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011ada:	2301      	movs	r3, #1
 8011adc:	e025      	b.n	8011b2a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	4a16      	ldr	r2, [pc, #88]	; (8011b3c <SDMMC_GetCmdResp6+0xec>)
 8011ae2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011ae4:	2100      	movs	r1, #0
 8011ae6:	68f8      	ldr	r0, [r7, #12]
 8011ae8:	f7ff fb2b 	bl	8011142 <SDMMC_GetResponse>
 8011aec:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d106      	bne.n	8011b06 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	0c1b      	lsrs	r3, r3, #16
 8011afc:	b29a      	uxth	r2, r3
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011b02:	2300      	movs	r3, #0
 8011b04:	e011      	b.n	8011b2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d002      	beq.n	8011b16 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011b14:	e009      	b.n	8011b2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011b16:	697b      	ldr	r3, [r7, #20]
 8011b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d002      	beq.n	8011b26 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b24:	e001      	b.n	8011b2a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3720      	adds	r7, #32
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}
 8011b32:	bf00      	nop
 8011b34:	24000010 	.word	0x24000010
 8011b38:	10624dd3 	.word	0x10624dd3
 8011b3c:	002000c5 	.word	0x002000c5

08011b40 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011b40:	b480      	push	{r7}
 8011b42:	b085      	sub	sp, #20
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011b48:	4b22      	ldr	r3, [pc, #136]	; (8011bd4 <SDMMC_GetCmdResp7+0x94>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	4a22      	ldr	r2, [pc, #136]	; (8011bd8 <SDMMC_GetCmdResp7+0x98>)
 8011b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8011b52:	0a5b      	lsrs	r3, r3, #9
 8011b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b58:	fb02 f303 	mul.w	r3, r2, r3
 8011b5c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	1e5a      	subs	r2, r3, #1
 8011b62:	60fa      	str	r2, [r7, #12]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d102      	bne.n	8011b6e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011b68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b6c:	e02c      	b.n	8011bc8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d0ef      	beq.n	8011b5e <SDMMC_GetCmdResp7+0x1e>
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d1ea      	bne.n	8011b5e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b8c:	f003 0304 	and.w	r3, r3, #4
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d004      	beq.n	8011b9e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2204      	movs	r2, #4
 8011b98:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b9a:	2304      	movs	r3, #4
 8011b9c:	e014      	b.n	8011bc8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ba2:	f003 0301 	and.w	r3, r3, #1
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d004      	beq.n	8011bb4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	2201      	movs	r2, #1
 8011bae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	e009      	b.n	8011bc8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d002      	beq.n	8011bc6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2240      	movs	r2, #64	; 0x40
 8011bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011bc6:	2300      	movs	r3, #0

}
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3714      	adds	r7, #20
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr
 8011bd4:	24000010 	.word	0x24000010
 8011bd8:	10624dd3 	.word	0x10624dd3

08011bdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011bdc:	b084      	sub	sp, #16
 8011bde:	b580      	push	{r7, lr}
 8011be0:	b084      	sub	sp, #16
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	6078      	str	r0, [r7, #4]
 8011be6:	f107 001c 	add.w	r0, r7, #28
 8011bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf0:	2b01      	cmp	r3, #1
 8011bf2:	d120      	bne.n	8011c36 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	68da      	ldr	r2, [r3, #12]
 8011c04:	4b25      	ldr	r3, [pc, #148]	; (8011c9c <USB_CoreInit+0xc0>)
 8011c06:	4013      	ands	r3, r2
 8011c08:	687a      	ldr	r2, [r7, #4]
 8011c0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	68db      	ldr	r3, [r3, #12]
 8011c10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c1a:	2b01      	cmp	r3, #1
 8011c1c:	d105      	bne.n	8011c2a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	68db      	ldr	r3, [r3, #12]
 8011c22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f001 fabe 	bl	80131ac <USB_CoreReset>
 8011c30:	4603      	mov	r3, r0
 8011c32:	73fb      	strb	r3, [r7, #15]
 8011c34:	e01a      	b.n	8011c6c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	68db      	ldr	r3, [r3, #12]
 8011c3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f001 fab2 	bl	80131ac <USB_CoreReset>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d106      	bne.n	8011c60 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	639a      	str	r2, [r3, #56]	; 0x38
 8011c5e:	e005      	b.n	8011c6c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c6e:	2b01      	cmp	r3, #1
 8011c70:	d10b      	bne.n	8011c8a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	689b      	ldr	r3, [r3, #8]
 8011c76:	f043 0206 	orr.w	r2, r3, #6
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	689b      	ldr	r3, [r3, #8]
 8011c82:	f043 0220 	orr.w	r2, r3, #32
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3710      	adds	r7, #16
 8011c90:	46bd      	mov	sp, r7
 8011c92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011c96:	b004      	add	sp, #16
 8011c98:	4770      	bx	lr
 8011c9a:	bf00      	nop
 8011c9c:	ffbdffbf 	.word	0xffbdffbf

08011ca0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b087      	sub	sp, #28
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	60f8      	str	r0, [r7, #12]
 8011ca8:	60b9      	str	r1, [r7, #8]
 8011caa:	4613      	mov	r3, r2
 8011cac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011cae:	79fb      	ldrb	r3, [r7, #7]
 8011cb0:	2b02      	cmp	r3, #2
 8011cb2:	d165      	bne.n	8011d80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	4a41      	ldr	r2, [pc, #260]	; (8011dbc <USB_SetTurnaroundTime+0x11c>)
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d906      	bls.n	8011cca <USB_SetTurnaroundTime+0x2a>
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	4a40      	ldr	r2, [pc, #256]	; (8011dc0 <USB_SetTurnaroundTime+0x120>)
 8011cc0:	4293      	cmp	r3, r2
 8011cc2:	d802      	bhi.n	8011cca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011cc4:	230f      	movs	r3, #15
 8011cc6:	617b      	str	r3, [r7, #20]
 8011cc8:	e062      	b.n	8011d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	4a3c      	ldr	r2, [pc, #240]	; (8011dc0 <USB_SetTurnaroundTime+0x120>)
 8011cce:	4293      	cmp	r3, r2
 8011cd0:	d906      	bls.n	8011ce0 <USB_SetTurnaroundTime+0x40>
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	4a3b      	ldr	r2, [pc, #236]	; (8011dc4 <USB_SetTurnaroundTime+0x124>)
 8011cd6:	4293      	cmp	r3, r2
 8011cd8:	d802      	bhi.n	8011ce0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011cda:	230e      	movs	r3, #14
 8011cdc:	617b      	str	r3, [r7, #20]
 8011cde:	e057      	b.n	8011d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	4a38      	ldr	r2, [pc, #224]	; (8011dc4 <USB_SetTurnaroundTime+0x124>)
 8011ce4:	4293      	cmp	r3, r2
 8011ce6:	d906      	bls.n	8011cf6 <USB_SetTurnaroundTime+0x56>
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	4a37      	ldr	r2, [pc, #220]	; (8011dc8 <USB_SetTurnaroundTime+0x128>)
 8011cec:	4293      	cmp	r3, r2
 8011cee:	d802      	bhi.n	8011cf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011cf0:	230d      	movs	r3, #13
 8011cf2:	617b      	str	r3, [r7, #20]
 8011cf4:	e04c      	b.n	8011d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	4a33      	ldr	r2, [pc, #204]	; (8011dc8 <USB_SetTurnaroundTime+0x128>)
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	d906      	bls.n	8011d0c <USB_SetTurnaroundTime+0x6c>
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	4a32      	ldr	r2, [pc, #200]	; (8011dcc <USB_SetTurnaroundTime+0x12c>)
 8011d02:	4293      	cmp	r3, r2
 8011d04:	d802      	bhi.n	8011d0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011d06:	230c      	movs	r3, #12
 8011d08:	617b      	str	r3, [r7, #20]
 8011d0a:	e041      	b.n	8011d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	4a2f      	ldr	r2, [pc, #188]	; (8011dcc <USB_SetTurnaroundTime+0x12c>)
 8011d10:	4293      	cmp	r3, r2
 8011d12:	d906      	bls.n	8011d22 <USB_SetTurnaroundTime+0x82>
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	4a2e      	ldr	r2, [pc, #184]	; (8011dd0 <USB_SetTurnaroundTime+0x130>)
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	d802      	bhi.n	8011d22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011d1c:	230b      	movs	r3, #11
 8011d1e:	617b      	str	r3, [r7, #20]
 8011d20:	e036      	b.n	8011d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011d22:	68bb      	ldr	r3, [r7, #8]
 8011d24:	4a2a      	ldr	r2, [pc, #168]	; (8011dd0 <USB_SetTurnaroundTime+0x130>)
 8011d26:	4293      	cmp	r3, r2
 8011d28:	d906      	bls.n	8011d38 <USB_SetTurnaroundTime+0x98>
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	4a29      	ldr	r2, [pc, #164]	; (8011dd4 <USB_SetTurnaroundTime+0x134>)
 8011d2e:	4293      	cmp	r3, r2
 8011d30:	d802      	bhi.n	8011d38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011d32:	230a      	movs	r3, #10
 8011d34:	617b      	str	r3, [r7, #20]
 8011d36:	e02b      	b.n	8011d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	4a26      	ldr	r2, [pc, #152]	; (8011dd4 <USB_SetTurnaroundTime+0x134>)
 8011d3c:	4293      	cmp	r3, r2
 8011d3e:	d906      	bls.n	8011d4e <USB_SetTurnaroundTime+0xae>
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	4a25      	ldr	r2, [pc, #148]	; (8011dd8 <USB_SetTurnaroundTime+0x138>)
 8011d44:	4293      	cmp	r3, r2
 8011d46:	d802      	bhi.n	8011d4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011d48:	2309      	movs	r3, #9
 8011d4a:	617b      	str	r3, [r7, #20]
 8011d4c:	e020      	b.n	8011d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	4a21      	ldr	r2, [pc, #132]	; (8011dd8 <USB_SetTurnaroundTime+0x138>)
 8011d52:	4293      	cmp	r3, r2
 8011d54:	d906      	bls.n	8011d64 <USB_SetTurnaroundTime+0xc4>
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	4a20      	ldr	r2, [pc, #128]	; (8011ddc <USB_SetTurnaroundTime+0x13c>)
 8011d5a:	4293      	cmp	r3, r2
 8011d5c:	d802      	bhi.n	8011d64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011d5e:	2308      	movs	r3, #8
 8011d60:	617b      	str	r3, [r7, #20]
 8011d62:	e015      	b.n	8011d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	4a1d      	ldr	r2, [pc, #116]	; (8011ddc <USB_SetTurnaroundTime+0x13c>)
 8011d68:	4293      	cmp	r3, r2
 8011d6a:	d906      	bls.n	8011d7a <USB_SetTurnaroundTime+0xda>
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	4a1c      	ldr	r2, [pc, #112]	; (8011de0 <USB_SetTurnaroundTime+0x140>)
 8011d70:	4293      	cmp	r3, r2
 8011d72:	d802      	bhi.n	8011d7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011d74:	2307      	movs	r3, #7
 8011d76:	617b      	str	r3, [r7, #20]
 8011d78:	e00a      	b.n	8011d90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011d7a:	2306      	movs	r3, #6
 8011d7c:	617b      	str	r3, [r7, #20]
 8011d7e:	e007      	b.n	8011d90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011d80:	79fb      	ldrb	r3, [r7, #7]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d102      	bne.n	8011d8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011d86:	2309      	movs	r3, #9
 8011d88:	617b      	str	r3, [r7, #20]
 8011d8a:	e001      	b.n	8011d90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011d8c:	2309      	movs	r3, #9
 8011d8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	68db      	ldr	r3, [r3, #12]
 8011d94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	68da      	ldr	r2, [r3, #12]
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	029b      	lsls	r3, r3, #10
 8011da4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011da8:	431a      	orrs	r2, r3
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011dae:	2300      	movs	r3, #0
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	371c      	adds	r7, #28
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr
 8011dbc:	00d8acbf 	.word	0x00d8acbf
 8011dc0:	00e4e1bf 	.word	0x00e4e1bf
 8011dc4:	00f423ff 	.word	0x00f423ff
 8011dc8:	0106737f 	.word	0x0106737f
 8011dcc:	011a499f 	.word	0x011a499f
 8011dd0:	01312cff 	.word	0x01312cff
 8011dd4:	014ca43f 	.word	0x014ca43f
 8011dd8:	016e35ff 	.word	0x016e35ff
 8011ddc:	01a6ab1f 	.word	0x01a6ab1f
 8011de0:	01e847ff 	.word	0x01e847ff

08011de4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011de4:	b480      	push	{r7}
 8011de6:	b083      	sub	sp, #12
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	689b      	ldr	r3, [r3, #8]
 8011df0:	f043 0201 	orr.w	r2, r3, #1
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011df8:	2300      	movs	r3, #0
}
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	370c      	adds	r7, #12
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e04:	4770      	bx	lr

08011e06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e06:	b480      	push	{r7}
 8011e08:	b083      	sub	sp, #12
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	689b      	ldr	r3, [r3, #8]
 8011e12:	f023 0201 	bic.w	r2, r3, #1
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011e1a:	2300      	movs	r3, #0
}
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	370c      	adds	r7, #12
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr

08011e28 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b082      	sub	sp, #8
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	460b      	mov	r3, r1
 8011e32:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	68db      	ldr	r3, [r3, #12]
 8011e38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011e40:	78fb      	ldrb	r3, [r7, #3]
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	d106      	bne.n	8011e54 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	68db      	ldr	r3, [r3, #12]
 8011e4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	60da      	str	r2, [r3, #12]
 8011e52:	e00b      	b.n	8011e6c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011e54:	78fb      	ldrb	r3, [r7, #3]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d106      	bne.n	8011e68 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	60da      	str	r2, [r3, #12]
 8011e66:	e001      	b.n	8011e6c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011e68:	2301      	movs	r3, #1
 8011e6a:	e003      	b.n	8011e74 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011e6c:	2032      	movs	r0, #50	; 0x32
 8011e6e:	f7f2 fbc1 	bl	80045f4 <HAL_Delay>

  return HAL_OK;
 8011e72:	2300      	movs	r3, #0
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	3708      	adds	r7, #8
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}

08011e7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011e7c:	b084      	sub	sp, #16
 8011e7e:	b580      	push	{r7, lr}
 8011e80:	b086      	sub	sp, #24
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	6078      	str	r0, [r7, #4]
 8011e86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011e8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011e96:	2300      	movs	r3, #0
 8011e98:	613b      	str	r3, [r7, #16]
 8011e9a:	e009      	b.n	8011eb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011e9c:	687a      	ldr	r2, [r7, #4]
 8011e9e:	693b      	ldr	r3, [r7, #16]
 8011ea0:	3340      	adds	r3, #64	; 0x40
 8011ea2:	009b      	lsls	r3, r3, #2
 8011ea4:	4413      	add	r3, r2
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011eaa:	693b      	ldr	r3, [r7, #16]
 8011eac:	3301      	adds	r3, #1
 8011eae:	613b      	str	r3, [r7, #16]
 8011eb0:	693b      	ldr	r3, [r7, #16]
 8011eb2:	2b0e      	cmp	r3, #14
 8011eb4:	d9f2      	bls.n	8011e9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d11c      	bne.n	8011ef6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	68fa      	ldr	r2, [r7, #12]
 8011ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011eca:	f043 0302 	orr.w	r3, r3, #2
 8011ece:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ed4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	601a      	str	r2, [r3, #0]
 8011ef4:	e005      	b.n	8011f02 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011efa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011f08:	461a      	mov	r2, r3
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f14:	4619      	mov	r1, r3
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f1c:	461a      	mov	r2, r3
 8011f1e:	680b      	ldr	r3, [r1, #0]
 8011f20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	d10c      	bne.n	8011f42 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d104      	bne.n	8011f38 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011f2e:	2100      	movs	r1, #0
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f000 f949 	bl	80121c8 <USB_SetDevSpeed>
 8011f36:	e008      	b.n	8011f4a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011f38:	2101      	movs	r1, #1
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f000 f944 	bl	80121c8 <USB_SetDevSpeed>
 8011f40:	e003      	b.n	8011f4a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011f42:	2103      	movs	r1, #3
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f000 f93f 	bl	80121c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011f4a:	2110      	movs	r1, #16
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f000 f8f3 	bl	8012138 <USB_FlushTxFifo>
 8011f52:	4603      	mov	r3, r0
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d001      	beq.n	8011f5c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8011f58:	2301      	movs	r3, #1
 8011f5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f000 f911 	bl	8012184 <USB_FlushRxFifo>
 8011f62:	4603      	mov	r3, r0
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d001      	beq.n	8011f6c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8011f68:	2301      	movs	r3, #1
 8011f6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f72:	461a      	mov	r2, r3
 8011f74:	2300      	movs	r3, #0
 8011f76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f7e:	461a      	mov	r2, r3
 8011f80:	2300      	movs	r3, #0
 8011f82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f8a:	461a      	mov	r2, r3
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f90:	2300      	movs	r3, #0
 8011f92:	613b      	str	r3, [r7, #16]
 8011f94:	e043      	b.n	801201e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011f96:	693b      	ldr	r3, [r7, #16]
 8011f98:	015a      	lsls	r2, r3, #5
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	4413      	add	r3, r2
 8011f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011fac:	d118      	bne.n	8011fe0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8011fae:	693b      	ldr	r3, [r7, #16]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d10a      	bne.n	8011fca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011fb4:	693b      	ldr	r3, [r7, #16]
 8011fb6:	015a      	lsls	r2, r3, #5
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	4413      	add	r3, r2
 8011fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fc0:	461a      	mov	r2, r3
 8011fc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011fc6:	6013      	str	r3, [r2, #0]
 8011fc8:	e013      	b.n	8011ff2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011fca:	693b      	ldr	r3, [r7, #16]
 8011fcc:	015a      	lsls	r2, r3, #5
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	4413      	add	r3, r2
 8011fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011fdc:	6013      	str	r3, [r2, #0]
 8011fde:	e008      	b.n	8011ff2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	015a      	lsls	r2, r3, #5
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	4413      	add	r3, r2
 8011fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fec:	461a      	mov	r2, r3
 8011fee:	2300      	movs	r3, #0
 8011ff0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	015a      	lsls	r2, r3, #5
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	4413      	add	r3, r2
 8011ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ffe:	461a      	mov	r2, r3
 8012000:	2300      	movs	r3, #0
 8012002:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012004:	693b      	ldr	r3, [r7, #16]
 8012006:	015a      	lsls	r2, r3, #5
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	4413      	add	r3, r2
 801200c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012010:	461a      	mov	r2, r3
 8012012:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012016:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	3301      	adds	r3, #1
 801201c:	613b      	str	r3, [r7, #16]
 801201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012020:	693a      	ldr	r2, [r7, #16]
 8012022:	429a      	cmp	r2, r3
 8012024:	d3b7      	bcc.n	8011f96 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012026:	2300      	movs	r3, #0
 8012028:	613b      	str	r3, [r7, #16]
 801202a:	e043      	b.n	80120b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801202c:	693b      	ldr	r3, [r7, #16]
 801202e:	015a      	lsls	r2, r3, #5
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	4413      	add	r3, r2
 8012034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801203e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012042:	d118      	bne.n	8012076 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012044:	693b      	ldr	r3, [r7, #16]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d10a      	bne.n	8012060 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801204a:	693b      	ldr	r3, [r7, #16]
 801204c:	015a      	lsls	r2, r3, #5
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	4413      	add	r3, r2
 8012052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012056:	461a      	mov	r2, r3
 8012058:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801205c:	6013      	str	r3, [r2, #0]
 801205e:	e013      	b.n	8012088 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	015a      	lsls	r2, r3, #5
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	4413      	add	r3, r2
 8012068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801206c:	461a      	mov	r2, r3
 801206e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012072:	6013      	str	r3, [r2, #0]
 8012074:	e008      	b.n	8012088 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	015a      	lsls	r2, r3, #5
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	4413      	add	r3, r2
 801207e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012082:	461a      	mov	r2, r3
 8012084:	2300      	movs	r3, #0
 8012086:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	015a      	lsls	r2, r3, #5
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	4413      	add	r3, r2
 8012090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012094:	461a      	mov	r2, r3
 8012096:	2300      	movs	r3, #0
 8012098:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	015a      	lsls	r2, r3, #5
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	4413      	add	r3, r2
 80120a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120a6:	461a      	mov	r2, r3
 80120a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80120ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80120ae:	693b      	ldr	r3, [r7, #16]
 80120b0:	3301      	adds	r3, #1
 80120b2:	613b      	str	r3, [r7, #16]
 80120b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b6:	693a      	ldr	r2, [r7, #16]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d3b7      	bcc.n	801202c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120c2:	691b      	ldr	r3, [r3, #16]
 80120c4:	68fa      	ldr	r2, [r7, #12]
 80120c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80120ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80120ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2200      	movs	r2, #0
 80120d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80120dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80120de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d105      	bne.n	80120f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	699b      	ldr	r3, [r3, #24]
 80120e8:	f043 0210 	orr.w	r2, r3, #16
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	699a      	ldr	r2, [r3, #24]
 80120f4:	4b0e      	ldr	r3, [pc, #56]	; (8012130 <USB_DevInit+0x2b4>)
 80120f6:	4313      	orrs	r3, r2
 80120f8:	687a      	ldr	r2, [r7, #4]
 80120fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80120fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d005      	beq.n	801210e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	699b      	ldr	r3, [r3, #24]
 8012106:	f043 0208 	orr.w	r2, r3, #8
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801210e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012110:	2b01      	cmp	r3, #1
 8012112:	d105      	bne.n	8012120 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	699a      	ldr	r2, [r3, #24]
 8012118:	4b06      	ldr	r3, [pc, #24]	; (8012134 <USB_DevInit+0x2b8>)
 801211a:	4313      	orrs	r3, r2
 801211c:	687a      	ldr	r2, [r7, #4]
 801211e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012120:	7dfb      	ldrb	r3, [r7, #23]
}
 8012122:	4618      	mov	r0, r3
 8012124:	3718      	adds	r7, #24
 8012126:	46bd      	mov	sp, r7
 8012128:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801212c:	b004      	add	sp, #16
 801212e:	4770      	bx	lr
 8012130:	803c3800 	.word	0x803c3800
 8012134:	40000004 	.word	0x40000004

08012138 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012138:	b480      	push	{r7}
 801213a:	b085      	sub	sp, #20
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8012142:	2300      	movs	r3, #0
 8012144:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	019b      	lsls	r3, r3, #6
 801214a:	f043 0220 	orr.w	r2, r3, #32
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	3301      	adds	r3, #1
 8012156:	60fb      	str	r3, [r7, #12]
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	4a09      	ldr	r2, [pc, #36]	; (8012180 <USB_FlushTxFifo+0x48>)
 801215c:	4293      	cmp	r3, r2
 801215e:	d901      	bls.n	8012164 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8012160:	2303      	movs	r3, #3
 8012162:	e006      	b.n	8012172 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	691b      	ldr	r3, [r3, #16]
 8012168:	f003 0320 	and.w	r3, r3, #32
 801216c:	2b20      	cmp	r3, #32
 801216e:	d0f0      	beq.n	8012152 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8012170:	2300      	movs	r3, #0
}
 8012172:	4618      	mov	r0, r3
 8012174:	3714      	adds	r7, #20
 8012176:	46bd      	mov	sp, r7
 8012178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217c:	4770      	bx	lr
 801217e:	bf00      	nop
 8012180:	00030d40 	.word	0x00030d40

08012184 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012184:	b480      	push	{r7}
 8012186:	b085      	sub	sp, #20
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801218c:	2300      	movs	r3, #0
 801218e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2210      	movs	r2, #16
 8012194:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	3301      	adds	r3, #1
 801219a:	60fb      	str	r3, [r7, #12]
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	4a09      	ldr	r2, [pc, #36]	; (80121c4 <USB_FlushRxFifo+0x40>)
 80121a0:	4293      	cmp	r3, r2
 80121a2:	d901      	bls.n	80121a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80121a4:	2303      	movs	r3, #3
 80121a6:	e006      	b.n	80121b6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	691b      	ldr	r3, [r3, #16]
 80121ac:	f003 0310 	and.w	r3, r3, #16
 80121b0:	2b10      	cmp	r3, #16
 80121b2:	d0f0      	beq.n	8012196 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80121b4:	2300      	movs	r3, #0
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3714      	adds	r7, #20
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr
 80121c2:	bf00      	nop
 80121c4:	00030d40 	.word	0x00030d40

080121c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80121c8:	b480      	push	{r7}
 80121ca:	b085      	sub	sp, #20
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	460b      	mov	r3, r1
 80121d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121de:	681a      	ldr	r2, [r3, #0]
 80121e0:	78fb      	ldrb	r3, [r7, #3]
 80121e2:	68f9      	ldr	r1, [r7, #12]
 80121e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80121e8:	4313      	orrs	r3, r2
 80121ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80121ec:	2300      	movs	r3, #0
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3714      	adds	r7, #20
 80121f2:	46bd      	mov	sp, r7
 80121f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f8:	4770      	bx	lr

080121fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80121fa:	b480      	push	{r7}
 80121fc:	b087      	sub	sp, #28
 80121fe:	af00      	add	r7, sp, #0
 8012200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012206:	693b      	ldr	r3, [r7, #16]
 8012208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801220c:	689b      	ldr	r3, [r3, #8]
 801220e:	f003 0306 	and.w	r3, r3, #6
 8012212:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d102      	bne.n	8012220 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801221a:	2300      	movs	r3, #0
 801221c:	75fb      	strb	r3, [r7, #23]
 801221e:	e00a      	b.n	8012236 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	2b02      	cmp	r3, #2
 8012224:	d002      	beq.n	801222c <USB_GetDevSpeed+0x32>
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2b06      	cmp	r3, #6
 801222a:	d102      	bne.n	8012232 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801222c:	2302      	movs	r3, #2
 801222e:	75fb      	strb	r3, [r7, #23]
 8012230:	e001      	b.n	8012236 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012232:	230f      	movs	r3, #15
 8012234:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012236:	7dfb      	ldrb	r3, [r7, #23]
}
 8012238:	4618      	mov	r0, r3
 801223a:	371c      	adds	r7, #28
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr

08012244 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012244:	b480      	push	{r7}
 8012246:	b085      	sub	sp, #20
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	785b      	ldrb	r3, [r3, #1]
 801225c:	2b01      	cmp	r3, #1
 801225e:	d139      	bne.n	80122d4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012266:	69da      	ldr	r2, [r3, #28]
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	f003 030f 	and.w	r3, r3, #15
 8012270:	2101      	movs	r1, #1
 8012272:	fa01 f303 	lsl.w	r3, r1, r3
 8012276:	b29b      	uxth	r3, r3
 8012278:	68f9      	ldr	r1, [r7, #12]
 801227a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801227e:	4313      	orrs	r3, r2
 8012280:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	015a      	lsls	r2, r3, #5
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	4413      	add	r3, r2
 801228a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012294:	2b00      	cmp	r3, #0
 8012296:	d153      	bne.n	8012340 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	015a      	lsls	r2, r3, #5
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	4413      	add	r3, r2
 80122a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122a4:	681a      	ldr	r2, [r3, #0]
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	689b      	ldr	r3, [r3, #8]
 80122aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	78db      	ldrb	r3, [r3, #3]
 80122b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80122b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	059b      	lsls	r3, r3, #22
 80122ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80122bc:	431a      	orrs	r2, r3
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	0159      	lsls	r1, r3, #5
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	440b      	add	r3, r1
 80122c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122ca:	4619      	mov	r1, r3
 80122cc:	4b20      	ldr	r3, [pc, #128]	; (8012350 <USB_ActivateEndpoint+0x10c>)
 80122ce:	4313      	orrs	r3, r2
 80122d0:	600b      	str	r3, [r1, #0]
 80122d2:	e035      	b.n	8012340 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122da:	69da      	ldr	r2, [r3, #28]
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	781b      	ldrb	r3, [r3, #0]
 80122e0:	f003 030f 	and.w	r3, r3, #15
 80122e4:	2101      	movs	r1, #1
 80122e6:	fa01 f303 	lsl.w	r3, r1, r3
 80122ea:	041b      	lsls	r3, r3, #16
 80122ec:	68f9      	ldr	r1, [r7, #12]
 80122ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80122f2:	4313      	orrs	r3, r2
 80122f4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	015a      	lsls	r2, r3, #5
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	4413      	add	r3, r2
 80122fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012308:	2b00      	cmp	r3, #0
 801230a:	d119      	bne.n	8012340 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	015a      	lsls	r2, r3, #5
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	4413      	add	r3, r2
 8012314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012318:	681a      	ldr	r2, [r3, #0]
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	689b      	ldr	r3, [r3, #8]
 801231e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	78db      	ldrb	r3, [r3, #3]
 8012326:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012328:	430b      	orrs	r3, r1
 801232a:	431a      	orrs	r2, r3
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	0159      	lsls	r1, r3, #5
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	440b      	add	r3, r1
 8012334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012338:	4619      	mov	r1, r3
 801233a:	4b05      	ldr	r3, [pc, #20]	; (8012350 <USB_ActivateEndpoint+0x10c>)
 801233c:	4313      	orrs	r3, r2
 801233e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012340:	2300      	movs	r3, #0
}
 8012342:	4618      	mov	r0, r3
 8012344:	3714      	adds	r7, #20
 8012346:	46bd      	mov	sp, r7
 8012348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234c:	4770      	bx	lr
 801234e:	bf00      	nop
 8012350:	10008000 	.word	0x10008000

08012354 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012354:	b480      	push	{r7}
 8012356:	b085      	sub	sp, #20
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	781b      	ldrb	r3, [r3, #0]
 8012366:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	785b      	ldrb	r3, [r3, #1]
 801236c:	2b01      	cmp	r3, #1
 801236e:	d161      	bne.n	8012434 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	015a      	lsls	r2, r3, #5
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	4413      	add	r3, r2
 8012378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012382:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012386:	d11f      	bne.n	80123c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	015a      	lsls	r2, r3, #5
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	4413      	add	r3, r2
 8012390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	68ba      	ldr	r2, [r7, #8]
 8012398:	0151      	lsls	r1, r2, #5
 801239a:	68fa      	ldr	r2, [r7, #12]
 801239c:	440a      	add	r2, r1
 801239e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80123a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80123a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	015a      	lsls	r2, r3, #5
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	4413      	add	r3, r2
 80123b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	68ba      	ldr	r2, [r7, #8]
 80123b8:	0151      	lsls	r1, r2, #5
 80123ba:	68fa      	ldr	r2, [r7, #12]
 80123bc:	440a      	add	r2, r1
 80123be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80123c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80123c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	f003 030f 	and.w	r3, r3, #15
 80123d8:	2101      	movs	r1, #1
 80123da:	fa01 f303 	lsl.w	r3, r1, r3
 80123de:	b29b      	uxth	r3, r3
 80123e0:	43db      	mvns	r3, r3
 80123e2:	68f9      	ldr	r1, [r7, #12]
 80123e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123e8:	4013      	ands	r3, r2
 80123ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123f2:	69da      	ldr	r2, [r3, #28]
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	781b      	ldrb	r3, [r3, #0]
 80123f8:	f003 030f 	and.w	r3, r3, #15
 80123fc:	2101      	movs	r1, #1
 80123fe:	fa01 f303 	lsl.w	r3, r1, r3
 8012402:	b29b      	uxth	r3, r3
 8012404:	43db      	mvns	r3, r3
 8012406:	68f9      	ldr	r1, [r7, #12]
 8012408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801240c:	4013      	ands	r3, r2
 801240e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	015a      	lsls	r2, r3, #5
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	4413      	add	r3, r2
 8012418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801241c:	681a      	ldr	r2, [r3, #0]
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	0159      	lsls	r1, r3, #5
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	440b      	add	r3, r1
 8012426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801242a:	4619      	mov	r1, r3
 801242c:	4b35      	ldr	r3, [pc, #212]	; (8012504 <USB_DeactivateEndpoint+0x1b0>)
 801242e:	4013      	ands	r3, r2
 8012430:	600b      	str	r3, [r1, #0]
 8012432:	e060      	b.n	80124f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	015a      	lsls	r2, r3, #5
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	4413      	add	r3, r2
 801243c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801244a:	d11f      	bne.n	801248c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	015a      	lsls	r2, r3, #5
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	4413      	add	r3, r2
 8012454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	68ba      	ldr	r2, [r7, #8]
 801245c:	0151      	lsls	r1, r2, #5
 801245e:	68fa      	ldr	r2, [r7, #12]
 8012460:	440a      	add	r2, r1
 8012462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012466:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801246a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801246c:	68bb      	ldr	r3, [r7, #8]
 801246e:	015a      	lsls	r2, r3, #5
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	4413      	add	r3, r2
 8012474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	68ba      	ldr	r2, [r7, #8]
 801247c:	0151      	lsls	r1, r2, #5
 801247e:	68fa      	ldr	r2, [r7, #12]
 8012480:	440a      	add	r2, r1
 8012482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012486:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801248a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	781b      	ldrb	r3, [r3, #0]
 8012498:	f003 030f 	and.w	r3, r3, #15
 801249c:	2101      	movs	r1, #1
 801249e:	fa01 f303 	lsl.w	r3, r1, r3
 80124a2:	041b      	lsls	r3, r3, #16
 80124a4:	43db      	mvns	r3, r3
 80124a6:	68f9      	ldr	r1, [r7, #12]
 80124a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80124ac:	4013      	ands	r3, r2
 80124ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124b6:	69da      	ldr	r2, [r3, #28]
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	781b      	ldrb	r3, [r3, #0]
 80124bc:	f003 030f 	and.w	r3, r3, #15
 80124c0:	2101      	movs	r1, #1
 80124c2:	fa01 f303 	lsl.w	r3, r1, r3
 80124c6:	041b      	lsls	r3, r3, #16
 80124c8:	43db      	mvns	r3, r3
 80124ca:	68f9      	ldr	r1, [r7, #12]
 80124cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80124d0:	4013      	ands	r3, r2
 80124d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	015a      	lsls	r2, r3, #5
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	4413      	add	r3, r2
 80124dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124e0:	681a      	ldr	r2, [r3, #0]
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	0159      	lsls	r1, r3, #5
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	440b      	add	r3, r1
 80124ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124ee:	4619      	mov	r1, r3
 80124f0:	4b05      	ldr	r3, [pc, #20]	; (8012508 <USB_DeactivateEndpoint+0x1b4>)
 80124f2:	4013      	ands	r3, r2
 80124f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80124f6:	2300      	movs	r3, #0
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3714      	adds	r7, #20
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr
 8012504:	ec337800 	.word	0xec337800
 8012508:	eff37800 	.word	0xeff37800

0801250c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b08a      	sub	sp, #40	; 0x28
 8012510:	af02      	add	r7, sp, #8
 8012512:	60f8      	str	r0, [r7, #12]
 8012514:	60b9      	str	r1, [r7, #8]
 8012516:	4613      	mov	r3, r2
 8012518:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	781b      	ldrb	r3, [r3, #0]
 8012522:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	785b      	ldrb	r3, [r3, #1]
 8012528:	2b01      	cmp	r3, #1
 801252a:	f040 8163 	bne.w	80127f4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	695b      	ldr	r3, [r3, #20]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d132      	bne.n	801259c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012536:	69bb      	ldr	r3, [r7, #24]
 8012538:	015a      	lsls	r2, r3, #5
 801253a:	69fb      	ldr	r3, [r7, #28]
 801253c:	4413      	add	r3, r2
 801253e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012542:	691a      	ldr	r2, [r3, #16]
 8012544:	69bb      	ldr	r3, [r7, #24]
 8012546:	0159      	lsls	r1, r3, #5
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	440b      	add	r3, r1
 801254c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012550:	4619      	mov	r1, r3
 8012552:	4ba5      	ldr	r3, [pc, #660]	; (80127e8 <USB_EPStartXfer+0x2dc>)
 8012554:	4013      	ands	r3, r2
 8012556:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012558:	69bb      	ldr	r3, [r7, #24]
 801255a:	015a      	lsls	r2, r3, #5
 801255c:	69fb      	ldr	r3, [r7, #28]
 801255e:	4413      	add	r3, r2
 8012560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012564:	691b      	ldr	r3, [r3, #16]
 8012566:	69ba      	ldr	r2, [r7, #24]
 8012568:	0151      	lsls	r1, r2, #5
 801256a:	69fa      	ldr	r2, [r7, #28]
 801256c:	440a      	add	r2, r1
 801256e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012572:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012576:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	015a      	lsls	r2, r3, #5
 801257c:	69fb      	ldr	r3, [r7, #28]
 801257e:	4413      	add	r3, r2
 8012580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012584:	691a      	ldr	r2, [r3, #16]
 8012586:	69bb      	ldr	r3, [r7, #24]
 8012588:	0159      	lsls	r1, r3, #5
 801258a:	69fb      	ldr	r3, [r7, #28]
 801258c:	440b      	add	r3, r1
 801258e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012592:	4619      	mov	r1, r3
 8012594:	4b95      	ldr	r3, [pc, #596]	; (80127ec <USB_EPStartXfer+0x2e0>)
 8012596:	4013      	ands	r3, r2
 8012598:	610b      	str	r3, [r1, #16]
 801259a:	e074      	b.n	8012686 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801259c:	69bb      	ldr	r3, [r7, #24]
 801259e:	015a      	lsls	r2, r3, #5
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	4413      	add	r3, r2
 80125a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125a8:	691a      	ldr	r2, [r3, #16]
 80125aa:	69bb      	ldr	r3, [r7, #24]
 80125ac:	0159      	lsls	r1, r3, #5
 80125ae:	69fb      	ldr	r3, [r7, #28]
 80125b0:	440b      	add	r3, r1
 80125b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125b6:	4619      	mov	r1, r3
 80125b8:	4b8c      	ldr	r3, [pc, #560]	; (80127ec <USB_EPStartXfer+0x2e0>)
 80125ba:	4013      	ands	r3, r2
 80125bc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80125be:	69bb      	ldr	r3, [r7, #24]
 80125c0:	015a      	lsls	r2, r3, #5
 80125c2:	69fb      	ldr	r3, [r7, #28]
 80125c4:	4413      	add	r3, r2
 80125c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125ca:	691a      	ldr	r2, [r3, #16]
 80125cc:	69bb      	ldr	r3, [r7, #24]
 80125ce:	0159      	lsls	r1, r3, #5
 80125d0:	69fb      	ldr	r3, [r7, #28]
 80125d2:	440b      	add	r3, r1
 80125d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125d8:	4619      	mov	r1, r3
 80125da:	4b83      	ldr	r3, [pc, #524]	; (80127e8 <USB_EPStartXfer+0x2dc>)
 80125dc:	4013      	ands	r3, r2
 80125de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80125e0:	69bb      	ldr	r3, [r7, #24]
 80125e2:	015a      	lsls	r2, r3, #5
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	4413      	add	r3, r2
 80125e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125ec:	691a      	ldr	r2, [r3, #16]
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	6959      	ldr	r1, [r3, #20]
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	689b      	ldr	r3, [r3, #8]
 80125f6:	440b      	add	r3, r1
 80125f8:	1e59      	subs	r1, r3, #1
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	689b      	ldr	r3, [r3, #8]
 80125fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8012602:	04d9      	lsls	r1, r3, #19
 8012604:	4b7a      	ldr	r3, [pc, #488]	; (80127f0 <USB_EPStartXfer+0x2e4>)
 8012606:	400b      	ands	r3, r1
 8012608:	69b9      	ldr	r1, [r7, #24]
 801260a:	0148      	lsls	r0, r1, #5
 801260c:	69f9      	ldr	r1, [r7, #28]
 801260e:	4401      	add	r1, r0
 8012610:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012614:	4313      	orrs	r3, r2
 8012616:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012618:	69bb      	ldr	r3, [r7, #24]
 801261a:	015a      	lsls	r2, r3, #5
 801261c:	69fb      	ldr	r3, [r7, #28]
 801261e:	4413      	add	r3, r2
 8012620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012624:	691a      	ldr	r2, [r3, #16]
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	695b      	ldr	r3, [r3, #20]
 801262a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801262e:	69b9      	ldr	r1, [r7, #24]
 8012630:	0148      	lsls	r0, r1, #5
 8012632:	69f9      	ldr	r1, [r7, #28]
 8012634:	4401      	add	r1, r0
 8012636:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801263a:	4313      	orrs	r3, r2
 801263c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801263e:	68bb      	ldr	r3, [r7, #8]
 8012640:	78db      	ldrb	r3, [r3, #3]
 8012642:	2b01      	cmp	r3, #1
 8012644:	d11f      	bne.n	8012686 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012646:	69bb      	ldr	r3, [r7, #24]
 8012648:	015a      	lsls	r2, r3, #5
 801264a:	69fb      	ldr	r3, [r7, #28]
 801264c:	4413      	add	r3, r2
 801264e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012652:	691b      	ldr	r3, [r3, #16]
 8012654:	69ba      	ldr	r2, [r7, #24]
 8012656:	0151      	lsls	r1, r2, #5
 8012658:	69fa      	ldr	r2, [r7, #28]
 801265a:	440a      	add	r2, r1
 801265c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012660:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012664:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012666:	69bb      	ldr	r3, [r7, #24]
 8012668:	015a      	lsls	r2, r3, #5
 801266a:	69fb      	ldr	r3, [r7, #28]
 801266c:	4413      	add	r3, r2
 801266e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012672:	691b      	ldr	r3, [r3, #16]
 8012674:	69ba      	ldr	r2, [r7, #24]
 8012676:	0151      	lsls	r1, r2, #5
 8012678:	69fa      	ldr	r2, [r7, #28]
 801267a:	440a      	add	r2, r1
 801267c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012680:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012684:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012686:	79fb      	ldrb	r3, [r7, #7]
 8012688:	2b01      	cmp	r3, #1
 801268a:	d14b      	bne.n	8012724 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	691b      	ldr	r3, [r3, #16]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d009      	beq.n	80126a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012694:	69bb      	ldr	r3, [r7, #24]
 8012696:	015a      	lsls	r2, r3, #5
 8012698:	69fb      	ldr	r3, [r7, #28]
 801269a:	4413      	add	r3, r2
 801269c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126a0:	461a      	mov	r2, r3
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	691b      	ldr	r3, [r3, #16]
 80126a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	78db      	ldrb	r3, [r3, #3]
 80126ac:	2b01      	cmp	r3, #1
 80126ae:	d128      	bne.n	8012702 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80126b0:	69fb      	ldr	r3, [r7, #28]
 80126b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126b6:	689b      	ldr	r3, [r3, #8]
 80126b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d110      	bne.n	80126e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80126c0:	69bb      	ldr	r3, [r7, #24]
 80126c2:	015a      	lsls	r2, r3, #5
 80126c4:	69fb      	ldr	r3, [r7, #28]
 80126c6:	4413      	add	r3, r2
 80126c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	69ba      	ldr	r2, [r7, #24]
 80126d0:	0151      	lsls	r1, r2, #5
 80126d2:	69fa      	ldr	r2, [r7, #28]
 80126d4:	440a      	add	r2, r1
 80126d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80126de:	6013      	str	r3, [r2, #0]
 80126e0:	e00f      	b.n	8012702 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80126e2:	69bb      	ldr	r3, [r7, #24]
 80126e4:	015a      	lsls	r2, r3, #5
 80126e6:	69fb      	ldr	r3, [r7, #28]
 80126e8:	4413      	add	r3, r2
 80126ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	69ba      	ldr	r2, [r7, #24]
 80126f2:	0151      	lsls	r1, r2, #5
 80126f4:	69fa      	ldr	r2, [r7, #28]
 80126f6:	440a      	add	r2, r1
 80126f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012700:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012702:	69bb      	ldr	r3, [r7, #24]
 8012704:	015a      	lsls	r2, r3, #5
 8012706:	69fb      	ldr	r3, [r7, #28]
 8012708:	4413      	add	r3, r2
 801270a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	69ba      	ldr	r2, [r7, #24]
 8012712:	0151      	lsls	r1, r2, #5
 8012714:	69fa      	ldr	r2, [r7, #28]
 8012716:	440a      	add	r2, r1
 8012718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801271c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012720:	6013      	str	r3, [r2, #0]
 8012722:	e133      	b.n	801298c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	015a      	lsls	r2, r3, #5
 8012728:	69fb      	ldr	r3, [r7, #28]
 801272a:	4413      	add	r3, r2
 801272c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	69ba      	ldr	r2, [r7, #24]
 8012734:	0151      	lsls	r1, r2, #5
 8012736:	69fa      	ldr	r2, [r7, #28]
 8012738:	440a      	add	r2, r1
 801273a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801273e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012742:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	78db      	ldrb	r3, [r3, #3]
 8012748:	2b01      	cmp	r3, #1
 801274a:	d015      	beq.n	8012778 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	695b      	ldr	r3, [r3, #20]
 8012750:	2b00      	cmp	r3, #0
 8012752:	f000 811b 	beq.w	801298c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012756:	69fb      	ldr	r3, [r7, #28]
 8012758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801275c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	f003 030f 	and.w	r3, r3, #15
 8012766:	2101      	movs	r1, #1
 8012768:	fa01 f303 	lsl.w	r3, r1, r3
 801276c:	69f9      	ldr	r1, [r7, #28]
 801276e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012772:	4313      	orrs	r3, r2
 8012774:	634b      	str	r3, [r1, #52]	; 0x34
 8012776:	e109      	b.n	801298c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012778:	69fb      	ldr	r3, [r7, #28]
 801277a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801277e:	689b      	ldr	r3, [r3, #8]
 8012780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012784:	2b00      	cmp	r3, #0
 8012786:	d110      	bne.n	80127aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012788:	69bb      	ldr	r3, [r7, #24]
 801278a:	015a      	lsls	r2, r3, #5
 801278c:	69fb      	ldr	r3, [r7, #28]
 801278e:	4413      	add	r3, r2
 8012790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	69ba      	ldr	r2, [r7, #24]
 8012798:	0151      	lsls	r1, r2, #5
 801279a:	69fa      	ldr	r2, [r7, #28]
 801279c:	440a      	add	r2, r1
 801279e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80127a6:	6013      	str	r3, [r2, #0]
 80127a8:	e00f      	b.n	80127ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80127aa:	69bb      	ldr	r3, [r7, #24]
 80127ac:	015a      	lsls	r2, r3, #5
 80127ae:	69fb      	ldr	r3, [r7, #28]
 80127b0:	4413      	add	r3, r2
 80127b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	69ba      	ldr	r2, [r7, #24]
 80127ba:	0151      	lsls	r1, r2, #5
 80127bc:	69fa      	ldr	r2, [r7, #28]
 80127be:	440a      	add	r2, r1
 80127c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80127c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80127ca:	68bb      	ldr	r3, [r7, #8]
 80127cc:	68d9      	ldr	r1, [r3, #12]
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	781a      	ldrb	r2, [r3, #0]
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	695b      	ldr	r3, [r3, #20]
 80127d6:	b298      	uxth	r0, r3
 80127d8:	79fb      	ldrb	r3, [r7, #7]
 80127da:	9300      	str	r3, [sp, #0]
 80127dc:	4603      	mov	r3, r0
 80127de:	68f8      	ldr	r0, [r7, #12]
 80127e0:	f000 fa38 	bl	8012c54 <USB_WritePacket>
 80127e4:	e0d2      	b.n	801298c <USB_EPStartXfer+0x480>
 80127e6:	bf00      	nop
 80127e8:	e007ffff 	.word	0xe007ffff
 80127ec:	fff80000 	.word	0xfff80000
 80127f0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80127f4:	69bb      	ldr	r3, [r7, #24]
 80127f6:	015a      	lsls	r2, r3, #5
 80127f8:	69fb      	ldr	r3, [r7, #28]
 80127fa:	4413      	add	r3, r2
 80127fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012800:	691a      	ldr	r2, [r3, #16]
 8012802:	69bb      	ldr	r3, [r7, #24]
 8012804:	0159      	lsls	r1, r3, #5
 8012806:	69fb      	ldr	r3, [r7, #28]
 8012808:	440b      	add	r3, r1
 801280a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801280e:	4619      	mov	r1, r3
 8012810:	4b61      	ldr	r3, [pc, #388]	; (8012998 <USB_EPStartXfer+0x48c>)
 8012812:	4013      	ands	r3, r2
 8012814:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012816:	69bb      	ldr	r3, [r7, #24]
 8012818:	015a      	lsls	r2, r3, #5
 801281a:	69fb      	ldr	r3, [r7, #28]
 801281c:	4413      	add	r3, r2
 801281e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012822:	691a      	ldr	r2, [r3, #16]
 8012824:	69bb      	ldr	r3, [r7, #24]
 8012826:	0159      	lsls	r1, r3, #5
 8012828:	69fb      	ldr	r3, [r7, #28]
 801282a:	440b      	add	r3, r1
 801282c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012830:	4619      	mov	r1, r3
 8012832:	4b5a      	ldr	r3, [pc, #360]	; (801299c <USB_EPStartXfer+0x490>)
 8012834:	4013      	ands	r3, r2
 8012836:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	695b      	ldr	r3, [r3, #20]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d123      	bne.n	8012888 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012840:	69bb      	ldr	r3, [r7, #24]
 8012842:	015a      	lsls	r2, r3, #5
 8012844:	69fb      	ldr	r3, [r7, #28]
 8012846:	4413      	add	r3, r2
 8012848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801284c:	691a      	ldr	r2, [r3, #16]
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	689b      	ldr	r3, [r3, #8]
 8012852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012856:	69b9      	ldr	r1, [r7, #24]
 8012858:	0148      	lsls	r0, r1, #5
 801285a:	69f9      	ldr	r1, [r7, #28]
 801285c:	4401      	add	r1, r0
 801285e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012862:	4313      	orrs	r3, r2
 8012864:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012866:	69bb      	ldr	r3, [r7, #24]
 8012868:	015a      	lsls	r2, r3, #5
 801286a:	69fb      	ldr	r3, [r7, #28]
 801286c:	4413      	add	r3, r2
 801286e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012872:	691b      	ldr	r3, [r3, #16]
 8012874:	69ba      	ldr	r2, [r7, #24]
 8012876:	0151      	lsls	r1, r2, #5
 8012878:	69fa      	ldr	r2, [r7, #28]
 801287a:	440a      	add	r2, r1
 801287c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012884:	6113      	str	r3, [r2, #16]
 8012886:	e033      	b.n	80128f0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	695a      	ldr	r2, [r3, #20]
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	689b      	ldr	r3, [r3, #8]
 8012890:	4413      	add	r3, r2
 8012892:	1e5a      	subs	r2, r3, #1
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	689b      	ldr	r3, [r3, #8]
 8012898:	fbb2 f3f3 	udiv	r3, r2, r3
 801289c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801289e:	69bb      	ldr	r3, [r7, #24]
 80128a0:	015a      	lsls	r2, r3, #5
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	4413      	add	r3, r2
 80128a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128aa:	691a      	ldr	r2, [r3, #16]
 80128ac:	8afb      	ldrh	r3, [r7, #22]
 80128ae:	04d9      	lsls	r1, r3, #19
 80128b0:	4b3b      	ldr	r3, [pc, #236]	; (80129a0 <USB_EPStartXfer+0x494>)
 80128b2:	400b      	ands	r3, r1
 80128b4:	69b9      	ldr	r1, [r7, #24]
 80128b6:	0148      	lsls	r0, r1, #5
 80128b8:	69f9      	ldr	r1, [r7, #28]
 80128ba:	4401      	add	r1, r0
 80128bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80128c0:	4313      	orrs	r3, r2
 80128c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80128c4:	69bb      	ldr	r3, [r7, #24]
 80128c6:	015a      	lsls	r2, r3, #5
 80128c8:	69fb      	ldr	r3, [r7, #28]
 80128ca:	4413      	add	r3, r2
 80128cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128d0:	691a      	ldr	r2, [r3, #16]
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	689b      	ldr	r3, [r3, #8]
 80128d6:	8af9      	ldrh	r1, [r7, #22]
 80128d8:	fb01 f303 	mul.w	r3, r1, r3
 80128dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80128e0:	69b9      	ldr	r1, [r7, #24]
 80128e2:	0148      	lsls	r0, r1, #5
 80128e4:	69f9      	ldr	r1, [r7, #28]
 80128e6:	4401      	add	r1, r0
 80128e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80128ec:	4313      	orrs	r3, r2
 80128ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80128f0:	79fb      	ldrb	r3, [r7, #7]
 80128f2:	2b01      	cmp	r3, #1
 80128f4:	d10d      	bne.n	8012912 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	68db      	ldr	r3, [r3, #12]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d009      	beq.n	8012912 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	68d9      	ldr	r1, [r3, #12]
 8012902:	69bb      	ldr	r3, [r7, #24]
 8012904:	015a      	lsls	r2, r3, #5
 8012906:	69fb      	ldr	r3, [r7, #28]
 8012908:	4413      	add	r3, r2
 801290a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801290e:	460a      	mov	r2, r1
 8012910:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	78db      	ldrb	r3, [r3, #3]
 8012916:	2b01      	cmp	r3, #1
 8012918:	d128      	bne.n	801296c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801291a:	69fb      	ldr	r3, [r7, #28]
 801291c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012920:	689b      	ldr	r3, [r3, #8]
 8012922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012926:	2b00      	cmp	r3, #0
 8012928:	d110      	bne.n	801294c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801292a:	69bb      	ldr	r3, [r7, #24]
 801292c:	015a      	lsls	r2, r3, #5
 801292e:	69fb      	ldr	r3, [r7, #28]
 8012930:	4413      	add	r3, r2
 8012932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	69ba      	ldr	r2, [r7, #24]
 801293a:	0151      	lsls	r1, r2, #5
 801293c:	69fa      	ldr	r2, [r7, #28]
 801293e:	440a      	add	r2, r1
 8012940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012944:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012948:	6013      	str	r3, [r2, #0]
 801294a:	e00f      	b.n	801296c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801294c:	69bb      	ldr	r3, [r7, #24]
 801294e:	015a      	lsls	r2, r3, #5
 8012950:	69fb      	ldr	r3, [r7, #28]
 8012952:	4413      	add	r3, r2
 8012954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	69ba      	ldr	r2, [r7, #24]
 801295c:	0151      	lsls	r1, r2, #5
 801295e:	69fa      	ldr	r2, [r7, #28]
 8012960:	440a      	add	r2, r1
 8012962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801296a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801296c:	69bb      	ldr	r3, [r7, #24]
 801296e:	015a      	lsls	r2, r3, #5
 8012970:	69fb      	ldr	r3, [r7, #28]
 8012972:	4413      	add	r3, r2
 8012974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	69ba      	ldr	r2, [r7, #24]
 801297c:	0151      	lsls	r1, r2, #5
 801297e:	69fa      	ldr	r2, [r7, #28]
 8012980:	440a      	add	r2, r1
 8012982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012986:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801298a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801298c:	2300      	movs	r3, #0
}
 801298e:	4618      	mov	r0, r3
 8012990:	3720      	adds	r7, #32
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
 8012996:	bf00      	nop
 8012998:	fff80000 	.word	0xfff80000
 801299c:	e007ffff 	.word	0xe007ffff
 80129a0:	1ff80000 	.word	0x1ff80000

080129a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80129a4:	b480      	push	{r7}
 80129a6:	b087      	sub	sp, #28
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	60f8      	str	r0, [r7, #12]
 80129ac:	60b9      	str	r1, [r7, #8]
 80129ae:	4613      	mov	r3, r2
 80129b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80129b6:	68bb      	ldr	r3, [r7, #8]
 80129b8:	781b      	ldrb	r3, [r3, #0]
 80129ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	785b      	ldrb	r3, [r3, #1]
 80129c0:	2b01      	cmp	r3, #1
 80129c2:	f040 80cd 	bne.w	8012b60 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	695b      	ldr	r3, [r3, #20]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d132      	bne.n	8012a34 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80129ce:	693b      	ldr	r3, [r7, #16]
 80129d0:	015a      	lsls	r2, r3, #5
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	4413      	add	r3, r2
 80129d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129da:	691a      	ldr	r2, [r3, #16]
 80129dc:	693b      	ldr	r3, [r7, #16]
 80129de:	0159      	lsls	r1, r3, #5
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	440b      	add	r3, r1
 80129e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129e8:	4619      	mov	r1, r3
 80129ea:	4b98      	ldr	r3, [pc, #608]	; (8012c4c <USB_EP0StartXfer+0x2a8>)
 80129ec:	4013      	ands	r3, r2
 80129ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	015a      	lsls	r2, r3, #5
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	4413      	add	r3, r2
 80129f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129fc:	691b      	ldr	r3, [r3, #16]
 80129fe:	693a      	ldr	r2, [r7, #16]
 8012a00:	0151      	lsls	r1, r2, #5
 8012a02:	697a      	ldr	r2, [r7, #20]
 8012a04:	440a      	add	r2, r1
 8012a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012a0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012a10:	693b      	ldr	r3, [r7, #16]
 8012a12:	015a      	lsls	r2, r3, #5
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	4413      	add	r3, r2
 8012a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a1c:	691a      	ldr	r2, [r3, #16]
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	0159      	lsls	r1, r3, #5
 8012a22:	697b      	ldr	r3, [r7, #20]
 8012a24:	440b      	add	r3, r1
 8012a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a2a:	4619      	mov	r1, r3
 8012a2c:	4b88      	ldr	r3, [pc, #544]	; (8012c50 <USB_EP0StartXfer+0x2ac>)
 8012a2e:	4013      	ands	r3, r2
 8012a30:	610b      	str	r3, [r1, #16]
 8012a32:	e04e      	b.n	8012ad2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	015a      	lsls	r2, r3, #5
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	4413      	add	r3, r2
 8012a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a40:	691a      	ldr	r2, [r3, #16]
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	0159      	lsls	r1, r3, #5
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	440b      	add	r3, r1
 8012a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a4e:	4619      	mov	r1, r3
 8012a50:	4b7f      	ldr	r3, [pc, #508]	; (8012c50 <USB_EP0StartXfer+0x2ac>)
 8012a52:	4013      	ands	r3, r2
 8012a54:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	015a      	lsls	r2, r3, #5
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	4413      	add	r3, r2
 8012a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a62:	691a      	ldr	r2, [r3, #16]
 8012a64:	693b      	ldr	r3, [r7, #16]
 8012a66:	0159      	lsls	r1, r3, #5
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	440b      	add	r3, r1
 8012a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a70:	4619      	mov	r1, r3
 8012a72:	4b76      	ldr	r3, [pc, #472]	; (8012c4c <USB_EP0StartXfer+0x2a8>)
 8012a74:	4013      	ands	r3, r2
 8012a76:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	695a      	ldr	r2, [r3, #20]
 8012a7c:	68bb      	ldr	r3, [r7, #8]
 8012a7e:	689b      	ldr	r3, [r3, #8]
 8012a80:	429a      	cmp	r2, r3
 8012a82:	d903      	bls.n	8012a8c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012a84:	68bb      	ldr	r3, [r7, #8]
 8012a86:	689a      	ldr	r2, [r3, #8]
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	015a      	lsls	r2, r3, #5
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	4413      	add	r3, r2
 8012a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a98:	691b      	ldr	r3, [r3, #16]
 8012a9a:	693a      	ldr	r2, [r7, #16]
 8012a9c:	0151      	lsls	r1, r2, #5
 8012a9e:	697a      	ldr	r2, [r7, #20]
 8012aa0:	440a      	add	r2, r1
 8012aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012aa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012aaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	015a      	lsls	r2, r3, #5
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	4413      	add	r3, r2
 8012ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ab8:	691a      	ldr	r2, [r3, #16]
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	695b      	ldr	r3, [r3, #20]
 8012abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012ac2:	6939      	ldr	r1, [r7, #16]
 8012ac4:	0148      	lsls	r0, r1, #5
 8012ac6:	6979      	ldr	r1, [r7, #20]
 8012ac8:	4401      	add	r1, r0
 8012aca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012ace:	4313      	orrs	r3, r2
 8012ad0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012ad2:	79fb      	ldrb	r3, [r7, #7]
 8012ad4:	2b01      	cmp	r3, #1
 8012ad6:	d11e      	bne.n	8012b16 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	691b      	ldr	r3, [r3, #16]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d009      	beq.n	8012af4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012ae0:	693b      	ldr	r3, [r7, #16]
 8012ae2:	015a      	lsls	r2, r3, #5
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	4413      	add	r3, r2
 8012ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012aec:	461a      	mov	r2, r3
 8012aee:	68bb      	ldr	r3, [r7, #8]
 8012af0:	691b      	ldr	r3, [r3, #16]
 8012af2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	015a      	lsls	r2, r3, #5
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	4413      	add	r3, r2
 8012afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	693a      	ldr	r2, [r7, #16]
 8012b04:	0151      	lsls	r1, r2, #5
 8012b06:	697a      	ldr	r2, [r7, #20]
 8012b08:	440a      	add	r2, r1
 8012b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012b12:	6013      	str	r3, [r2, #0]
 8012b14:	e092      	b.n	8012c3c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012b16:	693b      	ldr	r3, [r7, #16]
 8012b18:	015a      	lsls	r2, r3, #5
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	4413      	add	r3, r2
 8012b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	693a      	ldr	r2, [r7, #16]
 8012b26:	0151      	lsls	r1, r2, #5
 8012b28:	697a      	ldr	r2, [r7, #20]
 8012b2a:	440a      	add	r2, r1
 8012b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012b34:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	695b      	ldr	r3, [r3, #20]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d07e      	beq.n	8012c3c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	f003 030f 	and.w	r3, r3, #15
 8012b4e:	2101      	movs	r1, #1
 8012b50:	fa01 f303 	lsl.w	r3, r1, r3
 8012b54:	6979      	ldr	r1, [r7, #20]
 8012b56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012b5a:	4313      	orrs	r3, r2
 8012b5c:	634b      	str	r3, [r1, #52]	; 0x34
 8012b5e:	e06d      	b.n	8012c3c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012b60:	693b      	ldr	r3, [r7, #16]
 8012b62:	015a      	lsls	r2, r3, #5
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	4413      	add	r3, r2
 8012b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b6c:	691a      	ldr	r2, [r3, #16]
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	0159      	lsls	r1, r3, #5
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	440b      	add	r3, r1
 8012b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	4b34      	ldr	r3, [pc, #208]	; (8012c50 <USB_EP0StartXfer+0x2ac>)
 8012b7e:	4013      	ands	r3, r2
 8012b80:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	015a      	lsls	r2, r3, #5
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	4413      	add	r3, r2
 8012b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b8e:	691a      	ldr	r2, [r3, #16]
 8012b90:	693b      	ldr	r3, [r7, #16]
 8012b92:	0159      	lsls	r1, r3, #5
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	440b      	add	r3, r1
 8012b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b9c:	4619      	mov	r1, r3
 8012b9e:	4b2b      	ldr	r3, [pc, #172]	; (8012c4c <USB_EP0StartXfer+0x2a8>)
 8012ba0:	4013      	ands	r3, r2
 8012ba2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8012ba4:	68bb      	ldr	r3, [r7, #8]
 8012ba6:	695b      	ldr	r3, [r3, #20]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d003      	beq.n	8012bb4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8012bac:	68bb      	ldr	r3, [r7, #8]
 8012bae:	689a      	ldr	r2, [r3, #8]
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	015a      	lsls	r2, r3, #5
 8012bb8:	697b      	ldr	r3, [r7, #20]
 8012bba:	4413      	add	r3, r2
 8012bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bc0:	691b      	ldr	r3, [r3, #16]
 8012bc2:	693a      	ldr	r2, [r7, #16]
 8012bc4:	0151      	lsls	r1, r2, #5
 8012bc6:	697a      	ldr	r2, [r7, #20]
 8012bc8:	440a      	add	r2, r1
 8012bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012bd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	015a      	lsls	r2, r3, #5
 8012bd8:	697b      	ldr	r3, [r7, #20]
 8012bda:	4413      	add	r3, r2
 8012bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012be0:	691a      	ldr	r2, [r3, #16]
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	689b      	ldr	r3, [r3, #8]
 8012be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012bea:	6939      	ldr	r1, [r7, #16]
 8012bec:	0148      	lsls	r0, r1, #5
 8012bee:	6979      	ldr	r1, [r7, #20]
 8012bf0:	4401      	add	r1, r0
 8012bf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012bf6:	4313      	orrs	r3, r2
 8012bf8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012bfa:	79fb      	ldrb	r3, [r7, #7]
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	d10d      	bne.n	8012c1c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	68db      	ldr	r3, [r3, #12]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d009      	beq.n	8012c1c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	68d9      	ldr	r1, [r3, #12]
 8012c0c:	693b      	ldr	r3, [r7, #16]
 8012c0e:	015a      	lsls	r2, r3, #5
 8012c10:	697b      	ldr	r3, [r7, #20]
 8012c12:	4413      	add	r3, r2
 8012c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c18:	460a      	mov	r2, r1
 8012c1a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012c1c:	693b      	ldr	r3, [r7, #16]
 8012c1e:	015a      	lsls	r2, r3, #5
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	4413      	add	r3, r2
 8012c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	693a      	ldr	r2, [r7, #16]
 8012c2c:	0151      	lsls	r1, r2, #5
 8012c2e:	697a      	ldr	r2, [r7, #20]
 8012c30:	440a      	add	r2, r1
 8012c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012c3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012c3c:	2300      	movs	r3, #0
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	371c      	adds	r7, #28
 8012c42:	46bd      	mov	sp, r7
 8012c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c48:	4770      	bx	lr
 8012c4a:	bf00      	nop
 8012c4c:	e007ffff 	.word	0xe007ffff
 8012c50:	fff80000 	.word	0xfff80000

08012c54 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012c54:	b480      	push	{r7}
 8012c56:	b089      	sub	sp, #36	; 0x24
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	60f8      	str	r0, [r7, #12]
 8012c5c:	60b9      	str	r1, [r7, #8]
 8012c5e:	4611      	mov	r1, r2
 8012c60:	461a      	mov	r2, r3
 8012c62:	460b      	mov	r3, r1
 8012c64:	71fb      	strb	r3, [r7, #7]
 8012c66:	4613      	mov	r3, r2
 8012c68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8012c72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d11a      	bne.n	8012cb0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012c7a:	88bb      	ldrh	r3, [r7, #4]
 8012c7c:	3303      	adds	r3, #3
 8012c7e:	089b      	lsrs	r3, r3, #2
 8012c80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012c82:	2300      	movs	r3, #0
 8012c84:	61bb      	str	r3, [r7, #24]
 8012c86:	e00f      	b.n	8012ca8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012c88:	79fb      	ldrb	r3, [r7, #7]
 8012c8a:	031a      	lsls	r2, r3, #12
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	4413      	add	r3, r2
 8012c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012c94:	461a      	mov	r2, r3
 8012c96:	69fb      	ldr	r3, [r7, #28]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012c9c:	69fb      	ldr	r3, [r7, #28]
 8012c9e:	3304      	adds	r3, #4
 8012ca0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012ca2:	69bb      	ldr	r3, [r7, #24]
 8012ca4:	3301      	adds	r3, #1
 8012ca6:	61bb      	str	r3, [r7, #24]
 8012ca8:	69ba      	ldr	r2, [r7, #24]
 8012caa:	693b      	ldr	r3, [r7, #16]
 8012cac:	429a      	cmp	r2, r3
 8012cae:	d3eb      	bcc.n	8012c88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012cb0:	2300      	movs	r3, #0
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3724      	adds	r7, #36	; 0x24
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr

08012cbe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012cbe:	b480      	push	{r7}
 8012cc0:	b089      	sub	sp, #36	; 0x24
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	60f8      	str	r0, [r7, #12]
 8012cc6:	60b9      	str	r1, [r7, #8]
 8012cc8:	4613      	mov	r3, r2
 8012cca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012cd4:	88fb      	ldrh	r3, [r7, #6]
 8012cd6:	3303      	adds	r3, #3
 8012cd8:	089b      	lsrs	r3, r3, #2
 8012cda:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8012cdc:	2300      	movs	r3, #0
 8012cde:	61bb      	str	r3, [r7, #24]
 8012ce0:	e00b      	b.n	8012cfa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	69fb      	ldr	r3, [r7, #28]
 8012cec:	601a      	str	r2, [r3, #0]
    pDest++;
 8012cee:	69fb      	ldr	r3, [r7, #28]
 8012cf0:	3304      	adds	r3, #4
 8012cf2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012cf4:	69bb      	ldr	r3, [r7, #24]
 8012cf6:	3301      	adds	r3, #1
 8012cf8:	61bb      	str	r3, [r7, #24]
 8012cfa:	69ba      	ldr	r2, [r7, #24]
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	429a      	cmp	r2, r3
 8012d00:	d3ef      	bcc.n	8012ce2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8012d02:	69fb      	ldr	r3, [r7, #28]
}
 8012d04:	4618      	mov	r0, r3
 8012d06:	3724      	adds	r7, #36	; 0x24
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0e:	4770      	bx	lr

08012d10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012d10:	b480      	push	{r7}
 8012d12:	b085      	sub	sp, #20
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
 8012d18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	781b      	ldrb	r3, [r3, #0]
 8012d22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	785b      	ldrb	r3, [r3, #1]
 8012d28:	2b01      	cmp	r3, #1
 8012d2a:	d12c      	bne.n	8012d86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	015a      	lsls	r2, r3, #5
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	4413      	add	r3, r2
 8012d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	db12      	blt.n	8012d64 <USB_EPSetStall+0x54>
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d00f      	beq.n	8012d64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	015a      	lsls	r2, r3, #5
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	4413      	add	r3, r2
 8012d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	68ba      	ldr	r2, [r7, #8]
 8012d54:	0151      	lsls	r1, r2, #5
 8012d56:	68fa      	ldr	r2, [r7, #12]
 8012d58:	440a      	add	r2, r1
 8012d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012d62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	015a      	lsls	r2, r3, #5
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	4413      	add	r3, r2
 8012d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	68ba      	ldr	r2, [r7, #8]
 8012d74:	0151      	lsls	r1, r2, #5
 8012d76:	68fa      	ldr	r2, [r7, #12]
 8012d78:	440a      	add	r2, r1
 8012d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012d82:	6013      	str	r3, [r2, #0]
 8012d84:	e02b      	b.n	8012dde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012d86:	68bb      	ldr	r3, [r7, #8]
 8012d88:	015a      	lsls	r2, r3, #5
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	4413      	add	r3, r2
 8012d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	db12      	blt.n	8012dbe <USB_EPSetStall+0xae>
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d00f      	beq.n	8012dbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	015a      	lsls	r2, r3, #5
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	4413      	add	r3, r2
 8012da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	68ba      	ldr	r2, [r7, #8]
 8012dae:	0151      	lsls	r1, r2, #5
 8012db0:	68fa      	ldr	r2, [r7, #12]
 8012db2:	440a      	add	r2, r1
 8012db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012db8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012dbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	015a      	lsls	r2, r3, #5
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	68ba      	ldr	r2, [r7, #8]
 8012dce:	0151      	lsls	r1, r2, #5
 8012dd0:	68fa      	ldr	r2, [r7, #12]
 8012dd2:	440a      	add	r2, r1
 8012dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012dd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012ddc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012dde:	2300      	movs	r3, #0
}
 8012de0:	4618      	mov	r0, r3
 8012de2:	3714      	adds	r7, #20
 8012de4:	46bd      	mov	sp, r7
 8012de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dea:	4770      	bx	lr

08012dec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012dec:	b480      	push	{r7}
 8012dee:	b085      	sub	sp, #20
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
 8012df4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012dfa:	683b      	ldr	r3, [r7, #0]
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012e00:	683b      	ldr	r3, [r7, #0]
 8012e02:	785b      	ldrb	r3, [r3, #1]
 8012e04:	2b01      	cmp	r3, #1
 8012e06:	d128      	bne.n	8012e5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	015a      	lsls	r2, r3, #5
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	4413      	add	r3, r2
 8012e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	68ba      	ldr	r2, [r7, #8]
 8012e18:	0151      	lsls	r1, r2, #5
 8012e1a:	68fa      	ldr	r2, [r7, #12]
 8012e1c:	440a      	add	r2, r1
 8012e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012e26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	78db      	ldrb	r3, [r3, #3]
 8012e2c:	2b03      	cmp	r3, #3
 8012e2e:	d003      	beq.n	8012e38 <USB_EPClearStall+0x4c>
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	78db      	ldrb	r3, [r3, #3]
 8012e34:	2b02      	cmp	r3, #2
 8012e36:	d138      	bne.n	8012eaa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012e38:	68bb      	ldr	r3, [r7, #8]
 8012e3a:	015a      	lsls	r2, r3, #5
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	4413      	add	r3, r2
 8012e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	68ba      	ldr	r2, [r7, #8]
 8012e48:	0151      	lsls	r1, r2, #5
 8012e4a:	68fa      	ldr	r2, [r7, #12]
 8012e4c:	440a      	add	r2, r1
 8012e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e56:	6013      	str	r3, [r2, #0]
 8012e58:	e027      	b.n	8012eaa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	015a      	lsls	r2, r3, #5
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	4413      	add	r3, r2
 8012e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	68ba      	ldr	r2, [r7, #8]
 8012e6a:	0151      	lsls	r1, r2, #5
 8012e6c:	68fa      	ldr	r2, [r7, #12]
 8012e6e:	440a      	add	r2, r1
 8012e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012e78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	78db      	ldrb	r3, [r3, #3]
 8012e7e:	2b03      	cmp	r3, #3
 8012e80:	d003      	beq.n	8012e8a <USB_EPClearStall+0x9e>
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	78db      	ldrb	r3, [r3, #3]
 8012e86:	2b02      	cmp	r3, #2
 8012e88:	d10f      	bne.n	8012eaa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	015a      	lsls	r2, r3, #5
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	4413      	add	r3, r2
 8012e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	68ba      	ldr	r2, [r7, #8]
 8012e9a:	0151      	lsls	r1, r2, #5
 8012e9c:	68fa      	ldr	r2, [r7, #12]
 8012e9e:	440a      	add	r2, r1
 8012ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012ea8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012eaa:	2300      	movs	r3, #0
}
 8012eac:	4618      	mov	r0, r3
 8012eae:	3714      	adds	r7, #20
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb6:	4770      	bx	lr

08012eb8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012eb8:	b480      	push	{r7}
 8012eba:	b085      	sub	sp, #20
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
 8012ec0:	460b      	mov	r3, r1
 8012ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	68fa      	ldr	r2, [r7, #12]
 8012ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012ed6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012eda:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ee2:	681a      	ldr	r2, [r3, #0]
 8012ee4:	78fb      	ldrb	r3, [r7, #3]
 8012ee6:	011b      	lsls	r3, r3, #4
 8012ee8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012eec:	68f9      	ldr	r1, [r7, #12]
 8012eee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012ef2:	4313      	orrs	r3, r2
 8012ef4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012ef6:	2300      	movs	r3, #0
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	3714      	adds	r7, #20
 8012efc:	46bd      	mov	sp, r7
 8012efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f02:	4770      	bx	lr

08012f04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b084      	sub	sp, #16
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f16:	685b      	ldr	r3, [r3, #4]
 8012f18:	68fa      	ldr	r2, [r7, #12]
 8012f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012f1e:	f023 0302 	bic.w	r3, r3, #2
 8012f22:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012f24:	2003      	movs	r0, #3
 8012f26:	f7f1 fb65 	bl	80045f4 <HAL_Delay>

  return HAL_OK;
 8012f2a:	2300      	movs	r3, #0
}
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	3710      	adds	r7, #16
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}

08012f34 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f46:	685b      	ldr	r3, [r3, #4]
 8012f48:	68fa      	ldr	r2, [r7, #12]
 8012f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012f4e:	f043 0302 	orr.w	r3, r3, #2
 8012f52:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012f54:	2003      	movs	r0, #3
 8012f56:	f7f1 fb4d 	bl	80045f4 <HAL_Delay>

  return HAL_OK;
 8012f5a:	2300      	movs	r3, #0
}
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	3710      	adds	r7, #16
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}

08012f64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012f64:	b480      	push	{r7}
 8012f66:	b085      	sub	sp, #20
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	695b      	ldr	r3, [r3, #20]
 8012f70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	699b      	ldr	r3, [r3, #24]
 8012f76:	68fa      	ldr	r2, [r7, #12]
 8012f78:	4013      	ands	r3, r2
 8012f7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3714      	adds	r7, #20
 8012f82:	46bd      	mov	sp, r7
 8012f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f88:	4770      	bx	lr

08012f8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f8a:	b480      	push	{r7}
 8012f8c:	b085      	sub	sp, #20
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f9c:	699b      	ldr	r3, [r3, #24]
 8012f9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fa6:	69db      	ldr	r3, [r3, #28]
 8012fa8:	68ba      	ldr	r2, [r7, #8]
 8012faa:	4013      	ands	r3, r2
 8012fac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	0c1b      	lsrs	r3, r3, #16
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3714      	adds	r7, #20
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr

08012fbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012fbe:	b480      	push	{r7}
 8012fc0:	b085      	sub	sp, #20
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fd0:	699b      	ldr	r3, [r3, #24]
 8012fd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fda:	69db      	ldr	r3, [r3, #28]
 8012fdc:	68ba      	ldr	r2, [r7, #8]
 8012fde:	4013      	ands	r3, r2
 8012fe0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	b29b      	uxth	r3, r3
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3714      	adds	r7, #20
 8012fea:	46bd      	mov	sp, r7
 8012fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff0:	4770      	bx	lr

08012ff2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012ff2:	b480      	push	{r7}
 8012ff4:	b085      	sub	sp, #20
 8012ff6:	af00      	add	r7, sp, #0
 8012ff8:	6078      	str	r0, [r7, #4]
 8012ffa:	460b      	mov	r3, r1
 8012ffc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013002:	78fb      	ldrb	r3, [r7, #3]
 8013004:	015a      	lsls	r2, r3, #5
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	4413      	add	r3, r2
 801300a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801300e:	689b      	ldr	r3, [r3, #8]
 8013010:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013018:	695b      	ldr	r3, [r3, #20]
 801301a:	68ba      	ldr	r2, [r7, #8]
 801301c:	4013      	ands	r3, r2
 801301e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013020:	68bb      	ldr	r3, [r7, #8]
}
 8013022:	4618      	mov	r0, r3
 8013024:	3714      	adds	r7, #20
 8013026:	46bd      	mov	sp, r7
 8013028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302c:	4770      	bx	lr

0801302e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801302e:	b480      	push	{r7}
 8013030:	b087      	sub	sp, #28
 8013032:	af00      	add	r7, sp, #0
 8013034:	6078      	str	r0, [r7, #4]
 8013036:	460b      	mov	r3, r1
 8013038:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013044:	691b      	ldr	r3, [r3, #16]
 8013046:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013050:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013052:	78fb      	ldrb	r3, [r7, #3]
 8013054:	f003 030f 	and.w	r3, r3, #15
 8013058:	68fa      	ldr	r2, [r7, #12]
 801305a:	fa22 f303 	lsr.w	r3, r2, r3
 801305e:	01db      	lsls	r3, r3, #7
 8013060:	b2db      	uxtb	r3, r3
 8013062:	693a      	ldr	r2, [r7, #16]
 8013064:	4313      	orrs	r3, r2
 8013066:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013068:	78fb      	ldrb	r3, [r7, #3]
 801306a:	015a      	lsls	r2, r3, #5
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	4413      	add	r3, r2
 8013070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013074:	689b      	ldr	r3, [r3, #8]
 8013076:	693a      	ldr	r2, [r7, #16]
 8013078:	4013      	ands	r3, r2
 801307a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801307c:	68bb      	ldr	r3, [r7, #8]
}
 801307e:	4618      	mov	r0, r3
 8013080:	371c      	adds	r7, #28
 8013082:	46bd      	mov	sp, r7
 8013084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013088:	4770      	bx	lr

0801308a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801308a:	b480      	push	{r7}
 801308c:	b083      	sub	sp, #12
 801308e:	af00      	add	r7, sp, #0
 8013090:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	695b      	ldr	r3, [r3, #20]
 8013096:	f003 0301 	and.w	r3, r3, #1
}
 801309a:	4618      	mov	r0, r3
 801309c:	370c      	adds	r7, #12
 801309e:	46bd      	mov	sp, r7
 80130a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a4:	4770      	bx	lr
	...

080130a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80130a8:	b480      	push	{r7}
 80130aa:	b085      	sub	sp, #20
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130ba:	681a      	ldr	r2, [r3, #0]
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130c2:	4619      	mov	r1, r3
 80130c4:	4b09      	ldr	r3, [pc, #36]	; (80130ec <USB_ActivateSetup+0x44>)
 80130c6:	4013      	ands	r3, r2
 80130c8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	68fa      	ldr	r2, [r7, #12]
 80130d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80130d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80130dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80130de:	2300      	movs	r3, #0
}
 80130e0:	4618      	mov	r0, r3
 80130e2:	3714      	adds	r7, #20
 80130e4:	46bd      	mov	sp, r7
 80130e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ea:	4770      	bx	lr
 80130ec:	fffff800 	.word	0xfffff800

080130f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80130f0:	b480      	push	{r7}
 80130f2:	b087      	sub	sp, #28
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	60f8      	str	r0, [r7, #12]
 80130f8:	460b      	mov	r3, r1
 80130fa:	607a      	str	r2, [r7, #4]
 80130fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	333c      	adds	r3, #60	; 0x3c
 8013106:	3304      	adds	r3, #4
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801310c:	693b      	ldr	r3, [r7, #16]
 801310e:	4a26      	ldr	r2, [pc, #152]	; (80131a8 <USB_EP0_OutStart+0xb8>)
 8013110:	4293      	cmp	r3, r2
 8013112:	d90a      	bls.n	801312a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013114:	697b      	ldr	r3, [r7, #20]
 8013116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013124:	d101      	bne.n	801312a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013126:	2300      	movs	r3, #0
 8013128:	e037      	b.n	801319a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801312a:	697b      	ldr	r3, [r7, #20]
 801312c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013130:	461a      	mov	r2, r3
 8013132:	2300      	movs	r3, #0
 8013134:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801313c:	691b      	ldr	r3, [r3, #16]
 801313e:	697a      	ldr	r2, [r7, #20]
 8013140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013144:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013148:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801314a:	697b      	ldr	r3, [r7, #20]
 801314c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013150:	691b      	ldr	r3, [r3, #16]
 8013152:	697a      	ldr	r2, [r7, #20]
 8013154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013158:	f043 0318 	orr.w	r3, r3, #24
 801315c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801315e:	697b      	ldr	r3, [r7, #20]
 8013160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013164:	691b      	ldr	r3, [r3, #16]
 8013166:	697a      	ldr	r2, [r7, #20]
 8013168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801316c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013170:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013172:	7afb      	ldrb	r3, [r7, #11]
 8013174:	2b01      	cmp	r3, #1
 8013176:	d10f      	bne.n	8013198 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801317e:	461a      	mov	r2, r3
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	697a      	ldr	r2, [r7, #20]
 801318e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013192:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013196:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013198:	2300      	movs	r3, #0
}
 801319a:	4618      	mov	r0, r3
 801319c:	371c      	adds	r7, #28
 801319e:	46bd      	mov	sp, r7
 80131a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a4:	4770      	bx	lr
 80131a6:	bf00      	nop
 80131a8:	4f54300a 	.word	0x4f54300a

080131ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80131ac:	b480      	push	{r7}
 80131ae:	b085      	sub	sp, #20
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80131b4:	2300      	movs	r3, #0
 80131b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	3301      	adds	r3, #1
 80131bc:	60fb      	str	r3, [r7, #12]
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	4a13      	ldr	r2, [pc, #76]	; (8013210 <USB_CoreReset+0x64>)
 80131c2:	4293      	cmp	r3, r2
 80131c4:	d901      	bls.n	80131ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80131c6:	2303      	movs	r3, #3
 80131c8:	e01b      	b.n	8013202 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	691b      	ldr	r3, [r3, #16]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	daf2      	bge.n	80131b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80131d2:	2300      	movs	r3, #0
 80131d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	691b      	ldr	r3, [r3, #16]
 80131da:	f043 0201 	orr.w	r2, r3, #1
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	3301      	adds	r3, #1
 80131e6:	60fb      	str	r3, [r7, #12]
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	4a09      	ldr	r2, [pc, #36]	; (8013210 <USB_CoreReset+0x64>)
 80131ec:	4293      	cmp	r3, r2
 80131ee:	d901      	bls.n	80131f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80131f0:	2303      	movs	r3, #3
 80131f2:	e006      	b.n	8013202 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	691b      	ldr	r3, [r3, #16]
 80131f8:	f003 0301 	and.w	r3, r3, #1
 80131fc:	2b01      	cmp	r3, #1
 80131fe:	d0f0      	beq.n	80131e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8013200:	2300      	movs	r3, #0
}
 8013202:	4618      	mov	r0, r3
 8013204:	3714      	adds	r7, #20
 8013206:	46bd      	mov	sp, r7
 8013208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320c:	4770      	bx	lr
 801320e:	bf00      	nop
 8013210:	00030d40 	.word	0x00030d40

08013214 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013218:	4904      	ldr	r1, [pc, #16]	; (801322c <MX_FATFS_Init+0x18>)
 801321a:	4805      	ldr	r0, [pc, #20]	; (8013230 <MX_FATFS_Init+0x1c>)
 801321c:	f005 fbec 	bl	80189f8 <FATFS_LinkDriver>
 8013220:	4603      	mov	r3, r0
 8013222:	461a      	mov	r2, r3
 8013224:	4b03      	ldr	r3, [pc, #12]	; (8013234 <MX_FATFS_Init+0x20>)
 8013226:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013228:	bf00      	nop
 801322a:	bd80      	pop	{r7, pc}
 801322c:	24001770 	.word	0x24001770
 8013230:	0801af88 	.word	0x0801af88
 8013234:	2400176c 	.word	0x2400176c

08013238 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013238:	b480      	push	{r7}
 801323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801323c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801323e:	4618      	mov	r0, r3
 8013240:	46bd      	mov	sp, r7
 8013242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013246:	4770      	bx	lr

08013248 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b082      	sub	sp, #8
 801324c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801324e:	2300      	movs	r3, #0
 8013250:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013252:	f000 f885 	bl	8013360 <BSP_SD_IsDetected>
 8013256:	4603      	mov	r3, r0
 8013258:	2b01      	cmp	r3, #1
 801325a:	d001      	beq.n	8013260 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801325c:	2302      	movs	r3, #2
 801325e:	e012      	b.n	8013286 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8013260:	480b      	ldr	r0, [pc, #44]	; (8013290 <BSP_SD_Init+0x48>)
 8013262:	f7f9 fc1d 	bl	800caa0 <HAL_SD_Init>
 8013266:	4603      	mov	r3, r0
 8013268:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801326a:	79fb      	ldrb	r3, [r7, #7]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d109      	bne.n	8013284 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013270:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013274:	4806      	ldr	r0, [pc, #24]	; (8013290 <BSP_SD_Init+0x48>)
 8013276:	f7fa fdf1 	bl	800de5c <HAL_SD_ConfigWideBusOperation>
 801327a:	4603      	mov	r3, r0
 801327c:	2b00      	cmp	r3, #0
 801327e:	d001      	beq.n	8013284 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013280:	2301      	movs	r3, #1
 8013282:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013284:	79fb      	ldrb	r3, [r7, #7]
}
 8013286:	4618      	mov	r0, r3
 8013288:	3708      	adds	r7, #8
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
 801328e:	bf00      	nop
 8013290:	24001470 	.word	0x24001470

08013294 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b086      	sub	sp, #24
 8013298:	af00      	add	r7, sp, #0
 801329a:	60f8      	str	r0, [r7, #12]
 801329c:	60b9      	str	r1, [r7, #8]
 801329e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80132a0:	2300      	movs	r3, #0
 80132a2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	68ba      	ldr	r2, [r7, #8]
 80132a8:	68f9      	ldr	r1, [r7, #12]
 80132aa:	4806      	ldr	r0, [pc, #24]	; (80132c4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80132ac:	f7fa f834 	bl	800d318 <HAL_SD_ReadBlocks_DMA>
 80132b0:	4603      	mov	r3, r0
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d001      	beq.n	80132ba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80132b6:	2301      	movs	r3, #1
 80132b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80132ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3718      	adds	r7, #24
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	24001470 	.word	0x24001470

080132c8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b086      	sub	sp, #24
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80132d4:	2300      	movs	r3, #0
 80132d6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	68ba      	ldr	r2, [r7, #8]
 80132dc:	68f9      	ldr	r1, [r7, #12]
 80132de:	4806      	ldr	r0, [pc, #24]	; (80132f8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80132e0:	f7fa f8c2 	bl	800d468 <HAL_SD_WriteBlocks_DMA>
 80132e4:	4603      	mov	r3, r0
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d001      	beq.n	80132ee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80132ea:	2301      	movs	r3, #1
 80132ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80132ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	3718      	adds	r7, #24
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}
 80132f8:	24001470 	.word	0x24001470

080132fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013300:	4805      	ldr	r0, [pc, #20]	; (8013318 <BSP_SD_GetCardState+0x1c>)
 8013302:	f7fa fe55 	bl	800dfb0 <HAL_SD_GetCardState>
 8013306:	4603      	mov	r3, r0
 8013308:	2b04      	cmp	r3, #4
 801330a:	bf14      	ite	ne
 801330c:	2301      	movne	r3, #1
 801330e:	2300      	moveq	r3, #0
 8013310:	b2db      	uxtb	r3, r3
}
 8013312:	4618      	mov	r0, r3
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	24001470 	.word	0x24001470

0801331c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b082      	sub	sp, #8
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8013324:	6879      	ldr	r1, [r7, #4]
 8013326:	4803      	ldr	r0, [pc, #12]	; (8013334 <BSP_SD_GetCardInfo+0x18>)
 8013328:	f7fa fd6c 	bl	800de04 <HAL_SD_GetCardInfo>
}
 801332c:	bf00      	nop
 801332e:	3708      	adds	r7, #8
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	24001470 	.word	0x24001470

08013338 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b082      	sub	sp, #8
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013340:	f000 f9a0 	bl	8013684 <BSP_SD_WriteCpltCallback>
}
 8013344:	bf00      	nop
 8013346:	3708      	adds	r7, #8
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}

0801334c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b082      	sub	sp, #8
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013354:	f000 f9a2 	bl	801369c <BSP_SD_ReadCpltCallback>
}
 8013358:	bf00      	nop
 801335a:	3708      	adds	r7, #8
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}

08013360 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b082      	sub	sp, #8
 8013364:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013366:	2301      	movs	r3, #1
 8013368:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801336a:	f000 f80b 	bl	8013384 <BSP_PlatformIsDetected>
 801336e:	4603      	mov	r3, r0
 8013370:	2b00      	cmp	r3, #0
 8013372:	d101      	bne.n	8013378 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013374:	2300      	movs	r3, #0
 8013376:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013378:	79fb      	ldrb	r3, [r7, #7]
 801337a:	b2db      	uxtb	r3, r3
}
 801337c:	4618      	mov	r0, r3
 801337e:	3708      	adds	r7, #8
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}

08013384 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013384:	b580      	push	{r7, lr}
 8013386:	b082      	sub	sp, #8
 8013388:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801338a:	2301      	movs	r3, #1
 801338c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801338e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8013392:	4806      	ldr	r0, [pc, #24]	; (80133ac <BSP_PlatformIsDetected+0x28>)
 8013394:	f7f4 fe30 	bl	8007ff8 <HAL_GPIO_ReadPin>
 8013398:	4603      	mov	r3, r0
 801339a:	2b00      	cmp	r3, #0
 801339c:	d001      	beq.n	80133a2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801339e:	2300      	movs	r3, #0
 80133a0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80133a2:	79fb      	ldrb	r3, [r7, #7]
}
 80133a4:	4618      	mov	r0, r3
 80133a6:	3708      	adds	r7, #8
 80133a8:	46bd      	mov	sp, r7
 80133aa:	bd80      	pop	{r7, pc}
 80133ac:	58020000 	.word	0x58020000

080133b0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b084      	sub	sp, #16
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80133b8:	f7f1 f910 	bl	80045dc <HAL_GetTick>
 80133bc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80133be:	e006      	b.n	80133ce <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80133c0:	f7ff ff9c 	bl	80132fc <BSP_SD_GetCardState>
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d101      	bne.n	80133ce <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80133ca:	2300      	movs	r3, #0
 80133cc:	e009      	b.n	80133e2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80133ce:	f7f1 f905 	bl	80045dc <HAL_GetTick>
 80133d2:	4602      	mov	r2, r0
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	1ad3      	subs	r3, r2, r3
 80133d8:	687a      	ldr	r2, [r7, #4]
 80133da:	429a      	cmp	r2, r3
 80133dc:	d8f0      	bhi.n	80133c0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80133de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80133e2:	4618      	mov	r0, r3
 80133e4:	3710      	adds	r7, #16
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bd80      	pop	{r7, pc}
	...

080133ec <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b082      	sub	sp, #8
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	4603      	mov	r3, r0
 80133f4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80133f6:	4b0b      	ldr	r3, [pc, #44]	; (8013424 <SD_CheckStatus+0x38>)
 80133f8:	2201      	movs	r2, #1
 80133fa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80133fc:	f7ff ff7e 	bl	80132fc <BSP_SD_GetCardState>
 8013400:	4603      	mov	r3, r0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d107      	bne.n	8013416 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013406:	4b07      	ldr	r3, [pc, #28]	; (8013424 <SD_CheckStatus+0x38>)
 8013408:	781b      	ldrb	r3, [r3, #0]
 801340a:	b2db      	uxtb	r3, r3
 801340c:	f023 0301 	bic.w	r3, r3, #1
 8013410:	b2da      	uxtb	r2, r3
 8013412:	4b04      	ldr	r3, [pc, #16]	; (8013424 <SD_CheckStatus+0x38>)
 8013414:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013416:	4b03      	ldr	r3, [pc, #12]	; (8013424 <SD_CheckStatus+0x38>)
 8013418:	781b      	ldrb	r3, [r3, #0]
 801341a:	b2db      	uxtb	r3, r3
}
 801341c:	4618      	mov	r0, r3
 801341e:	3708      	adds	r7, #8
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}
 8013424:	2400001d 	.word	0x2400001d

08013428 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b082      	sub	sp, #8
 801342c:	af00      	add	r7, sp, #0
 801342e:	4603      	mov	r3, r0
 8013430:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013432:	f7ff ff09 	bl	8013248 <BSP_SD_Init>
 8013436:	4603      	mov	r3, r0
 8013438:	2b00      	cmp	r3, #0
 801343a:	d107      	bne.n	801344c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801343c:	79fb      	ldrb	r3, [r7, #7]
 801343e:	4618      	mov	r0, r3
 8013440:	f7ff ffd4 	bl	80133ec <SD_CheckStatus>
 8013444:	4603      	mov	r3, r0
 8013446:	461a      	mov	r2, r3
 8013448:	4b04      	ldr	r3, [pc, #16]	; (801345c <SD_initialize+0x34>)
 801344a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801344c:	4b03      	ldr	r3, [pc, #12]	; (801345c <SD_initialize+0x34>)
 801344e:	781b      	ldrb	r3, [r3, #0]
 8013450:	b2db      	uxtb	r3, r3
}
 8013452:	4618      	mov	r0, r3
 8013454:	3708      	adds	r7, #8
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	2400001d 	.word	0x2400001d

08013460 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b082      	sub	sp, #8
 8013464:	af00      	add	r7, sp, #0
 8013466:	4603      	mov	r3, r0
 8013468:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801346a:	79fb      	ldrb	r3, [r7, #7]
 801346c:	4618      	mov	r0, r3
 801346e:	f7ff ffbd 	bl	80133ec <SD_CheckStatus>
 8013472:	4603      	mov	r3, r0
}
 8013474:	4618      	mov	r0, r3
 8013476:	3708      	adds	r7, #8
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}

0801347c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b086      	sub	sp, #24
 8013480:	af00      	add	r7, sp, #0
 8013482:	60b9      	str	r1, [r7, #8]
 8013484:	607a      	str	r2, [r7, #4]
 8013486:	603b      	str	r3, [r7, #0]
 8013488:	4603      	mov	r3, r0
 801348a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801348c:	2301      	movs	r3, #1
 801348e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013490:	f247 5030 	movw	r0, #30000	; 0x7530
 8013494:	f7ff ff8c 	bl	80133b0 <SD_CheckStatusWithTimeout>
 8013498:	4603      	mov	r3, r0
 801349a:	2b00      	cmp	r3, #0
 801349c:	da01      	bge.n	80134a2 <SD_read+0x26>
  {
    return res;
 801349e:	7dfb      	ldrb	r3, [r7, #23]
 80134a0:	e03b      	b.n	801351a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80134a2:	683a      	ldr	r2, [r7, #0]
 80134a4:	6879      	ldr	r1, [r7, #4]
 80134a6:	68b8      	ldr	r0, [r7, #8]
 80134a8:	f7ff fef4 	bl	8013294 <BSP_SD_ReadBlocks_DMA>
 80134ac:	4603      	mov	r3, r0
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d132      	bne.n	8013518 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80134b2:	4b1c      	ldr	r3, [pc, #112]	; (8013524 <SD_read+0xa8>)
 80134b4:	2200      	movs	r2, #0
 80134b6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80134b8:	f7f1 f890 	bl	80045dc <HAL_GetTick>
 80134bc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80134be:	bf00      	nop
 80134c0:	4b18      	ldr	r3, [pc, #96]	; (8013524 <SD_read+0xa8>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d108      	bne.n	80134da <SD_read+0x5e>
 80134c8:	f7f1 f888 	bl	80045dc <HAL_GetTick>
 80134cc:	4602      	mov	r2, r0
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	1ad3      	subs	r3, r2, r3
 80134d2:	f247 522f 	movw	r2, #29999	; 0x752f
 80134d6:	4293      	cmp	r3, r2
 80134d8:	d9f2      	bls.n	80134c0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80134da:	4b12      	ldr	r3, [pc, #72]	; (8013524 <SD_read+0xa8>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d102      	bne.n	80134e8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80134e2:	2301      	movs	r3, #1
 80134e4:	75fb      	strb	r3, [r7, #23]
 80134e6:	e017      	b.n	8013518 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80134e8:	4b0e      	ldr	r3, [pc, #56]	; (8013524 <SD_read+0xa8>)
 80134ea:	2200      	movs	r2, #0
 80134ec:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80134ee:	f7f1 f875 	bl	80045dc <HAL_GetTick>
 80134f2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80134f4:	e007      	b.n	8013506 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80134f6:	f7ff ff01 	bl	80132fc <BSP_SD_GetCardState>
 80134fa:	4603      	mov	r3, r0
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d102      	bne.n	8013506 <SD_read+0x8a>
          {
            res = RES_OK;
 8013500:	2300      	movs	r3, #0
 8013502:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8013504:	e008      	b.n	8013518 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013506:	f7f1 f869 	bl	80045dc <HAL_GetTick>
 801350a:	4602      	mov	r2, r0
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	1ad3      	subs	r3, r2, r3
 8013510:	f247 522f 	movw	r2, #29999	; 0x752f
 8013514:	4293      	cmp	r3, r2
 8013516:	d9ee      	bls.n	80134f6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8013518:	7dfb      	ldrb	r3, [r7, #23]
}
 801351a:	4618      	mov	r0, r3
 801351c:	3718      	adds	r7, #24
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}
 8013522:	bf00      	nop
 8013524:	24000b54 	.word	0x24000b54

08013528 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b086      	sub	sp, #24
 801352c:	af00      	add	r7, sp, #0
 801352e:	60b9      	str	r1, [r7, #8]
 8013530:	607a      	str	r2, [r7, #4]
 8013532:	603b      	str	r3, [r7, #0]
 8013534:	4603      	mov	r3, r0
 8013536:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013538:	2301      	movs	r3, #1
 801353a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801353c:	4b24      	ldr	r3, [pc, #144]	; (80135d0 <SD_write+0xa8>)
 801353e:	2200      	movs	r2, #0
 8013540:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013542:	f247 5030 	movw	r0, #30000	; 0x7530
 8013546:	f7ff ff33 	bl	80133b0 <SD_CheckStatusWithTimeout>
 801354a:	4603      	mov	r3, r0
 801354c:	2b00      	cmp	r3, #0
 801354e:	da01      	bge.n	8013554 <SD_write+0x2c>
  {
    return res;
 8013550:	7dfb      	ldrb	r3, [r7, #23]
 8013552:	e038      	b.n	80135c6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8013554:	683a      	ldr	r2, [r7, #0]
 8013556:	6879      	ldr	r1, [r7, #4]
 8013558:	68b8      	ldr	r0, [r7, #8]
 801355a:	f7ff feb5 	bl	80132c8 <BSP_SD_WriteBlocks_DMA>
 801355e:	4603      	mov	r3, r0
 8013560:	2b00      	cmp	r3, #0
 8013562:	d12f      	bne.n	80135c4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8013564:	f7f1 f83a 	bl	80045dc <HAL_GetTick>
 8013568:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801356a:	bf00      	nop
 801356c:	4b18      	ldr	r3, [pc, #96]	; (80135d0 <SD_write+0xa8>)
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d108      	bne.n	8013586 <SD_write+0x5e>
 8013574:	f7f1 f832 	bl	80045dc <HAL_GetTick>
 8013578:	4602      	mov	r2, r0
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	1ad3      	subs	r3, r2, r3
 801357e:	f247 522f 	movw	r2, #29999	; 0x752f
 8013582:	4293      	cmp	r3, r2
 8013584:	d9f2      	bls.n	801356c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8013586:	4b12      	ldr	r3, [pc, #72]	; (80135d0 <SD_write+0xa8>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d102      	bne.n	8013594 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801358e:	2301      	movs	r3, #1
 8013590:	75fb      	strb	r3, [r7, #23]
 8013592:	e017      	b.n	80135c4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8013594:	4b0e      	ldr	r3, [pc, #56]	; (80135d0 <SD_write+0xa8>)
 8013596:	2200      	movs	r2, #0
 8013598:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801359a:	f7f1 f81f 	bl	80045dc <HAL_GetTick>
 801359e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80135a0:	e007      	b.n	80135b2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80135a2:	f7ff feab 	bl	80132fc <BSP_SD_GetCardState>
 80135a6:	4603      	mov	r3, r0
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d102      	bne.n	80135b2 <SD_write+0x8a>
          {
            res = RES_OK;
 80135ac:	2300      	movs	r3, #0
 80135ae:	75fb      	strb	r3, [r7, #23]
            break;
 80135b0:	e008      	b.n	80135c4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80135b2:	f7f1 f813 	bl	80045dc <HAL_GetTick>
 80135b6:	4602      	mov	r2, r0
 80135b8:	693b      	ldr	r3, [r7, #16]
 80135ba:	1ad3      	subs	r3, r2, r3
 80135bc:	f247 522f 	movw	r2, #29999	; 0x752f
 80135c0:	4293      	cmp	r3, r2
 80135c2:	d9ee      	bls.n	80135a2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80135c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	3718      	adds	r7, #24
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	24000b50 	.word	0x24000b50

080135d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b08c      	sub	sp, #48	; 0x30
 80135d8:	af00      	add	r7, sp, #0
 80135da:	4603      	mov	r3, r0
 80135dc:	603a      	str	r2, [r7, #0]
 80135de:	71fb      	strb	r3, [r7, #7]
 80135e0:	460b      	mov	r3, r1
 80135e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80135e4:	2301      	movs	r3, #1
 80135e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80135ea:	4b25      	ldr	r3, [pc, #148]	; (8013680 <SD_ioctl+0xac>)
 80135ec:	781b      	ldrb	r3, [r3, #0]
 80135ee:	b2db      	uxtb	r3, r3
 80135f0:	f003 0301 	and.w	r3, r3, #1
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d001      	beq.n	80135fc <SD_ioctl+0x28>
 80135f8:	2303      	movs	r3, #3
 80135fa:	e03c      	b.n	8013676 <SD_ioctl+0xa2>

  switch (cmd)
 80135fc:	79bb      	ldrb	r3, [r7, #6]
 80135fe:	2b03      	cmp	r3, #3
 8013600:	d834      	bhi.n	801366c <SD_ioctl+0x98>
 8013602:	a201      	add	r2, pc, #4	; (adr r2, 8013608 <SD_ioctl+0x34>)
 8013604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013608:	08013619 	.word	0x08013619
 801360c:	08013621 	.word	0x08013621
 8013610:	08013639 	.word	0x08013639
 8013614:	08013653 	.word	0x08013653
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013618:	2300      	movs	r3, #0
 801361a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801361e:	e028      	b.n	8013672 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013620:	f107 0308 	add.w	r3, r7, #8
 8013624:	4618      	mov	r0, r3
 8013626:	f7ff fe79 	bl	801331c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801362a:	6a3a      	ldr	r2, [r7, #32]
 801362c:	683b      	ldr	r3, [r7, #0]
 801362e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013630:	2300      	movs	r3, #0
 8013632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013636:	e01c      	b.n	8013672 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013638:	f107 0308 	add.w	r3, r7, #8
 801363c:	4618      	mov	r0, r3
 801363e:	f7ff fe6d 	bl	801331c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013644:	b29a      	uxth	r2, r3
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801364a:	2300      	movs	r3, #0
 801364c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013650:	e00f      	b.n	8013672 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013652:	f107 0308 	add.w	r3, r7, #8
 8013656:	4618      	mov	r0, r3
 8013658:	f7ff fe60 	bl	801331c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365e:	0a5a      	lsrs	r2, r3, #9
 8013660:	683b      	ldr	r3, [r7, #0]
 8013662:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013664:	2300      	movs	r3, #0
 8013666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801366a:	e002      	b.n	8013672 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801366c:	2304      	movs	r3, #4
 801366e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8013672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013676:	4618      	mov	r0, r3
 8013678:	3730      	adds	r7, #48	; 0x30
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}
 801367e:	bf00      	nop
 8013680:	2400001d 	.word	0x2400001d

08013684 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013684:	b480      	push	{r7}
 8013686:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8013688:	4b03      	ldr	r3, [pc, #12]	; (8013698 <BSP_SD_WriteCpltCallback+0x14>)
 801368a:	2201      	movs	r2, #1
 801368c:	601a      	str	r2, [r3, #0]
}
 801368e:	bf00      	nop
 8013690:	46bd      	mov	sp, r7
 8013692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013696:	4770      	bx	lr
 8013698:	24000b50 	.word	0x24000b50

0801369c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801369c:	b480      	push	{r7}
 801369e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80136a0:	4b03      	ldr	r3, [pc, #12]	; (80136b0 <BSP_SD_ReadCpltCallback+0x14>)
 80136a2:	2201      	movs	r2, #1
 80136a4:	601a      	str	r2, [r3, #0]
}
 80136a6:	bf00      	nop
 80136a8:	46bd      	mov	sp, r7
 80136aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ae:	4770      	bx	lr
 80136b0:	24000b54 	.word	0x24000b54

080136b4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b084      	sub	sp, #16
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
 80136bc:	460b      	mov	r3, r1
 80136be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80136c0:	f248 0074 	movw	r0, #32884	; 0x8074
 80136c4:	f005 fed0 	bl	8019468 <malloc>
 80136c8:	4603      	mov	r3, r0
 80136ca:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d105      	bne.n	80136de <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	2200      	movs	r2, #0
 80136d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80136da:	2302      	movs	r3, #2
 80136dc:	e034      	b.n	8013748 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	68fa      	ldr	r2, [r7, #12]
 80136e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	7c1b      	ldrb	r3, [r3, #16]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d115      	bne.n	801371a <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80136ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80136f2:	2202      	movs	r2, #2
 80136f4:	2101      	movs	r1, #1
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f005 fd1d 	bl	8019136 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2201      	movs	r2, #1
 8013700:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013708:	2202      	movs	r2, #2
 801370a:	2181      	movs	r1, #129	; 0x81
 801370c:	6878      	ldr	r0, [r7, #4]
 801370e:	f005 fd12 	bl	8019136 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2201      	movs	r2, #1
 8013716:	871a      	strh	r2, [r3, #56]	; 0x38
 8013718:	e012      	b.n	8013740 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801371a:	2340      	movs	r3, #64	; 0x40
 801371c:	2202      	movs	r2, #2
 801371e:	2101      	movs	r1, #1
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f005 fd08 	bl	8019136 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	2201      	movs	r2, #1
 801372a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801372e:	2340      	movs	r3, #64	; 0x40
 8013730:	2202      	movs	r2, #2
 8013732:	2181      	movs	r1, #129	; 0x81
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f005 fcfe 	bl	8019136 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2201      	movs	r2, #1
 801373e:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	f000 f98e 	bl	8013a62 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8013746:	2300      	movs	r3, #0
}
 8013748:	4618      	mov	r0, r3
 801374a:	3710      	adds	r7, #16
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}

08013750 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b082      	sub	sp, #8
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	460b      	mov	r3, r1
 801375a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 801375c:	2101      	movs	r1, #1
 801375e:	6878      	ldr	r0, [r7, #4]
 8013760:	f005 fd0f 	bl	8019182 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2200      	movs	r2, #0
 8013768:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 801376c:	2181      	movs	r1, #129	; 0x81
 801376e:	6878      	ldr	r0, [r7, #4]
 8013770:	f005 fd07 	bl	8019182 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	2200      	movs	r2, #0
 8013778:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 801377a:	6878      	ldr	r0, [r7, #4]
 801377c:	f000 f9cf 	bl	8013b1e <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013786:	2b00      	cmp	r3, #0
 8013788:	d009      	beq.n	801379e <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013790:	4618      	mov	r0, r3
 8013792:	f005 fe71 	bl	8019478 <free>
    pdev->pClassData = NULL;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2200      	movs	r2, #0
 801379a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801379e:	2300      	movs	r3, #0
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	3708      	adds	r7, #8
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}

080137a8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b086      	sub	sp, #24
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
 80137b0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80137b8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80137ba:	2300      	movs	r3, #0
 80137bc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80137be:	2300      	movs	r3, #0
 80137c0:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d04d      	beq.n	801386a <USBD_MSC_Setup+0xc2>
 80137ce:	2b20      	cmp	r3, #32
 80137d0:	f040 80c6 	bne.w	8013960 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	785b      	ldrb	r3, [r3, #1]
 80137d8:	2bfe      	cmp	r3, #254	; 0xfe
 80137da:	d002      	beq.n	80137e2 <USBD_MSC_Setup+0x3a>
 80137dc:	2bff      	cmp	r3, #255	; 0xff
 80137de:	d024      	beq.n	801382a <USBD_MSC_Setup+0x82>
 80137e0:	e03b      	b.n	801385a <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	885b      	ldrh	r3, [r3, #2]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d118      	bne.n	801381c <USBD_MSC_Setup+0x74>
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	88db      	ldrh	r3, [r3, #6]
 80137ee:	2b01      	cmp	r3, #1
 80137f0:	d114      	bne.n	801381c <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	781b      	ldrb	r3, [r3, #0]
 80137f6:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	da0f      	bge.n	801381c <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013802:	699b      	ldr	r3, [r3, #24]
 8013804:	4798      	blx	r3
 8013806:	4603      	mov	r3, r0
 8013808:	461a      	mov	r2, r3
 801380a:	693b      	ldr	r3, [r7, #16]
 801380c:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801380e:	693b      	ldr	r3, [r7, #16]
 8013810:	2201      	movs	r2, #1
 8013812:	4619      	mov	r1, r3
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f002 fdaa 	bl	801636e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801381a:	e025      	b.n	8013868 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 801381c:	6839      	ldr	r1, [r7, #0]
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f002 fd34 	bl	801628c <USBD_CtlError>
        ret = USBD_FAIL;
 8013824:	2303      	movs	r3, #3
 8013826:	75fb      	strb	r3, [r7, #23]
      break;
 8013828:	e01e      	b.n	8013868 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801382a:	683b      	ldr	r3, [r7, #0]
 801382c:	885b      	ldrh	r3, [r3, #2]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d10c      	bne.n	801384c <USBD_MSC_Setup+0xa4>
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	88db      	ldrh	r3, [r3, #6]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d108      	bne.n	801384c <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	781b      	ldrb	r3, [r3, #0]
 801383e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013840:	2b00      	cmp	r3, #0
 8013842:	db03      	blt.n	801384c <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f000 f947 	bl	8013ad8 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801384a:	e00d      	b.n	8013868 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 801384c:	6839      	ldr	r1, [r7, #0]
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	f002 fd1c 	bl	801628c <USBD_CtlError>
        ret = USBD_FAIL;
 8013854:	2303      	movs	r3, #3
 8013856:	75fb      	strb	r3, [r7, #23]
      break;
 8013858:	e006      	b.n	8013868 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 801385a:	6839      	ldr	r1, [r7, #0]
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f002 fd15 	bl	801628c <USBD_CtlError>
      ret = USBD_FAIL;
 8013862:	2303      	movs	r3, #3
 8013864:	75fb      	strb	r3, [r7, #23]
      break;
 8013866:	bf00      	nop
    }
    break;
 8013868:	e081      	b.n	801396e <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	785b      	ldrb	r3, [r3, #1]
 801386e:	2b0b      	cmp	r3, #11
 8013870:	d86d      	bhi.n	801394e <USBD_MSC_Setup+0x1a6>
 8013872:	a201      	add	r2, pc, #4	; (adr r2, 8013878 <USBD_MSC_Setup+0xd0>)
 8013874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013878:	080138a9 	.word	0x080138a9
 801387c:	0801391f 	.word	0x0801391f
 8013880:	0801394f 	.word	0x0801394f
 8013884:	0801394f 	.word	0x0801394f
 8013888:	0801394f 	.word	0x0801394f
 801388c:	0801394f 	.word	0x0801394f
 8013890:	0801394f 	.word	0x0801394f
 8013894:	0801394f 	.word	0x0801394f
 8013898:	0801394f 	.word	0x0801394f
 801389c:	0801394f 	.word	0x0801394f
 80138a0:	080138d1 	.word	0x080138d1
 80138a4:	080138f9 	.word	0x080138f9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138ae:	2b03      	cmp	r3, #3
 80138b0:	d107      	bne.n	80138c2 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80138b2:	f107 030e 	add.w	r3, r7, #14
 80138b6:	2202      	movs	r2, #2
 80138b8:	4619      	mov	r1, r3
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f002 fd57 	bl	801636e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80138c0:	e04d      	b.n	801395e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80138c2:	6839      	ldr	r1, [r7, #0]
 80138c4:	6878      	ldr	r0, [r7, #4]
 80138c6:	f002 fce1 	bl	801628c <USBD_CtlError>
        ret = USBD_FAIL;
 80138ca:	2303      	movs	r3, #3
 80138cc:	75fb      	strb	r3, [r7, #23]
      break;
 80138ce:	e046      	b.n	801395e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138d6:	2b03      	cmp	r3, #3
 80138d8:	d107      	bne.n	80138ea <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	3304      	adds	r3, #4
 80138de:	2201      	movs	r2, #1
 80138e0:	4619      	mov	r1, r3
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f002 fd43 	bl	801636e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80138e8:	e039      	b.n	801395e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80138ea:	6839      	ldr	r1, [r7, #0]
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f002 fccd 	bl	801628c <USBD_CtlError>
        ret = USBD_FAIL;
 80138f2:	2303      	movs	r3, #3
 80138f4:	75fb      	strb	r3, [r7, #23]
      break;
 80138f6:	e032      	b.n	801395e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138fe:	2b03      	cmp	r3, #3
 8013900:	d106      	bne.n	8013910 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	885b      	ldrh	r3, [r3, #2]
 8013906:	b2db      	uxtb	r3, r3
 8013908:	461a      	mov	r2, r3
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801390e:	e026      	b.n	801395e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8013910:	6839      	ldr	r1, [r7, #0]
 8013912:	6878      	ldr	r0, [r7, #4]
 8013914:	f002 fcba 	bl	801628c <USBD_CtlError>
        ret = USBD_FAIL;
 8013918:	2303      	movs	r3, #3
 801391a:	75fb      	strb	r3, [r7, #23]
      break;
 801391c:	e01f      	b.n	801395e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013924:	2b03      	cmp	r3, #3
 8013926:	d119      	bne.n	801395c <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8013928:	683b      	ldr	r3, [r7, #0]
 801392a:	885b      	ldrh	r3, [r3, #2]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d115      	bne.n	801395c <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	889b      	ldrh	r3, [r3, #4]
 8013934:	b2db      	uxtb	r3, r3
 8013936:	4619      	mov	r1, r3
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f005 fc41 	bl	80191c0 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	889b      	ldrh	r3, [r3, #4]
 8013942:	b2db      	uxtb	r3, r3
 8013944:	4619      	mov	r1, r3
 8013946:	6878      	ldr	r0, [r7, #4]
 8013948:	f000 fa90 	bl	8013e6c <MSC_BOT_CplClrFeature>
        }
      }
      break;
 801394c:	e006      	b.n	801395c <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 801394e:	6839      	ldr	r1, [r7, #0]
 8013950:	6878      	ldr	r0, [r7, #4]
 8013952:	f002 fc9b 	bl	801628c <USBD_CtlError>
      ret = USBD_FAIL;
 8013956:	2303      	movs	r3, #3
 8013958:	75fb      	strb	r3, [r7, #23]
      break;
 801395a:	e000      	b.n	801395e <USBD_MSC_Setup+0x1b6>
      break;
 801395c:	bf00      	nop
    }
    break;
 801395e:	e006      	b.n	801396e <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8013960:	6839      	ldr	r1, [r7, #0]
 8013962:	6878      	ldr	r0, [r7, #4]
 8013964:	f002 fc92 	bl	801628c <USBD_CtlError>
    ret = USBD_FAIL;
 8013968:	2303      	movs	r3, #3
 801396a:	75fb      	strb	r3, [r7, #23]
    break;
 801396c:	bf00      	nop
  }

  return (uint8_t)ret;
 801396e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013970:	4618      	mov	r0, r3
 8013972:	3718      	adds	r7, #24
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}

08013978 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b082      	sub	sp, #8
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
 8013980:	460b      	mov	r3, r1
 8013982:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8013984:	78fb      	ldrb	r3, [r7, #3]
 8013986:	4619      	mov	r1, r3
 8013988:	6878      	ldr	r0, [r7, #4]
 801398a:	f000 f8d9 	bl	8013b40 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801398e:	2300      	movs	r3, #0
}
 8013990:	4618      	mov	r0, r3
 8013992:	3708      	adds	r7, #8
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}

08013998 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b082      	sub	sp, #8
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
 80139a0:	460b      	mov	r3, r1
 80139a2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80139a4:	78fb      	ldrb	r3, [r7, #3]
 80139a6:	4619      	mov	r1, r3
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f000 f8fd 	bl	8013ba8 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80139ae:	2300      	movs	r3, #0
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3708      	adds	r7, #8
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}

080139b8 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80139b8:	b480      	push	{r7}
 80139ba:	b083      	sub	sp, #12
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2220      	movs	r2, #32
 80139c4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80139c6:	4b03      	ldr	r3, [pc, #12]	; (80139d4 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	370c      	adds	r7, #12
 80139cc:	46bd      	mov	sp, r7
 80139ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d2:	4770      	bx	lr
 80139d4:	24000058 	.word	0x24000058

080139d8 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80139d8:	b480      	push	{r7}
 80139da:	b083      	sub	sp, #12
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2220      	movs	r2, #32
 80139e4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80139e6:	4b03      	ldr	r3, [pc, #12]	; (80139f4 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80139e8:	4618      	mov	r0, r3
 80139ea:	370c      	adds	r7, #12
 80139ec:	46bd      	mov	sp, r7
 80139ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f2:	4770      	bx	lr
 80139f4:	24000078 	.word	0x24000078

080139f8 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80139f8:	b480      	push	{r7}
 80139fa:	b083      	sub	sp, #12
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2220      	movs	r2, #32
 8013a04:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8013a06:	4b03      	ldr	r3, [pc, #12]	; (8013a14 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8013a08:	4618      	mov	r0, r3
 8013a0a:	370c      	adds	r7, #12
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a12:	4770      	bx	lr
 8013a14:	24000098 	.word	0x24000098

08013a18 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013a18:	b480      	push	{r7}
 8013a1a:	b083      	sub	sp, #12
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	220a      	movs	r2, #10
 8013a24:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8013a26:	4b03      	ldr	r3, [pc, #12]	; (8013a34 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013a28:	4618      	mov	r0, r3
 8013a2a:	370c      	adds	r7, #12
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a32:	4770      	bx	lr
 8013a34:	240000b8 	.word	0x240000b8

08013a38 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8013a38:	b480      	push	{r7}
 8013a3a:	b083      	sub	sp, #12
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	6078      	str	r0, [r7, #4]
 8013a40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d101      	bne.n	8013a4c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013a48:	2303      	movs	r3, #3
 8013a4a:	e004      	b.n	8013a56 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	683a      	ldr	r2, [r7, #0]
 8013a50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8013a54:	2300      	movs	r3, #0
}
 8013a56:	4618      	mov	r0, r3
 8013a58:	370c      	adds	r7, #12
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a60:	4770      	bx	lr

08013a62 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8013a62:	b580      	push	{r7, lr}
 8013a64:	b084      	sub	sp, #16
 8013a66:	af00      	add	r7, sp, #0
 8013a68:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a70:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	2200      	movs	r2, #0
 8013a76:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8013a7e:	68fa      	ldr	r2, [r7, #12]
 8013a80:	f248 0361 	movw	r3, #32865	; 0x8061
 8013a84:	4413      	add	r3, r2
 8013a86:	2200      	movs	r2, #0
 8013a88:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 8013a8a:	68fa      	ldr	r2, [r7, #12]
 8013a8c:	f248 0360 	movw	r3, #32864	; 0x8060
 8013a90:	4413      	add	r3, r2
 8013a92:	2200      	movs	r2, #0
 8013a94:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013a96:	68fa      	ldr	r2, [r7, #12]
 8013a98:	f248 0362 	movw	r3, #32866	; 0x8062
 8013a9c:	4413      	add	r3, r2
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	2000      	movs	r0, #0
 8013aac:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8013aae:	2101      	movs	r1, #1
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f005 fb85 	bl	80191c0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8013ab6:	2181      	movs	r1, #129	; 0x81
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f005 fb81 	bl	80191c0 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	f248 0210 	movw	r2, #32784	; 0x8010
 8013ac4:	441a      	add	r2, r3
 8013ac6:	231f      	movs	r3, #31
 8013ac8:	2101      	movs	r1, #1
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	f005 fc41 	bl	8019352 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013ad0:	bf00      	nop
 8013ad2:	3710      	adds	r7, #16
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}

08013ad8 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b084      	sub	sp, #16
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ae6:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	2200      	movs	r2, #0
 8013aec:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	2201      	movs	r2, #1
 8013af2:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8013af4:	2181      	movs	r1, #129	; 0x81
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f005 fba0 	bl	801923c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8013afc:	2101      	movs	r1, #1
 8013afe:	6878      	ldr	r0, [r7, #4]
 8013b00:	f005 fb9c 	bl	801923c <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	f248 0210 	movw	r2, #32784	; 0x8010
 8013b0a:	441a      	add	r2, r3
 8013b0c:	231f      	movs	r3, #31
 8013b0e:	2101      	movs	r1, #1
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f005 fc1e 	bl	8019352 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013b16:	bf00      	nop
 8013b18:	3710      	adds	r7, #16
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd80      	pop	{r7, pc}

08013b1e <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8013b1e:	b480      	push	{r7}
 8013b20:	b085      	sub	sp, #20
 8013b22:	af00      	add	r7, sp, #0
 8013b24:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b2c:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	2200      	movs	r2, #0
 8013b32:	721a      	strb	r2, [r3, #8]
}
 8013b34:	bf00      	nop
 8013b36:	3714      	adds	r7, #20
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3e:	4770      	bx	lr

08013b40 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b084      	sub	sp, #16
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
 8013b48:	460b      	mov	r3, r1
 8013b4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b52:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	7a1b      	ldrb	r3, [r3, #8]
 8013b58:	2b02      	cmp	r3, #2
 8013b5a:	d004      	beq.n	8013b66 <MSC_BOT_DataIn+0x26>
 8013b5c:	2b02      	cmp	r3, #2
 8013b5e:	db1c      	blt.n	8013b9a <MSC_BOT_DataIn+0x5a>
 8013b60:	2b04      	cmp	r3, #4
 8013b62:	dc1a      	bgt.n	8013b9a <MSC_BOT_DataIn+0x5a>
 8013b64:	e014      	b.n	8013b90 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013b66:	68fa      	ldr	r2, [r7, #12]
 8013b68:	f248 031d 	movw	r3, #32797	; 0x801d
 8013b6c:	4413      	add	r3, r2
 8013b6e:	7819      	ldrb	r1, [r3, #0]
 8013b70:	68fa      	ldr	r2, [r7, #12]
 8013b72:	f248 031f 	movw	r3, #32799	; 0x801f
 8013b76:	4413      	add	r3, r2
 8013b78:	461a      	mov	r2, r3
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f000 f99e 	bl	8013ebc <SCSI_ProcessCmd>
 8013b80:	4603      	mov	r3, r0
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	da0b      	bge.n	8013b9e <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013b86:	2101      	movs	r1, #1
 8013b88:	6878      	ldr	r0, [r7, #4]
 8013b8a:	f000 f90b 	bl	8013da4 <MSC_BOT_SendCSW>
    }
    break;
 8013b8e:	e006      	b.n	8013b9e <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013b90:	2100      	movs	r1, #0
 8013b92:	6878      	ldr	r0, [r7, #4]
 8013b94:	f000 f906 	bl	8013da4 <MSC_BOT_SendCSW>
    break;
 8013b98:	e002      	b.n	8013ba0 <MSC_BOT_DataIn+0x60>

  default:
    break;
 8013b9a:	bf00      	nop
 8013b9c:	e000      	b.n	8013ba0 <MSC_BOT_DataIn+0x60>
    break;
 8013b9e:	bf00      	nop
  }
}
 8013ba0:	bf00      	nop
 8013ba2:	3710      	adds	r7, #16
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}

08013ba8 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b084      	sub	sp, #16
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
 8013bb0:	460b      	mov	r3, r1
 8013bb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013bba:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	7a1b      	ldrb	r3, [r3, #8]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d002      	beq.n	8013bca <MSC_BOT_DataOut+0x22>
 8013bc4:	2b01      	cmp	r3, #1
 8013bc6:	d004      	beq.n	8013bd2 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8013bc8:	e018      	b.n	8013bfc <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	f000 f81a 	bl	8013c04 <MSC_BOT_CBW_Decode>
      break;
 8013bd0:	e014      	b.n	8013bfc <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013bd2:	68fa      	ldr	r2, [r7, #12]
 8013bd4:	f248 031d 	movw	r3, #32797	; 0x801d
 8013bd8:	4413      	add	r3, r2
 8013bda:	7819      	ldrb	r1, [r3, #0]
 8013bdc:	68fa      	ldr	r2, [r7, #12]
 8013bde:	f248 031f 	movw	r3, #32799	; 0x801f
 8013be2:	4413      	add	r3, r2
 8013be4:	461a      	mov	r2, r3
 8013be6:	6878      	ldr	r0, [r7, #4]
 8013be8:	f000 f968 	bl	8013ebc <SCSI_ProcessCmd>
 8013bec:	4603      	mov	r3, r0
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	da03      	bge.n	8013bfa <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013bf2:	2101      	movs	r1, #1
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f000 f8d5 	bl	8013da4 <MSC_BOT_SendCSW>
      break;
 8013bfa:	bf00      	nop
  }
}
 8013bfc:	bf00      	nop
 8013bfe:	3710      	adds	r7, #16
 8013c00:	46bd      	mov	sp, r7
 8013c02:	bd80      	pop	{r7, pc}

08013c04 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b084      	sub	sp, #16
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c12:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8013c14:	68fa      	ldr	r2, [r7, #12]
 8013c16:	f248 0314 	movw	r3, #32788	; 0x8014
 8013c1a:	4413      	add	r3, r2
 8013c1c:	681a      	ldr	r2, [r3, #0]
 8013c1e:	68f9      	ldr	r1, [r7, #12]
 8013c20:	f248 0334 	movw	r3, #32820	; 0x8034
 8013c24:	440b      	add	r3, r1
 8013c26:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8013c28:	68fa      	ldr	r2, [r7, #12]
 8013c2a:	f248 0318 	movw	r3, #32792	; 0x8018
 8013c2e:	4413      	add	r3, r2
 8013c30:	681a      	ldr	r2, [r3, #0]
 8013c32:	68f9      	ldr	r1, [r7, #12]
 8013c34:	f248 0338 	movw	r3, #32824	; 0x8038
 8013c38:	440b      	add	r3, r1
 8013c3a:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8013c3c:	2101      	movs	r1, #1
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f005 fba8 	bl	8019394 <USBD_LL_GetRxDataSize>
 8013c44:	4603      	mov	r3, r0
 8013c46:	2b1f      	cmp	r3, #31
 8013c48:	d11c      	bne.n	8013c84 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013c4a:	68fa      	ldr	r2, [r7, #12]
 8013c4c:	f248 0310 	movw	r3, #32784	; 0x8010
 8013c50:	4413      	add	r3, r2
 8013c52:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8013c54:	4a38      	ldr	r2, [pc, #224]	; (8013d38 <MSC_BOT_CBW_Decode+0x134>)
 8013c56:	4293      	cmp	r3, r2
 8013c58:	d114      	bne.n	8013c84 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c5a:	68fa      	ldr	r2, [r7, #12]
 8013c5c:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c60:	4413      	add	r3, r2
 8013c62:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013c64:	2b01      	cmp	r3, #1
 8013c66:	d80d      	bhi.n	8013c84 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c68:	68fa      	ldr	r2, [r7, #12]
 8013c6a:	f248 031e 	movw	r3, #32798	; 0x801e
 8013c6e:	4413      	add	r3, r2
 8013c70:	781b      	ldrb	r3, [r3, #0]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d006      	beq.n	8013c84 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 8013c76:	68fa      	ldr	r2, [r7, #12]
 8013c78:	f248 031e 	movw	r3, #32798	; 0x801e
 8013c7c:	4413      	add	r3, r2
 8013c7e:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c80:	2b10      	cmp	r3, #16
 8013c82:	d910      	bls.n	8013ca6 <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013c84:	68fa      	ldr	r2, [r7, #12]
 8013c86:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c8a:	4413      	add	r3, r2
 8013c8c:	7819      	ldrb	r1, [r3, #0]
 8013c8e:	2320      	movs	r3, #32
 8013c90:	2205      	movs	r2, #5
 8013c92:	6878      	ldr	r0, [r7, #4]
 8013c94:	f000 fd36 	bl	8014704 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	2202      	movs	r2, #2
 8013c9c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8013c9e:	6878      	ldr	r0, [r7, #4]
 8013ca0:	f000 f8b2 	bl	8013e08 <MSC_BOT_Abort>
 8013ca4:	e044      	b.n	8013d30 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013ca6:	68fa      	ldr	r2, [r7, #12]
 8013ca8:	f248 031d 	movw	r3, #32797	; 0x801d
 8013cac:	4413      	add	r3, r2
 8013cae:	7819      	ldrb	r1, [r3, #0]
 8013cb0:	68fa      	ldr	r2, [r7, #12]
 8013cb2:	f248 031f 	movw	r3, #32799	; 0x801f
 8013cb6:	4413      	add	r3, r2
 8013cb8:	461a      	mov	r2, r3
 8013cba:	6878      	ldr	r0, [r7, #4]
 8013cbc:	f000 f8fe 	bl	8013ebc <SCSI_ProcessCmd>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	da0c      	bge.n	8013ce0 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	7a1b      	ldrb	r3, [r3, #8]
 8013cca:	2b05      	cmp	r3, #5
 8013ccc:	d104      	bne.n	8013cd8 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013cce:	2101      	movs	r1, #1
 8013cd0:	6878      	ldr	r0, [r7, #4]
 8013cd2:	f000 f867 	bl	8013da4 <MSC_BOT_SendCSW>
 8013cd6:	e02b      	b.n	8013d30 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f000 f895 	bl	8013e08 <MSC_BOT_Abort>
 8013cde:	e027      	b.n	8013d30 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	7a1b      	ldrb	r3, [r3, #8]
 8013ce4:	2b02      	cmp	r3, #2
 8013ce6:	d022      	beq.n	8013d2e <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013cec:	2b01      	cmp	r3, #1
 8013cee:	d01e      	beq.n	8013d2e <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013cf4:	2b03      	cmp	r3, #3
 8013cf6:	d01a      	beq.n	8013d2e <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	68db      	ldr	r3, [r3, #12]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d009      	beq.n	8013d14 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	f103 0110 	add.w	r1, r3, #16
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	68db      	ldr	r3, [r3, #12]
 8013d0a:	461a      	mov	r2, r3
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f000 f815 	bl	8013d3c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8013d12:	e00d      	b.n	8013d30 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	68db      	ldr	r3, [r3, #12]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d104      	bne.n	8013d26 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013d1c:	2100      	movs	r1, #0
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f000 f840 	bl	8013da4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8013d24:	e004      	b.n	8013d30 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013d26:	6878      	ldr	r0, [r7, #4]
 8013d28:	f000 f86e 	bl	8013e08 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8013d2c:	e000      	b.n	8013d30 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8013d2e:	bf00      	nop
    }
  }
}
 8013d30:	3710      	adds	r7, #16
 8013d32:	46bd      	mov	sp, r7
 8013d34:	bd80      	pop	{r7, pc}
 8013d36:	bf00      	nop
 8013d38:	43425355 	.word	0x43425355

08013d3c <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b086      	sub	sp, #24
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	60f8      	str	r0, [r7, #12]
 8013d44:	60b9      	str	r1, [r7, #8]
 8013d46:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d4e:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8013d50:	697a      	ldr	r2, [r7, #20]
 8013d52:	f248 0318 	movw	r3, #32792	; 0x8018
 8013d56:	4413      	add	r3, r2
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	687a      	ldr	r2, [r7, #4]
 8013d5c:	4293      	cmp	r3, r2
 8013d5e:	bf28      	it	cs
 8013d60:	4613      	movcs	r3, r2
 8013d62:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8013d64:	697a      	ldr	r2, [r7, #20]
 8013d66:	f248 0338 	movw	r3, #32824	; 0x8038
 8013d6a:	4413      	add	r3, r2
 8013d6c:	681a      	ldr	r2, [r3, #0]
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	1ad2      	subs	r2, r2, r3
 8013d72:	6979      	ldr	r1, [r7, #20]
 8013d74:	f248 0338 	movw	r3, #32824	; 0x8038
 8013d78:	440b      	add	r3, r1
 8013d7a:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8013d7c:	697a      	ldr	r2, [r7, #20]
 8013d7e:	f248 033c 	movw	r3, #32828	; 0x803c
 8013d82:	4413      	add	r3, r2
 8013d84:	2200      	movs	r2, #0
 8013d86:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8013d88:	697b      	ldr	r3, [r7, #20]
 8013d8a:	2204      	movs	r2, #4
 8013d8c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8013d8e:	693b      	ldr	r3, [r7, #16]
 8013d90:	68ba      	ldr	r2, [r7, #8]
 8013d92:	2181      	movs	r1, #129	; 0x81
 8013d94:	68f8      	ldr	r0, [r7, #12]
 8013d96:	f005 fabb 	bl	8019310 <USBD_LL_Transmit>
}
 8013d9a:	bf00      	nop
 8013d9c:	3718      	adds	r7, #24
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	bd80      	pop	{r7, pc}
	...

08013da4 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b084      	sub	sp, #16
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	460b      	mov	r3, r1
 8013dae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013db6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8013db8:	68fa      	ldr	r2, [r7, #12]
 8013dba:	f248 0330 	movw	r3, #32816	; 0x8030
 8013dbe:	4413      	add	r3, r2
 8013dc0:	4a10      	ldr	r2, [pc, #64]	; (8013e04 <MSC_BOT_SendCSW+0x60>)
 8013dc2:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8013dc4:	68fa      	ldr	r2, [r7, #12]
 8013dc6:	f248 033c 	movw	r3, #32828	; 0x803c
 8013dca:	4413      	add	r3, r2
 8013dcc:	78fa      	ldrb	r2, [r7, #3]
 8013dce:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	f248 0230 	movw	r2, #32816	; 0x8030
 8013ddc:	441a      	add	r2, r3
 8013dde:	230d      	movs	r3, #13
 8013de0:	2181      	movs	r1, #129	; 0x81
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f005 fa94 	bl	8019310 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	f248 0210 	movw	r2, #32784	; 0x8010
 8013dee:	441a      	add	r2, r3
 8013df0:	231f      	movs	r3, #31
 8013df2:	2101      	movs	r1, #1
 8013df4:	6878      	ldr	r0, [r7, #4]
 8013df6:	f005 faac 	bl	8019352 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013dfa:	bf00      	nop
 8013dfc:	3710      	adds	r7, #16
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
 8013e02:	bf00      	nop
 8013e04:	53425355 	.word	0x53425355

08013e08 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b084      	sub	sp, #16
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e16:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8013e18:	68fa      	ldr	r2, [r7, #12]
 8013e1a:	f248 031c 	movw	r3, #32796	; 0x801c
 8013e1e:	4413      	add	r3, r2
 8013e20:	781b      	ldrb	r3, [r3, #0]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d10e      	bne.n	8013e44 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8013e26:	68fa      	ldr	r2, [r7, #12]
 8013e28:	f248 0318 	movw	r3, #32792	; 0x8018
 8013e2c:	4413      	add	r3, r2
 8013e2e:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d007      	beq.n	8013e44 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d103      	bne.n	8013e44 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013e3c:	2101      	movs	r1, #1
 8013e3e:	6878      	ldr	r0, [r7, #4]
 8013e40:	f005 f9dd 	bl	80191fe <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013e44:	2181      	movs	r1, #129	; 0x81
 8013e46:	6878      	ldr	r0, [r7, #4]
 8013e48:	f005 f9d9 	bl	80191fe <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	7a5b      	ldrb	r3, [r3, #9]
 8013e50:	2b02      	cmp	r3, #2
 8013e52:	d107      	bne.n	8013e64 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013e54:	2181      	movs	r1, #129	; 0x81
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f005 f9d1 	bl	80191fe <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013e5c:	2101      	movs	r1, #1
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f005 f9cd 	bl	80191fe <USBD_LL_StallEP>
  }
}
 8013e64:	bf00      	nop
 8013e66:	3710      	adds	r7, #16
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}

08013e6c <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b084      	sub	sp, #16
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
 8013e74:	460b      	mov	r3, r1
 8013e76:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e7e:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	7a5b      	ldrb	r3, [r3, #9]
 8013e84:	2b02      	cmp	r3, #2
 8013e86:	d108      	bne.n	8013e9a <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013e88:	2181      	movs	r1, #129	; 0x81
 8013e8a:	6878      	ldr	r0, [r7, #4]
 8013e8c:	f005 f9b7 	bl	80191fe <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013e90:	2101      	movs	r1, #1
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f005 f9b3 	bl	80191fe <USBD_LL_StallEP>
 8013e98:	e00d      	b.n	8013eb6 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8013e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	da08      	bge.n	8013eb4 <MSC_BOT_CplClrFeature+0x48>
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	7a5b      	ldrb	r3, [r3, #9]
 8013ea6:	2b01      	cmp	r3, #1
 8013ea8:	d004      	beq.n	8013eb4 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013eaa:	2101      	movs	r1, #1
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f7ff ff79 	bl	8013da4 <MSC_BOT_SendCSW>
 8013eb2:	e000      	b.n	8013eb6 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8013eb4:	bf00      	nop
  }
}
 8013eb6:	3710      	adds	r7, #16
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}

08013ebc <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b086      	sub	sp, #24
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	60f8      	str	r0, [r7, #12]
 8013ec4:	460b      	mov	r3, r1
 8013ec6:	607a      	str	r2, [r7, #4]
 8013ec8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ed0:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	781b      	ldrb	r3, [r3, #0]
 8013ed6:	2b25      	cmp	r3, #37	; 0x25
 8013ed8:	d06e      	beq.n	8013fb8 <SCSI_ProcessCmd+0xfc>
 8013eda:	2b25      	cmp	r3, #37	; 0x25
 8013edc:	dc11      	bgt.n	8013f02 <SCSI_ProcessCmd+0x46>
 8013ede:	2b1a      	cmp	r3, #26
 8013ee0:	d04f      	beq.n	8013f82 <SCSI_ProcessCmd+0xc6>
 8013ee2:	2b1a      	cmp	r3, #26
 8013ee4:	dc06      	bgt.n	8013ef4 <SCSI_ProcessCmd+0x38>
 8013ee6:	2b03      	cmp	r3, #3
 8013ee8:	d027      	beq.n	8013f3a <SCSI_ProcessCmd+0x7e>
 8013eea:	2b12      	cmp	r3, #18
 8013eec:	d02e      	beq.n	8013f4c <SCSI_ProcessCmd+0x90>
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d01a      	beq.n	8013f28 <SCSI_ProcessCmd+0x6c>
 8013ef2:	e0a0      	b.n	8014036 <SCSI_ProcessCmd+0x17a>
 8013ef4:	2b1e      	cmp	r3, #30
 8013ef6:	d03b      	beq.n	8013f70 <SCSI_ProcessCmd+0xb4>
 8013ef8:	2b23      	cmp	r3, #35	; 0x23
 8013efa:	d054      	beq.n	8013fa6 <SCSI_ProcessCmd+0xea>
 8013efc:	2b1b      	cmp	r3, #27
 8013efe:	d02e      	beq.n	8013f5e <SCSI_ProcessCmd+0xa2>
 8013f00:	e099      	b.n	8014036 <SCSI_ProcessCmd+0x17a>
 8013f02:	2b5a      	cmp	r3, #90	; 0x5a
 8013f04:	d046      	beq.n	8013f94 <SCSI_ProcessCmd+0xd8>
 8013f06:	2b5a      	cmp	r3, #90	; 0x5a
 8013f08:	dc07      	bgt.n	8013f1a <SCSI_ProcessCmd+0x5e>
 8013f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8013f0c:	d078      	beq.n	8014000 <SCSI_ProcessCmd+0x144>
 8013f0e:	2b2f      	cmp	r3, #47	; 0x2f
 8013f10:	f000 8088 	beq.w	8014024 <SCSI_ProcessCmd+0x168>
 8013f14:	2b28      	cmp	r3, #40	; 0x28
 8013f16:	d061      	beq.n	8013fdc <SCSI_ProcessCmd+0x120>
 8013f18:	e08d      	b.n	8014036 <SCSI_ProcessCmd+0x17a>
 8013f1a:	2ba8      	cmp	r3, #168	; 0xa8
 8013f1c:	d067      	beq.n	8013fee <SCSI_ProcessCmd+0x132>
 8013f1e:	2baa      	cmp	r3, #170	; 0xaa
 8013f20:	d077      	beq.n	8014012 <SCSI_ProcessCmd+0x156>
 8013f22:	2b9e      	cmp	r3, #158	; 0x9e
 8013f24:	d051      	beq.n	8013fca <SCSI_ProcessCmd+0x10e>
 8013f26:	e086      	b.n	8014036 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8013f28:	7afb      	ldrb	r3, [r7, #11]
 8013f2a:	687a      	ldr	r2, [r7, #4]
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	68f8      	ldr	r0, [r7, #12]
 8013f30:	f000 f893 	bl	801405a <SCSI_TestUnitReady>
 8013f34:	4603      	mov	r3, r0
 8013f36:	75fb      	strb	r3, [r7, #23]
    break;
 8013f38:	e089      	b.n	801404e <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8013f3a:	7afb      	ldrb	r3, [r7, #11]
 8013f3c:	687a      	ldr	r2, [r7, #4]
 8013f3e:	4619      	mov	r1, r3
 8013f40:	68f8      	ldr	r0, [r7, #12]
 8013f42:	f000 fb47 	bl	80145d4 <SCSI_RequestSense>
 8013f46:	4603      	mov	r3, r0
 8013f48:	75fb      	strb	r3, [r7, #23]
    break;
 8013f4a:	e080      	b.n	801404e <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8013f4c:	7afb      	ldrb	r3, [r7, #11]
 8013f4e:	687a      	ldr	r2, [r7, #4]
 8013f50:	4619      	mov	r1, r3
 8013f52:	68f8      	ldr	r0, [r7, #12]
 8013f54:	f000 f8d2 	bl	80140fc <SCSI_Inquiry>
 8013f58:	4603      	mov	r3, r0
 8013f5a:	75fb      	strb	r3, [r7, #23]
    break;
 8013f5c:	e077      	b.n	801404e <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8013f5e:	7afb      	ldrb	r3, [r7, #11]
 8013f60:	687a      	ldr	r2, [r7, #4]
 8013f62:	4619      	mov	r1, r3
 8013f64:	68f8      	ldr	r0, [r7, #12]
 8013f66:	f000 fc27 	bl	80147b8 <SCSI_StartStopUnit>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	75fb      	strb	r3, [r7, #23]
    break;
 8013f6e:	e06e      	b.n	801404e <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8013f70:	7afb      	ldrb	r3, [r7, #11]
 8013f72:	687a      	ldr	r2, [r7, #4]
 8013f74:	4619      	mov	r1, r3
 8013f76:	68f8      	ldr	r0, [r7, #12]
 8013f78:	f000 fc71 	bl	801485e <SCSI_AllowPreventRemovable>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	75fb      	strb	r3, [r7, #23]
    break;
 8013f80:	e065      	b.n	801404e <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8013f82:	7afb      	ldrb	r3, [r7, #11]
 8013f84:	687a      	ldr	r2, [r7, #4]
 8013f86:	4619      	mov	r1, r3
 8013f88:	68f8      	ldr	r0, [r7, #12]
 8013f8a:	f000 fad7 	bl	801453c <SCSI_ModeSense6>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	75fb      	strb	r3, [r7, #23]
    break;
 8013f92:	e05c      	b.n	801404e <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8013f94:	7afb      	ldrb	r3, [r7, #11]
 8013f96:	687a      	ldr	r2, [r7, #4]
 8013f98:	4619      	mov	r1, r3
 8013f9a:	68f8      	ldr	r0, [r7, #12]
 8013f9c:	f000 faf4 	bl	8014588 <SCSI_ModeSense10>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	75fb      	strb	r3, [r7, #23]
    break;
 8013fa4:	e053      	b.n	801404e <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8013fa6:	7afb      	ldrb	r3, [r7, #11]
 8013fa8:	687a      	ldr	r2, [r7, #4]
 8013faa:	4619      	mov	r1, r3
 8013fac:	68f8      	ldr	r0, [r7, #12]
 8013fae:	f000 fa56 	bl	801445e <SCSI_ReadFormatCapacity>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	75fb      	strb	r3, [r7, #23]
    break;
 8013fb6:	e04a      	b.n	801404e <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8013fb8:	7afb      	ldrb	r3, [r7, #11]
 8013fba:	687a      	ldr	r2, [r7, #4]
 8013fbc:	4619      	mov	r1, r3
 8013fbe:	68f8      	ldr	r0, [r7, #12]
 8013fc0:	f000 f910 	bl	80141e4 <SCSI_ReadCapacity10>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	75fb      	strb	r3, [r7, #23]
    break;
 8013fc8:	e041      	b.n	801404e <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8013fca:	7afb      	ldrb	r3, [r7, #11]
 8013fcc:	687a      	ldr	r2, [r7, #4]
 8013fce:	4619      	mov	r1, r3
 8013fd0:	68f8      	ldr	r0, [r7, #12]
 8013fd2:	f000 f98b 	bl	80142ec <SCSI_ReadCapacity16>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	75fb      	strb	r3, [r7, #23]
    break;
 8013fda:	e038      	b.n	801404e <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8013fdc:	7afb      	ldrb	r3, [r7, #11]
 8013fde:	687a      	ldr	r2, [r7, #4]
 8013fe0:	4619      	mov	r1, r3
 8013fe2:	68f8      	ldr	r0, [r7, #12]
 8013fe4:	f000 fc62 	bl	80148ac <SCSI_Read10>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	75fb      	strb	r3, [r7, #23]
    break;
 8013fec:	e02f      	b.n	801404e <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8013fee:	7afb      	ldrb	r3, [r7, #11]
 8013ff0:	687a      	ldr	r2, [r7, #4]
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	68f8      	ldr	r0, [r7, #12]
 8013ff6:	f000 fd0b 	bl	8014a10 <SCSI_Read12>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	75fb      	strb	r3, [r7, #23]
    break;
 8013ffe:	e026      	b.n	801404e <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8014000:	7afb      	ldrb	r3, [r7, #11]
 8014002:	687a      	ldr	r2, [r7, #4]
 8014004:	4619      	mov	r1, r3
 8014006:	68f8      	ldr	r0, [r7, #12]
 8014008:	f000 fdbe 	bl	8014b88 <SCSI_Write10>
 801400c:	4603      	mov	r3, r0
 801400e:	75fb      	strb	r3, [r7, #23]
    break;
 8014010:	e01d      	b.n	801404e <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8014012:	7afb      	ldrb	r3, [r7, #11]
 8014014:	687a      	ldr	r2, [r7, #4]
 8014016:	4619      	mov	r1, r3
 8014018:	68f8      	ldr	r0, [r7, #12]
 801401a:	f000 fe8d 	bl	8014d38 <SCSI_Write12>
 801401e:	4603      	mov	r3, r0
 8014020:	75fb      	strb	r3, [r7, #23]
    break;
 8014022:	e014      	b.n	801404e <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8014024:	7afb      	ldrb	r3, [r7, #11]
 8014026:	687a      	ldr	r2, [r7, #4]
 8014028:	4619      	mov	r1, r3
 801402a:	68f8      	ldr	r0, [r7, #12]
 801402c:	f000 ff6c 	bl	8014f08 <SCSI_Verify10>
 8014030:	4603      	mov	r3, r0
 8014032:	75fb      	strb	r3, [r7, #23]
    break;
 8014034:	e00b      	b.n	801404e <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8014036:	7af9      	ldrb	r1, [r7, #11]
 8014038:	2320      	movs	r3, #32
 801403a:	2205      	movs	r2, #5
 801403c:	68f8      	ldr	r0, [r7, #12]
 801403e:	f000 fb61 	bl	8014704 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	2202      	movs	r2, #2
 8014046:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8014048:	23ff      	movs	r3, #255	; 0xff
 801404a:	75fb      	strb	r3, [r7, #23]
    break;
 801404c:	bf00      	nop
  }

  return ret;
 801404e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014052:	4618      	mov	r0, r3
 8014054:	3718      	adds	r7, #24
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}

0801405a <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801405a:	b580      	push	{r7, lr}
 801405c:	b086      	sub	sp, #24
 801405e:	af00      	add	r7, sp, #0
 8014060:	60f8      	str	r0, [r7, #12]
 8014062:	460b      	mov	r3, r1
 8014064:	607a      	str	r2, [r7, #4]
 8014066:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801406e:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8014070:	697a      	ldr	r2, [r7, #20]
 8014072:	f248 0318 	movw	r3, #32792	; 0x8018
 8014076:	4413      	add	r3, r2
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d00c      	beq.n	8014098 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801407e:	697a      	ldr	r2, [r7, #20]
 8014080:	f248 031d 	movw	r3, #32797	; 0x801d
 8014084:	4413      	add	r3, r2
 8014086:	7819      	ldrb	r1, [r3, #0]
 8014088:	2320      	movs	r3, #32
 801408a:	2205      	movs	r2, #5
 801408c:	68f8      	ldr	r0, [r7, #12]
 801408e:	f000 fb39 	bl	8014704 <SCSI_SenseCode>

    return -1;
 8014092:	f04f 33ff 	mov.w	r3, #4294967295
 8014096:	e02c      	b.n	80140f2 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014098:	697a      	ldr	r2, [r7, #20]
 801409a:	f248 0362 	movw	r3, #32866	; 0x8062
 801409e:	4413      	add	r3, r2
 80140a0:	781b      	ldrb	r3, [r3, #0]
 80140a2:	2b02      	cmp	r3, #2
 80140a4:	d10b      	bne.n	80140be <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80140a6:	7af9      	ldrb	r1, [r7, #11]
 80140a8:	233a      	movs	r3, #58	; 0x3a
 80140aa:	2202      	movs	r2, #2
 80140ac:	68f8      	ldr	r0, [r7, #12]
 80140ae:	f000 fb29 	bl	8014704 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	2205      	movs	r2, #5
 80140b6:	721a      	strb	r2, [r3, #8]
    return -1;
 80140b8:	f04f 33ff 	mov.w	r3, #4294967295
 80140bc:	e019      	b.n	80140f2 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140c4:	689b      	ldr	r3, [r3, #8]
 80140c6:	7afa      	ldrb	r2, [r7, #11]
 80140c8:	4610      	mov	r0, r2
 80140ca:	4798      	blx	r3
 80140cc:	4603      	mov	r3, r0
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d00b      	beq.n	80140ea <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80140d2:	7af9      	ldrb	r1, [r7, #11]
 80140d4:	233a      	movs	r3, #58	; 0x3a
 80140d6:	2202      	movs	r2, #2
 80140d8:	68f8      	ldr	r0, [r7, #12]
 80140da:	f000 fb13 	bl	8014704 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80140de:	697b      	ldr	r3, [r7, #20]
 80140e0:	2205      	movs	r2, #5
 80140e2:	721a      	strb	r2, [r3, #8]

    return -1;
 80140e4:	f04f 33ff 	mov.w	r3, #4294967295
 80140e8:	e003      	b.n	80140f2 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80140ea:	697b      	ldr	r3, [r7, #20]
 80140ec:	2200      	movs	r2, #0
 80140ee:	60da      	str	r2, [r3, #12]

  return 0;
 80140f0:	2300      	movs	r3, #0
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3718      	adds	r7, #24
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
	...

080140fc <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b088      	sub	sp, #32
 8014100:	af00      	add	r7, sp, #0
 8014102:	60f8      	str	r0, [r7, #12]
 8014104:	460b      	mov	r3, r1
 8014106:	607a      	str	r2, [r7, #4]
 8014108:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014110:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 8014112:	69ba      	ldr	r2, [r7, #24]
 8014114:	f248 0318 	movw	r3, #32792	; 0x8018
 8014118:	4413      	add	r3, r2
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d10c      	bne.n	801413a <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014120:	69ba      	ldr	r2, [r7, #24]
 8014122:	f248 031d 	movw	r3, #32797	; 0x801d
 8014126:	4413      	add	r3, r2
 8014128:	7819      	ldrb	r1, [r3, #0]
 801412a:	2320      	movs	r3, #32
 801412c:	2205      	movs	r2, #5
 801412e:	68f8      	ldr	r0, [r7, #12]
 8014130:	f000 fae8 	bl	8014704 <SCSI_SenseCode>
    return -1;
 8014134:	f04f 33ff 	mov.w	r3, #4294967295
 8014138:	e04c      	b.n	80141d4 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	3301      	adds	r3, #1
 801413e:	781b      	ldrb	r3, [r3, #0]
 8014140:	f003 0301 	and.w	r3, r3, #1
 8014144:	2b00      	cmp	r3, #0
 8014146:	d022      	beq.n	801418e <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	3302      	adds	r3, #2
 801414c:	781b      	ldrb	r3, [r3, #0]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d105      	bne.n	801415e <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8014152:	2206      	movs	r2, #6
 8014154:	4921      	ldr	r1, [pc, #132]	; (80141dc <SCSI_Inquiry+0xe0>)
 8014156:	69b8      	ldr	r0, [r7, #24]
 8014158:	f001 f862 	bl	8015220 <SCSI_UpdateBotData>
 801415c:	e039      	b.n	80141d2 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	3302      	adds	r3, #2
 8014162:	781b      	ldrb	r3, [r3, #0]
 8014164:	2b80      	cmp	r3, #128	; 0x80
 8014166:	d105      	bne.n	8014174 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8014168:	2208      	movs	r2, #8
 801416a:	491d      	ldr	r1, [pc, #116]	; (80141e0 <SCSI_Inquiry+0xe4>)
 801416c:	69b8      	ldr	r0, [r7, #24]
 801416e:	f001 f857 	bl	8015220 <SCSI_UpdateBotData>
 8014172:	e02e      	b.n	80141d2 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8014174:	69ba      	ldr	r2, [r7, #24]
 8014176:	f248 031d 	movw	r3, #32797	; 0x801d
 801417a:	4413      	add	r3, r2
 801417c:	7819      	ldrb	r1, [r3, #0]
 801417e:	2324      	movs	r3, #36	; 0x24
 8014180:	2205      	movs	r2, #5
 8014182:	68f8      	ldr	r0, [r7, #12]
 8014184:	f000 fabe 	bl	8014704 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8014188:	f04f 33ff 	mov.w	r3, #4294967295
 801418c:	e022      	b.n	80141d4 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014194:	69d9      	ldr	r1, [r3, #28]
 8014196:	7afa      	ldrb	r2, [r7, #11]
 8014198:	4613      	mov	r3, r2
 801419a:	00db      	lsls	r3, r3, #3
 801419c:	4413      	add	r3, r2
 801419e:	009b      	lsls	r3, r3, #2
 80141a0:	440b      	add	r3, r1
 80141a2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80141a4:	697b      	ldr	r3, [r7, #20]
 80141a6:	3304      	adds	r3, #4
 80141a8:	781b      	ldrb	r3, [r3, #0]
 80141aa:	b29b      	uxth	r3, r3
 80141ac:	3305      	adds	r3, #5
 80141ae:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	3304      	adds	r3, #4
 80141b4:	781b      	ldrb	r3, [r3, #0]
 80141b6:	b29b      	uxth	r3, r3
 80141b8:	8bfa      	ldrh	r2, [r7, #30]
 80141ba:	429a      	cmp	r2, r3
 80141bc:	d303      	bcc.n	80141c6 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	3304      	adds	r3, #4
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80141c6:	8bfb      	ldrh	r3, [r7, #30]
 80141c8:	461a      	mov	r2, r3
 80141ca:	6979      	ldr	r1, [r7, #20]
 80141cc:	69b8      	ldr	r0, [r7, #24]
 80141ce:	f001 f827 	bl	8015220 <SCSI_UpdateBotData>
  }

  return 0;
 80141d2:	2300      	movs	r3, #0
}
 80141d4:	4618      	mov	r0, r3
 80141d6:	3720      	adds	r7, #32
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}
 80141dc:	240000c4 	.word	0x240000c4
 80141e0:	240000cc 	.word	0x240000cc

080141e4 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80141e4:	b590      	push	{r4, r7, lr}
 80141e6:	b087      	sub	sp, #28
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	60f8      	str	r0, [r7, #12]
 80141ec:	460b      	mov	r3, r1
 80141ee:	607a      	str	r2, [r7, #4]
 80141f0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80141f8:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014200:	685c      	ldr	r4, [r3, #4]
 8014202:	697a      	ldr	r2, [r7, #20]
 8014204:	f248 0368 	movw	r3, #32872	; 0x8068
 8014208:	4413      	add	r3, r2
 801420a:	6979      	ldr	r1, [r7, #20]
 801420c:	f248 0264 	movw	r2, #32868	; 0x8064
 8014210:	440a      	add	r2, r1
 8014212:	7af8      	ldrb	r0, [r7, #11]
 8014214:	4619      	mov	r1, r3
 8014216:	47a0      	blx	r4
 8014218:	4603      	mov	r3, r0
 801421a:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801421c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d106      	bne.n	8014232 <SCSI_ReadCapacity10+0x4e>
 8014224:	697a      	ldr	r2, [r7, #20]
 8014226:	f248 0362 	movw	r3, #32866	; 0x8062
 801422a:	4413      	add	r3, r2
 801422c:	781b      	ldrb	r3, [r3, #0]
 801422e:	2b02      	cmp	r3, #2
 8014230:	d108      	bne.n	8014244 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014232:	7af9      	ldrb	r1, [r7, #11]
 8014234:	233a      	movs	r3, #58	; 0x3a
 8014236:	2202      	movs	r2, #2
 8014238:	68f8      	ldr	r0, [r7, #12]
 801423a:	f000 fa63 	bl	8014704 <SCSI_SenseCode>
    return -1;
 801423e:	f04f 33ff 	mov.w	r3, #4294967295
 8014242:	e04f      	b.n	80142e4 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014244:	697a      	ldr	r2, [r7, #20]
 8014246:	f248 0368 	movw	r3, #32872	; 0x8068
 801424a:	4413      	add	r3, r2
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	3b01      	subs	r3, #1
 8014250:	0e1b      	lsrs	r3, r3, #24
 8014252:	b2da      	uxtb	r2, r3
 8014254:	697b      	ldr	r3, [r7, #20]
 8014256:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014258:	697a      	ldr	r2, [r7, #20]
 801425a:	f248 0368 	movw	r3, #32872	; 0x8068
 801425e:	4413      	add	r3, r2
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	3b01      	subs	r3, #1
 8014264:	0c1b      	lsrs	r3, r3, #16
 8014266:	b2da      	uxtb	r2, r3
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801426c:	697a      	ldr	r2, [r7, #20]
 801426e:	f248 0368 	movw	r3, #32872	; 0x8068
 8014272:	4413      	add	r3, r2
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	3b01      	subs	r3, #1
 8014278:	0a1b      	lsrs	r3, r3, #8
 801427a:	b2da      	uxtb	r2, r3
 801427c:	697b      	ldr	r3, [r7, #20]
 801427e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014280:	697a      	ldr	r2, [r7, #20]
 8014282:	f248 0368 	movw	r3, #32872	; 0x8068
 8014286:	4413      	add	r3, r2
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	b2db      	uxtb	r3, r3
 801428c:	3b01      	subs	r3, #1
 801428e:	b2da      	uxtb	r2, r3
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014294:	697a      	ldr	r2, [r7, #20]
 8014296:	f248 0364 	movw	r3, #32868	; 0x8064
 801429a:	4413      	add	r3, r2
 801429c:	881b      	ldrh	r3, [r3, #0]
 801429e:	161b      	asrs	r3, r3, #24
 80142a0:	b2da      	uxtb	r2, r3
 80142a2:	697b      	ldr	r3, [r7, #20]
 80142a4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80142a6:	697a      	ldr	r2, [r7, #20]
 80142a8:	f248 0364 	movw	r3, #32868	; 0x8064
 80142ac:	4413      	add	r3, r2
 80142ae:	881b      	ldrh	r3, [r3, #0]
 80142b0:	141b      	asrs	r3, r3, #16
 80142b2:	b2da      	uxtb	r2, r3
 80142b4:	697b      	ldr	r3, [r7, #20]
 80142b6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80142b8:	697a      	ldr	r2, [r7, #20]
 80142ba:	f248 0364 	movw	r3, #32868	; 0x8064
 80142be:	4413      	add	r3, r2
 80142c0:	881b      	ldrh	r3, [r3, #0]
 80142c2:	0a1b      	lsrs	r3, r3, #8
 80142c4:	b29b      	uxth	r3, r3
 80142c6:	b2da      	uxtb	r2, r3
 80142c8:	697b      	ldr	r3, [r7, #20]
 80142ca:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80142cc:	697a      	ldr	r2, [r7, #20]
 80142ce:	f248 0364 	movw	r3, #32868	; 0x8064
 80142d2:	4413      	add	r3, r2
 80142d4:	881b      	ldrh	r3, [r3, #0]
 80142d6:	b2da      	uxtb	r2, r3
 80142d8:	697b      	ldr	r3, [r7, #20]
 80142da:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80142dc:	697b      	ldr	r3, [r7, #20]
 80142de:	2208      	movs	r2, #8
 80142e0:	60da      	str	r2, [r3, #12]

  return 0;
 80142e2:	2300      	movs	r3, #0

}
 80142e4:	4618      	mov	r0, r3
 80142e6:	371c      	adds	r7, #28
 80142e8:	46bd      	mov	sp, r7
 80142ea:	bd90      	pop	{r4, r7, pc}

080142ec <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80142ec:	b590      	push	{r4, r7, lr}
 80142ee:	b089      	sub	sp, #36	; 0x24
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	60f8      	str	r0, [r7, #12]
 80142f4:	460b      	mov	r3, r1
 80142f6:	607a      	str	r2, [r7, #4]
 80142f8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014300:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014308:	685c      	ldr	r4, [r3, #4]
 801430a:	69ba      	ldr	r2, [r7, #24]
 801430c:	f248 0368 	movw	r3, #32872	; 0x8068
 8014310:	4413      	add	r3, r2
 8014312:	69b9      	ldr	r1, [r7, #24]
 8014314:	f248 0264 	movw	r2, #32868	; 0x8064
 8014318:	440a      	add	r2, r1
 801431a:	7af8      	ldrb	r0, [r7, #11]
 801431c:	4619      	mov	r1, r3
 801431e:	47a0      	blx	r4
 8014320:	4603      	mov	r3, r0
 8014322:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d106      	bne.n	801433a <SCSI_ReadCapacity16+0x4e>
 801432c:	69ba      	ldr	r2, [r7, #24]
 801432e:	f248 0362 	movw	r3, #32866	; 0x8062
 8014332:	4413      	add	r3, r2
 8014334:	781b      	ldrb	r3, [r3, #0]
 8014336:	2b02      	cmp	r3, #2
 8014338:	d108      	bne.n	801434c <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801433a:	7af9      	ldrb	r1, [r7, #11]
 801433c:	233a      	movs	r3, #58	; 0x3a
 801433e:	2202      	movs	r2, #2
 8014340:	68f8      	ldr	r0, [r7, #12]
 8014342:	f000 f9df 	bl	8014704 <SCSI_SenseCode>
    return -1;
 8014346:	f04f 33ff 	mov.w	r3, #4294967295
 801434a:	e084      	b.n	8014456 <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	330a      	adds	r3, #10
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	330b      	adds	r3, #11
 8014358:	781b      	ldrb	r3, [r3, #0]
 801435a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801435c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	330c      	adds	r3, #12
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014366:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8014368:	687a      	ldr	r2, [r7, #4]
 801436a:	320d      	adds	r2, #13
 801436c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801436e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014370:	69bb      	ldr	r3, [r7, #24]
 8014372:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014374:	2300      	movs	r3, #0
 8014376:	77fb      	strb	r3, [r7, #31]
 8014378:	e007      	b.n	801438a <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 801437a:	7ffb      	ldrb	r3, [r7, #31]
 801437c:	69ba      	ldr	r2, [r7, #24]
 801437e:	4413      	add	r3, r2
 8014380:	2200      	movs	r2, #0
 8014382:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014384:	7ffb      	ldrb	r3, [r7, #31]
 8014386:	3301      	adds	r3, #1
 8014388:	77fb      	strb	r3, [r7, #31]
 801438a:	7ffa      	ldrb	r2, [r7, #31]
 801438c:	69bb      	ldr	r3, [r7, #24]
 801438e:	68db      	ldr	r3, [r3, #12]
 8014390:	429a      	cmp	r2, r3
 8014392:	d3f2      	bcc.n	801437a <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014394:	69ba      	ldr	r2, [r7, #24]
 8014396:	f248 0368 	movw	r3, #32872	; 0x8068
 801439a:	4413      	add	r3, r2
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	3b01      	subs	r3, #1
 80143a0:	0e1b      	lsrs	r3, r3, #24
 80143a2:	b2da      	uxtb	r2, r3
 80143a4:	69bb      	ldr	r3, [r7, #24]
 80143a6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80143a8:	69ba      	ldr	r2, [r7, #24]
 80143aa:	f248 0368 	movw	r3, #32872	; 0x8068
 80143ae:	4413      	add	r3, r2
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	3b01      	subs	r3, #1
 80143b4:	0c1b      	lsrs	r3, r3, #16
 80143b6:	b2da      	uxtb	r2, r3
 80143b8:	69bb      	ldr	r3, [r7, #24]
 80143ba:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80143bc:	69ba      	ldr	r2, [r7, #24]
 80143be:	f248 0368 	movw	r3, #32872	; 0x8068
 80143c2:	4413      	add	r3, r2
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	3b01      	subs	r3, #1
 80143c8:	0a1b      	lsrs	r3, r3, #8
 80143ca:	b2da      	uxtb	r2, r3
 80143cc:	69bb      	ldr	r3, [r7, #24]
 80143ce:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80143d0:	69ba      	ldr	r2, [r7, #24]
 80143d2:	f248 0368 	movw	r3, #32872	; 0x8068
 80143d6:	4413      	add	r3, r2
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	b2db      	uxtb	r3, r3
 80143dc:	3b01      	subs	r3, #1
 80143de:	b2da      	uxtb	r2, r3
 80143e0:	69bb      	ldr	r3, [r7, #24]
 80143e2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80143e4:	69ba      	ldr	r2, [r7, #24]
 80143e6:	f248 0364 	movw	r3, #32868	; 0x8064
 80143ea:	4413      	add	r3, r2
 80143ec:	881b      	ldrh	r3, [r3, #0]
 80143ee:	161b      	asrs	r3, r3, #24
 80143f0:	b2da      	uxtb	r2, r3
 80143f2:	69bb      	ldr	r3, [r7, #24]
 80143f4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80143f6:	69ba      	ldr	r2, [r7, #24]
 80143f8:	f248 0364 	movw	r3, #32868	; 0x8064
 80143fc:	4413      	add	r3, r2
 80143fe:	881b      	ldrh	r3, [r3, #0]
 8014400:	141b      	asrs	r3, r3, #16
 8014402:	b2da      	uxtb	r2, r3
 8014404:	69bb      	ldr	r3, [r7, #24]
 8014406:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014408:	69ba      	ldr	r2, [r7, #24]
 801440a:	f248 0364 	movw	r3, #32868	; 0x8064
 801440e:	4413      	add	r3, r2
 8014410:	881b      	ldrh	r3, [r3, #0]
 8014412:	0a1b      	lsrs	r3, r3, #8
 8014414:	b29b      	uxth	r3, r3
 8014416:	b2da      	uxtb	r2, r3
 8014418:	69bb      	ldr	r3, [r7, #24]
 801441a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 801441c:	69ba      	ldr	r2, [r7, #24]
 801441e:	f248 0364 	movw	r3, #32868	; 0x8064
 8014422:	4413      	add	r3, r2
 8014424:	881b      	ldrh	r3, [r3, #0]
 8014426:	b2da      	uxtb	r2, r3
 8014428:	69bb      	ldr	r3, [r7, #24]
 801442a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	330a      	adds	r3, #10
 8014430:	781b      	ldrb	r3, [r3, #0]
 8014432:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	330b      	adds	r3, #11
 8014438:	781b      	ldrb	r3, [r3, #0]
 801443a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801443c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	330c      	adds	r3, #12
 8014442:	781b      	ldrb	r3, [r3, #0]
 8014444:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014446:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8014448:	687a      	ldr	r2, [r7, #4]
 801444a:	320d      	adds	r2, #13
 801444c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801444e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014450:	69bb      	ldr	r3, [r7, #24]
 8014452:	60da      	str	r2, [r3, #12]

  return 0;
 8014454:	2300      	movs	r3, #0
}
 8014456:	4618      	mov	r0, r3
 8014458:	3724      	adds	r7, #36	; 0x24
 801445a:	46bd      	mov	sp, r7
 801445c:	bd90      	pop	{r4, r7, pc}

0801445e <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801445e:	b580      	push	{r7, lr}
 8014460:	b088      	sub	sp, #32
 8014462:	af00      	add	r7, sp, #0
 8014464:	60f8      	str	r0, [r7, #12]
 8014466:	460b      	mov	r3, r1
 8014468:	607a      	str	r2, [r7, #4]
 801446a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014472:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801447a:	685b      	ldr	r3, [r3, #4]
 801447c:	f107 0214 	add.w	r2, r7, #20
 8014480:	f107 0110 	add.w	r1, r7, #16
 8014484:	7af8      	ldrb	r0, [r7, #11]
 8014486:	4798      	blx	r3
 8014488:	4603      	mov	r3, r0
 801448a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801448c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d106      	bne.n	80144a2 <SCSI_ReadFormatCapacity+0x44>
 8014494:	69ba      	ldr	r2, [r7, #24]
 8014496:	f248 0362 	movw	r3, #32866	; 0x8062
 801449a:	4413      	add	r3, r2
 801449c:	781b      	ldrb	r3, [r3, #0]
 801449e:	2b02      	cmp	r3, #2
 80144a0:	d108      	bne.n	80144b4 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80144a2:	7af9      	ldrb	r1, [r7, #11]
 80144a4:	233a      	movs	r3, #58	; 0x3a
 80144a6:	2202      	movs	r2, #2
 80144a8:	68f8      	ldr	r0, [r7, #12]
 80144aa:	f000 f92b 	bl	8014704 <SCSI_SenseCode>
    return -1;
 80144ae:	f04f 33ff 	mov.w	r3, #4294967295
 80144b2:	e03e      	b.n	8014532 <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 80144b4:	2300      	movs	r3, #0
 80144b6:	83fb      	strh	r3, [r7, #30]
 80144b8:	e007      	b.n	80144ca <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 80144ba:	8bfb      	ldrh	r3, [r7, #30]
 80144bc:	69ba      	ldr	r2, [r7, #24]
 80144be:	4413      	add	r3, r2
 80144c0:	2200      	movs	r2, #0
 80144c2:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80144c4:	8bfb      	ldrh	r3, [r7, #30]
 80144c6:	3301      	adds	r3, #1
 80144c8:	83fb      	strh	r3, [r7, #30]
 80144ca:	8bfb      	ldrh	r3, [r7, #30]
 80144cc:	2b0b      	cmp	r3, #11
 80144ce:	d9f4      	bls.n	80144ba <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 80144d0:	69bb      	ldr	r3, [r7, #24]
 80144d2:	2208      	movs	r2, #8
 80144d4:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	3b01      	subs	r3, #1
 80144da:	0e1b      	lsrs	r3, r3, #24
 80144dc:	b2da      	uxtb	r2, r3
 80144de:	69bb      	ldr	r3, [r7, #24]
 80144e0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	3b01      	subs	r3, #1
 80144e6:	0c1b      	lsrs	r3, r3, #16
 80144e8:	b2da      	uxtb	r2, r3
 80144ea:	69bb      	ldr	r3, [r7, #24]
 80144ec:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80144ee:	693b      	ldr	r3, [r7, #16]
 80144f0:	3b01      	subs	r3, #1
 80144f2:	0a1b      	lsrs	r3, r3, #8
 80144f4:	b2da      	uxtb	r2, r3
 80144f6:	69bb      	ldr	r3, [r7, #24]
 80144f8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80144fa:	693b      	ldr	r3, [r7, #16]
 80144fc:	b2db      	uxtb	r3, r3
 80144fe:	3b01      	subs	r3, #1
 8014500:	b2da      	uxtb	r2, r3
 8014502:	69bb      	ldr	r3, [r7, #24]
 8014504:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8014506:	69bb      	ldr	r3, [r7, #24]
 8014508:	2202      	movs	r2, #2
 801450a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 801450c:	8abb      	ldrh	r3, [r7, #20]
 801450e:	141b      	asrs	r3, r3, #16
 8014510:	b2da      	uxtb	r2, r3
 8014512:	69bb      	ldr	r3, [r7, #24]
 8014514:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8014516:	8abb      	ldrh	r3, [r7, #20]
 8014518:	0a1b      	lsrs	r3, r3, #8
 801451a:	b29b      	uxth	r3, r3
 801451c:	b2da      	uxtb	r2, r3
 801451e:	69bb      	ldr	r3, [r7, #24]
 8014520:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8014522:	8abb      	ldrh	r3, [r7, #20]
 8014524:	b2da      	uxtb	r2, r3
 8014526:	69bb      	ldr	r3, [r7, #24]
 8014528:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 801452a:	69bb      	ldr	r3, [r7, #24]
 801452c:	220c      	movs	r2, #12
 801452e:	60da      	str	r2, [r3, #12]

  return 0;
 8014530:	2300      	movs	r3, #0
}
 8014532:	4618      	mov	r0, r3
 8014534:	3720      	adds	r7, #32
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}
	...

0801453c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b086      	sub	sp, #24
 8014540:	af00      	add	r7, sp, #0
 8014542:	60f8      	str	r0, [r7, #12]
 8014544:	460b      	mov	r3, r1
 8014546:	607a      	str	r2, [r7, #4]
 8014548:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014550:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8014552:	2317      	movs	r3, #23
 8014554:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	3304      	adds	r3, #4
 801455a:	781b      	ldrb	r3, [r3, #0]
 801455c:	b29b      	uxth	r3, r3
 801455e:	8afa      	ldrh	r2, [r7, #22]
 8014560:	429a      	cmp	r2, r3
 8014562:	d303      	bcc.n	801456c <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	3304      	adds	r3, #4
 8014568:	781b      	ldrb	r3, [r3, #0]
 801456a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 801456c:	8afb      	ldrh	r3, [r7, #22]
 801456e:	461a      	mov	r2, r3
 8014570:	4904      	ldr	r1, [pc, #16]	; (8014584 <SCSI_ModeSense6+0x48>)
 8014572:	6938      	ldr	r0, [r7, #16]
 8014574:	f000 fe54 	bl	8015220 <SCSI_UpdateBotData>

  return 0;
 8014578:	2300      	movs	r3, #0
}
 801457a:	4618      	mov	r0, r3
 801457c:	3718      	adds	r7, #24
 801457e:	46bd      	mov	sp, r7
 8014580:	bd80      	pop	{r7, pc}
 8014582:	bf00      	nop
 8014584:	240000d4 	.word	0x240000d4

08014588 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b086      	sub	sp, #24
 801458c:	af00      	add	r7, sp, #0
 801458e:	60f8      	str	r0, [r7, #12]
 8014590:	460b      	mov	r3, r1
 8014592:	607a      	str	r2, [r7, #4]
 8014594:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801459c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801459e:	231b      	movs	r3, #27
 80145a0:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	3308      	adds	r3, #8
 80145a6:	781b      	ldrb	r3, [r3, #0]
 80145a8:	b29b      	uxth	r3, r3
 80145aa:	8afa      	ldrh	r2, [r7, #22]
 80145ac:	429a      	cmp	r2, r3
 80145ae:	d303      	bcc.n	80145b8 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	3308      	adds	r3, #8
 80145b4:	781b      	ldrb	r3, [r3, #0]
 80145b6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80145b8:	8afb      	ldrh	r3, [r7, #22]
 80145ba:	461a      	mov	r2, r3
 80145bc:	4904      	ldr	r1, [pc, #16]	; (80145d0 <SCSI_ModeSense10+0x48>)
 80145be:	6938      	ldr	r0, [r7, #16]
 80145c0:	f000 fe2e 	bl	8015220 <SCSI_UpdateBotData>

  return 0;
 80145c4:	2300      	movs	r3, #0
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3718      	adds	r7, #24
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd80      	pop	{r7, pc}
 80145ce:	bf00      	nop
 80145d0:	240000ec 	.word	0x240000ec

080145d4 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b086      	sub	sp, #24
 80145d8:	af00      	add	r7, sp, #0
 80145da:	60f8      	str	r0, [r7, #12]
 80145dc:	460b      	mov	r3, r1
 80145de:	607a      	str	r2, [r7, #4]
 80145e0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80145e8:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 80145ea:	693a      	ldr	r2, [r7, #16]
 80145ec:	f248 0318 	movw	r3, #32792	; 0x8018
 80145f0:	4413      	add	r3, r2
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d10c      	bne.n	8014612 <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80145f8:	693a      	ldr	r2, [r7, #16]
 80145fa:	f248 031d 	movw	r3, #32797	; 0x801d
 80145fe:	4413      	add	r3, r2
 8014600:	7819      	ldrb	r1, [r3, #0]
 8014602:	2320      	movs	r3, #32
 8014604:	2205      	movs	r2, #5
 8014606:	68f8      	ldr	r0, [r7, #12]
 8014608:	f000 f87c 	bl	8014704 <SCSI_SenseCode>
    return -1;
 801460c:	f04f 33ff 	mov.w	r3, #4294967295
 8014610:	e074      	b.n	80146fc <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8014612:	2300      	movs	r3, #0
 8014614:	75fb      	strb	r3, [r7, #23]
 8014616:	e007      	b.n	8014628 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 8014618:	7dfb      	ldrb	r3, [r7, #23]
 801461a:	693a      	ldr	r2, [r7, #16]
 801461c:	4413      	add	r3, r2
 801461e:	2200      	movs	r2, #0
 8014620:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8014622:	7dfb      	ldrb	r3, [r7, #23]
 8014624:	3301      	adds	r3, #1
 8014626:	75fb      	strb	r3, [r7, #23]
 8014628:	7dfb      	ldrb	r3, [r7, #23]
 801462a:	2b11      	cmp	r3, #17
 801462c:	d9f4      	bls.n	8014618 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 801462e:	693b      	ldr	r3, [r7, #16]
 8014630:	2270      	movs	r2, #112	; 0x70
 8014632:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8014634:	693b      	ldr	r3, [r7, #16]
 8014636:	220c      	movs	r2, #12
 8014638:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801463a:	693a      	ldr	r2, [r7, #16]
 801463c:	f248 0360 	movw	r3, #32864	; 0x8060
 8014640:	4413      	add	r3, r2
 8014642:	781a      	ldrb	r2, [r3, #0]
 8014644:	6939      	ldr	r1, [r7, #16]
 8014646:	f248 0361 	movw	r3, #32865	; 0x8061
 801464a:	440b      	add	r3, r1
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	429a      	cmp	r2, r3
 8014650:	d045      	beq.n	80146de <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8014652:	693a      	ldr	r2, [r7, #16]
 8014654:	f248 0360 	movw	r3, #32864	; 0x8060
 8014658:	4413      	add	r3, r2
 801465a:	781b      	ldrb	r3, [r3, #0]
 801465c:	4619      	mov	r1, r3
 801465e:	693a      	ldr	r2, [r7, #16]
 8014660:	f241 0308 	movw	r3, #4104	; 0x1008
 8014664:	440b      	add	r3, r1
 8014666:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 801466a:	693b      	ldr	r3, [r7, #16]
 801466c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801466e:	693a      	ldr	r2, [r7, #16]
 8014670:	f248 0360 	movw	r3, #32864	; 0x8060
 8014674:	4413      	add	r3, r2
 8014676:	781b      	ldrb	r3, [r3, #0]
 8014678:	4619      	mov	r1, r3
 801467a:	693a      	ldr	r2, [r7, #16]
 801467c:	f241 0308 	movw	r3, #4104	; 0x1008
 8014680:	440b      	add	r3, r1
 8014682:	00db      	lsls	r3, r3, #3
 8014684:	4413      	add	r3, r2
 8014686:	791a      	ldrb	r2, [r3, #4]
 8014688:	693b      	ldr	r3, [r7, #16]
 801468a:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801468c:	693a      	ldr	r2, [r7, #16]
 801468e:	f248 0360 	movw	r3, #32864	; 0x8060
 8014692:	4413      	add	r3, r2
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	4619      	mov	r1, r3
 8014698:	693a      	ldr	r2, [r7, #16]
 801469a:	f241 0308 	movw	r3, #4104	; 0x1008
 801469e:	440b      	add	r3, r1
 80146a0:	00db      	lsls	r3, r3, #3
 80146a2:	4413      	add	r3, r2
 80146a4:	795a      	ldrb	r2, [r3, #5]
 80146a6:	693b      	ldr	r3, [r7, #16]
 80146a8:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80146aa:	693a      	ldr	r2, [r7, #16]
 80146ac:	f248 0360 	movw	r3, #32864	; 0x8060
 80146b0:	4413      	add	r3, r2
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	3301      	adds	r3, #1
 80146b6:	b2d9      	uxtb	r1, r3
 80146b8:	693a      	ldr	r2, [r7, #16]
 80146ba:	f248 0360 	movw	r3, #32864	; 0x8060
 80146be:	4413      	add	r3, r2
 80146c0:	460a      	mov	r2, r1
 80146c2:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80146c4:	693a      	ldr	r2, [r7, #16]
 80146c6:	f248 0360 	movw	r3, #32864	; 0x8060
 80146ca:	4413      	add	r3, r2
 80146cc:	781b      	ldrb	r3, [r3, #0]
 80146ce:	2b04      	cmp	r3, #4
 80146d0:	d105      	bne.n	80146de <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 80146d2:	693a      	ldr	r2, [r7, #16]
 80146d4:	f248 0360 	movw	r3, #32864	; 0x8060
 80146d8:	4413      	add	r3, r2
 80146da:	2200      	movs	r2, #0
 80146dc:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	2212      	movs	r2, #18
 80146e2:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	3304      	adds	r3, #4
 80146e8:	781b      	ldrb	r3, [r3, #0]
 80146ea:	2b12      	cmp	r3, #18
 80146ec:	d805      	bhi.n	80146fa <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	3304      	adds	r3, #4
 80146f2:	781b      	ldrb	r3, [r3, #0]
 80146f4:	461a      	mov	r2, r3
 80146f6:	693b      	ldr	r3, [r7, #16]
 80146f8:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80146fa:	2300      	movs	r3, #0
}
 80146fc:	4618      	mov	r0, r3
 80146fe:	3718      	adds	r7, #24
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}

08014704 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8014704:	b480      	push	{r7}
 8014706:	b085      	sub	sp, #20
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	4608      	mov	r0, r1
 801470e:	4611      	mov	r1, r2
 8014710:	461a      	mov	r2, r3
 8014712:	4603      	mov	r3, r0
 8014714:	70fb      	strb	r3, [r7, #3]
 8014716:	460b      	mov	r3, r1
 8014718:	70bb      	strb	r3, [r7, #2]
 801471a:	4613      	mov	r3, r2
 801471c:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014724:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8014726:	68fa      	ldr	r2, [r7, #12]
 8014728:	f248 0361 	movw	r3, #32865	; 0x8061
 801472c:	4413      	add	r3, r2
 801472e:	781b      	ldrb	r3, [r3, #0]
 8014730:	4619      	mov	r1, r3
 8014732:	68fa      	ldr	r2, [r7, #12]
 8014734:	f241 0308 	movw	r3, #4104	; 0x1008
 8014738:	440b      	add	r3, r1
 801473a:	78b9      	ldrb	r1, [r7, #2]
 801473c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8014740:	68fa      	ldr	r2, [r7, #12]
 8014742:	f248 0361 	movw	r3, #32865	; 0x8061
 8014746:	4413      	add	r3, r2
 8014748:	781b      	ldrb	r3, [r3, #0]
 801474a:	4619      	mov	r1, r3
 801474c:	68fa      	ldr	r2, [r7, #12]
 801474e:	f241 0308 	movw	r3, #4104	; 0x1008
 8014752:	440b      	add	r3, r1
 8014754:	00db      	lsls	r3, r3, #3
 8014756:	4413      	add	r3, r2
 8014758:	787a      	ldrb	r2, [r7, #1]
 801475a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801475c:	68fa      	ldr	r2, [r7, #12]
 801475e:	f248 0361 	movw	r3, #32865	; 0x8061
 8014762:	4413      	add	r3, r2
 8014764:	781b      	ldrb	r3, [r3, #0]
 8014766:	4619      	mov	r1, r3
 8014768:	68fa      	ldr	r2, [r7, #12]
 801476a:	f241 0308 	movw	r3, #4104	; 0x1008
 801476e:	440b      	add	r3, r1
 8014770:	00db      	lsls	r3, r3, #3
 8014772:	4413      	add	r3, r2
 8014774:	2200      	movs	r2, #0
 8014776:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8014778:	68fa      	ldr	r2, [r7, #12]
 801477a:	f248 0361 	movw	r3, #32865	; 0x8061
 801477e:	4413      	add	r3, r2
 8014780:	781b      	ldrb	r3, [r3, #0]
 8014782:	3301      	adds	r3, #1
 8014784:	b2d9      	uxtb	r1, r3
 8014786:	68fa      	ldr	r2, [r7, #12]
 8014788:	f248 0361 	movw	r3, #32865	; 0x8061
 801478c:	4413      	add	r3, r2
 801478e:	460a      	mov	r2, r1
 8014790:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8014792:	68fa      	ldr	r2, [r7, #12]
 8014794:	f248 0361 	movw	r3, #32865	; 0x8061
 8014798:	4413      	add	r3, r2
 801479a:	781b      	ldrb	r3, [r3, #0]
 801479c:	2b04      	cmp	r3, #4
 801479e:	d105      	bne.n	80147ac <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 80147a0:	68fa      	ldr	r2, [r7, #12]
 80147a2:	f248 0361 	movw	r3, #32865	; 0x8061
 80147a6:	4413      	add	r3, r2
 80147a8:	2200      	movs	r2, #0
 80147aa:	701a      	strb	r2, [r3, #0]
  }
}
 80147ac:	bf00      	nop
 80147ae:	3714      	adds	r7, #20
 80147b0:	46bd      	mov	sp, r7
 80147b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b6:	4770      	bx	lr

080147b8 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b086      	sub	sp, #24
 80147bc:	af00      	add	r7, sp, #0
 80147be:	60f8      	str	r0, [r7, #12]
 80147c0:	460b      	mov	r3, r1
 80147c2:	607a      	str	r2, [r7, #4]
 80147c4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80147cc:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80147ce:	697a      	ldr	r2, [r7, #20]
 80147d0:	f248 0362 	movw	r3, #32866	; 0x8062
 80147d4:	4413      	add	r3, r2
 80147d6:	781b      	ldrb	r3, [r3, #0]
 80147d8:	2b01      	cmp	r3, #1
 80147da:	d10f      	bne.n	80147fc <SCSI_StartStopUnit+0x44>
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	3304      	adds	r3, #4
 80147e0:	781b      	ldrb	r3, [r3, #0]
 80147e2:	f003 0303 	and.w	r3, r3, #3
 80147e6:	2b02      	cmp	r3, #2
 80147e8:	d108      	bne.n	80147fc <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80147ea:	7af9      	ldrb	r1, [r7, #11]
 80147ec:	2324      	movs	r3, #36	; 0x24
 80147ee:	2205      	movs	r2, #5
 80147f0:	68f8      	ldr	r0, [r7, #12]
 80147f2:	f7ff ff87 	bl	8014704 <SCSI_SenseCode>

    return -1;
 80147f6:	f04f 33ff 	mov.w	r3, #4294967295
 80147fa:	e02c      	b.n	8014856 <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	3304      	adds	r3, #4
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	f003 0303 	and.w	r3, r3, #3
 8014806:	2b01      	cmp	r3, #1
 8014808:	d106      	bne.n	8014818 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801480a:	697a      	ldr	r2, [r7, #20]
 801480c:	f248 0362 	movw	r3, #32866	; 0x8062
 8014810:	4413      	add	r3, r2
 8014812:	2200      	movs	r2, #0
 8014814:	701a      	strb	r2, [r3, #0]
 8014816:	e01a      	b.n	801484e <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	3304      	adds	r3, #4
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	f003 0303 	and.w	r3, r3, #3
 8014822:	2b02      	cmp	r3, #2
 8014824:	d106      	bne.n	8014834 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8014826:	697a      	ldr	r2, [r7, #20]
 8014828:	f248 0362 	movw	r3, #32866	; 0x8062
 801482c:	4413      	add	r3, r2
 801482e:	2202      	movs	r2, #2
 8014830:	701a      	strb	r2, [r3, #0]
 8014832:	e00c      	b.n	801484e <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	3304      	adds	r3, #4
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	f003 0303 	and.w	r3, r3, #3
 801483e:	2b03      	cmp	r3, #3
 8014840:	d105      	bne.n	801484e <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014842:	697a      	ldr	r2, [r7, #20]
 8014844:	f248 0362 	movw	r3, #32866	; 0x8062
 8014848:	4413      	add	r3, r2
 801484a:	2200      	movs	r2, #0
 801484c:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801484e:	697b      	ldr	r3, [r7, #20]
 8014850:	2200      	movs	r2, #0
 8014852:	60da      	str	r2, [r3, #12]

  return 0;
 8014854:	2300      	movs	r3, #0
}
 8014856:	4618      	mov	r0, r3
 8014858:	3718      	adds	r7, #24
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}

0801485e <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801485e:	b480      	push	{r7}
 8014860:	b087      	sub	sp, #28
 8014862:	af00      	add	r7, sp, #0
 8014864:	60f8      	str	r0, [r7, #12]
 8014866:	460b      	mov	r3, r1
 8014868:	607a      	str	r2, [r7, #4]
 801486a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014872:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	3304      	adds	r3, #4
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d106      	bne.n	801488c <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801487e:	697a      	ldr	r2, [r7, #20]
 8014880:	f248 0362 	movw	r3, #32866	; 0x8062
 8014884:	4413      	add	r3, r2
 8014886:	2200      	movs	r2, #0
 8014888:	701a      	strb	r2, [r3, #0]
 801488a:	e005      	b.n	8014898 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 801488c:	697a      	ldr	r2, [r7, #20]
 801488e:	f248 0362 	movw	r3, #32866	; 0x8062
 8014892:	4413      	add	r3, r2
 8014894:	2201      	movs	r2, #1
 8014896:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 8014898:	697b      	ldr	r3, [r7, #20]
 801489a:	2200      	movs	r2, #0
 801489c:	60da      	str	r2, [r3, #12]

  return 0;
 801489e:	2300      	movs	r3, #0
}
 80148a0:	4618      	mov	r0, r3
 80148a2:	371c      	adds	r7, #28
 80148a4:	46bd      	mov	sp, r7
 80148a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148aa:	4770      	bx	lr

080148ac <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b086      	sub	sp, #24
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	60f8      	str	r0, [r7, #12]
 80148b4:	460b      	mov	r3, r1
 80148b6:	607a      	str	r2, [r7, #4]
 80148b8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80148c0:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80148c2:	697b      	ldr	r3, [r7, #20]
 80148c4:	7a1b      	ldrb	r3, [r3, #8]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	f040 8094 	bne.w	80149f4 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80148cc:	697a      	ldr	r2, [r7, #20]
 80148ce:	f248 031c 	movw	r3, #32796	; 0x801c
 80148d2:	4413      	add	r3, r2
 80148d4:	781b      	ldrb	r3, [r3, #0]
 80148d6:	b25b      	sxtb	r3, r3
 80148d8:	2b00      	cmp	r3, #0
 80148da:	db0c      	blt.n	80148f6 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80148dc:	697a      	ldr	r2, [r7, #20]
 80148de:	f248 031d 	movw	r3, #32797	; 0x801d
 80148e2:	4413      	add	r3, r2
 80148e4:	7819      	ldrb	r1, [r3, #0]
 80148e6:	2320      	movs	r3, #32
 80148e8:	2205      	movs	r2, #5
 80148ea:	68f8      	ldr	r0, [r7, #12]
 80148ec:	f7ff ff0a 	bl	8014704 <SCSI_SenseCode>
      return -1;
 80148f0:	f04f 33ff 	mov.w	r3, #4294967295
 80148f4:	e088      	b.n	8014a08 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80148f6:	697a      	ldr	r2, [r7, #20]
 80148f8:	f248 0362 	movw	r3, #32866	; 0x8062
 80148fc:	4413      	add	r3, r2
 80148fe:	781b      	ldrb	r3, [r3, #0]
 8014900:	2b02      	cmp	r3, #2
 8014902:	d108      	bne.n	8014916 <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014904:	7af9      	ldrb	r1, [r7, #11]
 8014906:	233a      	movs	r3, #58	; 0x3a
 8014908:	2202      	movs	r2, #2
 801490a:	68f8      	ldr	r0, [r7, #12]
 801490c:	f7ff fefa 	bl	8014704 <SCSI_SenseCode>

      return -1;
 8014910:	f04f 33ff 	mov.w	r3, #4294967295
 8014914:	e078      	b.n	8014a08 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801491c:	689b      	ldr	r3, [r3, #8]
 801491e:	7afa      	ldrb	r2, [r7, #11]
 8014920:	4610      	mov	r0, r2
 8014922:	4798      	blx	r3
 8014924:	4603      	mov	r3, r0
 8014926:	2b00      	cmp	r3, #0
 8014928:	d008      	beq.n	801493c <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801492a:	7af9      	ldrb	r1, [r7, #11]
 801492c:	233a      	movs	r3, #58	; 0x3a
 801492e:	2202      	movs	r2, #2
 8014930:	68f8      	ldr	r0, [r7, #12]
 8014932:	f7ff fee7 	bl	8014704 <SCSI_SenseCode>
      return -1;
 8014936:	f04f 33ff 	mov.w	r3, #4294967295
 801493a:	e065      	b.n	8014a08 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	3302      	adds	r3, #2
 8014940:	781b      	ldrb	r3, [r3, #0]
 8014942:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	3303      	adds	r3, #3
 8014948:	781b      	ldrb	r3, [r3, #0]
 801494a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801494c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	3304      	adds	r3, #4
 8014952:	781b      	ldrb	r3, [r3, #0]
 8014954:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014956:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014958:	687a      	ldr	r2, [r7, #4]
 801495a:	3205      	adds	r2, #5
 801495c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801495e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014960:	6979      	ldr	r1, [r7, #20]
 8014962:	f248 036c 	movw	r3, #32876	; 0x806c
 8014966:	440b      	add	r3, r1
 8014968:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	3307      	adds	r3, #7
 801496e:	781b      	ldrb	r3, [r3, #0]
 8014970:	021b      	lsls	r3, r3, #8
 8014972:	687a      	ldr	r2, [r7, #4]
 8014974:	3208      	adds	r2, #8
 8014976:	7812      	ldrb	r2, [r2, #0]
 8014978:	431a      	orrs	r2, r3
 801497a:	6979      	ldr	r1, [r7, #20]
 801497c:	f248 0370 	movw	r3, #32880	; 0x8070
 8014980:	440b      	add	r3, r1
 8014982:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014984:	697a      	ldr	r2, [r7, #20]
 8014986:	f248 036c 	movw	r3, #32876	; 0x806c
 801498a:	4413      	add	r3, r2
 801498c:	6818      	ldr	r0, [r3, #0]
 801498e:	697a      	ldr	r2, [r7, #20]
 8014990:	f248 0370 	movw	r3, #32880	; 0x8070
 8014994:	4413      	add	r3, r2
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	7af9      	ldrb	r1, [r7, #11]
 801499a:	4602      	mov	r2, r0
 801499c:	68f8      	ldr	r0, [r7, #12]
 801499e:	f000 faeb 	bl	8014f78 <SCSI_CheckAddressRange>
 80149a2:	4603      	mov	r3, r0
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	da02      	bge.n	80149ae <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80149a8:	f04f 33ff 	mov.w	r3, #4294967295
 80149ac:	e02c      	b.n	8014a08 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80149ae:	697a      	ldr	r2, [r7, #20]
 80149b0:	f248 0318 	movw	r3, #32792	; 0x8018
 80149b4:	4413      	add	r3, r2
 80149b6:	681a      	ldr	r2, [r3, #0]
 80149b8:	6979      	ldr	r1, [r7, #20]
 80149ba:	f248 0370 	movw	r3, #32880	; 0x8070
 80149be:	440b      	add	r3, r1
 80149c0:	6819      	ldr	r1, [r3, #0]
 80149c2:	6978      	ldr	r0, [r7, #20]
 80149c4:	f248 0364 	movw	r3, #32868	; 0x8064
 80149c8:	4403      	add	r3, r0
 80149ca:	881b      	ldrh	r3, [r3, #0]
 80149cc:	fb03 f301 	mul.w	r3, r3, r1
 80149d0:	429a      	cmp	r2, r3
 80149d2:	d00c      	beq.n	80149ee <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80149d4:	697a      	ldr	r2, [r7, #20]
 80149d6:	f248 031d 	movw	r3, #32797	; 0x801d
 80149da:	4413      	add	r3, r2
 80149dc:	7819      	ldrb	r1, [r3, #0]
 80149de:	2320      	movs	r3, #32
 80149e0:	2205      	movs	r2, #5
 80149e2:	68f8      	ldr	r0, [r7, #12]
 80149e4:	f7ff fe8e 	bl	8014704 <SCSI_SenseCode>
      return -1;
 80149e8:	f04f 33ff 	mov.w	r3, #4294967295
 80149ec:	e00c      	b.n	8014a08 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80149ee:	697b      	ldr	r3, [r7, #20]
 80149f0:	2202      	movs	r2, #2
 80149f2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80149f4:	697b      	ldr	r3, [r7, #20]
 80149f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80149fa:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80149fc:	7afb      	ldrb	r3, [r7, #11]
 80149fe:	4619      	mov	r1, r3
 8014a00:	68f8      	ldr	r0, [r7, #12]
 8014a02:	f000 fadd 	bl	8014fc0 <SCSI_ProcessRead>
 8014a06:	4603      	mov	r3, r0
}
 8014a08:	4618      	mov	r0, r3
 8014a0a:	3718      	adds	r7, #24
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd80      	pop	{r7, pc}

08014a10 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b086      	sub	sp, #24
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	60f8      	str	r0, [r7, #12]
 8014a18:	460b      	mov	r3, r1
 8014a1a:	607a      	str	r2, [r7, #4]
 8014a1c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014a24:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014a26:	697b      	ldr	r3, [r7, #20]
 8014a28:	7a1b      	ldrb	r3, [r3, #8]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	f040 809e 	bne.w	8014b6c <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014a30:	697a      	ldr	r2, [r7, #20]
 8014a32:	f248 031c 	movw	r3, #32796	; 0x801c
 8014a36:	4413      	add	r3, r2
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	b25b      	sxtb	r3, r3
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	db0c      	blt.n	8014a5a <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014a40:	697a      	ldr	r2, [r7, #20]
 8014a42:	f248 031d 	movw	r3, #32797	; 0x801d
 8014a46:	4413      	add	r3, r2
 8014a48:	7819      	ldrb	r1, [r3, #0]
 8014a4a:	2320      	movs	r3, #32
 8014a4c:	2205      	movs	r2, #5
 8014a4e:	68f8      	ldr	r0, [r7, #12]
 8014a50:	f7ff fe58 	bl	8014704 <SCSI_SenseCode>
      return -1;
 8014a54:	f04f 33ff 	mov.w	r3, #4294967295
 8014a58:	e092      	b.n	8014b80 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014a5a:	697a      	ldr	r2, [r7, #20]
 8014a5c:	f248 0362 	movw	r3, #32866	; 0x8062
 8014a60:	4413      	add	r3, r2
 8014a62:	781b      	ldrb	r3, [r3, #0]
 8014a64:	2b02      	cmp	r3, #2
 8014a66:	d108      	bne.n	8014a7a <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014a68:	7af9      	ldrb	r1, [r7, #11]
 8014a6a:	233a      	movs	r3, #58	; 0x3a
 8014a6c:	2202      	movs	r2, #2
 8014a6e:	68f8      	ldr	r0, [r7, #12]
 8014a70:	f7ff fe48 	bl	8014704 <SCSI_SenseCode>
      return -1;
 8014a74:	f04f 33ff 	mov.w	r3, #4294967295
 8014a78:	e082      	b.n	8014b80 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014a80:	689b      	ldr	r3, [r3, #8]
 8014a82:	7afa      	ldrb	r2, [r7, #11]
 8014a84:	4610      	mov	r0, r2
 8014a86:	4798      	blx	r3
 8014a88:	4603      	mov	r3, r0
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d008      	beq.n	8014aa0 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014a8e:	7af9      	ldrb	r1, [r7, #11]
 8014a90:	233a      	movs	r3, #58	; 0x3a
 8014a92:	2202      	movs	r2, #2
 8014a94:	68f8      	ldr	r0, [r7, #12]
 8014a96:	f7ff fe35 	bl	8014704 <SCSI_SenseCode>
      return -1;
 8014a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8014a9e:	e06f      	b.n	8014b80 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	3302      	adds	r3, #2
 8014aa4:	781b      	ldrb	r3, [r3, #0]
 8014aa6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	3303      	adds	r3, #3
 8014aac:	781b      	ldrb	r3, [r3, #0]
 8014aae:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014ab0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	3304      	adds	r3, #4
 8014ab6:	781b      	ldrb	r3, [r3, #0]
 8014ab8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014aba:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014abc:	687a      	ldr	r2, [r7, #4]
 8014abe:	3205      	adds	r2, #5
 8014ac0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014ac2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014ac4:	6979      	ldr	r1, [r7, #20]
 8014ac6:	f248 036c 	movw	r3, #32876	; 0x806c
 8014aca:	440b      	add	r3, r1
 8014acc:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	3306      	adds	r3, #6
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	3307      	adds	r3, #7
 8014ada:	781b      	ldrb	r3, [r3, #0]
 8014adc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014ade:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	3308      	adds	r3, #8
 8014ae4:	781b      	ldrb	r3, [r3, #0]
 8014ae6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014ae8:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014aea:	687a      	ldr	r2, [r7, #4]
 8014aec:	3209      	adds	r2, #9
 8014aee:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014af0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014af2:	6979      	ldr	r1, [r7, #20]
 8014af4:	f248 0370 	movw	r3, #32880	; 0x8070
 8014af8:	440b      	add	r3, r1
 8014afa:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014afc:	697a      	ldr	r2, [r7, #20]
 8014afe:	f248 036c 	movw	r3, #32876	; 0x806c
 8014b02:	4413      	add	r3, r2
 8014b04:	6818      	ldr	r0, [r3, #0]
 8014b06:	697a      	ldr	r2, [r7, #20]
 8014b08:	f248 0370 	movw	r3, #32880	; 0x8070
 8014b0c:	4413      	add	r3, r2
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	7af9      	ldrb	r1, [r7, #11]
 8014b12:	4602      	mov	r2, r0
 8014b14:	68f8      	ldr	r0, [r7, #12]
 8014b16:	f000 fa2f 	bl	8014f78 <SCSI_CheckAddressRange>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	da02      	bge.n	8014b26 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014b20:	f04f 33ff 	mov.w	r3, #4294967295
 8014b24:	e02c      	b.n	8014b80 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014b26:	697a      	ldr	r2, [r7, #20]
 8014b28:	f248 0318 	movw	r3, #32792	; 0x8018
 8014b2c:	4413      	add	r3, r2
 8014b2e:	681a      	ldr	r2, [r3, #0]
 8014b30:	6979      	ldr	r1, [r7, #20]
 8014b32:	f248 0370 	movw	r3, #32880	; 0x8070
 8014b36:	440b      	add	r3, r1
 8014b38:	6819      	ldr	r1, [r3, #0]
 8014b3a:	6978      	ldr	r0, [r7, #20]
 8014b3c:	f248 0364 	movw	r3, #32868	; 0x8064
 8014b40:	4403      	add	r3, r0
 8014b42:	881b      	ldrh	r3, [r3, #0]
 8014b44:	fb03 f301 	mul.w	r3, r3, r1
 8014b48:	429a      	cmp	r2, r3
 8014b4a:	d00c      	beq.n	8014b66 <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014b4c:	697a      	ldr	r2, [r7, #20]
 8014b4e:	f248 031d 	movw	r3, #32797	; 0x801d
 8014b52:	4413      	add	r3, r2
 8014b54:	7819      	ldrb	r1, [r3, #0]
 8014b56:	2320      	movs	r3, #32
 8014b58:	2205      	movs	r2, #5
 8014b5a:	68f8      	ldr	r0, [r7, #12]
 8014b5c:	f7ff fdd2 	bl	8014704 <SCSI_SenseCode>
      return -1;
 8014b60:	f04f 33ff 	mov.w	r3, #4294967295
 8014b64:	e00c      	b.n	8014b80 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	2202      	movs	r2, #2
 8014b6a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014b6c:	697b      	ldr	r3, [r7, #20]
 8014b6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014b72:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014b74:	7afb      	ldrb	r3, [r7, #11]
 8014b76:	4619      	mov	r1, r3
 8014b78:	68f8      	ldr	r0, [r7, #12]
 8014b7a:	f000 fa21 	bl	8014fc0 <SCSI_ProcessRead>
 8014b7e:	4603      	mov	r3, r0
}
 8014b80:	4618      	mov	r0, r3
 8014b82:	3718      	adds	r7, #24
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}

08014b88 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b086      	sub	sp, #24
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	60f8      	str	r0, [r7, #12]
 8014b90:	460b      	mov	r3, r1
 8014b92:	607a      	str	r2, [r7, #4]
 8014b94:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014b9c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014b9e:	697b      	ldr	r3, [r7, #20]
 8014ba0:	7a1b      	ldrb	r3, [r3, #8]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	f040 80be 	bne.w	8014d24 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014ba8:	697a      	ldr	r2, [r7, #20]
 8014baa:	f248 0318 	movw	r3, #32792	; 0x8018
 8014bae:	4413      	add	r3, r2
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d10c      	bne.n	8014bd0 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014bb6:	697a      	ldr	r2, [r7, #20]
 8014bb8:	f248 031d 	movw	r3, #32797	; 0x801d
 8014bbc:	4413      	add	r3, r2
 8014bbe:	7819      	ldrb	r1, [r3, #0]
 8014bc0:	2320      	movs	r3, #32
 8014bc2:	2205      	movs	r2, #5
 8014bc4:	68f8      	ldr	r0, [r7, #12]
 8014bc6:	f7ff fd9d 	bl	8014704 <SCSI_SenseCode>
      return -1;
 8014bca:	f04f 33ff 	mov.w	r3, #4294967295
 8014bce:	e0af      	b.n	8014d30 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014bd0:	697a      	ldr	r2, [r7, #20]
 8014bd2:	f248 031c 	movw	r3, #32796	; 0x801c
 8014bd6:	4413      	add	r3, r2
 8014bd8:	781b      	ldrb	r3, [r3, #0]
 8014bda:	b25b      	sxtb	r3, r3
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	da0c      	bge.n	8014bfa <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014be0:	697a      	ldr	r2, [r7, #20]
 8014be2:	f248 031d 	movw	r3, #32797	; 0x801d
 8014be6:	4413      	add	r3, r2
 8014be8:	7819      	ldrb	r1, [r3, #0]
 8014bea:	2320      	movs	r3, #32
 8014bec:	2205      	movs	r2, #5
 8014bee:	68f8      	ldr	r0, [r7, #12]
 8014bf0:	f7ff fd88 	bl	8014704 <SCSI_SenseCode>
      return -1;
 8014bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8014bf8:	e09a      	b.n	8014d30 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c00:	689b      	ldr	r3, [r3, #8]
 8014c02:	7afa      	ldrb	r2, [r7, #11]
 8014c04:	4610      	mov	r0, r2
 8014c06:	4798      	blx	r3
 8014c08:	4603      	mov	r3, r0
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d008      	beq.n	8014c20 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014c0e:	7af9      	ldrb	r1, [r7, #11]
 8014c10:	233a      	movs	r3, #58	; 0x3a
 8014c12:	2202      	movs	r2, #2
 8014c14:	68f8      	ldr	r0, [r7, #12]
 8014c16:	f7ff fd75 	bl	8014704 <SCSI_SenseCode>
      return -1;
 8014c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c1e:	e087      	b.n	8014d30 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c26:	68db      	ldr	r3, [r3, #12]
 8014c28:	7afa      	ldrb	r2, [r7, #11]
 8014c2a:	4610      	mov	r0, r2
 8014c2c:	4798      	blx	r3
 8014c2e:	4603      	mov	r3, r0
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d008      	beq.n	8014c46 <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014c34:	7af9      	ldrb	r1, [r7, #11]
 8014c36:	2327      	movs	r3, #39	; 0x27
 8014c38:	2202      	movs	r2, #2
 8014c3a:	68f8      	ldr	r0, [r7, #12]
 8014c3c:	f7ff fd62 	bl	8014704 <SCSI_SenseCode>
      return -1;
 8014c40:	f04f 33ff 	mov.w	r3, #4294967295
 8014c44:	e074      	b.n	8014d30 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	3302      	adds	r3, #2
 8014c4a:	781b      	ldrb	r3, [r3, #0]
 8014c4c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	3303      	adds	r3, #3
 8014c52:	781b      	ldrb	r3, [r3, #0]
 8014c54:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014c56:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	3304      	adds	r3, #4
 8014c5c:	781b      	ldrb	r3, [r3, #0]
 8014c5e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014c60:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014c62:	687a      	ldr	r2, [r7, #4]
 8014c64:	3205      	adds	r2, #5
 8014c66:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014c68:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014c6a:	6979      	ldr	r1, [r7, #20]
 8014c6c:	f248 036c 	movw	r3, #32876	; 0x806c
 8014c70:	440b      	add	r3, r1
 8014c72:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	3307      	adds	r3, #7
 8014c78:	781b      	ldrb	r3, [r3, #0]
 8014c7a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8014c7c:	687a      	ldr	r2, [r7, #4]
 8014c7e:	3208      	adds	r2, #8
 8014c80:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014c82:	431a      	orrs	r2, r3
 8014c84:	6979      	ldr	r1, [r7, #20]
 8014c86:	f248 0370 	movw	r3, #32880	; 0x8070
 8014c8a:	440b      	add	r3, r1
 8014c8c:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014c8e:	697a      	ldr	r2, [r7, #20]
 8014c90:	f248 036c 	movw	r3, #32876	; 0x806c
 8014c94:	4413      	add	r3, r2
 8014c96:	6818      	ldr	r0, [r3, #0]
 8014c98:	697a      	ldr	r2, [r7, #20]
 8014c9a:	f248 0370 	movw	r3, #32880	; 0x8070
 8014c9e:	4413      	add	r3, r2
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	7af9      	ldrb	r1, [r7, #11]
 8014ca4:	4602      	mov	r2, r0
 8014ca6:	68f8      	ldr	r0, [r7, #12]
 8014ca8:	f000 f966 	bl	8014f78 <SCSI_CheckAddressRange>
 8014cac:	4603      	mov	r3, r0
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	da02      	bge.n	8014cb8 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8014cb6:	e03b      	b.n	8014d30 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014cb8:	697a      	ldr	r2, [r7, #20]
 8014cba:	f248 0370 	movw	r3, #32880	; 0x8070
 8014cbe:	4413      	add	r3, r2
 8014cc0:	681a      	ldr	r2, [r3, #0]
 8014cc2:	6979      	ldr	r1, [r7, #20]
 8014cc4:	f248 0364 	movw	r3, #32868	; 0x8064
 8014cc8:	440b      	add	r3, r1
 8014cca:	881b      	ldrh	r3, [r3, #0]
 8014ccc:	fb03 f302 	mul.w	r3, r3, r2
 8014cd0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014cd2:	697a      	ldr	r2, [r7, #20]
 8014cd4:	f248 0318 	movw	r3, #32792	; 0x8018
 8014cd8:	4413      	add	r3, r2
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	693a      	ldr	r2, [r7, #16]
 8014cde:	429a      	cmp	r2, r3
 8014ce0:	d00c      	beq.n	8014cfc <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014ce2:	697a      	ldr	r2, [r7, #20]
 8014ce4:	f248 031d 	movw	r3, #32797	; 0x801d
 8014ce8:	4413      	add	r3, r2
 8014cea:	7819      	ldrb	r1, [r3, #0]
 8014cec:	2320      	movs	r3, #32
 8014cee:	2205      	movs	r2, #5
 8014cf0:	68f8      	ldr	r0, [r7, #12]
 8014cf2:	f7ff fd07 	bl	8014704 <SCSI_SenseCode>
      return -1;
 8014cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8014cfa:	e019      	b.n	8014d30 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014cfc:	693b      	ldr	r3, [r7, #16]
 8014cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014d02:	bf28      	it	cs
 8014d04:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014d08:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014d0a:	697b      	ldr	r3, [r7, #20]
 8014d0c:	2201      	movs	r2, #1
 8014d0e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014d10:	697b      	ldr	r3, [r7, #20]
 8014d12:	f103 0210 	add.w	r2, r3, #16
 8014d16:	693b      	ldr	r3, [r7, #16]
 8014d18:	2101      	movs	r1, #1
 8014d1a:	68f8      	ldr	r0, [r7, #12]
 8014d1c:	f004 fb19 	bl	8019352 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014d20:	2300      	movs	r3, #0
 8014d22:	e005      	b.n	8014d30 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8014d24:	7afb      	ldrb	r3, [r7, #11]
 8014d26:	4619      	mov	r1, r3
 8014d28:	68f8      	ldr	r0, [r7, #12]
 8014d2a:	f000 f9d7 	bl	80150dc <SCSI_ProcessWrite>
 8014d2e:	4603      	mov	r3, r0
}
 8014d30:	4618      	mov	r0, r3
 8014d32:	3718      	adds	r7, #24
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}

08014d38 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b086      	sub	sp, #24
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	60f8      	str	r0, [r7, #12]
 8014d40:	460b      	mov	r3, r1
 8014d42:	607a      	str	r2, [r7, #4]
 8014d44:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d4c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	7a1b      	ldrb	r3, [r3, #8]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	f040 80ce 	bne.w	8014ef4 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014d58:	697a      	ldr	r2, [r7, #20]
 8014d5a:	f248 0318 	movw	r3, #32792	; 0x8018
 8014d5e:	4413      	add	r3, r2
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d10c      	bne.n	8014d80 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d66:	697a      	ldr	r2, [r7, #20]
 8014d68:	f248 031d 	movw	r3, #32797	; 0x801d
 8014d6c:	4413      	add	r3, r2
 8014d6e:	7819      	ldrb	r1, [r3, #0]
 8014d70:	2320      	movs	r3, #32
 8014d72:	2205      	movs	r2, #5
 8014d74:	68f8      	ldr	r0, [r7, #12]
 8014d76:	f7ff fcc5 	bl	8014704 <SCSI_SenseCode>
      return -1;
 8014d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d7e:	e0bf      	b.n	8014f00 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014d80:	697a      	ldr	r2, [r7, #20]
 8014d82:	f248 031c 	movw	r3, #32796	; 0x801c
 8014d86:	4413      	add	r3, r2
 8014d88:	781b      	ldrb	r3, [r3, #0]
 8014d8a:	b25b      	sxtb	r3, r3
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	da0c      	bge.n	8014daa <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d90:	697a      	ldr	r2, [r7, #20]
 8014d92:	f248 031d 	movw	r3, #32797	; 0x801d
 8014d96:	4413      	add	r3, r2
 8014d98:	7819      	ldrb	r1, [r3, #0]
 8014d9a:	2320      	movs	r3, #32
 8014d9c:	2205      	movs	r2, #5
 8014d9e:	68f8      	ldr	r0, [r7, #12]
 8014da0:	f7ff fcb0 	bl	8014704 <SCSI_SenseCode>
      return -1;
 8014da4:	f04f 33ff 	mov.w	r3, #4294967295
 8014da8:	e0aa      	b.n	8014f00 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014db0:	689b      	ldr	r3, [r3, #8]
 8014db2:	7afa      	ldrb	r2, [r7, #11]
 8014db4:	4610      	mov	r0, r2
 8014db6:	4798      	blx	r3
 8014db8:	4603      	mov	r3, r0
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d00b      	beq.n	8014dd6 <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014dbe:	7af9      	ldrb	r1, [r7, #11]
 8014dc0:	233a      	movs	r3, #58	; 0x3a
 8014dc2:	2202      	movs	r2, #2
 8014dc4:	68f8      	ldr	r0, [r7, #12]
 8014dc6:	f7ff fc9d 	bl	8014704 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014dca:	697b      	ldr	r3, [r7, #20]
 8014dcc:	2205      	movs	r2, #5
 8014dce:	721a      	strb	r2, [r3, #8]
      return -1;
 8014dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8014dd4:	e094      	b.n	8014f00 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014ddc:	68db      	ldr	r3, [r3, #12]
 8014dde:	7afa      	ldrb	r2, [r7, #11]
 8014de0:	4610      	mov	r0, r2
 8014de2:	4798      	blx	r3
 8014de4:	4603      	mov	r3, r0
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d00b      	beq.n	8014e02 <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014dea:	7af9      	ldrb	r1, [r7, #11]
 8014dec:	2327      	movs	r3, #39	; 0x27
 8014dee:	2202      	movs	r2, #2
 8014df0:	68f8      	ldr	r0, [r7, #12]
 8014df2:	f7ff fc87 	bl	8014704 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	2205      	movs	r2, #5
 8014dfa:	721a      	strb	r2, [r3, #8]
      return -1;
 8014dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8014e00:	e07e      	b.n	8014f00 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	3302      	adds	r3, #2
 8014e06:	781b      	ldrb	r3, [r3, #0]
 8014e08:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	3303      	adds	r3, #3
 8014e0e:	781b      	ldrb	r3, [r3, #0]
 8014e10:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014e12:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	3304      	adds	r3, #4
 8014e18:	781b      	ldrb	r3, [r3, #0]
 8014e1a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014e1c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014e1e:	687a      	ldr	r2, [r7, #4]
 8014e20:	3205      	adds	r2, #5
 8014e22:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014e24:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014e26:	6979      	ldr	r1, [r7, #20]
 8014e28:	f248 036c 	movw	r3, #32876	; 0x806c
 8014e2c:	440b      	add	r3, r1
 8014e2e:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	3306      	adds	r3, #6
 8014e34:	781b      	ldrb	r3, [r3, #0]
 8014e36:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	3307      	adds	r3, #7
 8014e3c:	781b      	ldrb	r3, [r3, #0]
 8014e3e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014e40:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	3308      	adds	r3, #8
 8014e46:	781b      	ldrb	r3, [r3, #0]
 8014e48:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014e4a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014e4c:	687a      	ldr	r2, [r7, #4]
 8014e4e:	3209      	adds	r2, #9
 8014e50:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014e52:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014e54:	6979      	ldr	r1, [r7, #20]
 8014e56:	f248 0370 	movw	r3, #32880	; 0x8070
 8014e5a:	440b      	add	r3, r1
 8014e5c:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014e5e:	697a      	ldr	r2, [r7, #20]
 8014e60:	f248 036c 	movw	r3, #32876	; 0x806c
 8014e64:	4413      	add	r3, r2
 8014e66:	6818      	ldr	r0, [r3, #0]
 8014e68:	697a      	ldr	r2, [r7, #20]
 8014e6a:	f248 0370 	movw	r3, #32880	; 0x8070
 8014e6e:	4413      	add	r3, r2
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	7af9      	ldrb	r1, [r7, #11]
 8014e74:	4602      	mov	r2, r0
 8014e76:	68f8      	ldr	r0, [r7, #12]
 8014e78:	f000 f87e 	bl	8014f78 <SCSI_CheckAddressRange>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	da02      	bge.n	8014e88 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014e82:	f04f 33ff 	mov.w	r3, #4294967295
 8014e86:	e03b      	b.n	8014f00 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014e88:	697a      	ldr	r2, [r7, #20]
 8014e8a:	f248 0370 	movw	r3, #32880	; 0x8070
 8014e8e:	4413      	add	r3, r2
 8014e90:	681a      	ldr	r2, [r3, #0]
 8014e92:	6979      	ldr	r1, [r7, #20]
 8014e94:	f248 0364 	movw	r3, #32868	; 0x8064
 8014e98:	440b      	add	r3, r1
 8014e9a:	881b      	ldrh	r3, [r3, #0]
 8014e9c:	fb03 f302 	mul.w	r3, r3, r2
 8014ea0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014ea2:	697a      	ldr	r2, [r7, #20]
 8014ea4:	f248 0318 	movw	r3, #32792	; 0x8018
 8014ea8:	4413      	add	r3, r2
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	693a      	ldr	r2, [r7, #16]
 8014eae:	429a      	cmp	r2, r3
 8014eb0:	d00c      	beq.n	8014ecc <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014eb2:	697a      	ldr	r2, [r7, #20]
 8014eb4:	f248 031d 	movw	r3, #32797	; 0x801d
 8014eb8:	4413      	add	r3, r2
 8014eba:	7819      	ldrb	r1, [r3, #0]
 8014ebc:	2320      	movs	r3, #32
 8014ebe:	2205      	movs	r2, #5
 8014ec0:	68f8      	ldr	r0, [r7, #12]
 8014ec2:	f7ff fc1f 	bl	8014704 <SCSI_SenseCode>
      return -1;
 8014ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8014eca:	e019      	b.n	8014f00 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014ecc:	693b      	ldr	r3, [r7, #16]
 8014ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014ed2:	bf28      	it	cs
 8014ed4:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014ed8:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	2201      	movs	r2, #1
 8014ede:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	f103 0210 	add.w	r2, r3, #16
 8014ee6:	693b      	ldr	r3, [r7, #16]
 8014ee8:	2101      	movs	r1, #1
 8014eea:	68f8      	ldr	r0, [r7, #12]
 8014eec:	f004 fa31 	bl	8019352 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	e005      	b.n	8014f00 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8014ef4:	7afb      	ldrb	r3, [r7, #11]
 8014ef6:	4619      	mov	r1, r3
 8014ef8:	68f8      	ldr	r0, [r7, #12]
 8014efa:	f000 f8ef 	bl	80150dc <SCSI_ProcessWrite>
 8014efe:	4603      	mov	r3, r0
}
 8014f00:	4618      	mov	r0, r3
 8014f02:	3718      	adds	r7, #24
 8014f04:	46bd      	mov	sp, r7
 8014f06:	bd80      	pop	{r7, pc}

08014f08 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b086      	sub	sp, #24
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	60f8      	str	r0, [r7, #12]
 8014f10:	460b      	mov	r3, r1
 8014f12:	607a      	str	r2, [r7, #4]
 8014f14:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f1c:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	3301      	adds	r3, #1
 8014f22:	781b      	ldrb	r3, [r3, #0]
 8014f24:	f003 0302 	and.w	r3, r3, #2
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d008      	beq.n	8014f3e <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014f2c:	7af9      	ldrb	r1, [r7, #11]
 8014f2e:	2324      	movs	r3, #36	; 0x24
 8014f30:	2205      	movs	r2, #5
 8014f32:	68f8      	ldr	r0, [r7, #12]
 8014f34:	f7ff fbe6 	bl	8014704 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8014f38:	f04f 33ff 	mov.w	r3, #4294967295
 8014f3c:	e018      	b.n	8014f70 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8014f3e:	697a      	ldr	r2, [r7, #20]
 8014f40:	f248 036c 	movw	r3, #32876	; 0x806c
 8014f44:	4413      	add	r3, r2
 8014f46:	6818      	ldr	r0, [r3, #0]
 8014f48:	697a      	ldr	r2, [r7, #20]
 8014f4a:	f248 0370 	movw	r3, #32880	; 0x8070
 8014f4e:	4413      	add	r3, r2
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	7af9      	ldrb	r1, [r7, #11]
 8014f54:	4602      	mov	r2, r0
 8014f56:	68f8      	ldr	r0, [r7, #12]
 8014f58:	f000 f80e 	bl	8014f78 <SCSI_CheckAddressRange>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	da02      	bge.n	8014f68 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 8014f62:	f04f 33ff 	mov.w	r3, #4294967295
 8014f66:	e003      	b.n	8014f70 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	60da      	str	r2, [r3, #12]

  return 0;
 8014f6e:	2300      	movs	r3, #0
}
 8014f70:	4618      	mov	r0, r3
 8014f72:	3718      	adds	r7, #24
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}

08014f78 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b086      	sub	sp, #24
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	60f8      	str	r0, [r7, #12]
 8014f80:	607a      	str	r2, [r7, #4]
 8014f82:	603b      	str	r3, [r7, #0]
 8014f84:	460b      	mov	r3, r1
 8014f86:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f8e:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8014f90:	687a      	ldr	r2, [r7, #4]
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	441a      	add	r2, r3
 8014f96:	6979      	ldr	r1, [r7, #20]
 8014f98:	f248 0368 	movw	r3, #32872	; 0x8068
 8014f9c:	440b      	add	r3, r1
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	d908      	bls.n	8014fb6 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8014fa4:	7af9      	ldrb	r1, [r7, #11]
 8014fa6:	2321      	movs	r3, #33	; 0x21
 8014fa8:	2205      	movs	r2, #5
 8014faa:	68f8      	ldr	r0, [r7, #12]
 8014fac:	f7ff fbaa 	bl	8014704 <SCSI_SenseCode>
    return -1;
 8014fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8014fb4:	e000      	b.n	8014fb8 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 8014fb6:	2300      	movs	r3, #0
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3718      	adds	r7, #24
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}

08014fc0 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8014fc0:	b5b0      	push	{r4, r5, r7, lr}
 8014fc2:	b084      	sub	sp, #16
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
 8014fc8:	460b      	mov	r3, r1
 8014fca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014fd2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014fd4:	68fa      	ldr	r2, [r7, #12]
 8014fd6:	f248 0370 	movw	r3, #32880	; 0x8070
 8014fda:	4413      	add	r3, r2
 8014fdc:	681a      	ldr	r2, [r3, #0]
 8014fde:	68f9      	ldr	r1, [r7, #12]
 8014fe0:	f248 0364 	movw	r3, #32868	; 0x8064
 8014fe4:	440b      	add	r3, r1
 8014fe6:	881b      	ldrh	r3, [r3, #0]
 8014fe8:	fb03 f302 	mul.w	r3, r3, r2
 8014fec:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8014fee:	68bb      	ldr	r3, [r7, #8]
 8014ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014ff4:	bf28      	it	cs
 8014ff6:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014ffa:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015002:	691c      	ldr	r4, [r3, #16]
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	f103 0110 	add.w	r1, r3, #16
 801500a:	68fa      	ldr	r2, [r7, #12]
 801500c:	f248 036c 	movw	r3, #32876	; 0x806c
 8015010:	4413      	add	r3, r2
 8015012:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8015014:	68fa      	ldr	r2, [r7, #12]
 8015016:	f248 0364 	movw	r3, #32868	; 0x8064
 801501a:	4413      	add	r3, r2
 801501c:	881b      	ldrh	r3, [r3, #0]
 801501e:	461a      	mov	r2, r3
 8015020:	68bb      	ldr	r3, [r7, #8]
 8015022:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8015026:	b29b      	uxth	r3, r3
 8015028:	78f8      	ldrb	r0, [r7, #3]
 801502a:	462a      	mov	r2, r5
 801502c:	47a0      	blx	r4
 801502e:	4603      	mov	r3, r0
 8015030:	2b00      	cmp	r3, #0
 8015032:	da08      	bge.n	8015046 <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8015034:	78f9      	ldrb	r1, [r7, #3]
 8015036:	2311      	movs	r3, #17
 8015038:	2204      	movs	r2, #4
 801503a:	6878      	ldr	r0, [r7, #4]
 801503c:	f7ff fb62 	bl	8014704 <SCSI_SenseCode>
    return -1;
 8015040:	f04f 33ff 	mov.w	r3, #4294967295
 8015044:	e046      	b.n	80150d4 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	f103 0210 	add.w	r2, r3, #16
 801504c:	68bb      	ldr	r3, [r7, #8]
 801504e:	2181      	movs	r1, #129	; 0x81
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	f004 f95d 	bl	8019310 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015056:	68fa      	ldr	r2, [r7, #12]
 8015058:	f248 036c 	movw	r3, #32876	; 0x806c
 801505c:	4413      	add	r3, r2
 801505e:	681a      	ldr	r2, [r3, #0]
 8015060:	68f9      	ldr	r1, [r7, #12]
 8015062:	f248 0364 	movw	r3, #32868	; 0x8064
 8015066:	440b      	add	r3, r1
 8015068:	881b      	ldrh	r3, [r3, #0]
 801506a:	4619      	mov	r1, r3
 801506c:	68bb      	ldr	r3, [r7, #8]
 801506e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015072:	441a      	add	r2, r3
 8015074:	68f9      	ldr	r1, [r7, #12]
 8015076:	f248 036c 	movw	r3, #32876	; 0x806c
 801507a:	440b      	add	r3, r1
 801507c:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801507e:	68fa      	ldr	r2, [r7, #12]
 8015080:	f248 0370 	movw	r3, #32880	; 0x8070
 8015084:	4413      	add	r3, r2
 8015086:	681a      	ldr	r2, [r3, #0]
 8015088:	68f9      	ldr	r1, [r7, #12]
 801508a:	f248 0364 	movw	r3, #32868	; 0x8064
 801508e:	440b      	add	r3, r1
 8015090:	881b      	ldrh	r3, [r3, #0]
 8015092:	4619      	mov	r1, r3
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	fbb3 f3f1 	udiv	r3, r3, r1
 801509a:	1ad2      	subs	r2, r2, r3
 801509c:	68f9      	ldr	r1, [r7, #12]
 801509e:	f248 0370 	movw	r3, #32880	; 0x8070
 80150a2:	440b      	add	r3, r1
 80150a4:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80150a6:	68fa      	ldr	r2, [r7, #12]
 80150a8:	f248 0338 	movw	r3, #32824	; 0x8038
 80150ac:	4413      	add	r3, r2
 80150ae:	681a      	ldr	r2, [r3, #0]
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	1ad2      	subs	r2, r2, r3
 80150b4:	68f9      	ldr	r1, [r7, #12]
 80150b6:	f248 0338 	movw	r3, #32824	; 0x8038
 80150ba:	440b      	add	r3, r1
 80150bc:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80150be:	68fa      	ldr	r2, [r7, #12]
 80150c0:	f248 0370 	movw	r3, #32880	; 0x8070
 80150c4:	4413      	add	r3, r2
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d102      	bne.n	80150d2 <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	2203      	movs	r2, #3
 80150d0:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80150d2:	2300      	movs	r3, #0
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	3710      	adds	r7, #16
 80150d8:	46bd      	mov	sp, r7
 80150da:	bdb0      	pop	{r4, r5, r7, pc}

080150dc <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80150dc:	b5b0      	push	{r4, r5, r7, lr}
 80150de:	b084      	sub	sp, #16
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	460b      	mov	r3, r1
 80150e6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80150ee:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80150f0:	68fa      	ldr	r2, [r7, #12]
 80150f2:	f248 0370 	movw	r3, #32880	; 0x8070
 80150f6:	4413      	add	r3, r2
 80150f8:	681a      	ldr	r2, [r3, #0]
 80150fa:	68f9      	ldr	r1, [r7, #12]
 80150fc:	f248 0364 	movw	r3, #32868	; 0x8064
 8015100:	440b      	add	r3, r1
 8015102:	881b      	ldrh	r3, [r3, #0]
 8015104:	fb03 f302 	mul.w	r3, r3, r2
 8015108:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801510a:	68bb      	ldr	r3, [r7, #8]
 801510c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015110:	bf28      	it	cs
 8015112:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8015116:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801511e:	695c      	ldr	r4, [r3, #20]
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	f103 0110 	add.w	r1, r3, #16
 8015126:	68fa      	ldr	r2, [r7, #12]
 8015128:	f248 036c 	movw	r3, #32876	; 0x806c
 801512c:	4413      	add	r3, r2
 801512e:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8015130:	68fa      	ldr	r2, [r7, #12]
 8015132:	f248 0364 	movw	r3, #32868	; 0x8064
 8015136:	4413      	add	r3, r2
 8015138:	881b      	ldrh	r3, [r3, #0]
 801513a:	461a      	mov	r2, r3
 801513c:	68bb      	ldr	r3, [r7, #8]
 801513e:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8015142:	b29b      	uxth	r3, r3
 8015144:	78f8      	ldrb	r0, [r7, #3]
 8015146:	462a      	mov	r2, r5
 8015148:	47a0      	blx	r4
 801514a:	4603      	mov	r3, r0
 801514c:	2b00      	cmp	r3, #0
 801514e:	da08      	bge.n	8015162 <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8015150:	78f9      	ldrb	r1, [r7, #3]
 8015152:	2303      	movs	r3, #3
 8015154:	2204      	movs	r2, #4
 8015156:	6878      	ldr	r0, [r7, #4]
 8015158:	f7ff fad4 	bl	8014704 <SCSI_SenseCode>
    return -1;
 801515c:	f04f 33ff 	mov.w	r3, #4294967295
 8015160:	e05a      	b.n	8015218 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015162:	68fa      	ldr	r2, [r7, #12]
 8015164:	f248 036c 	movw	r3, #32876	; 0x806c
 8015168:	4413      	add	r3, r2
 801516a:	681a      	ldr	r2, [r3, #0]
 801516c:	68f9      	ldr	r1, [r7, #12]
 801516e:	f248 0364 	movw	r3, #32868	; 0x8064
 8015172:	440b      	add	r3, r1
 8015174:	881b      	ldrh	r3, [r3, #0]
 8015176:	4619      	mov	r1, r3
 8015178:	68bb      	ldr	r3, [r7, #8]
 801517a:	fbb3 f3f1 	udiv	r3, r3, r1
 801517e:	441a      	add	r2, r3
 8015180:	68f9      	ldr	r1, [r7, #12]
 8015182:	f248 036c 	movw	r3, #32876	; 0x806c
 8015186:	440b      	add	r3, r1
 8015188:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801518a:	68fa      	ldr	r2, [r7, #12]
 801518c:	f248 0370 	movw	r3, #32880	; 0x8070
 8015190:	4413      	add	r3, r2
 8015192:	681a      	ldr	r2, [r3, #0]
 8015194:	68f9      	ldr	r1, [r7, #12]
 8015196:	f248 0364 	movw	r3, #32868	; 0x8064
 801519a:	440b      	add	r3, r1
 801519c:	881b      	ldrh	r3, [r3, #0]
 801519e:	4619      	mov	r1, r3
 80151a0:	68bb      	ldr	r3, [r7, #8]
 80151a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80151a6:	1ad2      	subs	r2, r2, r3
 80151a8:	68f9      	ldr	r1, [r7, #12]
 80151aa:	f248 0370 	movw	r3, #32880	; 0x8070
 80151ae:	440b      	add	r3, r1
 80151b0:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80151b2:	68fa      	ldr	r2, [r7, #12]
 80151b4:	f248 0338 	movw	r3, #32824	; 0x8038
 80151b8:	4413      	add	r3, r2
 80151ba:	681a      	ldr	r2, [r3, #0]
 80151bc:	68bb      	ldr	r3, [r7, #8]
 80151be:	1ad2      	subs	r2, r2, r3
 80151c0:	68f9      	ldr	r1, [r7, #12]
 80151c2:	f248 0338 	movw	r3, #32824	; 0x8038
 80151c6:	440b      	add	r3, r1
 80151c8:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80151ca:	68fa      	ldr	r2, [r7, #12]
 80151cc:	f248 0370 	movw	r3, #32880	; 0x8070
 80151d0:	4413      	add	r3, r2
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d104      	bne.n	80151e2 <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80151d8:	2100      	movs	r1, #0
 80151da:	6878      	ldr	r0, [r7, #4]
 80151dc:	f7fe fde2 	bl	8013da4 <MSC_BOT_SendCSW>
 80151e0:	e019      	b.n	8015216 <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80151e2:	68fa      	ldr	r2, [r7, #12]
 80151e4:	f248 0370 	movw	r3, #32880	; 0x8070
 80151e8:	4413      	add	r3, r2
 80151ea:	681a      	ldr	r2, [r3, #0]
 80151ec:	68f9      	ldr	r1, [r7, #12]
 80151ee:	f248 0364 	movw	r3, #32868	; 0x8064
 80151f2:	440b      	add	r3, r1
 80151f4:	881b      	ldrh	r3, [r3, #0]
 80151f6:	fb03 f302 	mul.w	r3, r3, r2
 80151fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80151fe:	bf28      	it	cs
 8015200:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8015204:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	f103 0210 	add.w	r2, r3, #16
 801520c:	68bb      	ldr	r3, [r7, #8]
 801520e:	2101      	movs	r1, #1
 8015210:	6878      	ldr	r0, [r7, #4]
 8015212:	f004 f89e 	bl	8019352 <USBD_LL_PrepareReceive>
  }

  return 0;
 8015216:	2300      	movs	r3, #0
}
 8015218:	4618      	mov	r0, r3
 801521a:	3710      	adds	r7, #16
 801521c:	46bd      	mov	sp, r7
 801521e:	bdb0      	pop	{r4, r5, r7, pc}

08015220 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8015220:	b480      	push	{r7}
 8015222:	b087      	sub	sp, #28
 8015224:	af00      	add	r7, sp, #0
 8015226:	60f8      	str	r0, [r7, #12]
 8015228:	60b9      	str	r1, [r7, #8]
 801522a:	4613      	mov	r3, r2
 801522c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801522e:	88fb      	ldrh	r3, [r7, #6]
 8015230:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 8015232:	8afa      	ldrh	r2, [r7, #22]
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8015238:	e00b      	b.n	8015252 <SCSI_UpdateBotData+0x32>
  {
    len--;
 801523a:	8afb      	ldrh	r3, [r7, #22]
 801523c:	3b01      	subs	r3, #1
 801523e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8015240:	8afb      	ldrh	r3, [r7, #22]
 8015242:	68ba      	ldr	r2, [r7, #8]
 8015244:	441a      	add	r2, r3
 8015246:	8afb      	ldrh	r3, [r7, #22]
 8015248:	7811      	ldrb	r1, [r2, #0]
 801524a:	68fa      	ldr	r2, [r7, #12]
 801524c:	4413      	add	r3, r2
 801524e:	460a      	mov	r2, r1
 8015250:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8015252:	8afb      	ldrh	r3, [r7, #22]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d1f0      	bne.n	801523a <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8015258:	2300      	movs	r3, #0
}
 801525a:	4618      	mov	r0, r3
 801525c:	371c      	adds	r7, #28
 801525e:	46bd      	mov	sp, r7
 8015260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015264:	4770      	bx	lr

08015266 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015266:	b580      	push	{r7, lr}
 8015268:	b086      	sub	sp, #24
 801526a:	af00      	add	r7, sp, #0
 801526c:	60f8      	str	r0, [r7, #12]
 801526e:	60b9      	str	r1, [r7, #8]
 8015270:	4613      	mov	r3, r2
 8015272:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d101      	bne.n	801527e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801527a:	2303      	movs	r3, #3
 801527c:	e025      	b.n	80152ca <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015284:	2b00      	cmp	r3, #0
 8015286:	d003      	beq.n	8015290 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	2200      	movs	r2, #0
 801528c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8015296:	2b00      	cmp	r3, #0
 8015298:	d003      	beq.n	80152a2 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	2200      	movs	r2, #0
 801529e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80152a2:	68bb      	ldr	r3, [r7, #8]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d003      	beq.n	80152b0 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	68ba      	ldr	r2, [r7, #8]
 80152ac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	2201      	movs	r2, #1
 80152b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	79fa      	ldrb	r2, [r7, #7]
 80152bc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80152be:	68f8      	ldr	r0, [r7, #12]
 80152c0:	f003 fece 	bl	8019060 <USBD_LL_Init>
 80152c4:	4603      	mov	r3, r0
 80152c6:	75fb      	strb	r3, [r7, #23]

  return ret;
 80152c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80152ca:	4618      	mov	r0, r3
 80152cc:	3718      	adds	r7, #24
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bd80      	pop	{r7, pc}

080152d2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80152d2:	b580      	push	{r7, lr}
 80152d4:	b084      	sub	sp, #16
 80152d6:	af00      	add	r7, sp, #0
 80152d8:	6078      	str	r0, [r7, #4]
 80152da:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80152dc:	2300      	movs	r3, #0
 80152de:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d101      	bne.n	80152ea <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80152e6:	2303      	movs	r3, #3
 80152e8:	e010      	b.n	801530c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	683a      	ldr	r2, [r7, #0]
 80152ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152fa:	f107 020e 	add.w	r2, r7, #14
 80152fe:	4610      	mov	r0, r2
 8015300:	4798      	blx	r3
 8015302:	4602      	mov	r2, r0
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 801530a:	2300      	movs	r3, #0
}
 801530c:	4618      	mov	r0, r3
 801530e:	3710      	adds	r7, #16
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}

08015314 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	b082      	sub	sp, #8
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801531c:	6878      	ldr	r0, [r7, #4]
 801531e:	f003 feef 	bl	8019100 <USBD_LL_Start>
 8015322:	4603      	mov	r3, r0
}
 8015324:	4618      	mov	r0, r3
 8015326:	3708      	adds	r7, #8
 8015328:	46bd      	mov	sp, r7
 801532a:	bd80      	pop	{r7, pc}

0801532c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801532c:	b480      	push	{r7}
 801532e:	b083      	sub	sp, #12
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015334:	2300      	movs	r3, #0
}
 8015336:	4618      	mov	r0, r3
 8015338:	370c      	adds	r7, #12
 801533a:	46bd      	mov	sp, r7
 801533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015340:	4770      	bx	lr

08015342 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015342:	b580      	push	{r7, lr}
 8015344:	b084      	sub	sp, #16
 8015346:	af00      	add	r7, sp, #0
 8015348:	6078      	str	r0, [r7, #4]
 801534a:	460b      	mov	r3, r1
 801534c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801534e:	2303      	movs	r3, #3
 8015350:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015358:	2b00      	cmp	r3, #0
 801535a:	d009      	beq.n	8015370 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	78fa      	ldrb	r2, [r7, #3]
 8015366:	4611      	mov	r1, r2
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	4798      	blx	r3
 801536c:	4603      	mov	r3, r0
 801536e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8015370:	7bfb      	ldrb	r3, [r7, #15]
}
 8015372:	4618      	mov	r0, r3
 8015374:	3710      	adds	r7, #16
 8015376:	46bd      	mov	sp, r7
 8015378:	bd80      	pop	{r7, pc}

0801537a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801537a:	b580      	push	{r7, lr}
 801537c:	b082      	sub	sp, #8
 801537e:	af00      	add	r7, sp, #0
 8015380:	6078      	str	r0, [r7, #4]
 8015382:	460b      	mov	r3, r1
 8015384:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801538c:	2b00      	cmp	r3, #0
 801538e:	d007      	beq.n	80153a0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015396:	685b      	ldr	r3, [r3, #4]
 8015398:	78fa      	ldrb	r2, [r7, #3]
 801539a:	4611      	mov	r1, r2
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	4798      	blx	r3
  }

  return USBD_OK;
 80153a0:	2300      	movs	r3, #0
}
 80153a2:	4618      	mov	r0, r3
 80153a4:	3708      	adds	r7, #8
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}

080153aa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80153aa:	b580      	push	{r7, lr}
 80153ac:	b084      	sub	sp, #16
 80153ae:	af00      	add	r7, sp, #0
 80153b0:	6078      	str	r0, [r7, #4]
 80153b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153ba:	6839      	ldr	r1, [r7, #0]
 80153bc:	4618      	mov	r0, r3
 80153be:	f000 ff2b 	bl	8016218 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	2201      	movs	r2, #1
 80153c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80153d0:	461a      	mov	r2, r3
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80153de:	f003 031f 	and.w	r3, r3, #31
 80153e2:	2b01      	cmp	r3, #1
 80153e4:	d00e      	beq.n	8015404 <USBD_LL_SetupStage+0x5a>
 80153e6:	2b01      	cmp	r3, #1
 80153e8:	d302      	bcc.n	80153f0 <USBD_LL_SetupStage+0x46>
 80153ea:	2b02      	cmp	r3, #2
 80153ec:	d014      	beq.n	8015418 <USBD_LL_SetupStage+0x6e>
 80153ee:	e01d      	b.n	801542c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153f6:	4619      	mov	r1, r3
 80153f8:	6878      	ldr	r0, [r7, #4]
 80153fa:	f000 fa17 	bl	801582c <USBD_StdDevReq>
 80153fe:	4603      	mov	r3, r0
 8015400:	73fb      	strb	r3, [r7, #15]
      break;
 8015402:	e020      	b.n	8015446 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801540a:	4619      	mov	r1, r3
 801540c:	6878      	ldr	r0, [r7, #4]
 801540e:	f000 fa7b 	bl	8015908 <USBD_StdItfReq>
 8015412:	4603      	mov	r3, r0
 8015414:	73fb      	strb	r3, [r7, #15]
      break;
 8015416:	e016      	b.n	8015446 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801541e:	4619      	mov	r1, r3
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	f000 fab7 	bl	8015994 <USBD_StdEPReq>
 8015426:	4603      	mov	r3, r0
 8015428:	73fb      	strb	r3, [r7, #15]
      break;
 801542a:	e00c      	b.n	8015446 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015432:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015436:	b2db      	uxtb	r3, r3
 8015438:	4619      	mov	r1, r3
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f003 fedf 	bl	80191fe <USBD_LL_StallEP>
 8015440:	4603      	mov	r3, r0
 8015442:	73fb      	strb	r3, [r7, #15]
      break;
 8015444:	bf00      	nop
  }

  return ret;
 8015446:	7bfb      	ldrb	r3, [r7, #15]
}
 8015448:	4618      	mov	r0, r3
 801544a:	3710      	adds	r7, #16
 801544c:	46bd      	mov	sp, r7
 801544e:	bd80      	pop	{r7, pc}

08015450 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b086      	sub	sp, #24
 8015454:	af00      	add	r7, sp, #0
 8015456:	60f8      	str	r0, [r7, #12]
 8015458:	460b      	mov	r3, r1
 801545a:	607a      	str	r2, [r7, #4]
 801545c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801545e:	7afb      	ldrb	r3, [r7, #11]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d137      	bne.n	80154d4 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801546a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015472:	2b03      	cmp	r3, #3
 8015474:	d14a      	bne.n	801550c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8015476:	693b      	ldr	r3, [r7, #16]
 8015478:	689a      	ldr	r2, [r3, #8]
 801547a:	693b      	ldr	r3, [r7, #16]
 801547c:	68db      	ldr	r3, [r3, #12]
 801547e:	429a      	cmp	r2, r3
 8015480:	d913      	bls.n	80154aa <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015482:	693b      	ldr	r3, [r7, #16]
 8015484:	689a      	ldr	r2, [r3, #8]
 8015486:	693b      	ldr	r3, [r7, #16]
 8015488:	68db      	ldr	r3, [r3, #12]
 801548a:	1ad2      	subs	r2, r2, r3
 801548c:	693b      	ldr	r3, [r7, #16]
 801548e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015490:	693b      	ldr	r3, [r7, #16]
 8015492:	68da      	ldr	r2, [r3, #12]
 8015494:	693b      	ldr	r3, [r7, #16]
 8015496:	689b      	ldr	r3, [r3, #8]
 8015498:	4293      	cmp	r3, r2
 801549a:	bf28      	it	cs
 801549c:	4613      	movcs	r3, r2
 801549e:	461a      	mov	r2, r3
 80154a0:	6879      	ldr	r1, [r7, #4]
 80154a2:	68f8      	ldr	r0, [r7, #12]
 80154a4:	f000 ff8f 	bl	80163c6 <USBD_CtlContinueRx>
 80154a8:	e030      	b.n	801550c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154b0:	691b      	ldr	r3, [r3, #16]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d00a      	beq.n	80154cc <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80154bc:	2b03      	cmp	r3, #3
 80154be:	d105      	bne.n	80154cc <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154c6:	691b      	ldr	r3, [r3, #16]
 80154c8:	68f8      	ldr	r0, [r7, #12]
 80154ca:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80154cc:	68f8      	ldr	r0, [r7, #12]
 80154ce:	f000 ff8b 	bl	80163e8 <USBD_CtlSendStatus>
 80154d2:	e01b      	b.n	801550c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154da:	699b      	ldr	r3, [r3, #24]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d013      	beq.n	8015508 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80154e6:	2b03      	cmp	r3, #3
 80154e8:	d10e      	bne.n	8015508 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154f0:	699b      	ldr	r3, [r3, #24]
 80154f2:	7afa      	ldrb	r2, [r7, #11]
 80154f4:	4611      	mov	r1, r2
 80154f6:	68f8      	ldr	r0, [r7, #12]
 80154f8:	4798      	blx	r3
 80154fa:	4603      	mov	r3, r0
 80154fc:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80154fe:	7dfb      	ldrb	r3, [r7, #23]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d003      	beq.n	801550c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8015504:	7dfb      	ldrb	r3, [r7, #23]
 8015506:	e002      	b.n	801550e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015508:	2303      	movs	r3, #3
 801550a:	e000      	b.n	801550e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 801550c:	2300      	movs	r3, #0
}
 801550e:	4618      	mov	r0, r3
 8015510:	3718      	adds	r7, #24
 8015512:	46bd      	mov	sp, r7
 8015514:	bd80      	pop	{r7, pc}

08015516 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015516:	b580      	push	{r7, lr}
 8015518:	b086      	sub	sp, #24
 801551a:	af00      	add	r7, sp, #0
 801551c:	60f8      	str	r0, [r7, #12]
 801551e:	460b      	mov	r3, r1
 8015520:	607a      	str	r2, [r7, #4]
 8015522:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015524:	7afb      	ldrb	r3, [r7, #11]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d16a      	bne.n	8015600 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	3314      	adds	r3, #20
 801552e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015536:	2b02      	cmp	r3, #2
 8015538:	d155      	bne.n	80155e6 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 801553a:	693b      	ldr	r3, [r7, #16]
 801553c:	689a      	ldr	r2, [r3, #8]
 801553e:	693b      	ldr	r3, [r7, #16]
 8015540:	68db      	ldr	r3, [r3, #12]
 8015542:	429a      	cmp	r2, r3
 8015544:	d914      	bls.n	8015570 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	689a      	ldr	r2, [r3, #8]
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	68db      	ldr	r3, [r3, #12]
 801554e:	1ad2      	subs	r2, r2, r3
 8015550:	693b      	ldr	r3, [r7, #16]
 8015552:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015554:	693b      	ldr	r3, [r7, #16]
 8015556:	689b      	ldr	r3, [r3, #8]
 8015558:	461a      	mov	r2, r3
 801555a:	6879      	ldr	r1, [r7, #4]
 801555c:	68f8      	ldr	r0, [r7, #12]
 801555e:	f000 ff21 	bl	80163a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015562:	2300      	movs	r3, #0
 8015564:	2200      	movs	r2, #0
 8015566:	2100      	movs	r1, #0
 8015568:	68f8      	ldr	r0, [r7, #12]
 801556a:	f003 fef2 	bl	8019352 <USBD_LL_PrepareReceive>
 801556e:	e03a      	b.n	80155e6 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015570:	693b      	ldr	r3, [r7, #16]
 8015572:	68da      	ldr	r2, [r3, #12]
 8015574:	693b      	ldr	r3, [r7, #16]
 8015576:	689b      	ldr	r3, [r3, #8]
 8015578:	429a      	cmp	r2, r3
 801557a:	d11c      	bne.n	80155b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801557c:	693b      	ldr	r3, [r7, #16]
 801557e:	685a      	ldr	r2, [r3, #4]
 8015580:	693b      	ldr	r3, [r7, #16]
 8015582:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015584:	429a      	cmp	r2, r3
 8015586:	d316      	bcc.n	80155b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015588:	693b      	ldr	r3, [r7, #16]
 801558a:	685a      	ldr	r2, [r3, #4]
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015592:	429a      	cmp	r2, r3
 8015594:	d20f      	bcs.n	80155b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015596:	2200      	movs	r2, #0
 8015598:	2100      	movs	r1, #0
 801559a:	68f8      	ldr	r0, [r7, #12]
 801559c:	f000 ff02 	bl	80163a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	2200      	movs	r2, #0
 80155a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80155a8:	2300      	movs	r3, #0
 80155aa:	2200      	movs	r2, #0
 80155ac:	2100      	movs	r1, #0
 80155ae:	68f8      	ldr	r0, [r7, #12]
 80155b0:	f003 fecf 	bl	8019352 <USBD_LL_PrepareReceive>
 80155b4:	e017      	b.n	80155e6 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155bc:	68db      	ldr	r3, [r3, #12]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d00a      	beq.n	80155d8 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80155c8:	2b03      	cmp	r3, #3
 80155ca:	d105      	bne.n	80155d8 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155d2:	68db      	ldr	r3, [r3, #12]
 80155d4:	68f8      	ldr	r0, [r7, #12]
 80155d6:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80155d8:	2180      	movs	r1, #128	; 0x80
 80155da:	68f8      	ldr	r0, [r7, #12]
 80155dc:	f003 fe0f 	bl	80191fe <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80155e0:	68f8      	ldr	r0, [r7, #12]
 80155e2:	f000 ff14 	bl	801640e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80155ec:	2b01      	cmp	r3, #1
 80155ee:	d123      	bne.n	8015638 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80155f0:	68f8      	ldr	r0, [r7, #12]
 80155f2:	f7ff fe9b 	bl	801532c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	2200      	movs	r2, #0
 80155fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80155fe:	e01b      	b.n	8015638 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015606:	695b      	ldr	r3, [r3, #20]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d013      	beq.n	8015634 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8015612:	2b03      	cmp	r3, #3
 8015614:	d10e      	bne.n	8015634 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801561c:	695b      	ldr	r3, [r3, #20]
 801561e:	7afa      	ldrb	r2, [r7, #11]
 8015620:	4611      	mov	r1, r2
 8015622:	68f8      	ldr	r0, [r7, #12]
 8015624:	4798      	blx	r3
 8015626:	4603      	mov	r3, r0
 8015628:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 801562a:	7dfb      	ldrb	r3, [r7, #23]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d003      	beq.n	8015638 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8015630:	7dfb      	ldrb	r3, [r7, #23]
 8015632:	e002      	b.n	801563a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015634:	2303      	movs	r3, #3
 8015636:	e000      	b.n	801563a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8015638:	2300      	movs	r3, #0
}
 801563a:	4618      	mov	r0, r3
 801563c:	3718      	adds	r7, #24
 801563e:	46bd      	mov	sp, r7
 8015640:	bd80      	pop	{r7, pc}

08015642 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015642:	b580      	push	{r7, lr}
 8015644:	b082      	sub	sp, #8
 8015646:	af00      	add	r7, sp, #0
 8015648:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	2201      	movs	r2, #1
 801564e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	2200      	movs	r2, #0
 8015656:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	2200      	movs	r2, #0
 801565e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	2200      	movs	r2, #0
 8015664:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801566e:	2b00      	cmp	r3, #0
 8015670:	d009      	beq.n	8015686 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015678:	685b      	ldr	r3, [r3, #4]
 801567a:	687a      	ldr	r2, [r7, #4]
 801567c:	6852      	ldr	r2, [r2, #4]
 801567e:	b2d2      	uxtb	r2, r2
 8015680:	4611      	mov	r1, r2
 8015682:	6878      	ldr	r0, [r7, #4]
 8015684:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015686:	2340      	movs	r3, #64	; 0x40
 8015688:	2200      	movs	r2, #0
 801568a:	2100      	movs	r1, #0
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	f003 fd52 	bl	8019136 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	2201      	movs	r2, #1
 8015696:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	2240      	movs	r2, #64	; 0x40
 801569e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80156a2:	2340      	movs	r3, #64	; 0x40
 80156a4:	2200      	movs	r2, #0
 80156a6:	2180      	movs	r1, #128	; 0x80
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	f003 fd44 	bl	8019136 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	2201      	movs	r2, #1
 80156b2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	2240      	movs	r2, #64	; 0x40
 80156b8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80156ba:	2300      	movs	r3, #0
}
 80156bc:	4618      	mov	r0, r3
 80156be:	3708      	adds	r7, #8
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}

080156c4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80156c4:	b480      	push	{r7}
 80156c6:	b083      	sub	sp, #12
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
 80156cc:	460b      	mov	r3, r1
 80156ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	78fa      	ldrb	r2, [r7, #3]
 80156d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80156d6:	2300      	movs	r3, #0
}
 80156d8:	4618      	mov	r0, r3
 80156da:	370c      	adds	r7, #12
 80156dc:	46bd      	mov	sp, r7
 80156de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e2:	4770      	bx	lr

080156e4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80156e4:	b480      	push	{r7}
 80156e6:	b083      	sub	sp, #12
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	2204      	movs	r2, #4
 80156fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015700:	2300      	movs	r3, #0
}
 8015702:	4618      	mov	r0, r3
 8015704:	370c      	adds	r7, #12
 8015706:	46bd      	mov	sp, r7
 8015708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570c:	4770      	bx	lr

0801570e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801570e:	b480      	push	{r7}
 8015710:	b083      	sub	sp, #12
 8015712:	af00      	add	r7, sp, #0
 8015714:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801571c:	2b04      	cmp	r3, #4
 801571e:	d105      	bne.n	801572c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801572c:	2300      	movs	r3, #0
}
 801572e:	4618      	mov	r0, r3
 8015730:	370c      	adds	r7, #12
 8015732:	46bd      	mov	sp, r7
 8015734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015738:	4770      	bx	lr

0801573a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801573a:	b580      	push	{r7, lr}
 801573c:	b082      	sub	sp, #8
 801573e:	af00      	add	r7, sp, #0
 8015740:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015748:	2b03      	cmp	r3, #3
 801574a:	d10b      	bne.n	8015764 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015752:	69db      	ldr	r3, [r3, #28]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d005      	beq.n	8015764 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801575e:	69db      	ldr	r3, [r3, #28]
 8015760:	6878      	ldr	r0, [r7, #4]
 8015762:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015764:	2300      	movs	r3, #0
}
 8015766:	4618      	mov	r0, r3
 8015768:	3708      	adds	r7, #8
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}

0801576e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801576e:	b480      	push	{r7}
 8015770:	b083      	sub	sp, #12
 8015772:	af00      	add	r7, sp, #0
 8015774:	6078      	str	r0, [r7, #4]
 8015776:	460b      	mov	r3, r1
 8015778:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801577a:	2300      	movs	r3, #0
}
 801577c:	4618      	mov	r0, r3
 801577e:	370c      	adds	r7, #12
 8015780:	46bd      	mov	sp, r7
 8015782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015786:	4770      	bx	lr

08015788 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015788:	b480      	push	{r7}
 801578a:	b083      	sub	sp, #12
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
 8015790:	460b      	mov	r3, r1
 8015792:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8015794:	2300      	movs	r3, #0
}
 8015796:	4618      	mov	r0, r3
 8015798:	370c      	adds	r7, #12
 801579a:	46bd      	mov	sp, r7
 801579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a0:	4770      	bx	lr

080157a2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80157a2:	b480      	push	{r7}
 80157a4:	b083      	sub	sp, #12
 80157a6:	af00      	add	r7, sp, #0
 80157a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80157aa:	2300      	movs	r3, #0
}
 80157ac:	4618      	mov	r0, r3
 80157ae:	370c      	adds	r7, #12
 80157b0:	46bd      	mov	sp, r7
 80157b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b6:	4770      	bx	lr

080157b8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	2201      	movs	r2, #1
 80157c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d009      	beq.n	80157e6 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157d8:	685b      	ldr	r3, [r3, #4]
 80157da:	687a      	ldr	r2, [r7, #4]
 80157dc:	6852      	ldr	r2, [r2, #4]
 80157de:	b2d2      	uxtb	r2, r2
 80157e0:	4611      	mov	r1, r2
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	4798      	blx	r3
  }

  return USBD_OK;
 80157e6:	2300      	movs	r3, #0
}
 80157e8:	4618      	mov	r0, r3
 80157ea:	3708      	adds	r7, #8
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}

080157f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80157f0:	b480      	push	{r7}
 80157f2:	b087      	sub	sp, #28
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80157fc:	697b      	ldr	r3, [r7, #20]
 80157fe:	781b      	ldrb	r3, [r3, #0]
 8015800:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015802:	697b      	ldr	r3, [r7, #20]
 8015804:	3301      	adds	r3, #1
 8015806:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015808:	697b      	ldr	r3, [r7, #20]
 801580a:	781b      	ldrb	r3, [r3, #0]
 801580c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801580e:	8a3b      	ldrh	r3, [r7, #16]
 8015810:	021b      	lsls	r3, r3, #8
 8015812:	b21a      	sxth	r2, r3
 8015814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015818:	4313      	orrs	r3, r2
 801581a:	b21b      	sxth	r3, r3
 801581c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801581e:	89fb      	ldrh	r3, [r7, #14]
}
 8015820:	4618      	mov	r0, r3
 8015822:	371c      	adds	r7, #28
 8015824:	46bd      	mov	sp, r7
 8015826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582a:	4770      	bx	lr

0801582c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b084      	sub	sp, #16
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
 8015834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015836:	2300      	movs	r3, #0
 8015838:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	781b      	ldrb	r3, [r3, #0]
 801583e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015842:	2b20      	cmp	r3, #32
 8015844:	d004      	beq.n	8015850 <USBD_StdDevReq+0x24>
 8015846:	2b40      	cmp	r3, #64	; 0x40
 8015848:	d002      	beq.n	8015850 <USBD_StdDevReq+0x24>
 801584a:	2b00      	cmp	r3, #0
 801584c:	d00a      	beq.n	8015864 <USBD_StdDevReq+0x38>
 801584e:	e050      	b.n	80158f2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015856:	689b      	ldr	r3, [r3, #8]
 8015858:	6839      	ldr	r1, [r7, #0]
 801585a:	6878      	ldr	r0, [r7, #4]
 801585c:	4798      	blx	r3
 801585e:	4603      	mov	r3, r0
 8015860:	73fb      	strb	r3, [r7, #15]
    break;
 8015862:	e04b      	b.n	80158fc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8015864:	683b      	ldr	r3, [r7, #0]
 8015866:	785b      	ldrb	r3, [r3, #1]
 8015868:	2b09      	cmp	r3, #9
 801586a:	d83c      	bhi.n	80158e6 <USBD_StdDevReq+0xba>
 801586c:	a201      	add	r2, pc, #4	; (adr r2, 8015874 <USBD_StdDevReq+0x48>)
 801586e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015872:	bf00      	nop
 8015874:	080158c9 	.word	0x080158c9
 8015878:	080158dd 	.word	0x080158dd
 801587c:	080158e7 	.word	0x080158e7
 8015880:	080158d3 	.word	0x080158d3
 8015884:	080158e7 	.word	0x080158e7
 8015888:	080158a7 	.word	0x080158a7
 801588c:	0801589d 	.word	0x0801589d
 8015890:	080158e7 	.word	0x080158e7
 8015894:	080158bf 	.word	0x080158bf
 8015898:	080158b1 	.word	0x080158b1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 801589c:	6839      	ldr	r1, [r7, #0]
 801589e:	6878      	ldr	r0, [r7, #4]
 80158a0:	f000 f9ce 	bl	8015c40 <USBD_GetDescriptor>
      break;
 80158a4:	e024      	b.n	80158f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80158a6:	6839      	ldr	r1, [r7, #0]
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	f000 fb33 	bl	8015f14 <USBD_SetAddress>
      break;
 80158ae:	e01f      	b.n	80158f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80158b0:	6839      	ldr	r1, [r7, #0]
 80158b2:	6878      	ldr	r0, [r7, #4]
 80158b4:	f000 fb70 	bl	8015f98 <USBD_SetConfig>
 80158b8:	4603      	mov	r3, r0
 80158ba:	73fb      	strb	r3, [r7, #15]
      break;
 80158bc:	e018      	b.n	80158f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80158be:	6839      	ldr	r1, [r7, #0]
 80158c0:	6878      	ldr	r0, [r7, #4]
 80158c2:	f000 fc0d 	bl	80160e0 <USBD_GetConfig>
      break;
 80158c6:	e013      	b.n	80158f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80158c8:	6839      	ldr	r1, [r7, #0]
 80158ca:	6878      	ldr	r0, [r7, #4]
 80158cc:	f000 fc3c 	bl	8016148 <USBD_GetStatus>
      break;
 80158d0:	e00e      	b.n	80158f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80158d2:	6839      	ldr	r1, [r7, #0]
 80158d4:	6878      	ldr	r0, [r7, #4]
 80158d6:	f000 fc6a 	bl	80161ae <USBD_SetFeature>
      break;
 80158da:	e009      	b.n	80158f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80158dc:	6839      	ldr	r1, [r7, #0]
 80158de:	6878      	ldr	r0, [r7, #4]
 80158e0:	f000 fc79 	bl	80161d6 <USBD_ClrFeature>
      break;
 80158e4:	e004      	b.n	80158f0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80158e6:	6839      	ldr	r1, [r7, #0]
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f000 fccf 	bl	801628c <USBD_CtlError>
      break;
 80158ee:	bf00      	nop
    }
    break;
 80158f0:	e004      	b.n	80158fc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80158f2:	6839      	ldr	r1, [r7, #0]
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	f000 fcc9 	bl	801628c <USBD_CtlError>
    break;
 80158fa:	bf00      	nop
  }

  return ret;
 80158fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80158fe:	4618      	mov	r0, r3
 8015900:	3710      	adds	r7, #16
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}
 8015906:	bf00      	nop

08015908 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b084      	sub	sp, #16
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
 8015910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015912:	2300      	movs	r3, #0
 8015914:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015916:	683b      	ldr	r3, [r7, #0]
 8015918:	781b      	ldrb	r3, [r3, #0]
 801591a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801591e:	2b20      	cmp	r3, #32
 8015920:	d003      	beq.n	801592a <USBD_StdItfReq+0x22>
 8015922:	2b40      	cmp	r3, #64	; 0x40
 8015924:	d001      	beq.n	801592a <USBD_StdItfReq+0x22>
 8015926:	2b00      	cmp	r3, #0
 8015928:	d12a      	bne.n	8015980 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015930:	3b01      	subs	r3, #1
 8015932:	2b02      	cmp	r3, #2
 8015934:	d81d      	bhi.n	8015972 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015936:	683b      	ldr	r3, [r7, #0]
 8015938:	889b      	ldrh	r3, [r3, #4]
 801593a:	b2db      	uxtb	r3, r3
 801593c:	2b01      	cmp	r3, #1
 801593e:	d813      	bhi.n	8015968 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015946:	689b      	ldr	r3, [r3, #8]
 8015948:	6839      	ldr	r1, [r7, #0]
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	4798      	blx	r3
 801594e:	4603      	mov	r3, r0
 8015950:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	88db      	ldrh	r3, [r3, #6]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d110      	bne.n	801597c <USBD_StdItfReq+0x74>
 801595a:	7bfb      	ldrb	r3, [r7, #15]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d10d      	bne.n	801597c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8015960:	6878      	ldr	r0, [r7, #4]
 8015962:	f000 fd41 	bl	80163e8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8015966:	e009      	b.n	801597c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8015968:	6839      	ldr	r1, [r7, #0]
 801596a:	6878      	ldr	r0, [r7, #4]
 801596c:	f000 fc8e 	bl	801628c <USBD_CtlError>
      break;
 8015970:	e004      	b.n	801597c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8015972:	6839      	ldr	r1, [r7, #0]
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f000 fc89 	bl	801628c <USBD_CtlError>
      break;
 801597a:	e000      	b.n	801597e <USBD_StdItfReq+0x76>
      break;
 801597c:	bf00      	nop
    }
    break;
 801597e:	e004      	b.n	801598a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8015980:	6839      	ldr	r1, [r7, #0]
 8015982:	6878      	ldr	r0, [r7, #4]
 8015984:	f000 fc82 	bl	801628c <USBD_CtlError>
    break;
 8015988:	bf00      	nop
  }

  return ret;
 801598a:	7bfb      	ldrb	r3, [r7, #15]
}
 801598c:	4618      	mov	r0, r3
 801598e:	3710      	adds	r7, #16
 8015990:	46bd      	mov	sp, r7
 8015992:	bd80      	pop	{r7, pc}

08015994 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b084      	sub	sp, #16
 8015998:	af00      	add	r7, sp, #0
 801599a:	6078      	str	r0, [r7, #4]
 801599c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801599e:	2300      	movs	r3, #0
 80159a0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80159a2:	683b      	ldr	r3, [r7, #0]
 80159a4:	889b      	ldrh	r3, [r3, #4]
 80159a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159a8:	683b      	ldr	r3, [r7, #0]
 80159aa:	781b      	ldrb	r3, [r3, #0]
 80159ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80159b0:	2b20      	cmp	r3, #32
 80159b2:	d004      	beq.n	80159be <USBD_StdEPReq+0x2a>
 80159b4:	2b40      	cmp	r3, #64	; 0x40
 80159b6:	d002      	beq.n	80159be <USBD_StdEPReq+0x2a>
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d00a      	beq.n	80159d2 <USBD_StdEPReq+0x3e>
 80159bc:	e135      	b.n	8015c2a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159c4:	689b      	ldr	r3, [r3, #8]
 80159c6:	6839      	ldr	r1, [r7, #0]
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	4798      	blx	r3
 80159cc:	4603      	mov	r3, r0
 80159ce:	73fb      	strb	r3, [r7, #15]
    break;
 80159d0:	e130      	b.n	8015c34 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80159d2:	683b      	ldr	r3, [r7, #0]
 80159d4:	785b      	ldrb	r3, [r3, #1]
 80159d6:	2b01      	cmp	r3, #1
 80159d8:	d03e      	beq.n	8015a58 <USBD_StdEPReq+0xc4>
 80159da:	2b03      	cmp	r3, #3
 80159dc:	d002      	beq.n	80159e4 <USBD_StdEPReq+0x50>
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d077      	beq.n	8015ad2 <USBD_StdEPReq+0x13e>
 80159e2:	e11c      	b.n	8015c1e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159ea:	2b02      	cmp	r3, #2
 80159ec:	d002      	beq.n	80159f4 <USBD_StdEPReq+0x60>
 80159ee:	2b03      	cmp	r3, #3
 80159f0:	d015      	beq.n	8015a1e <USBD_StdEPReq+0x8a>
 80159f2:	e02b      	b.n	8015a4c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80159f4:	7bbb      	ldrb	r3, [r7, #14]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d00c      	beq.n	8015a14 <USBD_StdEPReq+0x80>
 80159fa:	7bbb      	ldrb	r3, [r7, #14]
 80159fc:	2b80      	cmp	r3, #128	; 0x80
 80159fe:	d009      	beq.n	8015a14 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a00:	7bbb      	ldrb	r3, [r7, #14]
 8015a02:	4619      	mov	r1, r3
 8015a04:	6878      	ldr	r0, [r7, #4]
 8015a06:	f003 fbfa 	bl	80191fe <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a0a:	2180      	movs	r1, #128	; 0x80
 8015a0c:	6878      	ldr	r0, [r7, #4]
 8015a0e:	f003 fbf6 	bl	80191fe <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8015a12:	e020      	b.n	8015a56 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8015a14:	6839      	ldr	r1, [r7, #0]
 8015a16:	6878      	ldr	r0, [r7, #4]
 8015a18:	f000 fc38 	bl	801628c <USBD_CtlError>
        break;
 8015a1c:	e01b      	b.n	8015a56 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8015a1e:	683b      	ldr	r3, [r7, #0]
 8015a20:	885b      	ldrh	r3, [r3, #2]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d10e      	bne.n	8015a44 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015a26:	7bbb      	ldrb	r3, [r7, #14]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d00b      	beq.n	8015a44 <USBD_StdEPReq+0xb0>
 8015a2c:	7bbb      	ldrb	r3, [r7, #14]
 8015a2e:	2b80      	cmp	r3, #128	; 0x80
 8015a30:	d008      	beq.n	8015a44 <USBD_StdEPReq+0xb0>
 8015a32:	683b      	ldr	r3, [r7, #0]
 8015a34:	88db      	ldrh	r3, [r3, #6]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d104      	bne.n	8015a44 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a3a:	7bbb      	ldrb	r3, [r7, #14]
 8015a3c:	4619      	mov	r1, r3
 8015a3e:	6878      	ldr	r0, [r7, #4]
 8015a40:	f003 fbdd 	bl	80191fe <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8015a44:	6878      	ldr	r0, [r7, #4]
 8015a46:	f000 fccf 	bl	80163e8 <USBD_CtlSendStatus>

        break;
 8015a4a:	e004      	b.n	8015a56 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8015a4c:	6839      	ldr	r1, [r7, #0]
 8015a4e:	6878      	ldr	r0, [r7, #4]
 8015a50:	f000 fc1c 	bl	801628c <USBD_CtlError>
        break;
 8015a54:	bf00      	nop
      }
      break;
 8015a56:	e0e7      	b.n	8015c28 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a5e:	2b02      	cmp	r3, #2
 8015a60:	d002      	beq.n	8015a68 <USBD_StdEPReq+0xd4>
 8015a62:	2b03      	cmp	r3, #3
 8015a64:	d015      	beq.n	8015a92 <USBD_StdEPReq+0xfe>
 8015a66:	e02d      	b.n	8015ac4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a68:	7bbb      	ldrb	r3, [r7, #14]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d00c      	beq.n	8015a88 <USBD_StdEPReq+0xf4>
 8015a6e:	7bbb      	ldrb	r3, [r7, #14]
 8015a70:	2b80      	cmp	r3, #128	; 0x80
 8015a72:	d009      	beq.n	8015a88 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a74:	7bbb      	ldrb	r3, [r7, #14]
 8015a76:	4619      	mov	r1, r3
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f003 fbc0 	bl	80191fe <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a7e:	2180      	movs	r1, #128	; 0x80
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	f003 fbbc 	bl	80191fe <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8015a86:	e023      	b.n	8015ad0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8015a88:	6839      	ldr	r1, [r7, #0]
 8015a8a:	6878      	ldr	r0, [r7, #4]
 8015a8c:	f000 fbfe 	bl	801628c <USBD_CtlError>
        break;
 8015a90:	e01e      	b.n	8015ad0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8015a92:	683b      	ldr	r3, [r7, #0]
 8015a94:	885b      	ldrh	r3, [r3, #2]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d119      	bne.n	8015ace <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8015a9a:	7bbb      	ldrb	r3, [r7, #14]
 8015a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d004      	beq.n	8015aae <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015aa4:	7bbb      	ldrb	r3, [r7, #14]
 8015aa6:	4619      	mov	r1, r3
 8015aa8:	6878      	ldr	r0, [r7, #4]
 8015aaa:	f003 fbc7 	bl	801923c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f000 fc9a 	bl	80163e8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015aba:	689b      	ldr	r3, [r3, #8]
 8015abc:	6839      	ldr	r1, [r7, #0]
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	4798      	blx	r3
        }
        break;
 8015ac2:	e004      	b.n	8015ace <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8015ac4:	6839      	ldr	r1, [r7, #0]
 8015ac6:	6878      	ldr	r0, [r7, #4]
 8015ac8:	f000 fbe0 	bl	801628c <USBD_CtlError>
        break;
 8015acc:	e000      	b.n	8015ad0 <USBD_StdEPReq+0x13c>
        break;
 8015ace:	bf00      	nop
      }
      break;
 8015ad0:	e0aa      	b.n	8015c28 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ad8:	2b02      	cmp	r3, #2
 8015ada:	d002      	beq.n	8015ae2 <USBD_StdEPReq+0x14e>
 8015adc:	2b03      	cmp	r3, #3
 8015ade:	d032      	beq.n	8015b46 <USBD_StdEPReq+0x1b2>
 8015ae0:	e097      	b.n	8015c12 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ae2:	7bbb      	ldrb	r3, [r7, #14]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d007      	beq.n	8015af8 <USBD_StdEPReq+0x164>
 8015ae8:	7bbb      	ldrb	r3, [r7, #14]
 8015aea:	2b80      	cmp	r3, #128	; 0x80
 8015aec:	d004      	beq.n	8015af8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8015aee:	6839      	ldr	r1, [r7, #0]
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f000 fbcb 	bl	801628c <USBD_CtlError>
          break;
 8015af6:	e091      	b.n	8015c1c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	da0b      	bge.n	8015b18 <USBD_StdEPReq+0x184>
 8015b00:	7bbb      	ldrb	r3, [r7, #14]
 8015b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b06:	4613      	mov	r3, r2
 8015b08:	009b      	lsls	r3, r3, #2
 8015b0a:	4413      	add	r3, r2
 8015b0c:	009b      	lsls	r3, r3, #2
 8015b0e:	3310      	adds	r3, #16
 8015b10:	687a      	ldr	r2, [r7, #4]
 8015b12:	4413      	add	r3, r2
 8015b14:	3304      	adds	r3, #4
 8015b16:	e00b      	b.n	8015b30 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8015b18:	7bbb      	ldrb	r3, [r7, #14]
 8015b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b1e:	4613      	mov	r3, r2
 8015b20:	009b      	lsls	r3, r3, #2
 8015b22:	4413      	add	r3, r2
 8015b24:	009b      	lsls	r3, r3, #2
 8015b26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015b2a:	687a      	ldr	r2, [r7, #4]
 8015b2c:	4413      	add	r3, r2
 8015b2e:	3304      	adds	r3, #4
 8015b30:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	2200      	movs	r2, #0
 8015b36:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b38:	68bb      	ldr	r3, [r7, #8]
 8015b3a:	2202      	movs	r2, #2
 8015b3c:	4619      	mov	r1, r3
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	f000 fc15 	bl	801636e <USBD_CtlSendData>
        break;
 8015b44:	e06a      	b.n	8015c1c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8015b46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	da11      	bge.n	8015b72 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015b4e:	7bbb      	ldrb	r3, [r7, #14]
 8015b50:	f003 020f 	and.w	r2, r3, #15
 8015b54:	6879      	ldr	r1, [r7, #4]
 8015b56:	4613      	mov	r3, r2
 8015b58:	009b      	lsls	r3, r3, #2
 8015b5a:	4413      	add	r3, r2
 8015b5c:	009b      	lsls	r3, r3, #2
 8015b5e:	440b      	add	r3, r1
 8015b60:	3324      	adds	r3, #36	; 0x24
 8015b62:	881b      	ldrh	r3, [r3, #0]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d117      	bne.n	8015b98 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8015b68:	6839      	ldr	r1, [r7, #0]
 8015b6a:	6878      	ldr	r0, [r7, #4]
 8015b6c:	f000 fb8e 	bl	801628c <USBD_CtlError>
            break;
 8015b70:	e054      	b.n	8015c1c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015b72:	7bbb      	ldrb	r3, [r7, #14]
 8015b74:	f003 020f 	and.w	r2, r3, #15
 8015b78:	6879      	ldr	r1, [r7, #4]
 8015b7a:	4613      	mov	r3, r2
 8015b7c:	009b      	lsls	r3, r3, #2
 8015b7e:	4413      	add	r3, r2
 8015b80:	009b      	lsls	r3, r3, #2
 8015b82:	440b      	add	r3, r1
 8015b84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015b88:	881b      	ldrh	r3, [r3, #0]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d104      	bne.n	8015b98 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8015b8e:	6839      	ldr	r1, [r7, #0]
 8015b90:	6878      	ldr	r0, [r7, #4]
 8015b92:	f000 fb7b 	bl	801628c <USBD_CtlError>
            break;
 8015b96:	e041      	b.n	8015c1c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	da0b      	bge.n	8015bb8 <USBD_StdEPReq+0x224>
 8015ba0:	7bbb      	ldrb	r3, [r7, #14]
 8015ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ba6:	4613      	mov	r3, r2
 8015ba8:	009b      	lsls	r3, r3, #2
 8015baa:	4413      	add	r3, r2
 8015bac:	009b      	lsls	r3, r3, #2
 8015bae:	3310      	adds	r3, #16
 8015bb0:	687a      	ldr	r2, [r7, #4]
 8015bb2:	4413      	add	r3, r2
 8015bb4:	3304      	adds	r3, #4
 8015bb6:	e00b      	b.n	8015bd0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8015bb8:	7bbb      	ldrb	r3, [r7, #14]
 8015bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bbe:	4613      	mov	r3, r2
 8015bc0:	009b      	lsls	r3, r3, #2
 8015bc2:	4413      	add	r3, r2
 8015bc4:	009b      	lsls	r3, r3, #2
 8015bc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015bca:	687a      	ldr	r2, [r7, #4]
 8015bcc:	4413      	add	r3, r2
 8015bce:	3304      	adds	r3, #4
 8015bd0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015bd2:	7bbb      	ldrb	r3, [r7, #14]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d002      	beq.n	8015bde <USBD_StdEPReq+0x24a>
 8015bd8:	7bbb      	ldrb	r3, [r7, #14]
 8015bda:	2b80      	cmp	r3, #128	; 0x80
 8015bdc:	d103      	bne.n	8015be6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8015bde:	68bb      	ldr	r3, [r7, #8]
 8015be0:	2200      	movs	r2, #0
 8015be2:	601a      	str	r2, [r3, #0]
 8015be4:	e00e      	b.n	8015c04 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015be6:	7bbb      	ldrb	r3, [r7, #14]
 8015be8:	4619      	mov	r1, r3
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	f003 fb45 	bl	801927a <USBD_LL_IsStallEP>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d003      	beq.n	8015bfe <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8015bf6:	68bb      	ldr	r3, [r7, #8]
 8015bf8:	2201      	movs	r2, #1
 8015bfa:	601a      	str	r2, [r3, #0]
 8015bfc:	e002      	b.n	8015c04 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8015bfe:	68bb      	ldr	r3, [r7, #8]
 8015c00:	2200      	movs	r2, #0
 8015c02:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015c04:	68bb      	ldr	r3, [r7, #8]
 8015c06:	2202      	movs	r2, #2
 8015c08:	4619      	mov	r1, r3
 8015c0a:	6878      	ldr	r0, [r7, #4]
 8015c0c:	f000 fbaf 	bl	801636e <USBD_CtlSendData>
          break;
 8015c10:	e004      	b.n	8015c1c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8015c12:	6839      	ldr	r1, [r7, #0]
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f000 fb39 	bl	801628c <USBD_CtlError>
        break;
 8015c1a:	bf00      	nop
      }
      break;
 8015c1c:	e004      	b.n	8015c28 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8015c1e:	6839      	ldr	r1, [r7, #0]
 8015c20:	6878      	ldr	r0, [r7, #4]
 8015c22:	f000 fb33 	bl	801628c <USBD_CtlError>
      break;
 8015c26:	bf00      	nop
    }
    break;
 8015c28:	e004      	b.n	8015c34 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8015c2a:	6839      	ldr	r1, [r7, #0]
 8015c2c:	6878      	ldr	r0, [r7, #4]
 8015c2e:	f000 fb2d 	bl	801628c <USBD_CtlError>
    break;
 8015c32:	bf00      	nop
  }

  return ret;
 8015c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3710      	adds	r7, #16
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
	...

08015c40 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b084      	sub	sp, #16
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
 8015c48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015c52:	2300      	movs	r3, #0
 8015c54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015c56:	683b      	ldr	r3, [r7, #0]
 8015c58:	885b      	ldrh	r3, [r3, #2]
 8015c5a:	0a1b      	lsrs	r3, r3, #8
 8015c5c:	b29b      	uxth	r3, r3
 8015c5e:	3b01      	subs	r3, #1
 8015c60:	2b06      	cmp	r3, #6
 8015c62:	f200 8128 	bhi.w	8015eb6 <USBD_GetDescriptor+0x276>
 8015c66:	a201      	add	r2, pc, #4	; (adr r2, 8015c6c <USBD_GetDescriptor+0x2c>)
 8015c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c6c:	08015c89 	.word	0x08015c89
 8015c70:	08015ca1 	.word	0x08015ca1
 8015c74:	08015ce1 	.word	0x08015ce1
 8015c78:	08015eb7 	.word	0x08015eb7
 8015c7c:	08015eb7 	.word	0x08015eb7
 8015c80:	08015e57 	.word	0x08015e57
 8015c84:	08015e83 	.word	0x08015e83
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	687a      	ldr	r2, [r7, #4]
 8015c92:	7c12      	ldrb	r2, [r2, #16]
 8015c94:	f107 0108 	add.w	r1, r7, #8
 8015c98:	4610      	mov	r0, r2
 8015c9a:	4798      	blx	r3
 8015c9c:	60f8      	str	r0, [r7, #12]
    break;
 8015c9e:	e112      	b.n	8015ec6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	7c1b      	ldrb	r3, [r3, #16]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d10d      	bne.n	8015cc4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cb0:	f107 0208 	add.w	r2, r7, #8
 8015cb4:	4610      	mov	r0, r2
 8015cb6:	4798      	blx	r3
 8015cb8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	3301      	adds	r3, #1
 8015cbe:	2202      	movs	r2, #2
 8015cc0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8015cc2:	e100      	b.n	8015ec6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ccc:	f107 0208 	add.w	r2, r7, #8
 8015cd0:	4610      	mov	r0, r2
 8015cd2:	4798      	blx	r3
 8015cd4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	3301      	adds	r3, #1
 8015cda:	2202      	movs	r2, #2
 8015cdc:	701a      	strb	r2, [r3, #0]
    break;
 8015cde:	e0f2      	b.n	8015ec6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8015ce0:	683b      	ldr	r3, [r7, #0]
 8015ce2:	885b      	ldrh	r3, [r3, #2]
 8015ce4:	b2db      	uxtb	r3, r3
 8015ce6:	2b05      	cmp	r3, #5
 8015ce8:	f200 80ac 	bhi.w	8015e44 <USBD_GetDescriptor+0x204>
 8015cec:	a201      	add	r2, pc, #4	; (adr r2, 8015cf4 <USBD_GetDescriptor+0xb4>)
 8015cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cf2:	bf00      	nop
 8015cf4:	08015d0d 	.word	0x08015d0d
 8015cf8:	08015d41 	.word	0x08015d41
 8015cfc:	08015d75 	.word	0x08015d75
 8015d00:	08015da9 	.word	0x08015da9
 8015d04:	08015ddd 	.word	0x08015ddd
 8015d08:	08015e11 	.word	0x08015e11
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d12:	685b      	ldr	r3, [r3, #4]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d00b      	beq.n	8015d30 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d1e:	685b      	ldr	r3, [r3, #4]
 8015d20:	687a      	ldr	r2, [r7, #4]
 8015d22:	7c12      	ldrb	r2, [r2, #16]
 8015d24:	f107 0108 	add.w	r1, r7, #8
 8015d28:	4610      	mov	r0, r2
 8015d2a:	4798      	blx	r3
 8015d2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d2e:	e091      	b.n	8015e54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d30:	6839      	ldr	r1, [r7, #0]
 8015d32:	6878      	ldr	r0, [r7, #4]
 8015d34:	f000 faaa 	bl	801628c <USBD_CtlError>
        err++;
 8015d38:	7afb      	ldrb	r3, [r7, #11]
 8015d3a:	3301      	adds	r3, #1
 8015d3c:	72fb      	strb	r3, [r7, #11]
      break;
 8015d3e:	e089      	b.n	8015e54 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d46:	689b      	ldr	r3, [r3, #8]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d00b      	beq.n	8015d64 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d52:	689b      	ldr	r3, [r3, #8]
 8015d54:	687a      	ldr	r2, [r7, #4]
 8015d56:	7c12      	ldrb	r2, [r2, #16]
 8015d58:	f107 0108 	add.w	r1, r7, #8
 8015d5c:	4610      	mov	r0, r2
 8015d5e:	4798      	blx	r3
 8015d60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d62:	e077      	b.n	8015e54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d64:	6839      	ldr	r1, [r7, #0]
 8015d66:	6878      	ldr	r0, [r7, #4]
 8015d68:	f000 fa90 	bl	801628c <USBD_CtlError>
        err++;
 8015d6c:	7afb      	ldrb	r3, [r7, #11]
 8015d6e:	3301      	adds	r3, #1
 8015d70:	72fb      	strb	r3, [r7, #11]
      break;
 8015d72:	e06f      	b.n	8015e54 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d7a:	68db      	ldr	r3, [r3, #12]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d00b      	beq.n	8015d98 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d86:	68db      	ldr	r3, [r3, #12]
 8015d88:	687a      	ldr	r2, [r7, #4]
 8015d8a:	7c12      	ldrb	r2, [r2, #16]
 8015d8c:	f107 0108 	add.w	r1, r7, #8
 8015d90:	4610      	mov	r0, r2
 8015d92:	4798      	blx	r3
 8015d94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d96:	e05d      	b.n	8015e54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d98:	6839      	ldr	r1, [r7, #0]
 8015d9a:	6878      	ldr	r0, [r7, #4]
 8015d9c:	f000 fa76 	bl	801628c <USBD_CtlError>
        err++;
 8015da0:	7afb      	ldrb	r3, [r7, #11]
 8015da2:	3301      	adds	r3, #1
 8015da4:	72fb      	strb	r3, [r7, #11]
      break;
 8015da6:	e055      	b.n	8015e54 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dae:	691b      	ldr	r3, [r3, #16]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d00b      	beq.n	8015dcc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dba:	691b      	ldr	r3, [r3, #16]
 8015dbc:	687a      	ldr	r2, [r7, #4]
 8015dbe:	7c12      	ldrb	r2, [r2, #16]
 8015dc0:	f107 0108 	add.w	r1, r7, #8
 8015dc4:	4610      	mov	r0, r2
 8015dc6:	4798      	blx	r3
 8015dc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015dca:	e043      	b.n	8015e54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015dcc:	6839      	ldr	r1, [r7, #0]
 8015dce:	6878      	ldr	r0, [r7, #4]
 8015dd0:	f000 fa5c 	bl	801628c <USBD_CtlError>
        err++;
 8015dd4:	7afb      	ldrb	r3, [r7, #11]
 8015dd6:	3301      	adds	r3, #1
 8015dd8:	72fb      	strb	r3, [r7, #11]
      break;
 8015dda:	e03b      	b.n	8015e54 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015de2:	695b      	ldr	r3, [r3, #20]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d00b      	beq.n	8015e00 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dee:	695b      	ldr	r3, [r3, #20]
 8015df0:	687a      	ldr	r2, [r7, #4]
 8015df2:	7c12      	ldrb	r2, [r2, #16]
 8015df4:	f107 0108 	add.w	r1, r7, #8
 8015df8:	4610      	mov	r0, r2
 8015dfa:	4798      	blx	r3
 8015dfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015dfe:	e029      	b.n	8015e54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015e00:	6839      	ldr	r1, [r7, #0]
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f000 fa42 	bl	801628c <USBD_CtlError>
        err++;
 8015e08:	7afb      	ldrb	r3, [r7, #11]
 8015e0a:	3301      	adds	r3, #1
 8015e0c:	72fb      	strb	r3, [r7, #11]
      break;
 8015e0e:	e021      	b.n	8015e54 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e16:	699b      	ldr	r3, [r3, #24]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d00b      	beq.n	8015e34 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e22:	699b      	ldr	r3, [r3, #24]
 8015e24:	687a      	ldr	r2, [r7, #4]
 8015e26:	7c12      	ldrb	r2, [r2, #16]
 8015e28:	f107 0108 	add.w	r1, r7, #8
 8015e2c:	4610      	mov	r0, r2
 8015e2e:	4798      	blx	r3
 8015e30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015e32:	e00f      	b.n	8015e54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015e34:	6839      	ldr	r1, [r7, #0]
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	f000 fa28 	bl	801628c <USBD_CtlError>
        err++;
 8015e3c:	7afb      	ldrb	r3, [r7, #11]
 8015e3e:	3301      	adds	r3, #1
 8015e40:	72fb      	strb	r3, [r7, #11]
      break;
 8015e42:	e007      	b.n	8015e54 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8015e44:	6839      	ldr	r1, [r7, #0]
 8015e46:	6878      	ldr	r0, [r7, #4]
 8015e48:	f000 fa20 	bl	801628c <USBD_CtlError>
      err++;
 8015e4c:	7afb      	ldrb	r3, [r7, #11]
 8015e4e:	3301      	adds	r3, #1
 8015e50:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8015e52:	bf00      	nop
    }
    break;
 8015e54:	e037      	b.n	8015ec6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	7c1b      	ldrb	r3, [r3, #16]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d109      	bne.n	8015e72 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e66:	f107 0208 	add.w	r2, r7, #8
 8015e6a:	4610      	mov	r0, r2
 8015e6c:	4798      	blx	r3
 8015e6e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8015e70:	e029      	b.n	8015ec6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8015e72:	6839      	ldr	r1, [r7, #0]
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f000 fa09 	bl	801628c <USBD_CtlError>
      err++;
 8015e7a:	7afb      	ldrb	r3, [r7, #11]
 8015e7c:	3301      	adds	r3, #1
 8015e7e:	72fb      	strb	r3, [r7, #11]
    break;
 8015e80:	e021      	b.n	8015ec6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	7c1b      	ldrb	r3, [r3, #16]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d10d      	bne.n	8015ea6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e92:	f107 0208 	add.w	r2, r7, #8
 8015e96:	4610      	mov	r0, r2
 8015e98:	4798      	blx	r3
 8015e9a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	3301      	adds	r3, #1
 8015ea0:	2207      	movs	r2, #7
 8015ea2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8015ea4:	e00f      	b.n	8015ec6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8015ea6:	6839      	ldr	r1, [r7, #0]
 8015ea8:	6878      	ldr	r0, [r7, #4]
 8015eaa:	f000 f9ef 	bl	801628c <USBD_CtlError>
      err++;
 8015eae:	7afb      	ldrb	r3, [r7, #11]
 8015eb0:	3301      	adds	r3, #1
 8015eb2:	72fb      	strb	r3, [r7, #11]
    break;
 8015eb4:	e007      	b.n	8015ec6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8015eb6:	6839      	ldr	r1, [r7, #0]
 8015eb8:	6878      	ldr	r0, [r7, #4]
 8015eba:	f000 f9e7 	bl	801628c <USBD_CtlError>
    err++;
 8015ebe:	7afb      	ldrb	r3, [r7, #11]
 8015ec0:	3301      	adds	r3, #1
 8015ec2:	72fb      	strb	r3, [r7, #11]
    break;
 8015ec4:	bf00      	nop
  }

  if (err != 0U)
 8015ec6:	7afb      	ldrb	r3, [r7, #11]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d11e      	bne.n	8015f0a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8015ecc:	683b      	ldr	r3, [r7, #0]
 8015ece:	88db      	ldrh	r3, [r3, #6]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d016      	beq.n	8015f02 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8015ed4:	893b      	ldrh	r3, [r7, #8]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d00e      	beq.n	8015ef8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8015eda:	683b      	ldr	r3, [r7, #0]
 8015edc:	88da      	ldrh	r2, [r3, #6]
 8015ede:	893b      	ldrh	r3, [r7, #8]
 8015ee0:	4293      	cmp	r3, r2
 8015ee2:	bf28      	it	cs
 8015ee4:	4613      	movcs	r3, r2
 8015ee6:	b29b      	uxth	r3, r3
 8015ee8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8015eea:	893b      	ldrh	r3, [r7, #8]
 8015eec:	461a      	mov	r2, r3
 8015eee:	68f9      	ldr	r1, [r7, #12]
 8015ef0:	6878      	ldr	r0, [r7, #4]
 8015ef2:	f000 fa3c 	bl	801636e <USBD_CtlSendData>
 8015ef6:	e009      	b.n	8015f0c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8015ef8:	6839      	ldr	r1, [r7, #0]
 8015efa:	6878      	ldr	r0, [r7, #4]
 8015efc:	f000 f9c6 	bl	801628c <USBD_CtlError>
 8015f00:	e004      	b.n	8015f0c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f000 fa70 	bl	80163e8 <USBD_CtlSendStatus>
 8015f08:	e000      	b.n	8015f0c <USBD_GetDescriptor+0x2cc>
    return;
 8015f0a:	bf00      	nop
    }
  }
}
 8015f0c:	3710      	adds	r7, #16
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd80      	pop	{r7, pc}
 8015f12:	bf00      	nop

08015f14 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b084      	sub	sp, #16
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
 8015f1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015f1e:	683b      	ldr	r3, [r7, #0]
 8015f20:	889b      	ldrh	r3, [r3, #4]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d130      	bne.n	8015f88 <USBD_SetAddress+0x74>
 8015f26:	683b      	ldr	r3, [r7, #0]
 8015f28:	88db      	ldrh	r3, [r3, #6]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d12c      	bne.n	8015f88 <USBD_SetAddress+0x74>
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	885b      	ldrh	r3, [r3, #2]
 8015f32:	2b7f      	cmp	r3, #127	; 0x7f
 8015f34:	d828      	bhi.n	8015f88 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015f36:	683b      	ldr	r3, [r7, #0]
 8015f38:	885b      	ldrh	r3, [r3, #2]
 8015f3a:	b2db      	uxtb	r3, r3
 8015f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f48:	2b03      	cmp	r3, #3
 8015f4a:	d104      	bne.n	8015f56 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8015f4c:	6839      	ldr	r1, [r7, #0]
 8015f4e:	6878      	ldr	r0, [r7, #4]
 8015f50:	f000 f99c 	bl	801628c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f54:	e01c      	b.n	8015f90 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	7bfa      	ldrb	r2, [r7, #15]
 8015f5a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015f5e:	7bfb      	ldrb	r3, [r7, #15]
 8015f60:	4619      	mov	r1, r3
 8015f62:	6878      	ldr	r0, [r7, #4]
 8015f64:	f003 f9b5 	bl	80192d2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015f68:	6878      	ldr	r0, [r7, #4]
 8015f6a:	f000 fa3d 	bl	80163e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015f6e:	7bfb      	ldrb	r3, [r7, #15]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d004      	beq.n	8015f7e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	2202      	movs	r2, #2
 8015f78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f7c:	e008      	b.n	8015f90 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	2201      	movs	r2, #1
 8015f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f86:	e003      	b.n	8015f90 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015f88:	6839      	ldr	r1, [r7, #0]
 8015f8a:	6878      	ldr	r0, [r7, #4]
 8015f8c:	f000 f97e 	bl	801628c <USBD_CtlError>
  }
}
 8015f90:	bf00      	nop
 8015f92:	3710      	adds	r7, #16
 8015f94:	46bd      	mov	sp, r7
 8015f96:	bd80      	pop	{r7, pc}

08015f98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b084      	sub	sp, #16
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	885b      	ldrh	r3, [r3, #2]
 8015faa:	b2da      	uxtb	r2, r3
 8015fac:	4b4b      	ldr	r3, [pc, #300]	; (80160dc <USBD_SetConfig+0x144>)
 8015fae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015fb0:	4b4a      	ldr	r3, [pc, #296]	; (80160dc <USBD_SetConfig+0x144>)
 8015fb2:	781b      	ldrb	r3, [r3, #0]
 8015fb4:	2b01      	cmp	r3, #1
 8015fb6:	d905      	bls.n	8015fc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015fb8:	6839      	ldr	r1, [r7, #0]
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	f000 f966 	bl	801628c <USBD_CtlError>
    return USBD_FAIL;
 8015fc0:	2303      	movs	r3, #3
 8015fc2:	e087      	b.n	80160d4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fca:	2b02      	cmp	r3, #2
 8015fcc:	d002      	beq.n	8015fd4 <USBD_SetConfig+0x3c>
 8015fce:	2b03      	cmp	r3, #3
 8015fd0:	d025      	beq.n	801601e <USBD_SetConfig+0x86>
 8015fd2:	e071      	b.n	80160b8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8015fd4:	4b41      	ldr	r3, [pc, #260]	; (80160dc <USBD_SetConfig+0x144>)
 8015fd6:	781b      	ldrb	r3, [r3, #0]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d01c      	beq.n	8016016 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8015fdc:	4b3f      	ldr	r3, [pc, #252]	; (80160dc <USBD_SetConfig+0x144>)
 8015fde:	781b      	ldrb	r3, [r3, #0]
 8015fe0:	461a      	mov	r2, r3
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8015fe6:	4b3d      	ldr	r3, [pc, #244]	; (80160dc <USBD_SetConfig+0x144>)
 8015fe8:	781b      	ldrb	r3, [r3, #0]
 8015fea:	4619      	mov	r1, r3
 8015fec:	6878      	ldr	r0, [r7, #4]
 8015fee:	f7ff f9a8 	bl	8015342 <USBD_SetClassConfig>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8015ff6:	7bfb      	ldrb	r3, [r7, #15]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d004      	beq.n	8016006 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8015ffc:	6839      	ldr	r1, [r7, #0]
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f000 f944 	bl	801628c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8016004:	e065      	b.n	80160d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8016006:	6878      	ldr	r0, [r7, #4]
 8016008:	f000 f9ee 	bl	80163e8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	2203      	movs	r2, #3
 8016010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8016014:	e05d      	b.n	80160d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	f000 f9e6 	bl	80163e8 <USBD_CtlSendStatus>
    break;
 801601c:	e059      	b.n	80160d2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801601e:	4b2f      	ldr	r3, [pc, #188]	; (80160dc <USBD_SetConfig+0x144>)
 8016020:	781b      	ldrb	r3, [r3, #0]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d112      	bne.n	801604c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	2202      	movs	r2, #2
 801602a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801602e:	4b2b      	ldr	r3, [pc, #172]	; (80160dc <USBD_SetConfig+0x144>)
 8016030:	781b      	ldrb	r3, [r3, #0]
 8016032:	461a      	mov	r2, r3
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016038:	4b28      	ldr	r3, [pc, #160]	; (80160dc <USBD_SetConfig+0x144>)
 801603a:	781b      	ldrb	r3, [r3, #0]
 801603c:	4619      	mov	r1, r3
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	f7ff f99b 	bl	801537a <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8016044:	6878      	ldr	r0, [r7, #4]
 8016046:	f000 f9cf 	bl	80163e8 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801604a:	e042      	b.n	80160d2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 801604c:	4b23      	ldr	r3, [pc, #140]	; (80160dc <USBD_SetConfig+0x144>)
 801604e:	781b      	ldrb	r3, [r3, #0]
 8016050:	461a      	mov	r2, r3
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	685b      	ldr	r3, [r3, #4]
 8016056:	429a      	cmp	r2, r3
 8016058:	d02a      	beq.n	80160b0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	685b      	ldr	r3, [r3, #4]
 801605e:	b2db      	uxtb	r3, r3
 8016060:	4619      	mov	r1, r3
 8016062:	6878      	ldr	r0, [r7, #4]
 8016064:	f7ff f989 	bl	801537a <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8016068:	4b1c      	ldr	r3, [pc, #112]	; (80160dc <USBD_SetConfig+0x144>)
 801606a:	781b      	ldrb	r3, [r3, #0]
 801606c:	461a      	mov	r2, r3
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8016072:	4b1a      	ldr	r3, [pc, #104]	; (80160dc <USBD_SetConfig+0x144>)
 8016074:	781b      	ldrb	r3, [r3, #0]
 8016076:	4619      	mov	r1, r3
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f7ff f962 	bl	8015342 <USBD_SetClassConfig>
 801607e:	4603      	mov	r3, r0
 8016080:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8016082:	7bfb      	ldrb	r3, [r7, #15]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d00f      	beq.n	80160a8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8016088:	6839      	ldr	r1, [r7, #0]
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f000 f8fe 	bl	801628c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	685b      	ldr	r3, [r3, #4]
 8016094:	b2db      	uxtb	r3, r3
 8016096:	4619      	mov	r1, r3
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f7ff f96e 	bl	801537a <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	2202      	movs	r2, #2
 80160a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80160a6:	e014      	b.n	80160d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f000 f99d 	bl	80163e8 <USBD_CtlSendStatus>
    break;
 80160ae:	e010      	b.n	80160d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f000 f999 	bl	80163e8 <USBD_CtlSendStatus>
    break;
 80160b6:	e00c      	b.n	80160d2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80160b8:	6839      	ldr	r1, [r7, #0]
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f000 f8e6 	bl	801628c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80160c0:	4b06      	ldr	r3, [pc, #24]	; (80160dc <USBD_SetConfig+0x144>)
 80160c2:	781b      	ldrb	r3, [r3, #0]
 80160c4:	4619      	mov	r1, r3
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f7ff f957 	bl	801537a <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80160cc:	2303      	movs	r3, #3
 80160ce:	73fb      	strb	r3, [r7, #15]
    break;
 80160d0:	bf00      	nop
  }

  return ret;
 80160d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80160d4:	4618      	mov	r0, r3
 80160d6:	3710      	adds	r7, #16
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}
 80160dc:	24000b58 	.word	0x24000b58

080160e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b082      	sub	sp, #8
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
 80160e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80160ea:	683b      	ldr	r3, [r7, #0]
 80160ec:	88db      	ldrh	r3, [r3, #6]
 80160ee:	2b01      	cmp	r3, #1
 80160f0:	d004      	beq.n	80160fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80160f2:	6839      	ldr	r1, [r7, #0]
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f000 f8c9 	bl	801628c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80160fa:	e021      	b.n	8016140 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016102:	2b01      	cmp	r3, #1
 8016104:	db17      	blt.n	8016136 <USBD_GetConfig+0x56>
 8016106:	2b02      	cmp	r3, #2
 8016108:	dd02      	ble.n	8016110 <USBD_GetConfig+0x30>
 801610a:	2b03      	cmp	r3, #3
 801610c:	d00b      	beq.n	8016126 <USBD_GetConfig+0x46>
 801610e:	e012      	b.n	8016136 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	2200      	movs	r2, #0
 8016114:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	3308      	adds	r3, #8
 801611a:	2201      	movs	r2, #1
 801611c:	4619      	mov	r1, r3
 801611e:	6878      	ldr	r0, [r7, #4]
 8016120:	f000 f925 	bl	801636e <USBD_CtlSendData>
      break;
 8016124:	e00c      	b.n	8016140 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	3304      	adds	r3, #4
 801612a:	2201      	movs	r2, #1
 801612c:	4619      	mov	r1, r3
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f000 f91d 	bl	801636e <USBD_CtlSendData>
      break;
 8016134:	e004      	b.n	8016140 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8016136:	6839      	ldr	r1, [r7, #0]
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	f000 f8a7 	bl	801628c <USBD_CtlError>
      break;
 801613e:	bf00      	nop
}
 8016140:	bf00      	nop
 8016142:	3708      	adds	r7, #8
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}

08016148 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b082      	sub	sp, #8
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
 8016150:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016158:	3b01      	subs	r3, #1
 801615a:	2b02      	cmp	r3, #2
 801615c:	d81e      	bhi.n	801619c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801615e:	683b      	ldr	r3, [r7, #0]
 8016160:	88db      	ldrh	r3, [r3, #6]
 8016162:	2b02      	cmp	r3, #2
 8016164:	d004      	beq.n	8016170 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8016166:	6839      	ldr	r1, [r7, #0]
 8016168:	6878      	ldr	r0, [r7, #4]
 801616a:	f000 f88f 	bl	801628c <USBD_CtlError>
      break;
 801616e:	e01a      	b.n	80161a6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	2201      	movs	r2, #1
 8016174:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801617c:	2b00      	cmp	r3, #0
 801617e:	d005      	beq.n	801618c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	68db      	ldr	r3, [r3, #12]
 8016184:	f043 0202 	orr.w	r2, r3, #2
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	330c      	adds	r3, #12
 8016190:	2202      	movs	r2, #2
 8016192:	4619      	mov	r1, r3
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f000 f8ea 	bl	801636e <USBD_CtlSendData>
    break;
 801619a:	e004      	b.n	80161a6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801619c:	6839      	ldr	r1, [r7, #0]
 801619e:	6878      	ldr	r0, [r7, #4]
 80161a0:	f000 f874 	bl	801628c <USBD_CtlError>
    break;
 80161a4:	bf00      	nop
  }
}
 80161a6:	bf00      	nop
 80161a8:	3708      	adds	r7, #8
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}

080161ae <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161ae:	b580      	push	{r7, lr}
 80161b0:	b082      	sub	sp, #8
 80161b2:	af00      	add	r7, sp, #0
 80161b4:	6078      	str	r0, [r7, #4]
 80161b6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	885b      	ldrh	r3, [r3, #2]
 80161bc:	2b01      	cmp	r3, #1
 80161be:	d106      	bne.n	80161ce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	2201      	movs	r2, #1
 80161c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80161c8:	6878      	ldr	r0, [r7, #4]
 80161ca:	f000 f90d 	bl	80163e8 <USBD_CtlSendStatus>
  }
}
 80161ce:	bf00      	nop
 80161d0:	3708      	adds	r7, #8
 80161d2:	46bd      	mov	sp, r7
 80161d4:	bd80      	pop	{r7, pc}

080161d6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161d6:	b580      	push	{r7, lr}
 80161d8:	b082      	sub	sp, #8
 80161da:	af00      	add	r7, sp, #0
 80161dc:	6078      	str	r0, [r7, #4]
 80161de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161e6:	3b01      	subs	r3, #1
 80161e8:	2b02      	cmp	r3, #2
 80161ea:	d80b      	bhi.n	8016204 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80161ec:	683b      	ldr	r3, [r7, #0]
 80161ee:	885b      	ldrh	r3, [r3, #2]
 80161f0:	2b01      	cmp	r3, #1
 80161f2:	d10c      	bne.n	801620e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	2200      	movs	r2, #0
 80161f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f000 f8f3 	bl	80163e8 <USBD_CtlSendStatus>
      }
      break;
 8016202:	e004      	b.n	801620e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8016204:	6839      	ldr	r1, [r7, #0]
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f000 f840 	bl	801628c <USBD_CtlError>
      break;
 801620c:	e000      	b.n	8016210 <USBD_ClrFeature+0x3a>
      break;
 801620e:	bf00      	nop
  }
}
 8016210:	bf00      	nop
 8016212:	3708      	adds	r7, #8
 8016214:	46bd      	mov	sp, r7
 8016216:	bd80      	pop	{r7, pc}

08016218 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b084      	sub	sp, #16
 801621c:	af00      	add	r7, sp, #0
 801621e:	6078      	str	r0, [r7, #4]
 8016220:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016222:	683b      	ldr	r3, [r7, #0]
 8016224:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	781a      	ldrb	r2, [r3, #0]
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	3301      	adds	r3, #1
 8016232:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	781a      	ldrb	r2, [r3, #0]
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	3301      	adds	r3, #1
 8016240:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016242:	68f8      	ldr	r0, [r7, #12]
 8016244:	f7ff fad4 	bl	80157f0 <SWAPBYTE>
 8016248:	4603      	mov	r3, r0
 801624a:	461a      	mov	r2, r3
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	3301      	adds	r3, #1
 8016254:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	3301      	adds	r3, #1
 801625a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801625c:	68f8      	ldr	r0, [r7, #12]
 801625e:	f7ff fac7 	bl	80157f0 <SWAPBYTE>
 8016262:	4603      	mov	r3, r0
 8016264:	461a      	mov	r2, r3
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	3301      	adds	r3, #1
 801626e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	3301      	adds	r3, #1
 8016274:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016276:	68f8      	ldr	r0, [r7, #12]
 8016278:	f7ff faba 	bl	80157f0 <SWAPBYTE>
 801627c:	4603      	mov	r3, r0
 801627e:	461a      	mov	r2, r3
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	80da      	strh	r2, [r3, #6]
}
 8016284:	bf00      	nop
 8016286:	3710      	adds	r7, #16
 8016288:	46bd      	mov	sp, r7
 801628a:	bd80      	pop	{r7, pc}

0801628c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b082      	sub	sp, #8
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
 8016294:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016296:	2180      	movs	r1, #128	; 0x80
 8016298:	6878      	ldr	r0, [r7, #4]
 801629a:	f002 ffb0 	bl	80191fe <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801629e:	2100      	movs	r1, #0
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f002 ffac 	bl	80191fe <USBD_LL_StallEP>
}
 80162a6:	bf00      	nop
 80162a8:	3708      	adds	r7, #8
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}

080162ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80162ae:	b580      	push	{r7, lr}
 80162b0:	b086      	sub	sp, #24
 80162b2:	af00      	add	r7, sp, #0
 80162b4:	60f8      	str	r0, [r7, #12]
 80162b6:	60b9      	str	r1, [r7, #8]
 80162b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80162ba:	2300      	movs	r3, #0
 80162bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d036      	beq.n	8016332 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80162c8:	6938      	ldr	r0, [r7, #16]
 80162ca:	f000 f836 	bl	801633a <USBD_GetLen>
 80162ce:	4603      	mov	r3, r0
 80162d0:	3301      	adds	r3, #1
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	005b      	lsls	r3, r3, #1
 80162d6:	b29a      	uxth	r2, r3
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80162dc:	7dfb      	ldrb	r3, [r7, #23]
 80162de:	68ba      	ldr	r2, [r7, #8]
 80162e0:	4413      	add	r3, r2
 80162e2:	687a      	ldr	r2, [r7, #4]
 80162e4:	7812      	ldrb	r2, [r2, #0]
 80162e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80162e8:	7dfb      	ldrb	r3, [r7, #23]
 80162ea:	3301      	adds	r3, #1
 80162ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80162ee:	7dfb      	ldrb	r3, [r7, #23]
 80162f0:	68ba      	ldr	r2, [r7, #8]
 80162f2:	4413      	add	r3, r2
 80162f4:	2203      	movs	r2, #3
 80162f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80162f8:	7dfb      	ldrb	r3, [r7, #23]
 80162fa:	3301      	adds	r3, #1
 80162fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80162fe:	e013      	b.n	8016328 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016300:	7dfb      	ldrb	r3, [r7, #23]
 8016302:	68ba      	ldr	r2, [r7, #8]
 8016304:	4413      	add	r3, r2
 8016306:	693a      	ldr	r2, [r7, #16]
 8016308:	7812      	ldrb	r2, [r2, #0]
 801630a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801630c:	693b      	ldr	r3, [r7, #16]
 801630e:	3301      	adds	r3, #1
 8016310:	613b      	str	r3, [r7, #16]
    idx++;
 8016312:	7dfb      	ldrb	r3, [r7, #23]
 8016314:	3301      	adds	r3, #1
 8016316:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016318:	7dfb      	ldrb	r3, [r7, #23]
 801631a:	68ba      	ldr	r2, [r7, #8]
 801631c:	4413      	add	r3, r2
 801631e:	2200      	movs	r2, #0
 8016320:	701a      	strb	r2, [r3, #0]
    idx++;
 8016322:	7dfb      	ldrb	r3, [r7, #23]
 8016324:	3301      	adds	r3, #1
 8016326:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016328:	693b      	ldr	r3, [r7, #16]
 801632a:	781b      	ldrb	r3, [r3, #0]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d1e7      	bne.n	8016300 <USBD_GetString+0x52>
 8016330:	e000      	b.n	8016334 <USBD_GetString+0x86>
    return;
 8016332:	bf00      	nop
  }
}
 8016334:	3718      	adds	r7, #24
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}

0801633a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801633a:	b480      	push	{r7}
 801633c:	b085      	sub	sp, #20
 801633e:	af00      	add	r7, sp, #0
 8016340:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016342:	2300      	movs	r3, #0
 8016344:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801634a:	e005      	b.n	8016358 <USBD_GetLen+0x1e>
  {
    len++;
 801634c:	7bfb      	ldrb	r3, [r7, #15]
 801634e:	3301      	adds	r3, #1
 8016350:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016352:	68bb      	ldr	r3, [r7, #8]
 8016354:	3301      	adds	r3, #1
 8016356:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016358:	68bb      	ldr	r3, [r7, #8]
 801635a:	781b      	ldrb	r3, [r3, #0]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d1f5      	bne.n	801634c <USBD_GetLen+0x12>
  }

  return len;
 8016360:	7bfb      	ldrb	r3, [r7, #15]
}
 8016362:	4618      	mov	r0, r3
 8016364:	3714      	adds	r7, #20
 8016366:	46bd      	mov	sp, r7
 8016368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636c:	4770      	bx	lr

0801636e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801636e:	b580      	push	{r7, lr}
 8016370:	b084      	sub	sp, #16
 8016372:	af00      	add	r7, sp, #0
 8016374:	60f8      	str	r0, [r7, #12]
 8016376:	60b9      	str	r1, [r7, #8]
 8016378:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	2202      	movs	r2, #2
 801637e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	687a      	ldr	r2, [r7, #4]
 8016386:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	687a      	ldr	r2, [r7, #4]
 801638c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	68ba      	ldr	r2, [r7, #8]
 8016392:	2100      	movs	r1, #0
 8016394:	68f8      	ldr	r0, [r7, #12]
 8016396:	f002 ffbb 	bl	8019310 <USBD_LL_Transmit>

  return USBD_OK;
 801639a:	2300      	movs	r3, #0
}
 801639c:	4618      	mov	r0, r3
 801639e:	3710      	adds	r7, #16
 80163a0:	46bd      	mov	sp, r7
 80163a2:	bd80      	pop	{r7, pc}

080163a4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b084      	sub	sp, #16
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	60f8      	str	r0, [r7, #12]
 80163ac:	60b9      	str	r1, [r7, #8]
 80163ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	68ba      	ldr	r2, [r7, #8]
 80163b4:	2100      	movs	r1, #0
 80163b6:	68f8      	ldr	r0, [r7, #12]
 80163b8:	f002 ffaa 	bl	8019310 <USBD_LL_Transmit>

  return USBD_OK;
 80163bc:	2300      	movs	r3, #0
}
 80163be:	4618      	mov	r0, r3
 80163c0:	3710      	adds	r7, #16
 80163c2:	46bd      	mov	sp, r7
 80163c4:	bd80      	pop	{r7, pc}

080163c6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80163c6:	b580      	push	{r7, lr}
 80163c8:	b084      	sub	sp, #16
 80163ca:	af00      	add	r7, sp, #0
 80163cc:	60f8      	str	r0, [r7, #12]
 80163ce:	60b9      	str	r1, [r7, #8]
 80163d0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	68ba      	ldr	r2, [r7, #8]
 80163d6:	2100      	movs	r1, #0
 80163d8:	68f8      	ldr	r0, [r7, #12]
 80163da:	f002 ffba 	bl	8019352 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80163de:	2300      	movs	r3, #0
}
 80163e0:	4618      	mov	r0, r3
 80163e2:	3710      	adds	r7, #16
 80163e4:	46bd      	mov	sp, r7
 80163e6:	bd80      	pop	{r7, pc}

080163e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b082      	sub	sp, #8
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	2204      	movs	r2, #4
 80163f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80163f8:	2300      	movs	r3, #0
 80163fa:	2200      	movs	r2, #0
 80163fc:	2100      	movs	r1, #0
 80163fe:	6878      	ldr	r0, [r7, #4]
 8016400:	f002 ff86 	bl	8019310 <USBD_LL_Transmit>

  return USBD_OK;
 8016404:	2300      	movs	r3, #0
}
 8016406:	4618      	mov	r0, r3
 8016408:	3708      	adds	r7, #8
 801640a:	46bd      	mov	sp, r7
 801640c:	bd80      	pop	{r7, pc}

0801640e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801640e:	b580      	push	{r7, lr}
 8016410:	b082      	sub	sp, #8
 8016412:	af00      	add	r7, sp, #0
 8016414:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	2205      	movs	r2, #5
 801641a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801641e:	2300      	movs	r3, #0
 8016420:	2200      	movs	r2, #0
 8016422:	2100      	movs	r1, #0
 8016424:	6878      	ldr	r0, [r7, #4]
 8016426:	f002 ff94 	bl	8019352 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801642a:	2300      	movs	r3, #0
}
 801642c:	4618      	mov	r0, r3
 801642e:	3708      	adds	r7, #8
 8016430:	46bd      	mov	sp, r7
 8016432:	bd80      	pop	{r7, pc}

08016434 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b084      	sub	sp, #16
 8016438:	af00      	add	r7, sp, #0
 801643a:	4603      	mov	r3, r0
 801643c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801643e:	79fb      	ldrb	r3, [r7, #7]
 8016440:	4a08      	ldr	r2, [pc, #32]	; (8016464 <disk_status+0x30>)
 8016442:	009b      	lsls	r3, r3, #2
 8016444:	4413      	add	r3, r2
 8016446:	685b      	ldr	r3, [r3, #4]
 8016448:	685b      	ldr	r3, [r3, #4]
 801644a:	79fa      	ldrb	r2, [r7, #7]
 801644c:	4905      	ldr	r1, [pc, #20]	; (8016464 <disk_status+0x30>)
 801644e:	440a      	add	r2, r1
 8016450:	7a12      	ldrb	r2, [r2, #8]
 8016452:	4610      	mov	r0, r2
 8016454:	4798      	blx	r3
 8016456:	4603      	mov	r3, r0
 8016458:	73fb      	strb	r3, [r7, #15]
  return stat;
 801645a:	7bfb      	ldrb	r3, [r7, #15]
}
 801645c:	4618      	mov	r0, r3
 801645e:	3710      	adds	r7, #16
 8016460:	46bd      	mov	sp, r7
 8016462:	bd80      	pop	{r7, pc}
 8016464:	24000b84 	.word	0x24000b84

08016468 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b084      	sub	sp, #16
 801646c:	af00      	add	r7, sp, #0
 801646e:	4603      	mov	r3, r0
 8016470:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8016472:	2300      	movs	r3, #0
 8016474:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8016476:	79fb      	ldrb	r3, [r7, #7]
 8016478:	4a0d      	ldr	r2, [pc, #52]	; (80164b0 <disk_initialize+0x48>)
 801647a:	5cd3      	ldrb	r3, [r2, r3]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d111      	bne.n	80164a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8016480:	79fb      	ldrb	r3, [r7, #7]
 8016482:	4a0b      	ldr	r2, [pc, #44]	; (80164b0 <disk_initialize+0x48>)
 8016484:	2101      	movs	r1, #1
 8016486:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016488:	79fb      	ldrb	r3, [r7, #7]
 801648a:	4a09      	ldr	r2, [pc, #36]	; (80164b0 <disk_initialize+0x48>)
 801648c:	009b      	lsls	r3, r3, #2
 801648e:	4413      	add	r3, r2
 8016490:	685b      	ldr	r3, [r3, #4]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	79fa      	ldrb	r2, [r7, #7]
 8016496:	4906      	ldr	r1, [pc, #24]	; (80164b0 <disk_initialize+0x48>)
 8016498:	440a      	add	r2, r1
 801649a:	7a12      	ldrb	r2, [r2, #8]
 801649c:	4610      	mov	r0, r2
 801649e:	4798      	blx	r3
 80164a0:	4603      	mov	r3, r0
 80164a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80164a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80164a6:	4618      	mov	r0, r3
 80164a8:	3710      	adds	r7, #16
 80164aa:	46bd      	mov	sp, r7
 80164ac:	bd80      	pop	{r7, pc}
 80164ae:	bf00      	nop
 80164b0:	24000b84 	.word	0x24000b84

080164b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80164b4:	b590      	push	{r4, r7, lr}
 80164b6:	b087      	sub	sp, #28
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	60b9      	str	r1, [r7, #8]
 80164bc:	607a      	str	r2, [r7, #4]
 80164be:	603b      	str	r3, [r7, #0]
 80164c0:	4603      	mov	r3, r0
 80164c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80164c4:	7bfb      	ldrb	r3, [r7, #15]
 80164c6:	4a0a      	ldr	r2, [pc, #40]	; (80164f0 <disk_read+0x3c>)
 80164c8:	009b      	lsls	r3, r3, #2
 80164ca:	4413      	add	r3, r2
 80164cc:	685b      	ldr	r3, [r3, #4]
 80164ce:	689c      	ldr	r4, [r3, #8]
 80164d0:	7bfb      	ldrb	r3, [r7, #15]
 80164d2:	4a07      	ldr	r2, [pc, #28]	; (80164f0 <disk_read+0x3c>)
 80164d4:	4413      	add	r3, r2
 80164d6:	7a18      	ldrb	r0, [r3, #8]
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	687a      	ldr	r2, [r7, #4]
 80164dc:	68b9      	ldr	r1, [r7, #8]
 80164de:	47a0      	blx	r4
 80164e0:	4603      	mov	r3, r0
 80164e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80164e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80164e6:	4618      	mov	r0, r3
 80164e8:	371c      	adds	r7, #28
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd90      	pop	{r4, r7, pc}
 80164ee:	bf00      	nop
 80164f0:	24000b84 	.word	0x24000b84

080164f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80164f4:	b590      	push	{r4, r7, lr}
 80164f6:	b087      	sub	sp, #28
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	60b9      	str	r1, [r7, #8]
 80164fc:	607a      	str	r2, [r7, #4]
 80164fe:	603b      	str	r3, [r7, #0]
 8016500:	4603      	mov	r3, r0
 8016502:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8016504:	7bfb      	ldrb	r3, [r7, #15]
 8016506:	4a0a      	ldr	r2, [pc, #40]	; (8016530 <disk_write+0x3c>)
 8016508:	009b      	lsls	r3, r3, #2
 801650a:	4413      	add	r3, r2
 801650c:	685b      	ldr	r3, [r3, #4]
 801650e:	68dc      	ldr	r4, [r3, #12]
 8016510:	7bfb      	ldrb	r3, [r7, #15]
 8016512:	4a07      	ldr	r2, [pc, #28]	; (8016530 <disk_write+0x3c>)
 8016514:	4413      	add	r3, r2
 8016516:	7a18      	ldrb	r0, [r3, #8]
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	687a      	ldr	r2, [r7, #4]
 801651c:	68b9      	ldr	r1, [r7, #8]
 801651e:	47a0      	blx	r4
 8016520:	4603      	mov	r3, r0
 8016522:	75fb      	strb	r3, [r7, #23]
  return res;
 8016524:	7dfb      	ldrb	r3, [r7, #23]
}
 8016526:	4618      	mov	r0, r3
 8016528:	371c      	adds	r7, #28
 801652a:	46bd      	mov	sp, r7
 801652c:	bd90      	pop	{r4, r7, pc}
 801652e:	bf00      	nop
 8016530:	24000b84 	.word	0x24000b84

08016534 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016534:	b580      	push	{r7, lr}
 8016536:	b084      	sub	sp, #16
 8016538:	af00      	add	r7, sp, #0
 801653a:	4603      	mov	r3, r0
 801653c:	603a      	str	r2, [r7, #0]
 801653e:	71fb      	strb	r3, [r7, #7]
 8016540:	460b      	mov	r3, r1
 8016542:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016544:	79fb      	ldrb	r3, [r7, #7]
 8016546:	4a09      	ldr	r2, [pc, #36]	; (801656c <disk_ioctl+0x38>)
 8016548:	009b      	lsls	r3, r3, #2
 801654a:	4413      	add	r3, r2
 801654c:	685b      	ldr	r3, [r3, #4]
 801654e:	691b      	ldr	r3, [r3, #16]
 8016550:	79fa      	ldrb	r2, [r7, #7]
 8016552:	4906      	ldr	r1, [pc, #24]	; (801656c <disk_ioctl+0x38>)
 8016554:	440a      	add	r2, r1
 8016556:	7a10      	ldrb	r0, [r2, #8]
 8016558:	79b9      	ldrb	r1, [r7, #6]
 801655a:	683a      	ldr	r2, [r7, #0]
 801655c:	4798      	blx	r3
 801655e:	4603      	mov	r3, r0
 8016560:	73fb      	strb	r3, [r7, #15]
  return res;
 8016562:	7bfb      	ldrb	r3, [r7, #15]
}
 8016564:	4618      	mov	r0, r3
 8016566:	3710      	adds	r7, #16
 8016568:	46bd      	mov	sp, r7
 801656a:	bd80      	pop	{r7, pc}
 801656c:	24000b84 	.word	0x24000b84

08016570 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8016570:	b480      	push	{r7}
 8016572:	b085      	sub	sp, #20
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	3301      	adds	r3, #1
 801657c:	781b      	ldrb	r3, [r3, #0]
 801657e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8016580:	89fb      	ldrh	r3, [r7, #14]
 8016582:	021b      	lsls	r3, r3, #8
 8016584:	b21a      	sxth	r2, r3
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	781b      	ldrb	r3, [r3, #0]
 801658a:	b21b      	sxth	r3, r3
 801658c:	4313      	orrs	r3, r2
 801658e:	b21b      	sxth	r3, r3
 8016590:	81fb      	strh	r3, [r7, #14]
	return rv;
 8016592:	89fb      	ldrh	r3, [r7, #14]
}
 8016594:	4618      	mov	r0, r3
 8016596:	3714      	adds	r7, #20
 8016598:	46bd      	mov	sp, r7
 801659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801659e:	4770      	bx	lr

080165a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80165a0:	b480      	push	{r7}
 80165a2:	b085      	sub	sp, #20
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	3303      	adds	r3, #3
 80165ac:	781b      	ldrb	r3, [r3, #0]
 80165ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	021b      	lsls	r3, r3, #8
 80165b4:	687a      	ldr	r2, [r7, #4]
 80165b6:	3202      	adds	r2, #2
 80165b8:	7812      	ldrb	r2, [r2, #0]
 80165ba:	4313      	orrs	r3, r2
 80165bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	021b      	lsls	r3, r3, #8
 80165c2:	687a      	ldr	r2, [r7, #4]
 80165c4:	3201      	adds	r2, #1
 80165c6:	7812      	ldrb	r2, [r2, #0]
 80165c8:	4313      	orrs	r3, r2
 80165ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	021b      	lsls	r3, r3, #8
 80165d0:	687a      	ldr	r2, [r7, #4]
 80165d2:	7812      	ldrb	r2, [r2, #0]
 80165d4:	4313      	orrs	r3, r2
 80165d6:	60fb      	str	r3, [r7, #12]
	return rv;
 80165d8:	68fb      	ldr	r3, [r7, #12]
}
 80165da:	4618      	mov	r0, r3
 80165dc:	3714      	adds	r7, #20
 80165de:	46bd      	mov	sp, r7
 80165e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e4:	4770      	bx	lr

080165e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80165e6:	b480      	push	{r7}
 80165e8:	b083      	sub	sp, #12
 80165ea:	af00      	add	r7, sp, #0
 80165ec:	6078      	str	r0, [r7, #4]
 80165ee:	460b      	mov	r3, r1
 80165f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	1c5a      	adds	r2, r3, #1
 80165f6:	607a      	str	r2, [r7, #4]
 80165f8:	887a      	ldrh	r2, [r7, #2]
 80165fa:	b2d2      	uxtb	r2, r2
 80165fc:	701a      	strb	r2, [r3, #0]
 80165fe:	887b      	ldrh	r3, [r7, #2]
 8016600:	0a1b      	lsrs	r3, r3, #8
 8016602:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	1c5a      	adds	r2, r3, #1
 8016608:	607a      	str	r2, [r7, #4]
 801660a:	887a      	ldrh	r2, [r7, #2]
 801660c:	b2d2      	uxtb	r2, r2
 801660e:	701a      	strb	r2, [r3, #0]
}
 8016610:	bf00      	nop
 8016612:	370c      	adds	r7, #12
 8016614:	46bd      	mov	sp, r7
 8016616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801661a:	4770      	bx	lr

0801661c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801661c:	b480      	push	{r7}
 801661e:	b083      	sub	sp, #12
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
 8016624:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	1c5a      	adds	r2, r3, #1
 801662a:	607a      	str	r2, [r7, #4]
 801662c:	683a      	ldr	r2, [r7, #0]
 801662e:	b2d2      	uxtb	r2, r2
 8016630:	701a      	strb	r2, [r3, #0]
 8016632:	683b      	ldr	r3, [r7, #0]
 8016634:	0a1b      	lsrs	r3, r3, #8
 8016636:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	1c5a      	adds	r2, r3, #1
 801663c:	607a      	str	r2, [r7, #4]
 801663e:	683a      	ldr	r2, [r7, #0]
 8016640:	b2d2      	uxtb	r2, r2
 8016642:	701a      	strb	r2, [r3, #0]
 8016644:	683b      	ldr	r3, [r7, #0]
 8016646:	0a1b      	lsrs	r3, r3, #8
 8016648:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	1c5a      	adds	r2, r3, #1
 801664e:	607a      	str	r2, [r7, #4]
 8016650:	683a      	ldr	r2, [r7, #0]
 8016652:	b2d2      	uxtb	r2, r2
 8016654:	701a      	strb	r2, [r3, #0]
 8016656:	683b      	ldr	r3, [r7, #0]
 8016658:	0a1b      	lsrs	r3, r3, #8
 801665a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	1c5a      	adds	r2, r3, #1
 8016660:	607a      	str	r2, [r7, #4]
 8016662:	683a      	ldr	r2, [r7, #0]
 8016664:	b2d2      	uxtb	r2, r2
 8016666:	701a      	strb	r2, [r3, #0]
}
 8016668:	bf00      	nop
 801666a:	370c      	adds	r7, #12
 801666c:	46bd      	mov	sp, r7
 801666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016672:	4770      	bx	lr

08016674 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016674:	b480      	push	{r7}
 8016676:	b087      	sub	sp, #28
 8016678:	af00      	add	r7, sp, #0
 801667a:	60f8      	str	r0, [r7, #12]
 801667c:	60b9      	str	r1, [r7, #8]
 801667e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016684:	68bb      	ldr	r3, [r7, #8]
 8016686:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d00d      	beq.n	80166aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801668e:	693a      	ldr	r2, [r7, #16]
 8016690:	1c53      	adds	r3, r2, #1
 8016692:	613b      	str	r3, [r7, #16]
 8016694:	697b      	ldr	r3, [r7, #20]
 8016696:	1c59      	adds	r1, r3, #1
 8016698:	6179      	str	r1, [r7, #20]
 801669a:	7812      	ldrb	r2, [r2, #0]
 801669c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	3b01      	subs	r3, #1
 80166a2:	607b      	str	r3, [r7, #4]
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d1f1      	bne.n	801668e <mem_cpy+0x1a>
	}
}
 80166aa:	bf00      	nop
 80166ac:	371c      	adds	r7, #28
 80166ae:	46bd      	mov	sp, r7
 80166b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b4:	4770      	bx	lr

080166b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80166b6:	b480      	push	{r7}
 80166b8:	b087      	sub	sp, #28
 80166ba:	af00      	add	r7, sp, #0
 80166bc:	60f8      	str	r0, [r7, #12]
 80166be:	60b9      	str	r1, [r7, #8]
 80166c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80166c6:	697b      	ldr	r3, [r7, #20]
 80166c8:	1c5a      	adds	r2, r3, #1
 80166ca:	617a      	str	r2, [r7, #20]
 80166cc:	68ba      	ldr	r2, [r7, #8]
 80166ce:	b2d2      	uxtb	r2, r2
 80166d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	3b01      	subs	r3, #1
 80166d6:	607b      	str	r3, [r7, #4]
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d1f3      	bne.n	80166c6 <mem_set+0x10>
}
 80166de:	bf00      	nop
 80166e0:	371c      	adds	r7, #28
 80166e2:	46bd      	mov	sp, r7
 80166e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e8:	4770      	bx	lr

080166ea <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80166ea:	b480      	push	{r7}
 80166ec:	b089      	sub	sp, #36	; 0x24
 80166ee:	af00      	add	r7, sp, #0
 80166f0:	60f8      	str	r0, [r7, #12]
 80166f2:	60b9      	str	r1, [r7, #8]
 80166f4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	61fb      	str	r3, [r7, #28]
 80166fa:	68bb      	ldr	r3, [r7, #8]
 80166fc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80166fe:	2300      	movs	r3, #0
 8016700:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8016702:	69fb      	ldr	r3, [r7, #28]
 8016704:	1c5a      	adds	r2, r3, #1
 8016706:	61fa      	str	r2, [r7, #28]
 8016708:	781b      	ldrb	r3, [r3, #0]
 801670a:	4619      	mov	r1, r3
 801670c:	69bb      	ldr	r3, [r7, #24]
 801670e:	1c5a      	adds	r2, r3, #1
 8016710:	61ba      	str	r2, [r7, #24]
 8016712:	781b      	ldrb	r3, [r3, #0]
 8016714:	1acb      	subs	r3, r1, r3
 8016716:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	3b01      	subs	r3, #1
 801671c:	607b      	str	r3, [r7, #4]
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d002      	beq.n	801672a <mem_cmp+0x40>
 8016724:	697b      	ldr	r3, [r7, #20]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d0eb      	beq.n	8016702 <mem_cmp+0x18>

	return r;
 801672a:	697b      	ldr	r3, [r7, #20]
}
 801672c:	4618      	mov	r0, r3
 801672e:	3724      	adds	r7, #36	; 0x24
 8016730:	46bd      	mov	sp, r7
 8016732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016736:	4770      	bx	lr

08016738 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016738:	b480      	push	{r7}
 801673a:	b083      	sub	sp, #12
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
 8016740:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8016742:	e002      	b.n	801674a <chk_chr+0x12>
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	3301      	adds	r3, #1
 8016748:	607b      	str	r3, [r7, #4]
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	781b      	ldrb	r3, [r3, #0]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d005      	beq.n	801675e <chk_chr+0x26>
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	781b      	ldrb	r3, [r3, #0]
 8016756:	461a      	mov	r2, r3
 8016758:	683b      	ldr	r3, [r7, #0]
 801675a:	4293      	cmp	r3, r2
 801675c:	d1f2      	bne.n	8016744 <chk_chr+0xc>
	return *str;
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	781b      	ldrb	r3, [r3, #0]
}
 8016762:	4618      	mov	r0, r3
 8016764:	370c      	adds	r7, #12
 8016766:	46bd      	mov	sp, r7
 8016768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801676c:	4770      	bx	lr
	...

08016770 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016770:	b480      	push	{r7}
 8016772:	b085      	sub	sp, #20
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
 8016778:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801677a:	2300      	movs	r3, #0
 801677c:	60bb      	str	r3, [r7, #8]
 801677e:	68bb      	ldr	r3, [r7, #8]
 8016780:	60fb      	str	r3, [r7, #12]
 8016782:	e029      	b.n	80167d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016784:	4a27      	ldr	r2, [pc, #156]	; (8016824 <chk_lock+0xb4>)
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	011b      	lsls	r3, r3, #4
 801678a:	4413      	add	r3, r2
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d01d      	beq.n	80167ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016792:	4a24      	ldr	r2, [pc, #144]	; (8016824 <chk_lock+0xb4>)
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	011b      	lsls	r3, r3, #4
 8016798:	4413      	add	r3, r2
 801679a:	681a      	ldr	r2, [r3, #0]
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	429a      	cmp	r2, r3
 80167a2:	d116      	bne.n	80167d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80167a4:	4a1f      	ldr	r2, [pc, #124]	; (8016824 <chk_lock+0xb4>)
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	011b      	lsls	r3, r3, #4
 80167aa:	4413      	add	r3, r2
 80167ac:	3304      	adds	r3, #4
 80167ae:	681a      	ldr	r2, [r3, #0]
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80167b4:	429a      	cmp	r2, r3
 80167b6:	d10c      	bne.n	80167d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80167b8:	4a1a      	ldr	r2, [pc, #104]	; (8016824 <chk_lock+0xb4>)
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	011b      	lsls	r3, r3, #4
 80167be:	4413      	add	r3, r2
 80167c0:	3308      	adds	r3, #8
 80167c2:	681a      	ldr	r2, [r3, #0]
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80167c8:	429a      	cmp	r2, r3
 80167ca:	d102      	bne.n	80167d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80167cc:	e007      	b.n	80167de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80167ce:	2301      	movs	r3, #1
 80167d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	3301      	adds	r3, #1
 80167d6:	60fb      	str	r3, [r7, #12]
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	2b01      	cmp	r3, #1
 80167dc:	d9d2      	bls.n	8016784 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	2b02      	cmp	r3, #2
 80167e2:	d109      	bne.n	80167f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80167e4:	68bb      	ldr	r3, [r7, #8]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d102      	bne.n	80167f0 <chk_lock+0x80>
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	2b02      	cmp	r3, #2
 80167ee:	d101      	bne.n	80167f4 <chk_lock+0x84>
 80167f0:	2300      	movs	r3, #0
 80167f2:	e010      	b.n	8016816 <chk_lock+0xa6>
 80167f4:	2312      	movs	r3, #18
 80167f6:	e00e      	b.n	8016816 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d108      	bne.n	8016810 <chk_lock+0xa0>
 80167fe:	4a09      	ldr	r2, [pc, #36]	; (8016824 <chk_lock+0xb4>)
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	011b      	lsls	r3, r3, #4
 8016804:	4413      	add	r3, r2
 8016806:	330c      	adds	r3, #12
 8016808:	881b      	ldrh	r3, [r3, #0]
 801680a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801680e:	d101      	bne.n	8016814 <chk_lock+0xa4>
 8016810:	2310      	movs	r3, #16
 8016812:	e000      	b.n	8016816 <chk_lock+0xa6>
 8016814:	2300      	movs	r3, #0
}
 8016816:	4618      	mov	r0, r3
 8016818:	3714      	adds	r7, #20
 801681a:	46bd      	mov	sp, r7
 801681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016820:	4770      	bx	lr
 8016822:	bf00      	nop
 8016824:	24000b64 	.word	0x24000b64

08016828 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8016828:	b480      	push	{r7}
 801682a:	b083      	sub	sp, #12
 801682c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801682e:	2300      	movs	r3, #0
 8016830:	607b      	str	r3, [r7, #4]
 8016832:	e002      	b.n	801683a <enq_lock+0x12>
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	3301      	adds	r3, #1
 8016838:	607b      	str	r3, [r7, #4]
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	2b01      	cmp	r3, #1
 801683e:	d806      	bhi.n	801684e <enq_lock+0x26>
 8016840:	4a09      	ldr	r2, [pc, #36]	; (8016868 <enq_lock+0x40>)
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	011b      	lsls	r3, r3, #4
 8016846:	4413      	add	r3, r2
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d1f2      	bne.n	8016834 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	2b02      	cmp	r3, #2
 8016852:	bf14      	ite	ne
 8016854:	2301      	movne	r3, #1
 8016856:	2300      	moveq	r3, #0
 8016858:	b2db      	uxtb	r3, r3
}
 801685a:	4618      	mov	r0, r3
 801685c:	370c      	adds	r7, #12
 801685e:	46bd      	mov	sp, r7
 8016860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016864:	4770      	bx	lr
 8016866:	bf00      	nop
 8016868:	24000b64 	.word	0x24000b64

0801686c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801686c:	b480      	push	{r7}
 801686e:	b085      	sub	sp, #20
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
 8016874:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016876:	2300      	movs	r3, #0
 8016878:	60fb      	str	r3, [r7, #12]
 801687a:	e01f      	b.n	80168bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801687c:	4a41      	ldr	r2, [pc, #260]	; (8016984 <inc_lock+0x118>)
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	011b      	lsls	r3, r3, #4
 8016882:	4413      	add	r3, r2
 8016884:	681a      	ldr	r2, [r3, #0]
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	429a      	cmp	r2, r3
 801688c:	d113      	bne.n	80168b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801688e:	4a3d      	ldr	r2, [pc, #244]	; (8016984 <inc_lock+0x118>)
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	011b      	lsls	r3, r3, #4
 8016894:	4413      	add	r3, r2
 8016896:	3304      	adds	r3, #4
 8016898:	681a      	ldr	r2, [r3, #0]
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801689e:	429a      	cmp	r2, r3
 80168a0:	d109      	bne.n	80168b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80168a2:	4a38      	ldr	r2, [pc, #224]	; (8016984 <inc_lock+0x118>)
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	011b      	lsls	r3, r3, #4
 80168a8:	4413      	add	r3, r2
 80168aa:	3308      	adds	r3, #8
 80168ac:	681a      	ldr	r2, [r3, #0]
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80168b2:	429a      	cmp	r2, r3
 80168b4:	d006      	beq.n	80168c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	3301      	adds	r3, #1
 80168ba:	60fb      	str	r3, [r7, #12]
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	2b01      	cmp	r3, #1
 80168c0:	d9dc      	bls.n	801687c <inc_lock+0x10>
 80168c2:	e000      	b.n	80168c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80168c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	2b02      	cmp	r3, #2
 80168ca:	d132      	bne.n	8016932 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80168cc:	2300      	movs	r3, #0
 80168ce:	60fb      	str	r3, [r7, #12]
 80168d0:	e002      	b.n	80168d8 <inc_lock+0x6c>
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	3301      	adds	r3, #1
 80168d6:	60fb      	str	r3, [r7, #12]
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	2b01      	cmp	r3, #1
 80168dc:	d806      	bhi.n	80168ec <inc_lock+0x80>
 80168de:	4a29      	ldr	r2, [pc, #164]	; (8016984 <inc_lock+0x118>)
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	011b      	lsls	r3, r3, #4
 80168e4:	4413      	add	r3, r2
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d1f2      	bne.n	80168d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	2b02      	cmp	r3, #2
 80168f0:	d101      	bne.n	80168f6 <inc_lock+0x8a>
 80168f2:	2300      	movs	r3, #0
 80168f4:	e040      	b.n	8016978 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	681a      	ldr	r2, [r3, #0]
 80168fa:	4922      	ldr	r1, [pc, #136]	; (8016984 <inc_lock+0x118>)
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	011b      	lsls	r3, r3, #4
 8016900:	440b      	add	r3, r1
 8016902:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	689a      	ldr	r2, [r3, #8]
 8016908:	491e      	ldr	r1, [pc, #120]	; (8016984 <inc_lock+0x118>)
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	011b      	lsls	r3, r3, #4
 801690e:	440b      	add	r3, r1
 8016910:	3304      	adds	r3, #4
 8016912:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	695a      	ldr	r2, [r3, #20]
 8016918:	491a      	ldr	r1, [pc, #104]	; (8016984 <inc_lock+0x118>)
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	011b      	lsls	r3, r3, #4
 801691e:	440b      	add	r3, r1
 8016920:	3308      	adds	r3, #8
 8016922:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8016924:	4a17      	ldr	r2, [pc, #92]	; (8016984 <inc_lock+0x118>)
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	011b      	lsls	r3, r3, #4
 801692a:	4413      	add	r3, r2
 801692c:	330c      	adds	r3, #12
 801692e:	2200      	movs	r2, #0
 8016930:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d009      	beq.n	801694c <inc_lock+0xe0>
 8016938:	4a12      	ldr	r2, [pc, #72]	; (8016984 <inc_lock+0x118>)
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	011b      	lsls	r3, r3, #4
 801693e:	4413      	add	r3, r2
 8016940:	330c      	adds	r3, #12
 8016942:	881b      	ldrh	r3, [r3, #0]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d001      	beq.n	801694c <inc_lock+0xe0>
 8016948:	2300      	movs	r3, #0
 801694a:	e015      	b.n	8016978 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d108      	bne.n	8016964 <inc_lock+0xf8>
 8016952:	4a0c      	ldr	r2, [pc, #48]	; (8016984 <inc_lock+0x118>)
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	011b      	lsls	r3, r3, #4
 8016958:	4413      	add	r3, r2
 801695a:	330c      	adds	r3, #12
 801695c:	881b      	ldrh	r3, [r3, #0]
 801695e:	3301      	adds	r3, #1
 8016960:	b29a      	uxth	r2, r3
 8016962:	e001      	b.n	8016968 <inc_lock+0xfc>
 8016964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016968:	4906      	ldr	r1, [pc, #24]	; (8016984 <inc_lock+0x118>)
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	011b      	lsls	r3, r3, #4
 801696e:	440b      	add	r3, r1
 8016970:	330c      	adds	r3, #12
 8016972:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	3301      	adds	r3, #1
}
 8016978:	4618      	mov	r0, r3
 801697a:	3714      	adds	r7, #20
 801697c:	46bd      	mov	sp, r7
 801697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016982:	4770      	bx	lr
 8016984:	24000b64 	.word	0x24000b64

08016988 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8016988:	b480      	push	{r7}
 801698a:	b085      	sub	sp, #20
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	3b01      	subs	r3, #1
 8016994:	607b      	str	r3, [r7, #4]
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	2b01      	cmp	r3, #1
 801699a:	d825      	bhi.n	80169e8 <dec_lock+0x60>
		n = Files[i].ctr;
 801699c:	4a17      	ldr	r2, [pc, #92]	; (80169fc <dec_lock+0x74>)
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	011b      	lsls	r3, r3, #4
 80169a2:	4413      	add	r3, r2
 80169a4:	330c      	adds	r3, #12
 80169a6:	881b      	ldrh	r3, [r3, #0]
 80169a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80169aa:	89fb      	ldrh	r3, [r7, #14]
 80169ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80169b0:	d101      	bne.n	80169b6 <dec_lock+0x2e>
 80169b2:	2300      	movs	r3, #0
 80169b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80169b6:	89fb      	ldrh	r3, [r7, #14]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d002      	beq.n	80169c2 <dec_lock+0x3a>
 80169bc:	89fb      	ldrh	r3, [r7, #14]
 80169be:	3b01      	subs	r3, #1
 80169c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80169c2:	4a0e      	ldr	r2, [pc, #56]	; (80169fc <dec_lock+0x74>)
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	011b      	lsls	r3, r3, #4
 80169c8:	4413      	add	r3, r2
 80169ca:	330c      	adds	r3, #12
 80169cc:	89fa      	ldrh	r2, [r7, #14]
 80169ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80169d0:	89fb      	ldrh	r3, [r7, #14]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d105      	bne.n	80169e2 <dec_lock+0x5a>
 80169d6:	4a09      	ldr	r2, [pc, #36]	; (80169fc <dec_lock+0x74>)
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	011b      	lsls	r3, r3, #4
 80169dc:	4413      	add	r3, r2
 80169de:	2200      	movs	r2, #0
 80169e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80169e2:	2300      	movs	r3, #0
 80169e4:	737b      	strb	r3, [r7, #13]
 80169e6:	e001      	b.n	80169ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80169e8:	2302      	movs	r3, #2
 80169ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80169ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80169ee:	4618      	mov	r0, r3
 80169f0:	3714      	adds	r7, #20
 80169f2:	46bd      	mov	sp, r7
 80169f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f8:	4770      	bx	lr
 80169fa:	bf00      	nop
 80169fc:	24000b64 	.word	0x24000b64

08016a00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8016a00:	b480      	push	{r7}
 8016a02:	b085      	sub	sp, #20
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8016a08:	2300      	movs	r3, #0
 8016a0a:	60fb      	str	r3, [r7, #12]
 8016a0c:	e010      	b.n	8016a30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016a0e:	4a0d      	ldr	r2, [pc, #52]	; (8016a44 <clear_lock+0x44>)
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	011b      	lsls	r3, r3, #4
 8016a14:	4413      	add	r3, r2
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	687a      	ldr	r2, [r7, #4]
 8016a1a:	429a      	cmp	r2, r3
 8016a1c:	d105      	bne.n	8016a2a <clear_lock+0x2a>
 8016a1e:	4a09      	ldr	r2, [pc, #36]	; (8016a44 <clear_lock+0x44>)
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	011b      	lsls	r3, r3, #4
 8016a24:	4413      	add	r3, r2
 8016a26:	2200      	movs	r2, #0
 8016a28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	3301      	adds	r3, #1
 8016a2e:	60fb      	str	r3, [r7, #12]
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	2b01      	cmp	r3, #1
 8016a34:	d9eb      	bls.n	8016a0e <clear_lock+0xe>
	}
}
 8016a36:	bf00      	nop
 8016a38:	3714      	adds	r7, #20
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a40:	4770      	bx	lr
 8016a42:	bf00      	nop
 8016a44:	24000b64 	.word	0x24000b64

08016a48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b086      	sub	sp, #24
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016a50:	2300      	movs	r3, #0
 8016a52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	78db      	ldrb	r3, [r3, #3]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d034      	beq.n	8016ac6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	7858      	ldrb	r0, [r3, #1]
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016a6c:	2301      	movs	r3, #1
 8016a6e:	697a      	ldr	r2, [r7, #20]
 8016a70:	f7ff fd40 	bl	80164f4 <disk_write>
 8016a74:	4603      	mov	r3, r0
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d002      	beq.n	8016a80 <sync_window+0x38>
			res = FR_DISK_ERR;
 8016a7a:	2301      	movs	r3, #1
 8016a7c:	73fb      	strb	r3, [r7, #15]
 8016a7e:	e022      	b.n	8016ac6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	2200      	movs	r2, #0
 8016a84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	6a1b      	ldr	r3, [r3, #32]
 8016a8a:	697a      	ldr	r2, [r7, #20]
 8016a8c:	1ad2      	subs	r2, r2, r3
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	699b      	ldr	r3, [r3, #24]
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d217      	bcs.n	8016ac6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	789b      	ldrb	r3, [r3, #2]
 8016a9a:	613b      	str	r3, [r7, #16]
 8016a9c:	e010      	b.n	8016ac0 <sync_window+0x78>
					wsect += fs->fsize;
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	699b      	ldr	r3, [r3, #24]
 8016aa2:	697a      	ldr	r2, [r7, #20]
 8016aa4:	4413      	add	r3, r2
 8016aa6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	7858      	ldrb	r0, [r3, #1]
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	697a      	ldr	r2, [r7, #20]
 8016ab6:	f7ff fd1d 	bl	80164f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016aba:	693b      	ldr	r3, [r7, #16]
 8016abc:	3b01      	subs	r3, #1
 8016abe:	613b      	str	r3, [r7, #16]
 8016ac0:	693b      	ldr	r3, [r7, #16]
 8016ac2:	2b01      	cmp	r3, #1
 8016ac4:	d8eb      	bhi.n	8016a9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8016ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ac8:	4618      	mov	r0, r3
 8016aca:	3718      	adds	r7, #24
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bd80      	pop	{r7, pc}

08016ad0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b084      	sub	sp, #16
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]
 8016ad8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016ada:	2300      	movs	r3, #0
 8016adc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ae2:	683a      	ldr	r2, [r7, #0]
 8016ae4:	429a      	cmp	r2, r3
 8016ae6:	d01b      	beq.n	8016b20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016ae8:	6878      	ldr	r0, [r7, #4]
 8016aea:	f7ff ffad 	bl	8016a48 <sync_window>
 8016aee:	4603      	mov	r3, r0
 8016af0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016af2:	7bfb      	ldrb	r3, [r7, #15]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d113      	bne.n	8016b20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	7858      	ldrb	r0, [r3, #1]
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016b02:	2301      	movs	r3, #1
 8016b04:	683a      	ldr	r2, [r7, #0]
 8016b06:	f7ff fcd5 	bl	80164b4 <disk_read>
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d004      	beq.n	8016b1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8016b10:	f04f 33ff 	mov.w	r3, #4294967295
 8016b14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8016b16:	2301      	movs	r3, #1
 8016b18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	683a      	ldr	r2, [r7, #0]
 8016b1e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8016b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b22:	4618      	mov	r0, r3
 8016b24:	3710      	adds	r7, #16
 8016b26:	46bd      	mov	sp, r7
 8016b28:	bd80      	pop	{r7, pc}
	...

08016b2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b084      	sub	sp, #16
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8016b34:	6878      	ldr	r0, [r7, #4]
 8016b36:	f7ff ff87 	bl	8016a48 <sync_window>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016b3e:	7bfb      	ldrb	r3, [r7, #15]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d158      	bne.n	8016bf6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	2b03      	cmp	r3, #3
 8016b4a:	d148      	bne.n	8016bde <sync_fs+0xb2>
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	791b      	ldrb	r3, [r3, #4]
 8016b50:	2b01      	cmp	r3, #1
 8016b52:	d144      	bne.n	8016bde <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	3330      	adds	r3, #48	; 0x30
 8016b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016b5c:	2100      	movs	r1, #0
 8016b5e:	4618      	mov	r0, r3
 8016b60:	f7ff fda9 	bl	80166b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	3330      	adds	r3, #48	; 0x30
 8016b68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016b6c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8016b70:	4618      	mov	r0, r3
 8016b72:	f7ff fd38 	bl	80165e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	3330      	adds	r3, #48	; 0x30
 8016b7a:	4921      	ldr	r1, [pc, #132]	; (8016c00 <sync_fs+0xd4>)
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	f7ff fd4d 	bl	801661c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	3330      	adds	r3, #48	; 0x30
 8016b86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016b8a:	491e      	ldr	r1, [pc, #120]	; (8016c04 <sync_fs+0xd8>)
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f7ff fd45 	bl	801661c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	3330      	adds	r3, #48	; 0x30
 8016b96:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	691b      	ldr	r3, [r3, #16]
 8016b9e:	4619      	mov	r1, r3
 8016ba0:	4610      	mov	r0, r2
 8016ba2:	f7ff fd3b 	bl	801661c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	3330      	adds	r3, #48	; 0x30
 8016baa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	68db      	ldr	r3, [r3, #12]
 8016bb2:	4619      	mov	r1, r3
 8016bb4:	4610      	mov	r0, r2
 8016bb6:	f7ff fd31 	bl	801661c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	69db      	ldr	r3, [r3, #28]
 8016bbe:	1c5a      	adds	r2, r3, #1
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	7858      	ldrb	r0, [r3, #1]
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bd2:	2301      	movs	r3, #1
 8016bd4:	f7ff fc8e 	bl	80164f4 <disk_write>
			fs->fsi_flag = 0;
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	2200      	movs	r2, #0
 8016bdc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	785b      	ldrb	r3, [r3, #1]
 8016be2:	2200      	movs	r2, #0
 8016be4:	2100      	movs	r1, #0
 8016be6:	4618      	mov	r0, r3
 8016be8:	f7ff fca4 	bl	8016534 <disk_ioctl>
 8016bec:	4603      	mov	r3, r0
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d001      	beq.n	8016bf6 <sync_fs+0xca>
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8016bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	3710      	adds	r7, #16
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	bd80      	pop	{r7, pc}
 8016c00:	41615252 	.word	0x41615252
 8016c04:	61417272 	.word	0x61417272

08016c08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016c08:	b480      	push	{r7}
 8016c0a:	b083      	sub	sp, #12
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
 8016c10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8016c12:	683b      	ldr	r3, [r7, #0]
 8016c14:	3b02      	subs	r3, #2
 8016c16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	695b      	ldr	r3, [r3, #20]
 8016c1c:	3b02      	subs	r3, #2
 8016c1e:	683a      	ldr	r2, [r7, #0]
 8016c20:	429a      	cmp	r2, r3
 8016c22:	d301      	bcc.n	8016c28 <clust2sect+0x20>
 8016c24:	2300      	movs	r3, #0
 8016c26:	e008      	b.n	8016c3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	895b      	ldrh	r3, [r3, #10]
 8016c2c:	461a      	mov	r2, r3
 8016c2e:	683b      	ldr	r3, [r7, #0]
 8016c30:	fb03 f202 	mul.w	r2, r3, r2
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c38:	4413      	add	r3, r2
}
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	370c      	adds	r7, #12
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c44:	4770      	bx	lr

08016c46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8016c46:	b580      	push	{r7, lr}
 8016c48:	b086      	sub	sp, #24
 8016c4a:	af00      	add	r7, sp, #0
 8016c4c:	6078      	str	r0, [r7, #4]
 8016c4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016c56:	683b      	ldr	r3, [r7, #0]
 8016c58:	2b01      	cmp	r3, #1
 8016c5a:	d904      	bls.n	8016c66 <get_fat+0x20>
 8016c5c:	693b      	ldr	r3, [r7, #16]
 8016c5e:	695b      	ldr	r3, [r3, #20]
 8016c60:	683a      	ldr	r2, [r7, #0]
 8016c62:	429a      	cmp	r2, r3
 8016c64:	d302      	bcc.n	8016c6c <get_fat+0x26>
		val = 1;	/* Internal error */
 8016c66:	2301      	movs	r3, #1
 8016c68:	617b      	str	r3, [r7, #20]
 8016c6a:	e08c      	b.n	8016d86 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8016c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8016c70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8016c72:	693b      	ldr	r3, [r7, #16]
 8016c74:	781b      	ldrb	r3, [r3, #0]
 8016c76:	2b02      	cmp	r3, #2
 8016c78:	d045      	beq.n	8016d06 <get_fat+0xc0>
 8016c7a:	2b03      	cmp	r3, #3
 8016c7c:	d05d      	beq.n	8016d3a <get_fat+0xf4>
 8016c7e:	2b01      	cmp	r3, #1
 8016c80:	d177      	bne.n	8016d72 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8016c82:	683b      	ldr	r3, [r7, #0]
 8016c84:	60fb      	str	r3, [r7, #12]
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	085b      	lsrs	r3, r3, #1
 8016c8a:	68fa      	ldr	r2, [r7, #12]
 8016c8c:	4413      	add	r3, r2
 8016c8e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016c90:	693b      	ldr	r3, [r7, #16]
 8016c92:	6a1a      	ldr	r2, [r3, #32]
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	0a5b      	lsrs	r3, r3, #9
 8016c98:	4413      	add	r3, r2
 8016c9a:	4619      	mov	r1, r3
 8016c9c:	6938      	ldr	r0, [r7, #16]
 8016c9e:	f7ff ff17 	bl	8016ad0 <move_window>
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d167      	bne.n	8016d78 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	1c5a      	adds	r2, r3, #1
 8016cac:	60fa      	str	r2, [r7, #12]
 8016cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016cb2:	693a      	ldr	r2, [r7, #16]
 8016cb4:	4413      	add	r3, r2
 8016cb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016cba:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016cbc:	693b      	ldr	r3, [r7, #16]
 8016cbe:	6a1a      	ldr	r2, [r3, #32]
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	0a5b      	lsrs	r3, r3, #9
 8016cc4:	4413      	add	r3, r2
 8016cc6:	4619      	mov	r1, r3
 8016cc8:	6938      	ldr	r0, [r7, #16]
 8016cca:	f7ff ff01 	bl	8016ad0 <move_window>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d153      	bne.n	8016d7c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016cda:	693a      	ldr	r2, [r7, #16]
 8016cdc:	4413      	add	r3, r2
 8016cde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016ce2:	021b      	lsls	r3, r3, #8
 8016ce4:	461a      	mov	r2, r3
 8016ce6:	68bb      	ldr	r3, [r7, #8]
 8016ce8:	4313      	orrs	r3, r2
 8016cea:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016cec:	683b      	ldr	r3, [r7, #0]
 8016cee:	f003 0301 	and.w	r3, r3, #1
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d002      	beq.n	8016cfc <get_fat+0xb6>
 8016cf6:	68bb      	ldr	r3, [r7, #8]
 8016cf8:	091b      	lsrs	r3, r3, #4
 8016cfa:	e002      	b.n	8016d02 <get_fat+0xbc>
 8016cfc:	68bb      	ldr	r3, [r7, #8]
 8016cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016d02:	617b      	str	r3, [r7, #20]
			break;
 8016d04:	e03f      	b.n	8016d86 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016d06:	693b      	ldr	r3, [r7, #16]
 8016d08:	6a1a      	ldr	r2, [r3, #32]
 8016d0a:	683b      	ldr	r3, [r7, #0]
 8016d0c:	0a1b      	lsrs	r3, r3, #8
 8016d0e:	4413      	add	r3, r2
 8016d10:	4619      	mov	r1, r3
 8016d12:	6938      	ldr	r0, [r7, #16]
 8016d14:	f7ff fedc 	bl	8016ad0 <move_window>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d130      	bne.n	8016d80 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016d1e:	693b      	ldr	r3, [r7, #16]
 8016d20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016d24:	683b      	ldr	r3, [r7, #0]
 8016d26:	005b      	lsls	r3, r3, #1
 8016d28:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016d2c:	4413      	add	r3, r2
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7ff fc1e 	bl	8016570 <ld_word>
 8016d34:	4603      	mov	r3, r0
 8016d36:	617b      	str	r3, [r7, #20]
			break;
 8016d38:	e025      	b.n	8016d86 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016d3a:	693b      	ldr	r3, [r7, #16]
 8016d3c:	6a1a      	ldr	r2, [r3, #32]
 8016d3e:	683b      	ldr	r3, [r7, #0]
 8016d40:	09db      	lsrs	r3, r3, #7
 8016d42:	4413      	add	r3, r2
 8016d44:	4619      	mov	r1, r3
 8016d46:	6938      	ldr	r0, [r7, #16]
 8016d48:	f7ff fec2 	bl	8016ad0 <move_window>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d118      	bne.n	8016d84 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016d52:	693b      	ldr	r3, [r7, #16]
 8016d54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016d58:	683b      	ldr	r3, [r7, #0]
 8016d5a:	009b      	lsls	r3, r3, #2
 8016d5c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016d60:	4413      	add	r3, r2
 8016d62:	4618      	mov	r0, r3
 8016d64:	f7ff fc1c 	bl	80165a0 <ld_dword>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8016d6e:	617b      	str	r3, [r7, #20]
			break;
 8016d70:	e009      	b.n	8016d86 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8016d72:	2301      	movs	r3, #1
 8016d74:	617b      	str	r3, [r7, #20]
 8016d76:	e006      	b.n	8016d86 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d78:	bf00      	nop
 8016d7a:	e004      	b.n	8016d86 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d7c:	bf00      	nop
 8016d7e:	e002      	b.n	8016d86 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016d80:	bf00      	nop
 8016d82:	e000      	b.n	8016d86 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016d84:	bf00      	nop
		}
	}

	return val;
 8016d86:	697b      	ldr	r3, [r7, #20]
}
 8016d88:	4618      	mov	r0, r3
 8016d8a:	3718      	adds	r7, #24
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	bd80      	pop	{r7, pc}

08016d90 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8016d90:	b590      	push	{r4, r7, lr}
 8016d92:	b089      	sub	sp, #36	; 0x24
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	60f8      	str	r0, [r7, #12]
 8016d98:	60b9      	str	r1, [r7, #8]
 8016d9a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8016d9c:	2302      	movs	r3, #2
 8016d9e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8016da0:	68bb      	ldr	r3, [r7, #8]
 8016da2:	2b01      	cmp	r3, #1
 8016da4:	f240 80d6 	bls.w	8016f54 <put_fat+0x1c4>
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	695b      	ldr	r3, [r3, #20]
 8016dac:	68ba      	ldr	r2, [r7, #8]
 8016dae:	429a      	cmp	r2, r3
 8016db0:	f080 80d0 	bcs.w	8016f54 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	781b      	ldrb	r3, [r3, #0]
 8016db8:	2b02      	cmp	r3, #2
 8016dba:	d073      	beq.n	8016ea4 <put_fat+0x114>
 8016dbc:	2b03      	cmp	r3, #3
 8016dbe:	f000 8091 	beq.w	8016ee4 <put_fat+0x154>
 8016dc2:	2b01      	cmp	r3, #1
 8016dc4:	f040 80c6 	bne.w	8016f54 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8016dc8:	68bb      	ldr	r3, [r7, #8]
 8016dca:	61bb      	str	r3, [r7, #24]
 8016dcc:	69bb      	ldr	r3, [r7, #24]
 8016dce:	085b      	lsrs	r3, r3, #1
 8016dd0:	69ba      	ldr	r2, [r7, #24]
 8016dd2:	4413      	add	r3, r2
 8016dd4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	6a1a      	ldr	r2, [r3, #32]
 8016dda:	69bb      	ldr	r3, [r7, #24]
 8016ddc:	0a5b      	lsrs	r3, r3, #9
 8016dde:	4413      	add	r3, r2
 8016de0:	4619      	mov	r1, r3
 8016de2:	68f8      	ldr	r0, [r7, #12]
 8016de4:	f7ff fe74 	bl	8016ad0 <move_window>
 8016de8:	4603      	mov	r3, r0
 8016dea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016dec:	7ffb      	ldrb	r3, [r7, #31]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	f040 80a9 	bne.w	8016f46 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016dfa:	69bb      	ldr	r3, [r7, #24]
 8016dfc:	1c59      	adds	r1, r3, #1
 8016dfe:	61b9      	str	r1, [r7, #24]
 8016e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e04:	4413      	add	r3, r2
 8016e06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8016e08:	68bb      	ldr	r3, [r7, #8]
 8016e0a:	f003 0301 	and.w	r3, r3, #1
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d00d      	beq.n	8016e2e <put_fat+0x9e>
 8016e12:	697b      	ldr	r3, [r7, #20]
 8016e14:	781b      	ldrb	r3, [r3, #0]
 8016e16:	b25b      	sxtb	r3, r3
 8016e18:	f003 030f 	and.w	r3, r3, #15
 8016e1c:	b25a      	sxtb	r2, r3
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	b2db      	uxtb	r3, r3
 8016e22:	011b      	lsls	r3, r3, #4
 8016e24:	b25b      	sxtb	r3, r3
 8016e26:	4313      	orrs	r3, r2
 8016e28:	b25b      	sxtb	r3, r3
 8016e2a:	b2db      	uxtb	r3, r3
 8016e2c:	e001      	b.n	8016e32 <put_fat+0xa2>
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	b2db      	uxtb	r3, r3
 8016e32:	697a      	ldr	r2, [r7, #20]
 8016e34:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	2201      	movs	r2, #1
 8016e3a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	6a1a      	ldr	r2, [r3, #32]
 8016e40:	69bb      	ldr	r3, [r7, #24]
 8016e42:	0a5b      	lsrs	r3, r3, #9
 8016e44:	4413      	add	r3, r2
 8016e46:	4619      	mov	r1, r3
 8016e48:	68f8      	ldr	r0, [r7, #12]
 8016e4a:	f7ff fe41 	bl	8016ad0 <move_window>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016e52:	7ffb      	ldrb	r3, [r7, #31]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d178      	bne.n	8016f4a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016e5e:	69bb      	ldr	r3, [r7, #24]
 8016e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e64:	4413      	add	r3, r2
 8016e66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016e68:	68bb      	ldr	r3, [r7, #8]
 8016e6a:	f003 0301 	and.w	r3, r3, #1
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d003      	beq.n	8016e7a <put_fat+0xea>
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	091b      	lsrs	r3, r3, #4
 8016e76:	b2db      	uxtb	r3, r3
 8016e78:	e00e      	b.n	8016e98 <put_fat+0x108>
 8016e7a:	697b      	ldr	r3, [r7, #20]
 8016e7c:	781b      	ldrb	r3, [r3, #0]
 8016e7e:	b25b      	sxtb	r3, r3
 8016e80:	f023 030f 	bic.w	r3, r3, #15
 8016e84:	b25a      	sxtb	r2, r3
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	0a1b      	lsrs	r3, r3, #8
 8016e8a:	b25b      	sxtb	r3, r3
 8016e8c:	f003 030f 	and.w	r3, r3, #15
 8016e90:	b25b      	sxtb	r3, r3
 8016e92:	4313      	orrs	r3, r2
 8016e94:	b25b      	sxtb	r3, r3
 8016e96:	b2db      	uxtb	r3, r3
 8016e98:	697a      	ldr	r2, [r7, #20]
 8016e9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	2201      	movs	r2, #1
 8016ea0:	70da      	strb	r2, [r3, #3]
			break;
 8016ea2:	e057      	b.n	8016f54 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	6a1a      	ldr	r2, [r3, #32]
 8016ea8:	68bb      	ldr	r3, [r7, #8]
 8016eaa:	0a1b      	lsrs	r3, r3, #8
 8016eac:	4413      	add	r3, r2
 8016eae:	4619      	mov	r1, r3
 8016eb0:	68f8      	ldr	r0, [r7, #12]
 8016eb2:	f7ff fe0d 	bl	8016ad0 <move_window>
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016eba:	7ffb      	ldrb	r3, [r7, #31]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d146      	bne.n	8016f4e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016ec6:	68bb      	ldr	r3, [r7, #8]
 8016ec8:	005b      	lsls	r3, r3, #1
 8016eca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016ece:	4413      	add	r3, r2
 8016ed0:	687a      	ldr	r2, [r7, #4]
 8016ed2:	b292      	uxth	r2, r2
 8016ed4:	4611      	mov	r1, r2
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7ff fb85 	bl	80165e6 <st_word>
			fs->wflag = 1;
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	2201      	movs	r2, #1
 8016ee0:	70da      	strb	r2, [r3, #3]
			break;
 8016ee2:	e037      	b.n	8016f54 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	6a1a      	ldr	r2, [r3, #32]
 8016ee8:	68bb      	ldr	r3, [r7, #8]
 8016eea:	09db      	lsrs	r3, r3, #7
 8016eec:	4413      	add	r3, r2
 8016eee:	4619      	mov	r1, r3
 8016ef0:	68f8      	ldr	r0, [r7, #12]
 8016ef2:	f7ff fded 	bl	8016ad0 <move_window>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016efa:	7ffb      	ldrb	r3, [r7, #31]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d128      	bne.n	8016f52 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016f0c:	68bb      	ldr	r3, [r7, #8]
 8016f0e:	009b      	lsls	r3, r3, #2
 8016f10:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016f14:	4413      	add	r3, r2
 8016f16:	4618      	mov	r0, r3
 8016f18:	f7ff fb42 	bl	80165a0 <ld_dword>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016f22:	4323      	orrs	r3, r4
 8016f24:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016f2c:	68bb      	ldr	r3, [r7, #8]
 8016f2e:	009b      	lsls	r3, r3, #2
 8016f30:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016f34:	4413      	add	r3, r2
 8016f36:	6879      	ldr	r1, [r7, #4]
 8016f38:	4618      	mov	r0, r3
 8016f3a:	f7ff fb6f 	bl	801661c <st_dword>
			fs->wflag = 1;
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	2201      	movs	r2, #1
 8016f42:	70da      	strb	r2, [r3, #3]
			break;
 8016f44:	e006      	b.n	8016f54 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f46:	bf00      	nop
 8016f48:	e004      	b.n	8016f54 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f4a:	bf00      	nop
 8016f4c:	e002      	b.n	8016f54 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f4e:	bf00      	nop
 8016f50:	e000      	b.n	8016f54 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f52:	bf00      	nop
		}
	}
	return res;
 8016f54:	7ffb      	ldrb	r3, [r7, #31]
}
 8016f56:	4618      	mov	r0, r3
 8016f58:	3724      	adds	r7, #36	; 0x24
 8016f5a:	46bd      	mov	sp, r7
 8016f5c:	bd90      	pop	{r4, r7, pc}

08016f5e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8016f5e:	b580      	push	{r7, lr}
 8016f60:	b088      	sub	sp, #32
 8016f62:	af00      	add	r7, sp, #0
 8016f64:	60f8      	str	r0, [r7, #12]
 8016f66:	60b9      	str	r1, [r7, #8]
 8016f68:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016f74:	68bb      	ldr	r3, [r7, #8]
 8016f76:	2b01      	cmp	r3, #1
 8016f78:	d904      	bls.n	8016f84 <remove_chain+0x26>
 8016f7a:	69bb      	ldr	r3, [r7, #24]
 8016f7c:	695b      	ldr	r3, [r3, #20]
 8016f7e:	68ba      	ldr	r2, [r7, #8]
 8016f80:	429a      	cmp	r2, r3
 8016f82:	d301      	bcc.n	8016f88 <remove_chain+0x2a>
 8016f84:	2302      	movs	r3, #2
 8016f86:	e04b      	b.n	8017020 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d00c      	beq.n	8016fa8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8016f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8016f92:	6879      	ldr	r1, [r7, #4]
 8016f94:	69b8      	ldr	r0, [r7, #24]
 8016f96:	f7ff fefb 	bl	8016d90 <put_fat>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8016f9e:	7ffb      	ldrb	r3, [r7, #31]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d001      	beq.n	8016fa8 <remove_chain+0x4a>
 8016fa4:	7ffb      	ldrb	r3, [r7, #31]
 8016fa6:	e03b      	b.n	8017020 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8016fa8:	68b9      	ldr	r1, [r7, #8]
 8016faa:	68f8      	ldr	r0, [r7, #12]
 8016fac:	f7ff fe4b 	bl	8016c46 <get_fat>
 8016fb0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8016fb2:	697b      	ldr	r3, [r7, #20]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d031      	beq.n	801701c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8016fb8:	697b      	ldr	r3, [r7, #20]
 8016fba:	2b01      	cmp	r3, #1
 8016fbc:	d101      	bne.n	8016fc2 <remove_chain+0x64>
 8016fbe:	2302      	movs	r3, #2
 8016fc0:	e02e      	b.n	8017020 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8016fc2:	697b      	ldr	r3, [r7, #20]
 8016fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fc8:	d101      	bne.n	8016fce <remove_chain+0x70>
 8016fca:	2301      	movs	r3, #1
 8016fcc:	e028      	b.n	8017020 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8016fce:	2200      	movs	r2, #0
 8016fd0:	68b9      	ldr	r1, [r7, #8]
 8016fd2:	69b8      	ldr	r0, [r7, #24]
 8016fd4:	f7ff fedc 	bl	8016d90 <put_fat>
 8016fd8:	4603      	mov	r3, r0
 8016fda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8016fdc:	7ffb      	ldrb	r3, [r7, #31]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d001      	beq.n	8016fe6 <remove_chain+0x88>
 8016fe2:	7ffb      	ldrb	r3, [r7, #31]
 8016fe4:	e01c      	b.n	8017020 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016fe6:	69bb      	ldr	r3, [r7, #24]
 8016fe8:	691a      	ldr	r2, [r3, #16]
 8016fea:	69bb      	ldr	r3, [r7, #24]
 8016fec:	695b      	ldr	r3, [r3, #20]
 8016fee:	3b02      	subs	r3, #2
 8016ff0:	429a      	cmp	r2, r3
 8016ff2:	d20b      	bcs.n	801700c <remove_chain+0xae>
			fs->free_clst++;
 8016ff4:	69bb      	ldr	r3, [r7, #24]
 8016ff6:	691b      	ldr	r3, [r3, #16]
 8016ff8:	1c5a      	adds	r2, r3, #1
 8016ffa:	69bb      	ldr	r3, [r7, #24]
 8016ffc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8016ffe:	69bb      	ldr	r3, [r7, #24]
 8017000:	791b      	ldrb	r3, [r3, #4]
 8017002:	f043 0301 	orr.w	r3, r3, #1
 8017006:	b2da      	uxtb	r2, r3
 8017008:	69bb      	ldr	r3, [r7, #24]
 801700a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801700c:	697b      	ldr	r3, [r7, #20]
 801700e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017010:	69bb      	ldr	r3, [r7, #24]
 8017012:	695b      	ldr	r3, [r3, #20]
 8017014:	68ba      	ldr	r2, [r7, #8]
 8017016:	429a      	cmp	r2, r3
 8017018:	d3c6      	bcc.n	8016fa8 <remove_chain+0x4a>
 801701a:	e000      	b.n	801701e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801701c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801701e:	2300      	movs	r3, #0
}
 8017020:	4618      	mov	r0, r3
 8017022:	3720      	adds	r7, #32
 8017024:	46bd      	mov	sp, r7
 8017026:	bd80      	pop	{r7, pc}

08017028 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b088      	sub	sp, #32
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
 8017030:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017038:	683b      	ldr	r3, [r7, #0]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d10d      	bne.n	801705a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801703e:	693b      	ldr	r3, [r7, #16]
 8017040:	68db      	ldr	r3, [r3, #12]
 8017042:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017044:	69bb      	ldr	r3, [r7, #24]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d004      	beq.n	8017054 <create_chain+0x2c>
 801704a:	693b      	ldr	r3, [r7, #16]
 801704c:	695b      	ldr	r3, [r3, #20]
 801704e:	69ba      	ldr	r2, [r7, #24]
 8017050:	429a      	cmp	r2, r3
 8017052:	d31b      	bcc.n	801708c <create_chain+0x64>
 8017054:	2301      	movs	r3, #1
 8017056:	61bb      	str	r3, [r7, #24]
 8017058:	e018      	b.n	801708c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801705a:	6839      	ldr	r1, [r7, #0]
 801705c:	6878      	ldr	r0, [r7, #4]
 801705e:	f7ff fdf2 	bl	8016c46 <get_fat>
 8017062:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	2b01      	cmp	r3, #1
 8017068:	d801      	bhi.n	801706e <create_chain+0x46>
 801706a:	2301      	movs	r3, #1
 801706c:	e070      	b.n	8017150 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017074:	d101      	bne.n	801707a <create_chain+0x52>
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	e06a      	b.n	8017150 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801707a:	693b      	ldr	r3, [r7, #16]
 801707c:	695b      	ldr	r3, [r3, #20]
 801707e:	68fa      	ldr	r2, [r7, #12]
 8017080:	429a      	cmp	r2, r3
 8017082:	d201      	bcs.n	8017088 <create_chain+0x60>
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	e063      	b.n	8017150 <create_chain+0x128>
		scl = clst;
 8017088:	683b      	ldr	r3, [r7, #0]
 801708a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801708c:	69bb      	ldr	r3, [r7, #24]
 801708e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017090:	69fb      	ldr	r3, [r7, #28]
 8017092:	3301      	adds	r3, #1
 8017094:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017096:	693b      	ldr	r3, [r7, #16]
 8017098:	695b      	ldr	r3, [r3, #20]
 801709a:	69fa      	ldr	r2, [r7, #28]
 801709c:	429a      	cmp	r2, r3
 801709e:	d307      	bcc.n	80170b0 <create_chain+0x88>
				ncl = 2;
 80170a0:	2302      	movs	r3, #2
 80170a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80170a4:	69fa      	ldr	r2, [r7, #28]
 80170a6:	69bb      	ldr	r3, [r7, #24]
 80170a8:	429a      	cmp	r2, r3
 80170aa:	d901      	bls.n	80170b0 <create_chain+0x88>
 80170ac:	2300      	movs	r3, #0
 80170ae:	e04f      	b.n	8017150 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80170b0:	69f9      	ldr	r1, [r7, #28]
 80170b2:	6878      	ldr	r0, [r7, #4]
 80170b4:	f7ff fdc7 	bl	8016c46 <get_fat>
 80170b8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d00e      	beq.n	80170de <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	2b01      	cmp	r3, #1
 80170c4:	d003      	beq.n	80170ce <create_chain+0xa6>
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170cc:	d101      	bne.n	80170d2 <create_chain+0xaa>
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	e03e      	b.n	8017150 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80170d2:	69fa      	ldr	r2, [r7, #28]
 80170d4:	69bb      	ldr	r3, [r7, #24]
 80170d6:	429a      	cmp	r2, r3
 80170d8:	d1da      	bne.n	8017090 <create_chain+0x68>
 80170da:	2300      	movs	r3, #0
 80170dc:	e038      	b.n	8017150 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80170de:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80170e0:	f04f 32ff 	mov.w	r2, #4294967295
 80170e4:	69f9      	ldr	r1, [r7, #28]
 80170e6:	6938      	ldr	r0, [r7, #16]
 80170e8:	f7ff fe52 	bl	8016d90 <put_fat>
 80170ec:	4603      	mov	r3, r0
 80170ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80170f0:	7dfb      	ldrb	r3, [r7, #23]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d109      	bne.n	801710a <create_chain+0xe2>
 80170f6:	683b      	ldr	r3, [r7, #0]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d006      	beq.n	801710a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80170fc:	69fa      	ldr	r2, [r7, #28]
 80170fe:	6839      	ldr	r1, [r7, #0]
 8017100:	6938      	ldr	r0, [r7, #16]
 8017102:	f7ff fe45 	bl	8016d90 <put_fat>
 8017106:	4603      	mov	r3, r0
 8017108:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801710a:	7dfb      	ldrb	r3, [r7, #23]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d116      	bne.n	801713e <create_chain+0x116>
		fs->last_clst = ncl;
 8017110:	693b      	ldr	r3, [r7, #16]
 8017112:	69fa      	ldr	r2, [r7, #28]
 8017114:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8017116:	693b      	ldr	r3, [r7, #16]
 8017118:	691a      	ldr	r2, [r3, #16]
 801711a:	693b      	ldr	r3, [r7, #16]
 801711c:	695b      	ldr	r3, [r3, #20]
 801711e:	3b02      	subs	r3, #2
 8017120:	429a      	cmp	r2, r3
 8017122:	d804      	bhi.n	801712e <create_chain+0x106>
 8017124:	693b      	ldr	r3, [r7, #16]
 8017126:	691b      	ldr	r3, [r3, #16]
 8017128:	1e5a      	subs	r2, r3, #1
 801712a:	693b      	ldr	r3, [r7, #16]
 801712c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801712e:	693b      	ldr	r3, [r7, #16]
 8017130:	791b      	ldrb	r3, [r3, #4]
 8017132:	f043 0301 	orr.w	r3, r3, #1
 8017136:	b2da      	uxtb	r2, r3
 8017138:	693b      	ldr	r3, [r7, #16]
 801713a:	711a      	strb	r2, [r3, #4]
 801713c:	e007      	b.n	801714e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801713e:	7dfb      	ldrb	r3, [r7, #23]
 8017140:	2b01      	cmp	r3, #1
 8017142:	d102      	bne.n	801714a <create_chain+0x122>
 8017144:	f04f 33ff 	mov.w	r3, #4294967295
 8017148:	e000      	b.n	801714c <create_chain+0x124>
 801714a:	2301      	movs	r3, #1
 801714c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801714e:	69fb      	ldr	r3, [r7, #28]
}
 8017150:	4618      	mov	r0, r3
 8017152:	3720      	adds	r7, #32
 8017154:	46bd      	mov	sp, r7
 8017156:	bd80      	pop	{r7, pc}

08017158 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017158:	b480      	push	{r7}
 801715a:	b087      	sub	sp, #28
 801715c:	af00      	add	r7, sp, #0
 801715e:	6078      	str	r0, [r7, #4]
 8017160:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801716c:	3304      	adds	r3, #4
 801716e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017170:	683b      	ldr	r3, [r7, #0]
 8017172:	0a5b      	lsrs	r3, r3, #9
 8017174:	68fa      	ldr	r2, [r7, #12]
 8017176:	8952      	ldrh	r2, [r2, #10]
 8017178:	fbb3 f3f2 	udiv	r3, r3, r2
 801717c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801717e:	693b      	ldr	r3, [r7, #16]
 8017180:	1d1a      	adds	r2, r3, #4
 8017182:	613a      	str	r2, [r7, #16]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017188:	68bb      	ldr	r3, [r7, #8]
 801718a:	2b00      	cmp	r3, #0
 801718c:	d101      	bne.n	8017192 <clmt_clust+0x3a>
 801718e:	2300      	movs	r3, #0
 8017190:	e010      	b.n	80171b4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8017192:	697a      	ldr	r2, [r7, #20]
 8017194:	68bb      	ldr	r3, [r7, #8]
 8017196:	429a      	cmp	r2, r3
 8017198:	d307      	bcc.n	80171aa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801719a:	697a      	ldr	r2, [r7, #20]
 801719c:	68bb      	ldr	r3, [r7, #8]
 801719e:	1ad3      	subs	r3, r2, r3
 80171a0:	617b      	str	r3, [r7, #20]
 80171a2:	693b      	ldr	r3, [r7, #16]
 80171a4:	3304      	adds	r3, #4
 80171a6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80171a8:	e7e9      	b.n	801717e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80171aa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80171ac:	693b      	ldr	r3, [r7, #16]
 80171ae:	681a      	ldr	r2, [r3, #0]
 80171b0:	697b      	ldr	r3, [r7, #20]
 80171b2:	4413      	add	r3, r2
}
 80171b4:	4618      	mov	r0, r3
 80171b6:	371c      	adds	r7, #28
 80171b8:	46bd      	mov	sp, r7
 80171ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171be:	4770      	bx	lr

080171c0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b086      	sub	sp, #24
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
 80171c8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80171d0:	683b      	ldr	r3, [r7, #0]
 80171d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80171d6:	d204      	bcs.n	80171e2 <dir_sdi+0x22>
 80171d8:	683b      	ldr	r3, [r7, #0]
 80171da:	f003 031f 	and.w	r3, r3, #31
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d001      	beq.n	80171e6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80171e2:	2302      	movs	r3, #2
 80171e4:	e063      	b.n	80172ae <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	683a      	ldr	r2, [r7, #0]
 80171ea:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	689b      	ldr	r3, [r3, #8]
 80171f0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80171f2:	697b      	ldr	r3, [r7, #20]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d106      	bne.n	8017206 <dir_sdi+0x46>
 80171f8:	693b      	ldr	r3, [r7, #16]
 80171fa:	781b      	ldrb	r3, [r3, #0]
 80171fc:	2b02      	cmp	r3, #2
 80171fe:	d902      	bls.n	8017206 <dir_sdi+0x46>
		clst = fs->dirbase;
 8017200:	693b      	ldr	r3, [r7, #16]
 8017202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017204:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8017206:	697b      	ldr	r3, [r7, #20]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d10c      	bne.n	8017226 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	095b      	lsrs	r3, r3, #5
 8017210:	693a      	ldr	r2, [r7, #16]
 8017212:	8912      	ldrh	r2, [r2, #8]
 8017214:	4293      	cmp	r3, r2
 8017216:	d301      	bcc.n	801721c <dir_sdi+0x5c>
 8017218:	2302      	movs	r3, #2
 801721a:	e048      	b.n	80172ae <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801721c:	693b      	ldr	r3, [r7, #16]
 801721e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	61da      	str	r2, [r3, #28]
 8017224:	e029      	b.n	801727a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8017226:	693b      	ldr	r3, [r7, #16]
 8017228:	895b      	ldrh	r3, [r3, #10]
 801722a:	025b      	lsls	r3, r3, #9
 801722c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801722e:	e019      	b.n	8017264 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	6979      	ldr	r1, [r7, #20]
 8017234:	4618      	mov	r0, r3
 8017236:	f7ff fd06 	bl	8016c46 <get_fat>
 801723a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801723c:	697b      	ldr	r3, [r7, #20]
 801723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017242:	d101      	bne.n	8017248 <dir_sdi+0x88>
 8017244:	2301      	movs	r3, #1
 8017246:	e032      	b.n	80172ae <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017248:	697b      	ldr	r3, [r7, #20]
 801724a:	2b01      	cmp	r3, #1
 801724c:	d904      	bls.n	8017258 <dir_sdi+0x98>
 801724e:	693b      	ldr	r3, [r7, #16]
 8017250:	695b      	ldr	r3, [r3, #20]
 8017252:	697a      	ldr	r2, [r7, #20]
 8017254:	429a      	cmp	r2, r3
 8017256:	d301      	bcc.n	801725c <dir_sdi+0x9c>
 8017258:	2302      	movs	r3, #2
 801725a:	e028      	b.n	80172ae <dir_sdi+0xee>
			ofs -= csz;
 801725c:	683a      	ldr	r2, [r7, #0]
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	1ad3      	subs	r3, r2, r3
 8017262:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017264:	683a      	ldr	r2, [r7, #0]
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	429a      	cmp	r2, r3
 801726a:	d2e1      	bcs.n	8017230 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801726c:	6979      	ldr	r1, [r7, #20]
 801726e:	6938      	ldr	r0, [r7, #16]
 8017270:	f7ff fcca 	bl	8016c08 <clust2sect>
 8017274:	4602      	mov	r2, r0
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	697a      	ldr	r2, [r7, #20]
 801727e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	69db      	ldr	r3, [r3, #28]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d101      	bne.n	801728c <dir_sdi+0xcc>
 8017288:	2302      	movs	r3, #2
 801728a:	e010      	b.n	80172ae <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	69da      	ldr	r2, [r3, #28]
 8017290:	683b      	ldr	r3, [r7, #0]
 8017292:	0a5b      	lsrs	r3, r3, #9
 8017294:	441a      	add	r2, r3
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801729a:	693b      	ldr	r3, [r7, #16]
 801729c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80172a6:	441a      	add	r2, r3
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80172ac:	2300      	movs	r3, #0
}
 80172ae:	4618      	mov	r0, r3
 80172b0:	3718      	adds	r7, #24
 80172b2:	46bd      	mov	sp, r7
 80172b4:	bd80      	pop	{r7, pc}

080172b6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80172b6:	b580      	push	{r7, lr}
 80172b8:	b086      	sub	sp, #24
 80172ba:	af00      	add	r7, sp, #0
 80172bc:	6078      	str	r0, [r7, #4]
 80172be:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	695b      	ldr	r3, [r3, #20]
 80172ca:	3320      	adds	r3, #32
 80172cc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	69db      	ldr	r3, [r3, #28]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d003      	beq.n	80172de <dir_next+0x28>
 80172d6:	68bb      	ldr	r3, [r7, #8]
 80172d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80172dc:	d301      	bcc.n	80172e2 <dir_next+0x2c>
 80172de:	2304      	movs	r3, #4
 80172e0:	e0aa      	b.n	8017438 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80172e2:	68bb      	ldr	r3, [r7, #8]
 80172e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	f040 8098 	bne.w	801741e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	69db      	ldr	r3, [r3, #28]
 80172f2:	1c5a      	adds	r2, r3, #1
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	699b      	ldr	r3, [r3, #24]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d10b      	bne.n	8017318 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8017300:	68bb      	ldr	r3, [r7, #8]
 8017302:	095b      	lsrs	r3, r3, #5
 8017304:	68fa      	ldr	r2, [r7, #12]
 8017306:	8912      	ldrh	r2, [r2, #8]
 8017308:	4293      	cmp	r3, r2
 801730a:	f0c0 8088 	bcc.w	801741e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	2200      	movs	r2, #0
 8017312:	61da      	str	r2, [r3, #28]
 8017314:	2304      	movs	r3, #4
 8017316:	e08f      	b.n	8017438 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017318:	68bb      	ldr	r3, [r7, #8]
 801731a:	0a5b      	lsrs	r3, r3, #9
 801731c:	68fa      	ldr	r2, [r7, #12]
 801731e:	8952      	ldrh	r2, [r2, #10]
 8017320:	3a01      	subs	r2, #1
 8017322:	4013      	ands	r3, r2
 8017324:	2b00      	cmp	r3, #0
 8017326:	d17a      	bne.n	801741e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017328:	687a      	ldr	r2, [r7, #4]
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	699b      	ldr	r3, [r3, #24]
 801732e:	4619      	mov	r1, r3
 8017330:	4610      	mov	r0, r2
 8017332:	f7ff fc88 	bl	8016c46 <get_fat>
 8017336:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017338:	697b      	ldr	r3, [r7, #20]
 801733a:	2b01      	cmp	r3, #1
 801733c:	d801      	bhi.n	8017342 <dir_next+0x8c>
 801733e:	2302      	movs	r3, #2
 8017340:	e07a      	b.n	8017438 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8017342:	697b      	ldr	r3, [r7, #20]
 8017344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017348:	d101      	bne.n	801734e <dir_next+0x98>
 801734a:	2301      	movs	r3, #1
 801734c:	e074      	b.n	8017438 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	695b      	ldr	r3, [r3, #20]
 8017352:	697a      	ldr	r2, [r7, #20]
 8017354:	429a      	cmp	r2, r3
 8017356:	d358      	bcc.n	801740a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017358:	683b      	ldr	r3, [r7, #0]
 801735a:	2b00      	cmp	r3, #0
 801735c:	d104      	bne.n	8017368 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	2200      	movs	r2, #0
 8017362:	61da      	str	r2, [r3, #28]
 8017364:	2304      	movs	r3, #4
 8017366:	e067      	b.n	8017438 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017368:	687a      	ldr	r2, [r7, #4]
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	699b      	ldr	r3, [r3, #24]
 801736e:	4619      	mov	r1, r3
 8017370:	4610      	mov	r0, r2
 8017372:	f7ff fe59 	bl	8017028 <create_chain>
 8017376:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017378:	697b      	ldr	r3, [r7, #20]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d101      	bne.n	8017382 <dir_next+0xcc>
 801737e:	2307      	movs	r3, #7
 8017380:	e05a      	b.n	8017438 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8017382:	697b      	ldr	r3, [r7, #20]
 8017384:	2b01      	cmp	r3, #1
 8017386:	d101      	bne.n	801738c <dir_next+0xd6>
 8017388:	2302      	movs	r3, #2
 801738a:	e055      	b.n	8017438 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801738c:	697b      	ldr	r3, [r7, #20]
 801738e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017392:	d101      	bne.n	8017398 <dir_next+0xe2>
 8017394:	2301      	movs	r3, #1
 8017396:	e04f      	b.n	8017438 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017398:	68f8      	ldr	r0, [r7, #12]
 801739a:	f7ff fb55 	bl	8016a48 <sync_window>
 801739e:	4603      	mov	r3, r0
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d001      	beq.n	80173a8 <dir_next+0xf2>
 80173a4:	2301      	movs	r3, #1
 80173a6:	e047      	b.n	8017438 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	3330      	adds	r3, #48	; 0x30
 80173ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80173b0:	2100      	movs	r1, #0
 80173b2:	4618      	mov	r0, r3
 80173b4:	f7ff f97f 	bl	80166b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80173b8:	2300      	movs	r3, #0
 80173ba:	613b      	str	r3, [r7, #16]
 80173bc:	6979      	ldr	r1, [r7, #20]
 80173be:	68f8      	ldr	r0, [r7, #12]
 80173c0:	f7ff fc22 	bl	8016c08 <clust2sect>
 80173c4:	4602      	mov	r2, r0
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80173ca:	e012      	b.n	80173f2 <dir_next+0x13c>
						fs->wflag = 1;
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	2201      	movs	r2, #1
 80173d0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80173d2:	68f8      	ldr	r0, [r7, #12]
 80173d4:	f7ff fb38 	bl	8016a48 <sync_window>
 80173d8:	4603      	mov	r3, r0
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d001      	beq.n	80173e2 <dir_next+0x12c>
 80173de:	2301      	movs	r3, #1
 80173e0:	e02a      	b.n	8017438 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80173e2:	693b      	ldr	r3, [r7, #16]
 80173e4:	3301      	adds	r3, #1
 80173e6:	613b      	str	r3, [r7, #16]
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173ec:	1c5a      	adds	r2, r3, #1
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	895b      	ldrh	r3, [r3, #10]
 80173f6:	461a      	mov	r2, r3
 80173f8:	693b      	ldr	r3, [r7, #16]
 80173fa:	4293      	cmp	r3, r2
 80173fc:	d3e6      	bcc.n	80173cc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017402:	693b      	ldr	r3, [r7, #16]
 8017404:	1ad2      	subs	r2, r2, r3
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	697a      	ldr	r2, [r7, #20]
 801740e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017410:	6979      	ldr	r1, [r7, #20]
 8017412:	68f8      	ldr	r0, [r7, #12]
 8017414:	f7ff fbf8 	bl	8016c08 <clust2sect>
 8017418:	4602      	mov	r2, r0
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	68ba      	ldr	r2, [r7, #8]
 8017422:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801742a:	68bb      	ldr	r3, [r7, #8]
 801742c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017430:	441a      	add	r2, r3
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017436:	2300      	movs	r3, #0
}
 8017438:	4618      	mov	r0, r3
 801743a:	3718      	adds	r7, #24
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}

08017440 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b086      	sub	sp, #24
 8017444:	af00      	add	r7, sp, #0
 8017446:	6078      	str	r0, [r7, #4]
 8017448:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017450:	2100      	movs	r1, #0
 8017452:	6878      	ldr	r0, [r7, #4]
 8017454:	f7ff feb4 	bl	80171c0 <dir_sdi>
 8017458:	4603      	mov	r3, r0
 801745a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801745c:	7dfb      	ldrb	r3, [r7, #23]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d12b      	bne.n	80174ba <dir_alloc+0x7a>
		n = 0;
 8017462:	2300      	movs	r3, #0
 8017464:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	69db      	ldr	r3, [r3, #28]
 801746a:	4619      	mov	r1, r3
 801746c:	68f8      	ldr	r0, [r7, #12]
 801746e:	f7ff fb2f 	bl	8016ad0 <move_window>
 8017472:	4603      	mov	r3, r0
 8017474:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017476:	7dfb      	ldrb	r3, [r7, #23]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d11d      	bne.n	80174b8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	6a1b      	ldr	r3, [r3, #32]
 8017480:	781b      	ldrb	r3, [r3, #0]
 8017482:	2be5      	cmp	r3, #229	; 0xe5
 8017484:	d004      	beq.n	8017490 <dir_alloc+0x50>
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	6a1b      	ldr	r3, [r3, #32]
 801748a:	781b      	ldrb	r3, [r3, #0]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d107      	bne.n	80174a0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	3301      	adds	r3, #1
 8017494:	613b      	str	r3, [r7, #16]
 8017496:	693a      	ldr	r2, [r7, #16]
 8017498:	683b      	ldr	r3, [r7, #0]
 801749a:	429a      	cmp	r2, r3
 801749c:	d102      	bne.n	80174a4 <dir_alloc+0x64>
 801749e:	e00c      	b.n	80174ba <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80174a0:	2300      	movs	r3, #0
 80174a2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80174a4:	2101      	movs	r1, #1
 80174a6:	6878      	ldr	r0, [r7, #4]
 80174a8:	f7ff ff05 	bl	80172b6 <dir_next>
 80174ac:	4603      	mov	r3, r0
 80174ae:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80174b0:	7dfb      	ldrb	r3, [r7, #23]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d0d7      	beq.n	8017466 <dir_alloc+0x26>
 80174b6:	e000      	b.n	80174ba <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80174b8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80174ba:	7dfb      	ldrb	r3, [r7, #23]
 80174bc:	2b04      	cmp	r3, #4
 80174be:	d101      	bne.n	80174c4 <dir_alloc+0x84>
 80174c0:	2307      	movs	r3, #7
 80174c2:	75fb      	strb	r3, [r7, #23]
	return res;
 80174c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80174c6:	4618      	mov	r0, r3
 80174c8:	3718      	adds	r7, #24
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}

080174ce <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80174ce:	b580      	push	{r7, lr}
 80174d0:	b084      	sub	sp, #16
 80174d2:	af00      	add	r7, sp, #0
 80174d4:	6078      	str	r0, [r7, #4]
 80174d6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80174d8:	683b      	ldr	r3, [r7, #0]
 80174da:	331a      	adds	r3, #26
 80174dc:	4618      	mov	r0, r3
 80174de:	f7ff f847 	bl	8016570 <ld_word>
 80174e2:	4603      	mov	r3, r0
 80174e4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	781b      	ldrb	r3, [r3, #0]
 80174ea:	2b03      	cmp	r3, #3
 80174ec:	d109      	bne.n	8017502 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80174ee:	683b      	ldr	r3, [r7, #0]
 80174f0:	3314      	adds	r3, #20
 80174f2:	4618      	mov	r0, r3
 80174f4:	f7ff f83c 	bl	8016570 <ld_word>
 80174f8:	4603      	mov	r3, r0
 80174fa:	041b      	lsls	r3, r3, #16
 80174fc:	68fa      	ldr	r2, [r7, #12]
 80174fe:	4313      	orrs	r3, r2
 8017500:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8017502:	68fb      	ldr	r3, [r7, #12]
}
 8017504:	4618      	mov	r0, r3
 8017506:	3710      	adds	r7, #16
 8017508:	46bd      	mov	sp, r7
 801750a:	bd80      	pop	{r7, pc}

0801750c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801750c:	b580      	push	{r7, lr}
 801750e:	b084      	sub	sp, #16
 8017510:	af00      	add	r7, sp, #0
 8017512:	60f8      	str	r0, [r7, #12]
 8017514:	60b9      	str	r1, [r7, #8]
 8017516:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8017518:	68bb      	ldr	r3, [r7, #8]
 801751a:	331a      	adds	r3, #26
 801751c:	687a      	ldr	r2, [r7, #4]
 801751e:	b292      	uxth	r2, r2
 8017520:	4611      	mov	r1, r2
 8017522:	4618      	mov	r0, r3
 8017524:	f7ff f85f 	bl	80165e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	781b      	ldrb	r3, [r3, #0]
 801752c:	2b03      	cmp	r3, #3
 801752e:	d109      	bne.n	8017544 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017530:	68bb      	ldr	r3, [r7, #8]
 8017532:	f103 0214 	add.w	r2, r3, #20
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	0c1b      	lsrs	r3, r3, #16
 801753a:	b29b      	uxth	r3, r3
 801753c:	4619      	mov	r1, r3
 801753e:	4610      	mov	r0, r2
 8017540:	f7ff f851 	bl	80165e6 <st_word>
	}
}
 8017544:	bf00      	nop
 8017546:	3710      	adds	r7, #16
 8017548:	46bd      	mov	sp, r7
 801754a:	bd80      	pop	{r7, pc}

0801754c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801754c:	b580      	push	{r7, lr}
 801754e:	b086      	sub	sp, #24
 8017550:	af00      	add	r7, sp, #0
 8017552:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801755a:	2100      	movs	r1, #0
 801755c:	6878      	ldr	r0, [r7, #4]
 801755e:	f7ff fe2f 	bl	80171c0 <dir_sdi>
 8017562:	4603      	mov	r3, r0
 8017564:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017566:	7dfb      	ldrb	r3, [r7, #23]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d001      	beq.n	8017570 <dir_find+0x24>
 801756c:	7dfb      	ldrb	r3, [r7, #23]
 801756e:	e03e      	b.n	80175ee <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	69db      	ldr	r3, [r3, #28]
 8017574:	4619      	mov	r1, r3
 8017576:	6938      	ldr	r0, [r7, #16]
 8017578:	f7ff faaa 	bl	8016ad0 <move_window>
 801757c:	4603      	mov	r3, r0
 801757e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017580:	7dfb      	ldrb	r3, [r7, #23]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d12f      	bne.n	80175e6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	6a1b      	ldr	r3, [r3, #32]
 801758a:	781b      	ldrb	r3, [r3, #0]
 801758c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801758e:	7bfb      	ldrb	r3, [r7, #15]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d102      	bne.n	801759a <dir_find+0x4e>
 8017594:	2304      	movs	r3, #4
 8017596:	75fb      	strb	r3, [r7, #23]
 8017598:	e028      	b.n	80175ec <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	6a1b      	ldr	r3, [r3, #32]
 801759e:	330b      	adds	r3, #11
 80175a0:	781b      	ldrb	r3, [r3, #0]
 80175a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80175a6:	b2da      	uxtb	r2, r3
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	6a1b      	ldr	r3, [r3, #32]
 80175b0:	330b      	adds	r3, #11
 80175b2:	781b      	ldrb	r3, [r3, #0]
 80175b4:	f003 0308 	and.w	r3, r3, #8
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d10a      	bne.n	80175d2 <dir_find+0x86>
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	6a18      	ldr	r0, [r3, #32]
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	3324      	adds	r3, #36	; 0x24
 80175c4:	220b      	movs	r2, #11
 80175c6:	4619      	mov	r1, r3
 80175c8:	f7ff f88f 	bl	80166ea <mem_cmp>
 80175cc:	4603      	mov	r3, r0
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d00b      	beq.n	80175ea <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80175d2:	2100      	movs	r1, #0
 80175d4:	6878      	ldr	r0, [r7, #4]
 80175d6:	f7ff fe6e 	bl	80172b6 <dir_next>
 80175da:	4603      	mov	r3, r0
 80175dc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80175de:	7dfb      	ldrb	r3, [r7, #23]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d0c5      	beq.n	8017570 <dir_find+0x24>
 80175e4:	e002      	b.n	80175ec <dir_find+0xa0>
		if (res != FR_OK) break;
 80175e6:	bf00      	nop
 80175e8:	e000      	b.n	80175ec <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80175ea:	bf00      	nop

	return res;
 80175ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80175ee:	4618      	mov	r0, r3
 80175f0:	3718      	adds	r7, #24
 80175f2:	46bd      	mov	sp, r7
 80175f4:	bd80      	pop	{r7, pc}

080175f6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80175f6:	b580      	push	{r7, lr}
 80175f8:	b084      	sub	sp, #16
 80175fa:	af00      	add	r7, sp, #0
 80175fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8017604:	2101      	movs	r1, #1
 8017606:	6878      	ldr	r0, [r7, #4]
 8017608:	f7ff ff1a 	bl	8017440 <dir_alloc>
 801760c:	4603      	mov	r3, r0
 801760e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017610:	7bfb      	ldrb	r3, [r7, #15]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d11c      	bne.n	8017650 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	69db      	ldr	r3, [r3, #28]
 801761a:	4619      	mov	r1, r3
 801761c:	68b8      	ldr	r0, [r7, #8]
 801761e:	f7ff fa57 	bl	8016ad0 <move_window>
 8017622:	4603      	mov	r3, r0
 8017624:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017626:	7bfb      	ldrb	r3, [r7, #15]
 8017628:	2b00      	cmp	r3, #0
 801762a:	d111      	bne.n	8017650 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	6a1b      	ldr	r3, [r3, #32]
 8017630:	2220      	movs	r2, #32
 8017632:	2100      	movs	r1, #0
 8017634:	4618      	mov	r0, r3
 8017636:	f7ff f83e 	bl	80166b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	6a18      	ldr	r0, [r3, #32]
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	3324      	adds	r3, #36	; 0x24
 8017642:	220b      	movs	r2, #11
 8017644:	4619      	mov	r1, r3
 8017646:	f7ff f815 	bl	8016674 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801764a:	68bb      	ldr	r3, [r7, #8]
 801764c:	2201      	movs	r2, #1
 801764e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017650:	7bfb      	ldrb	r3, [r7, #15]
}
 8017652:	4618      	mov	r0, r3
 8017654:	3710      	adds	r7, #16
 8017656:	46bd      	mov	sp, r7
 8017658:	bd80      	pop	{r7, pc}
	...

0801765c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b088      	sub	sp, #32
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
 8017664:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8017666:	683b      	ldr	r3, [r7, #0]
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	60fb      	str	r3, [r7, #12]
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	3324      	adds	r3, #36	; 0x24
 8017670:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8017672:	220b      	movs	r2, #11
 8017674:	2120      	movs	r1, #32
 8017676:	68b8      	ldr	r0, [r7, #8]
 8017678:	f7ff f81d 	bl	80166b6 <mem_set>
	si = i = 0; ni = 8;
 801767c:	2300      	movs	r3, #0
 801767e:	613b      	str	r3, [r7, #16]
 8017680:	693b      	ldr	r3, [r7, #16]
 8017682:	617b      	str	r3, [r7, #20]
 8017684:	2308      	movs	r3, #8
 8017686:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8017688:	697b      	ldr	r3, [r7, #20]
 801768a:	1c5a      	adds	r2, r3, #1
 801768c:	617a      	str	r2, [r7, #20]
 801768e:	68fa      	ldr	r2, [r7, #12]
 8017690:	4413      	add	r3, r2
 8017692:	781b      	ldrb	r3, [r3, #0]
 8017694:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017696:	7ffb      	ldrb	r3, [r7, #31]
 8017698:	2b20      	cmp	r3, #32
 801769a:	d94e      	bls.n	801773a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801769c:	7ffb      	ldrb	r3, [r7, #31]
 801769e:	2b2f      	cmp	r3, #47	; 0x2f
 80176a0:	d006      	beq.n	80176b0 <create_name+0x54>
 80176a2:	7ffb      	ldrb	r3, [r7, #31]
 80176a4:	2b5c      	cmp	r3, #92	; 0x5c
 80176a6:	d110      	bne.n	80176ca <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80176a8:	e002      	b.n	80176b0 <create_name+0x54>
 80176aa:	697b      	ldr	r3, [r7, #20]
 80176ac:	3301      	adds	r3, #1
 80176ae:	617b      	str	r3, [r7, #20]
 80176b0:	68fa      	ldr	r2, [r7, #12]
 80176b2:	697b      	ldr	r3, [r7, #20]
 80176b4:	4413      	add	r3, r2
 80176b6:	781b      	ldrb	r3, [r3, #0]
 80176b8:	2b2f      	cmp	r3, #47	; 0x2f
 80176ba:	d0f6      	beq.n	80176aa <create_name+0x4e>
 80176bc:	68fa      	ldr	r2, [r7, #12]
 80176be:	697b      	ldr	r3, [r7, #20]
 80176c0:	4413      	add	r3, r2
 80176c2:	781b      	ldrb	r3, [r3, #0]
 80176c4:	2b5c      	cmp	r3, #92	; 0x5c
 80176c6:	d0f0      	beq.n	80176aa <create_name+0x4e>
			break;
 80176c8:	e038      	b.n	801773c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80176ca:	7ffb      	ldrb	r3, [r7, #31]
 80176cc:	2b2e      	cmp	r3, #46	; 0x2e
 80176ce:	d003      	beq.n	80176d8 <create_name+0x7c>
 80176d0:	693a      	ldr	r2, [r7, #16]
 80176d2:	69bb      	ldr	r3, [r7, #24]
 80176d4:	429a      	cmp	r2, r3
 80176d6:	d30c      	bcc.n	80176f2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80176d8:	69bb      	ldr	r3, [r7, #24]
 80176da:	2b0b      	cmp	r3, #11
 80176dc:	d002      	beq.n	80176e4 <create_name+0x88>
 80176de:	7ffb      	ldrb	r3, [r7, #31]
 80176e0:	2b2e      	cmp	r3, #46	; 0x2e
 80176e2:	d001      	beq.n	80176e8 <create_name+0x8c>
 80176e4:	2306      	movs	r3, #6
 80176e6:	e044      	b.n	8017772 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80176e8:	2308      	movs	r3, #8
 80176ea:	613b      	str	r3, [r7, #16]
 80176ec:	230b      	movs	r3, #11
 80176ee:	61bb      	str	r3, [r7, #24]
			continue;
 80176f0:	e022      	b.n	8017738 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80176f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	da04      	bge.n	8017704 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80176fa:	7ffb      	ldrb	r3, [r7, #31]
 80176fc:	3b80      	subs	r3, #128	; 0x80
 80176fe:	4a1f      	ldr	r2, [pc, #124]	; (801777c <create_name+0x120>)
 8017700:	5cd3      	ldrb	r3, [r2, r3]
 8017702:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8017704:	7ffb      	ldrb	r3, [r7, #31]
 8017706:	4619      	mov	r1, r3
 8017708:	481d      	ldr	r0, [pc, #116]	; (8017780 <create_name+0x124>)
 801770a:	f7ff f815 	bl	8016738 <chk_chr>
 801770e:	4603      	mov	r3, r0
 8017710:	2b00      	cmp	r3, #0
 8017712:	d001      	beq.n	8017718 <create_name+0xbc>
 8017714:	2306      	movs	r3, #6
 8017716:	e02c      	b.n	8017772 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8017718:	7ffb      	ldrb	r3, [r7, #31]
 801771a:	2b60      	cmp	r3, #96	; 0x60
 801771c:	d905      	bls.n	801772a <create_name+0xce>
 801771e:	7ffb      	ldrb	r3, [r7, #31]
 8017720:	2b7a      	cmp	r3, #122	; 0x7a
 8017722:	d802      	bhi.n	801772a <create_name+0xce>
 8017724:	7ffb      	ldrb	r3, [r7, #31]
 8017726:	3b20      	subs	r3, #32
 8017728:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801772a:	693b      	ldr	r3, [r7, #16]
 801772c:	1c5a      	adds	r2, r3, #1
 801772e:	613a      	str	r2, [r7, #16]
 8017730:	68ba      	ldr	r2, [r7, #8]
 8017732:	4413      	add	r3, r2
 8017734:	7ffa      	ldrb	r2, [r7, #31]
 8017736:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8017738:	e7a6      	b.n	8017688 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801773a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801773c:	68fa      	ldr	r2, [r7, #12]
 801773e:	697b      	ldr	r3, [r7, #20]
 8017740:	441a      	add	r2, r3
 8017742:	683b      	ldr	r3, [r7, #0]
 8017744:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8017746:	693b      	ldr	r3, [r7, #16]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d101      	bne.n	8017750 <create_name+0xf4>
 801774c:	2306      	movs	r3, #6
 801774e:	e010      	b.n	8017772 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	781b      	ldrb	r3, [r3, #0]
 8017754:	2be5      	cmp	r3, #229	; 0xe5
 8017756:	d102      	bne.n	801775e <create_name+0x102>
 8017758:	68bb      	ldr	r3, [r7, #8]
 801775a:	2205      	movs	r2, #5
 801775c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801775e:	7ffb      	ldrb	r3, [r7, #31]
 8017760:	2b20      	cmp	r3, #32
 8017762:	d801      	bhi.n	8017768 <create_name+0x10c>
 8017764:	2204      	movs	r2, #4
 8017766:	e000      	b.n	801776a <create_name+0x10e>
 8017768:	2200      	movs	r2, #0
 801776a:	68bb      	ldr	r3, [r7, #8]
 801776c:	330b      	adds	r3, #11
 801776e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8017770:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8017772:	4618      	mov	r0, r3
 8017774:	3720      	adds	r7, #32
 8017776:	46bd      	mov	sp, r7
 8017778:	bd80      	pop	{r7, pc}
 801777a:	bf00      	nop
 801777c:	0801af9c 	.word	0x0801af9c
 8017780:	0801aec0 	.word	0x0801aec0

08017784 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b086      	sub	sp, #24
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
 801778c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017792:	693b      	ldr	r3, [r7, #16]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017798:	e002      	b.n	80177a0 <follow_path+0x1c>
 801779a:	683b      	ldr	r3, [r7, #0]
 801779c:	3301      	adds	r3, #1
 801779e:	603b      	str	r3, [r7, #0]
 80177a0:	683b      	ldr	r3, [r7, #0]
 80177a2:	781b      	ldrb	r3, [r3, #0]
 80177a4:	2b2f      	cmp	r3, #47	; 0x2f
 80177a6:	d0f8      	beq.n	801779a <follow_path+0x16>
 80177a8:	683b      	ldr	r3, [r7, #0]
 80177aa:	781b      	ldrb	r3, [r3, #0]
 80177ac:	2b5c      	cmp	r3, #92	; 0x5c
 80177ae:	d0f4      	beq.n	801779a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80177b0:	693b      	ldr	r3, [r7, #16]
 80177b2:	2200      	movs	r2, #0
 80177b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	781b      	ldrb	r3, [r3, #0]
 80177ba:	2b1f      	cmp	r3, #31
 80177bc:	d80a      	bhi.n	80177d4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	2280      	movs	r2, #128	; 0x80
 80177c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80177c6:	2100      	movs	r1, #0
 80177c8:	6878      	ldr	r0, [r7, #4]
 80177ca:	f7ff fcf9 	bl	80171c0 <dir_sdi>
 80177ce:	4603      	mov	r3, r0
 80177d0:	75fb      	strb	r3, [r7, #23]
 80177d2:	e043      	b.n	801785c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80177d4:	463b      	mov	r3, r7
 80177d6:	4619      	mov	r1, r3
 80177d8:	6878      	ldr	r0, [r7, #4]
 80177da:	f7ff ff3f 	bl	801765c <create_name>
 80177de:	4603      	mov	r3, r0
 80177e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80177e2:	7dfb      	ldrb	r3, [r7, #23]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d134      	bne.n	8017852 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80177e8:	6878      	ldr	r0, [r7, #4]
 80177ea:	f7ff feaf 	bl	801754c <dir_find>
 80177ee:	4603      	mov	r3, r0
 80177f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80177f8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80177fa:	7dfb      	ldrb	r3, [r7, #23]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d00a      	beq.n	8017816 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8017800:	7dfb      	ldrb	r3, [r7, #23]
 8017802:	2b04      	cmp	r3, #4
 8017804:	d127      	bne.n	8017856 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8017806:	7afb      	ldrb	r3, [r7, #11]
 8017808:	f003 0304 	and.w	r3, r3, #4
 801780c:	2b00      	cmp	r3, #0
 801780e:	d122      	bne.n	8017856 <follow_path+0xd2>
 8017810:	2305      	movs	r3, #5
 8017812:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8017814:	e01f      	b.n	8017856 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017816:	7afb      	ldrb	r3, [r7, #11]
 8017818:	f003 0304 	and.w	r3, r3, #4
 801781c:	2b00      	cmp	r3, #0
 801781e:	d11c      	bne.n	801785a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8017820:	693b      	ldr	r3, [r7, #16]
 8017822:	799b      	ldrb	r3, [r3, #6]
 8017824:	f003 0310 	and.w	r3, r3, #16
 8017828:	2b00      	cmp	r3, #0
 801782a:	d102      	bne.n	8017832 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801782c:	2305      	movs	r3, #5
 801782e:	75fb      	strb	r3, [r7, #23]
 8017830:	e014      	b.n	801785c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	695b      	ldr	r3, [r3, #20]
 801783c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017840:	4413      	add	r3, r2
 8017842:	4619      	mov	r1, r3
 8017844:	68f8      	ldr	r0, [r7, #12]
 8017846:	f7ff fe42 	bl	80174ce <ld_clust>
 801784a:	4602      	mov	r2, r0
 801784c:	693b      	ldr	r3, [r7, #16]
 801784e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017850:	e7c0      	b.n	80177d4 <follow_path+0x50>
			if (res != FR_OK) break;
 8017852:	bf00      	nop
 8017854:	e002      	b.n	801785c <follow_path+0xd8>
				break;
 8017856:	bf00      	nop
 8017858:	e000      	b.n	801785c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801785a:	bf00      	nop
			}
		}
	}

	return res;
 801785c:	7dfb      	ldrb	r3, [r7, #23]
}
 801785e:	4618      	mov	r0, r3
 8017860:	3718      	adds	r7, #24
 8017862:	46bd      	mov	sp, r7
 8017864:	bd80      	pop	{r7, pc}

08017866 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8017866:	b480      	push	{r7}
 8017868:	b087      	sub	sp, #28
 801786a:	af00      	add	r7, sp, #0
 801786c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801786e:	f04f 33ff 	mov.w	r3, #4294967295
 8017872:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d031      	beq.n	80178e0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	617b      	str	r3, [r7, #20]
 8017882:	e002      	b.n	801788a <get_ldnumber+0x24>
 8017884:	697b      	ldr	r3, [r7, #20]
 8017886:	3301      	adds	r3, #1
 8017888:	617b      	str	r3, [r7, #20]
 801788a:	697b      	ldr	r3, [r7, #20]
 801788c:	781b      	ldrb	r3, [r3, #0]
 801788e:	2b20      	cmp	r3, #32
 8017890:	d903      	bls.n	801789a <get_ldnumber+0x34>
 8017892:	697b      	ldr	r3, [r7, #20]
 8017894:	781b      	ldrb	r3, [r3, #0]
 8017896:	2b3a      	cmp	r3, #58	; 0x3a
 8017898:	d1f4      	bne.n	8017884 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801789a:	697b      	ldr	r3, [r7, #20]
 801789c:	781b      	ldrb	r3, [r3, #0]
 801789e:	2b3a      	cmp	r3, #58	; 0x3a
 80178a0:	d11c      	bne.n	80178dc <get_ldnumber+0x76>
			tp = *path;
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	1c5a      	adds	r2, r3, #1
 80178ac:	60fa      	str	r2, [r7, #12]
 80178ae:	781b      	ldrb	r3, [r3, #0]
 80178b0:	3b30      	subs	r3, #48	; 0x30
 80178b2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80178b4:	68bb      	ldr	r3, [r7, #8]
 80178b6:	2b09      	cmp	r3, #9
 80178b8:	d80e      	bhi.n	80178d8 <get_ldnumber+0x72>
 80178ba:	68fa      	ldr	r2, [r7, #12]
 80178bc:	697b      	ldr	r3, [r7, #20]
 80178be:	429a      	cmp	r2, r3
 80178c0:	d10a      	bne.n	80178d8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80178c2:	68bb      	ldr	r3, [r7, #8]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d107      	bne.n	80178d8 <get_ldnumber+0x72>
					vol = (int)i;
 80178c8:	68bb      	ldr	r3, [r7, #8]
 80178ca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80178cc:	697b      	ldr	r3, [r7, #20]
 80178ce:	3301      	adds	r3, #1
 80178d0:	617b      	str	r3, [r7, #20]
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	697a      	ldr	r2, [r7, #20]
 80178d6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80178d8:	693b      	ldr	r3, [r7, #16]
 80178da:	e002      	b.n	80178e2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80178dc:	2300      	movs	r3, #0
 80178de:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80178e0:	693b      	ldr	r3, [r7, #16]
}
 80178e2:	4618      	mov	r0, r3
 80178e4:	371c      	adds	r7, #28
 80178e6:	46bd      	mov	sp, r7
 80178e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ec:	4770      	bx	lr
	...

080178f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b082      	sub	sp, #8
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]
 80178f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	2200      	movs	r2, #0
 80178fe:	70da      	strb	r2, [r3, #3]
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	f04f 32ff 	mov.w	r2, #4294967295
 8017906:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8017908:	6839      	ldr	r1, [r7, #0]
 801790a:	6878      	ldr	r0, [r7, #4]
 801790c:	f7ff f8e0 	bl	8016ad0 <move_window>
 8017910:	4603      	mov	r3, r0
 8017912:	2b00      	cmp	r3, #0
 8017914:	d001      	beq.n	801791a <check_fs+0x2a>
 8017916:	2304      	movs	r3, #4
 8017918:	e038      	b.n	801798c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	3330      	adds	r3, #48	; 0x30
 801791e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017922:	4618      	mov	r0, r3
 8017924:	f7fe fe24 	bl	8016570 <ld_word>
 8017928:	4603      	mov	r3, r0
 801792a:	461a      	mov	r2, r3
 801792c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017930:	429a      	cmp	r2, r3
 8017932:	d001      	beq.n	8017938 <check_fs+0x48>
 8017934:	2303      	movs	r3, #3
 8017936:	e029      	b.n	801798c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801793e:	2be9      	cmp	r3, #233	; 0xe9
 8017940:	d009      	beq.n	8017956 <check_fs+0x66>
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017948:	2beb      	cmp	r3, #235	; 0xeb
 801794a:	d11e      	bne.n	801798a <check_fs+0x9a>
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8017952:	2b90      	cmp	r3, #144	; 0x90
 8017954:	d119      	bne.n	801798a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	3330      	adds	r3, #48	; 0x30
 801795a:	3336      	adds	r3, #54	; 0x36
 801795c:	4618      	mov	r0, r3
 801795e:	f7fe fe1f 	bl	80165a0 <ld_dword>
 8017962:	4603      	mov	r3, r0
 8017964:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017968:	4a0a      	ldr	r2, [pc, #40]	; (8017994 <check_fs+0xa4>)
 801796a:	4293      	cmp	r3, r2
 801796c:	d101      	bne.n	8017972 <check_fs+0x82>
 801796e:	2300      	movs	r3, #0
 8017970:	e00c      	b.n	801798c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	3330      	adds	r3, #48	; 0x30
 8017976:	3352      	adds	r3, #82	; 0x52
 8017978:	4618      	mov	r0, r3
 801797a:	f7fe fe11 	bl	80165a0 <ld_dword>
 801797e:	4602      	mov	r2, r0
 8017980:	4b05      	ldr	r3, [pc, #20]	; (8017998 <check_fs+0xa8>)
 8017982:	429a      	cmp	r2, r3
 8017984:	d101      	bne.n	801798a <check_fs+0x9a>
 8017986:	2300      	movs	r3, #0
 8017988:	e000      	b.n	801798c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801798a:	2302      	movs	r3, #2
}
 801798c:	4618      	mov	r0, r3
 801798e:	3708      	adds	r7, #8
 8017990:	46bd      	mov	sp, r7
 8017992:	bd80      	pop	{r7, pc}
 8017994:	00544146 	.word	0x00544146
 8017998:	33544146 	.word	0x33544146

0801799c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b096      	sub	sp, #88	; 0x58
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	60f8      	str	r0, [r7, #12]
 80179a4:	60b9      	str	r1, [r7, #8]
 80179a6:	4613      	mov	r3, r2
 80179a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80179aa:	68bb      	ldr	r3, [r7, #8]
 80179ac:	2200      	movs	r2, #0
 80179ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80179b0:	68f8      	ldr	r0, [r7, #12]
 80179b2:	f7ff ff58 	bl	8017866 <get_ldnumber>
 80179b6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80179b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	da01      	bge.n	80179c2 <find_volume+0x26>
 80179be:	230b      	movs	r3, #11
 80179c0:	e22e      	b.n	8017e20 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80179c2:	4aa8      	ldr	r2, [pc, #672]	; (8017c64 <find_volume+0x2c8>)
 80179c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80179ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80179cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d101      	bne.n	80179d6 <find_volume+0x3a>
 80179d2:	230c      	movs	r3, #12
 80179d4:	e224      	b.n	8017e20 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80179d6:	68bb      	ldr	r3, [r7, #8]
 80179d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80179da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80179dc:	79fb      	ldrb	r3, [r7, #7]
 80179de:	f023 0301 	bic.w	r3, r3, #1
 80179e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80179e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179e6:	781b      	ldrb	r3, [r3, #0]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d01a      	beq.n	8017a22 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80179ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179ee:	785b      	ldrb	r3, [r3, #1]
 80179f0:	4618      	mov	r0, r3
 80179f2:	f7fe fd1f 	bl	8016434 <disk_status>
 80179f6:	4603      	mov	r3, r0
 80179f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80179fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017a00:	f003 0301 	and.w	r3, r3, #1
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d10c      	bne.n	8017a22 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8017a08:	79fb      	ldrb	r3, [r7, #7]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d007      	beq.n	8017a1e <find_volume+0x82>
 8017a0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017a12:	f003 0304 	and.w	r3, r3, #4
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d001      	beq.n	8017a1e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8017a1a:	230a      	movs	r3, #10
 8017a1c:	e200      	b.n	8017e20 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8017a1e:	2300      	movs	r3, #0
 8017a20:	e1fe      	b.n	8017e20 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8017a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a24:	2200      	movs	r2, #0
 8017a26:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8017a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a2a:	b2da      	uxtb	r2, r3
 8017a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8017a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a32:	785b      	ldrb	r3, [r3, #1]
 8017a34:	4618      	mov	r0, r3
 8017a36:	f7fe fd17 	bl	8016468 <disk_initialize>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8017a40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017a44:	f003 0301 	and.w	r3, r3, #1
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d001      	beq.n	8017a50 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017a4c:	2303      	movs	r3, #3
 8017a4e:	e1e7      	b.n	8017e20 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8017a50:	79fb      	ldrb	r3, [r7, #7]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d007      	beq.n	8017a66 <find_volume+0xca>
 8017a56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017a5a:	f003 0304 	and.w	r3, r3, #4
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d001      	beq.n	8017a66 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8017a62:	230a      	movs	r3, #10
 8017a64:	e1dc      	b.n	8017e20 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8017a66:	2300      	movs	r3, #0
 8017a68:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017a6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017a6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017a6e:	f7ff ff3f 	bl	80178f0 <check_fs>
 8017a72:	4603      	mov	r3, r0
 8017a74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017a78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017a7c:	2b02      	cmp	r3, #2
 8017a7e:	d14b      	bne.n	8017b18 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017a80:	2300      	movs	r3, #0
 8017a82:	643b      	str	r3, [r7, #64]	; 0x40
 8017a84:	e01f      	b.n	8017ac6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a8e:	011b      	lsls	r3, r3, #4
 8017a90:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8017a94:	4413      	add	r3, r2
 8017a96:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a9a:	3304      	adds	r3, #4
 8017a9c:	781b      	ldrb	r3, [r3, #0]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d006      	beq.n	8017ab0 <find_volume+0x114>
 8017aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aa4:	3308      	adds	r3, #8
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	f7fe fd7a 	bl	80165a0 <ld_dword>
 8017aac:	4602      	mov	r2, r0
 8017aae:	e000      	b.n	8017ab2 <find_volume+0x116>
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ab4:	009b      	lsls	r3, r3, #2
 8017ab6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8017aba:	440b      	add	r3, r1
 8017abc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ac2:	3301      	adds	r3, #1
 8017ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8017ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ac8:	2b03      	cmp	r3, #3
 8017aca:	d9dc      	bls.n	8017a86 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017acc:	2300      	movs	r3, #0
 8017ace:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8017ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d002      	beq.n	8017adc <find_volume+0x140>
 8017ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ad8:	3b01      	subs	r3, #1
 8017ada:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8017adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ade:	009b      	lsls	r3, r3, #2
 8017ae0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8017ae4:	4413      	add	r3, r2
 8017ae6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8017aea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8017aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d005      	beq.n	8017afe <find_volume+0x162>
 8017af2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017af4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017af6:	f7ff fefb 	bl	80178f0 <check_fs>
 8017afa:	4603      	mov	r3, r0
 8017afc:	e000      	b.n	8017b00 <find_volume+0x164>
 8017afe:	2303      	movs	r3, #3
 8017b00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8017b04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017b08:	2b01      	cmp	r3, #1
 8017b0a:	d905      	bls.n	8017b18 <find_volume+0x17c>
 8017b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b0e:	3301      	adds	r3, #1
 8017b10:	643b      	str	r3, [r7, #64]	; 0x40
 8017b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b14:	2b03      	cmp	r3, #3
 8017b16:	d9e1      	bls.n	8017adc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017b18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017b1c:	2b04      	cmp	r3, #4
 8017b1e:	d101      	bne.n	8017b24 <find_volume+0x188>
 8017b20:	2301      	movs	r3, #1
 8017b22:	e17d      	b.n	8017e20 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8017b24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017b28:	2b01      	cmp	r3, #1
 8017b2a:	d901      	bls.n	8017b30 <find_volume+0x194>
 8017b2c:	230d      	movs	r3, #13
 8017b2e:	e177      	b.n	8017e20 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8017b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b32:	3330      	adds	r3, #48	; 0x30
 8017b34:	330b      	adds	r3, #11
 8017b36:	4618      	mov	r0, r3
 8017b38:	f7fe fd1a 	bl	8016570 <ld_word>
 8017b3c:	4603      	mov	r3, r0
 8017b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b42:	d001      	beq.n	8017b48 <find_volume+0x1ac>
 8017b44:	230d      	movs	r3, #13
 8017b46:	e16b      	b.n	8017e20 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b4a:	3330      	adds	r3, #48	; 0x30
 8017b4c:	3316      	adds	r3, #22
 8017b4e:	4618      	mov	r0, r3
 8017b50:	f7fe fd0e 	bl	8016570 <ld_word>
 8017b54:	4603      	mov	r3, r0
 8017b56:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d106      	bne.n	8017b6c <find_volume+0x1d0>
 8017b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b60:	3330      	adds	r3, #48	; 0x30
 8017b62:	3324      	adds	r3, #36	; 0x24
 8017b64:	4618      	mov	r0, r3
 8017b66:	f7fe fd1b 	bl	80165a0 <ld_dword>
 8017b6a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8017b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017b70:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b74:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8017b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b7a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b7e:	789b      	ldrb	r3, [r3, #2]
 8017b80:	2b01      	cmp	r3, #1
 8017b82:	d005      	beq.n	8017b90 <find_volume+0x1f4>
 8017b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b86:	789b      	ldrb	r3, [r3, #2]
 8017b88:	2b02      	cmp	r3, #2
 8017b8a:	d001      	beq.n	8017b90 <find_volume+0x1f4>
 8017b8c:	230d      	movs	r3, #13
 8017b8e:	e147      	b.n	8017e20 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b92:	789b      	ldrb	r3, [r3, #2]
 8017b94:	461a      	mov	r2, r3
 8017b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b98:	fb02 f303 	mul.w	r3, r2, r3
 8017b9c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8017b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017ba4:	b29a      	uxth	r2, r3
 8017ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ba8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8017baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bac:	895b      	ldrh	r3, [r3, #10]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d008      	beq.n	8017bc4 <find_volume+0x228>
 8017bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bb4:	895b      	ldrh	r3, [r3, #10]
 8017bb6:	461a      	mov	r2, r3
 8017bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bba:	895b      	ldrh	r3, [r3, #10]
 8017bbc:	3b01      	subs	r3, #1
 8017bbe:	4013      	ands	r3, r2
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d001      	beq.n	8017bc8 <find_volume+0x22c>
 8017bc4:	230d      	movs	r3, #13
 8017bc6:	e12b      	b.n	8017e20 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bca:	3330      	adds	r3, #48	; 0x30
 8017bcc:	3311      	adds	r3, #17
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f7fe fcce 	bl	8016570 <ld_word>
 8017bd4:	4603      	mov	r3, r0
 8017bd6:	461a      	mov	r2, r3
 8017bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bda:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8017bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bde:	891b      	ldrh	r3, [r3, #8]
 8017be0:	f003 030f 	and.w	r3, r3, #15
 8017be4:	b29b      	uxth	r3, r3
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d001      	beq.n	8017bee <find_volume+0x252>
 8017bea:	230d      	movs	r3, #13
 8017bec:	e118      	b.n	8017e20 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8017bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bf0:	3330      	adds	r3, #48	; 0x30
 8017bf2:	3313      	adds	r3, #19
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	f7fe fcbb 	bl	8016570 <ld_word>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8017bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d106      	bne.n	8017c12 <find_volume+0x276>
 8017c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c06:	3330      	adds	r3, #48	; 0x30
 8017c08:	3320      	adds	r3, #32
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f7fe fcc8 	bl	80165a0 <ld_dword>
 8017c10:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8017c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c14:	3330      	adds	r3, #48	; 0x30
 8017c16:	330e      	adds	r3, #14
 8017c18:	4618      	mov	r0, r3
 8017c1a:	f7fe fca9 	bl	8016570 <ld_word>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8017c22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d101      	bne.n	8017c2c <find_volume+0x290>
 8017c28:	230d      	movs	r3, #13
 8017c2a:	e0f9      	b.n	8017e20 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017c2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c30:	4413      	add	r3, r2
 8017c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017c34:	8912      	ldrh	r2, [r2, #8]
 8017c36:	0912      	lsrs	r2, r2, #4
 8017c38:	b292      	uxth	r2, r2
 8017c3a:	4413      	add	r3, r2
 8017c3c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8017c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c42:	429a      	cmp	r2, r3
 8017c44:	d201      	bcs.n	8017c4a <find_volume+0x2ae>
 8017c46:	230d      	movs	r3, #13
 8017c48:	e0ea      	b.n	8017e20 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017c4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c4e:	1ad3      	subs	r3, r2, r3
 8017c50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017c52:	8952      	ldrh	r2, [r2, #10]
 8017c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8017c58:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d103      	bne.n	8017c68 <find_volume+0x2cc>
 8017c60:	230d      	movs	r3, #13
 8017c62:	e0dd      	b.n	8017e20 <find_volume+0x484>
 8017c64:	24000b5c 	.word	0x24000b5c
		fmt = FS_FAT32;
 8017c68:	2303      	movs	r3, #3
 8017c6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c70:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017c74:	4293      	cmp	r3, r2
 8017c76:	d802      	bhi.n	8017c7e <find_volume+0x2e2>
 8017c78:	2302      	movs	r3, #2
 8017c7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c80:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017c84:	4293      	cmp	r3, r2
 8017c86:	d802      	bhi.n	8017c8e <find_volume+0x2f2>
 8017c88:	2301      	movs	r3, #1
 8017c8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c90:	1c9a      	adds	r2, r3, #2
 8017c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c94:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8017c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017c9a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017c9c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ca0:	441a      	add	r2, r3
 8017ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8017ca6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017caa:	441a      	add	r2, r3
 8017cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cae:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8017cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017cb4:	2b03      	cmp	r3, #3
 8017cb6:	d11e      	bne.n	8017cf6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cba:	3330      	adds	r3, #48	; 0x30
 8017cbc:	332a      	adds	r3, #42	; 0x2a
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	f7fe fc56 	bl	8016570 <ld_word>
 8017cc4:	4603      	mov	r3, r0
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d001      	beq.n	8017cce <find_volume+0x332>
 8017cca:	230d      	movs	r3, #13
 8017ccc:	e0a8      	b.n	8017e20 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cd0:	891b      	ldrh	r3, [r3, #8]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d001      	beq.n	8017cda <find_volume+0x33e>
 8017cd6:	230d      	movs	r3, #13
 8017cd8:	e0a2      	b.n	8017e20 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8017cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cdc:	3330      	adds	r3, #48	; 0x30
 8017cde:	332c      	adds	r3, #44	; 0x2c
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f7fe fc5d 	bl	80165a0 <ld_dword>
 8017ce6:	4602      	mov	r2, r0
 8017ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cea:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8017cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cee:	695b      	ldr	r3, [r3, #20]
 8017cf0:	009b      	lsls	r3, r3, #2
 8017cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8017cf4:	e01f      	b.n	8017d36 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8017cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cf8:	891b      	ldrh	r3, [r3, #8]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d101      	bne.n	8017d02 <find_volume+0x366>
 8017cfe:	230d      	movs	r3, #13
 8017d00:	e08e      	b.n	8017e20 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8017d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d04:	6a1a      	ldr	r2, [r3, #32]
 8017d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d08:	441a      	add	r2, r3
 8017d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d0c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8017d0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017d12:	2b02      	cmp	r3, #2
 8017d14:	d103      	bne.n	8017d1e <find_volume+0x382>
 8017d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d18:	695b      	ldr	r3, [r3, #20]
 8017d1a:	005b      	lsls	r3, r3, #1
 8017d1c:	e00a      	b.n	8017d34 <find_volume+0x398>
 8017d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d20:	695a      	ldr	r2, [r3, #20]
 8017d22:	4613      	mov	r3, r2
 8017d24:	005b      	lsls	r3, r3, #1
 8017d26:	4413      	add	r3, r2
 8017d28:	085a      	lsrs	r2, r3, #1
 8017d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d2c:	695b      	ldr	r3, [r3, #20]
 8017d2e:	f003 0301 	and.w	r3, r3, #1
 8017d32:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017d34:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d38:	699a      	ldr	r2, [r3, #24]
 8017d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d3c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8017d40:	0a5b      	lsrs	r3, r3, #9
 8017d42:	429a      	cmp	r2, r3
 8017d44:	d201      	bcs.n	8017d4a <find_volume+0x3ae>
 8017d46:	230d      	movs	r3, #13
 8017d48:	e06a      	b.n	8017e20 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8017d50:	611a      	str	r2, [r3, #16]
 8017d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d54:	691a      	ldr	r2, [r3, #16]
 8017d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d58:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8017d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d5c:	2280      	movs	r2, #128	; 0x80
 8017d5e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017d60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017d64:	2b03      	cmp	r3, #3
 8017d66:	d149      	bne.n	8017dfc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d6a:	3330      	adds	r3, #48	; 0x30
 8017d6c:	3330      	adds	r3, #48	; 0x30
 8017d6e:	4618      	mov	r0, r3
 8017d70:	f7fe fbfe 	bl	8016570 <ld_word>
 8017d74:	4603      	mov	r3, r0
 8017d76:	2b01      	cmp	r3, #1
 8017d78:	d140      	bne.n	8017dfc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d7c:	3301      	adds	r3, #1
 8017d7e:	4619      	mov	r1, r3
 8017d80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017d82:	f7fe fea5 	bl	8016ad0 <move_window>
 8017d86:	4603      	mov	r3, r0
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d137      	bne.n	8017dfc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8017d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d8e:	2200      	movs	r2, #0
 8017d90:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8017d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d94:	3330      	adds	r3, #48	; 0x30
 8017d96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	f7fe fbe8 	bl	8016570 <ld_word>
 8017da0:	4603      	mov	r3, r0
 8017da2:	461a      	mov	r2, r3
 8017da4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017da8:	429a      	cmp	r2, r3
 8017daa:	d127      	bne.n	8017dfc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dae:	3330      	adds	r3, #48	; 0x30
 8017db0:	4618      	mov	r0, r3
 8017db2:	f7fe fbf5 	bl	80165a0 <ld_dword>
 8017db6:	4602      	mov	r2, r0
 8017db8:	4b1b      	ldr	r3, [pc, #108]	; (8017e28 <find_volume+0x48c>)
 8017dba:	429a      	cmp	r2, r3
 8017dbc:	d11e      	bne.n	8017dfc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dc0:	3330      	adds	r3, #48	; 0x30
 8017dc2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	f7fe fbea 	bl	80165a0 <ld_dword>
 8017dcc:	4602      	mov	r2, r0
 8017dce:	4b17      	ldr	r3, [pc, #92]	; (8017e2c <find_volume+0x490>)
 8017dd0:	429a      	cmp	r2, r3
 8017dd2:	d113      	bne.n	8017dfc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8017dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dd6:	3330      	adds	r3, #48	; 0x30
 8017dd8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f7fe fbdf 	bl	80165a0 <ld_dword>
 8017de2:	4602      	mov	r2, r0
 8017de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017de6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8017de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dea:	3330      	adds	r3, #48	; 0x30
 8017dec:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8017df0:	4618      	mov	r0, r3
 8017df2:	f7fe fbd5 	bl	80165a0 <ld_dword>
 8017df6:	4602      	mov	r2, r0
 8017df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dfa:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8017dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dfe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8017e02:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8017e04:	4b0a      	ldr	r3, [pc, #40]	; (8017e30 <find_volume+0x494>)
 8017e06:	881b      	ldrh	r3, [r3, #0]
 8017e08:	3301      	adds	r3, #1
 8017e0a:	b29a      	uxth	r2, r3
 8017e0c:	4b08      	ldr	r3, [pc, #32]	; (8017e30 <find_volume+0x494>)
 8017e0e:	801a      	strh	r2, [r3, #0]
 8017e10:	4b07      	ldr	r3, [pc, #28]	; (8017e30 <find_volume+0x494>)
 8017e12:	881a      	ldrh	r2, [r3, #0]
 8017e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e16:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8017e18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017e1a:	f7fe fdf1 	bl	8016a00 <clear_lock>
#endif
	return FR_OK;
 8017e1e:	2300      	movs	r3, #0
}
 8017e20:	4618      	mov	r0, r3
 8017e22:	3758      	adds	r7, #88	; 0x58
 8017e24:	46bd      	mov	sp, r7
 8017e26:	bd80      	pop	{r7, pc}
 8017e28:	41615252 	.word	0x41615252
 8017e2c:	61417272 	.word	0x61417272
 8017e30:	24000b60 	.word	0x24000b60

08017e34 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8017e34:	b580      	push	{r7, lr}
 8017e36:	b084      	sub	sp, #16
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	6078      	str	r0, [r7, #4]
 8017e3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8017e3e:	2309      	movs	r3, #9
 8017e40:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d01c      	beq.n	8017e82 <validate+0x4e>
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d018      	beq.n	8017e82 <validate+0x4e>
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	781b      	ldrb	r3, [r3, #0]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d013      	beq.n	8017e82 <validate+0x4e>
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	889a      	ldrh	r2, [r3, #4]
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	88db      	ldrh	r3, [r3, #6]
 8017e64:	429a      	cmp	r2, r3
 8017e66:	d10c      	bne.n	8017e82 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	785b      	ldrb	r3, [r3, #1]
 8017e6e:	4618      	mov	r0, r3
 8017e70:	f7fe fae0 	bl	8016434 <disk_status>
 8017e74:	4603      	mov	r3, r0
 8017e76:	f003 0301 	and.w	r3, r3, #1
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d101      	bne.n	8017e82 <validate+0x4e>
			res = FR_OK;
 8017e7e:	2300      	movs	r3, #0
 8017e80:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017e82:	7bfb      	ldrb	r3, [r7, #15]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d102      	bne.n	8017e8e <validate+0x5a>
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	e000      	b.n	8017e90 <validate+0x5c>
 8017e8e:	2300      	movs	r3, #0
 8017e90:	683a      	ldr	r2, [r7, #0]
 8017e92:	6013      	str	r3, [r2, #0]
	return res;
 8017e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e96:	4618      	mov	r0, r3
 8017e98:	3710      	adds	r7, #16
 8017e9a:	46bd      	mov	sp, r7
 8017e9c:	bd80      	pop	{r7, pc}
	...

08017ea0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b088      	sub	sp, #32
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	60f8      	str	r0, [r7, #12]
 8017ea8:	60b9      	str	r1, [r7, #8]
 8017eaa:	4613      	mov	r3, r2
 8017eac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8017eae:	68bb      	ldr	r3, [r7, #8]
 8017eb0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8017eb2:	f107 0310 	add.w	r3, r7, #16
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f7ff fcd5 	bl	8017866 <get_ldnumber>
 8017ebc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8017ebe:	69fb      	ldr	r3, [r7, #28]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	da01      	bge.n	8017ec8 <f_mount+0x28>
 8017ec4:	230b      	movs	r3, #11
 8017ec6:	e02b      	b.n	8017f20 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8017ec8:	4a17      	ldr	r2, [pc, #92]	; (8017f28 <f_mount+0x88>)
 8017eca:	69fb      	ldr	r3, [r7, #28]
 8017ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ed0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8017ed2:	69bb      	ldr	r3, [r7, #24]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d005      	beq.n	8017ee4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8017ed8:	69b8      	ldr	r0, [r7, #24]
 8017eda:	f7fe fd91 	bl	8016a00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8017ede:	69bb      	ldr	r3, [r7, #24]
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d002      	beq.n	8017ef0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	2200      	movs	r2, #0
 8017eee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8017ef0:	68fa      	ldr	r2, [r7, #12]
 8017ef2:	490d      	ldr	r1, [pc, #52]	; (8017f28 <f_mount+0x88>)
 8017ef4:	69fb      	ldr	r3, [r7, #28]
 8017ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d002      	beq.n	8017f06 <f_mount+0x66>
 8017f00:	79fb      	ldrb	r3, [r7, #7]
 8017f02:	2b01      	cmp	r3, #1
 8017f04:	d001      	beq.n	8017f0a <f_mount+0x6a>
 8017f06:	2300      	movs	r3, #0
 8017f08:	e00a      	b.n	8017f20 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8017f0a:	f107 010c 	add.w	r1, r7, #12
 8017f0e:	f107 0308 	add.w	r3, r7, #8
 8017f12:	2200      	movs	r2, #0
 8017f14:	4618      	mov	r0, r3
 8017f16:	f7ff fd41 	bl	801799c <find_volume>
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8017f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017f20:	4618      	mov	r0, r3
 8017f22:	3720      	adds	r7, #32
 8017f24:	46bd      	mov	sp, r7
 8017f26:	bd80      	pop	{r7, pc}
 8017f28:	24000b5c 	.word	0x24000b5c

08017f2c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b098      	sub	sp, #96	; 0x60
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	60f8      	str	r0, [r7, #12]
 8017f34:	60b9      	str	r1, [r7, #8]
 8017f36:	4613      	mov	r3, r2
 8017f38:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d101      	bne.n	8017f44 <f_open+0x18>
 8017f40:	2309      	movs	r3, #9
 8017f42:	e1ad      	b.n	80182a0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017f44:	79fb      	ldrb	r3, [r7, #7]
 8017f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017f4a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8017f4c:	79fa      	ldrb	r2, [r7, #7]
 8017f4e:	f107 0110 	add.w	r1, r7, #16
 8017f52:	f107 0308 	add.w	r3, r7, #8
 8017f56:	4618      	mov	r0, r3
 8017f58:	f7ff fd20 	bl	801799c <find_volume>
 8017f5c:	4603      	mov	r3, r0
 8017f5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8017f62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	f040 8191 	bne.w	801828e <f_open+0x362>
		dj.obj.fs = fs;
 8017f6c:	693b      	ldr	r3, [r7, #16]
 8017f6e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8017f70:	68ba      	ldr	r2, [r7, #8]
 8017f72:	f107 0314 	add.w	r3, r7, #20
 8017f76:	4611      	mov	r1, r2
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f7ff fc03 	bl	8017784 <follow_path>
 8017f7e:	4603      	mov	r3, r0
 8017f80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8017f84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d11a      	bne.n	8017fc2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017f8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017f90:	b25b      	sxtb	r3, r3
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	da03      	bge.n	8017f9e <f_open+0x72>
				res = FR_INVALID_NAME;
 8017f96:	2306      	movs	r3, #6
 8017f98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017f9c:	e011      	b.n	8017fc2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017f9e:	79fb      	ldrb	r3, [r7, #7]
 8017fa0:	f023 0301 	bic.w	r3, r3, #1
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	bf14      	ite	ne
 8017fa8:	2301      	movne	r3, #1
 8017faa:	2300      	moveq	r3, #0
 8017fac:	b2db      	uxtb	r3, r3
 8017fae:	461a      	mov	r2, r3
 8017fb0:	f107 0314 	add.w	r3, r7, #20
 8017fb4:	4611      	mov	r1, r2
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	f7fe fbda 	bl	8016770 <chk_lock>
 8017fbc:	4603      	mov	r3, r0
 8017fbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8017fc2:	79fb      	ldrb	r3, [r7, #7]
 8017fc4:	f003 031c 	and.w	r3, r3, #28
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d07f      	beq.n	80180cc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8017fcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d017      	beq.n	8018004 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017fd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017fd8:	2b04      	cmp	r3, #4
 8017fda:	d10e      	bne.n	8017ffa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017fdc:	f7fe fc24 	bl	8016828 <enq_lock>
 8017fe0:	4603      	mov	r3, r0
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d006      	beq.n	8017ff4 <f_open+0xc8>
 8017fe6:	f107 0314 	add.w	r3, r7, #20
 8017fea:	4618      	mov	r0, r3
 8017fec:	f7ff fb03 	bl	80175f6 <dir_register>
 8017ff0:	4603      	mov	r3, r0
 8017ff2:	e000      	b.n	8017ff6 <f_open+0xca>
 8017ff4:	2312      	movs	r3, #18
 8017ff6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8017ffa:	79fb      	ldrb	r3, [r7, #7]
 8017ffc:	f043 0308 	orr.w	r3, r3, #8
 8018000:	71fb      	strb	r3, [r7, #7]
 8018002:	e010      	b.n	8018026 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8018004:	7ebb      	ldrb	r3, [r7, #26]
 8018006:	f003 0311 	and.w	r3, r3, #17
 801800a:	2b00      	cmp	r3, #0
 801800c:	d003      	beq.n	8018016 <f_open+0xea>
					res = FR_DENIED;
 801800e:	2307      	movs	r3, #7
 8018010:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018014:	e007      	b.n	8018026 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8018016:	79fb      	ldrb	r3, [r7, #7]
 8018018:	f003 0304 	and.w	r3, r3, #4
 801801c:	2b00      	cmp	r3, #0
 801801e:	d002      	beq.n	8018026 <f_open+0xfa>
 8018020:	2308      	movs	r3, #8
 8018022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8018026:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801802a:	2b00      	cmp	r3, #0
 801802c:	d168      	bne.n	8018100 <f_open+0x1d4>
 801802e:	79fb      	ldrb	r3, [r7, #7]
 8018030:	f003 0308 	and.w	r3, r3, #8
 8018034:	2b00      	cmp	r3, #0
 8018036:	d063      	beq.n	8018100 <f_open+0x1d4>
				dw = GET_FATTIME();
 8018038:	f7fb f8fe 	bl	8013238 <get_fattime>
 801803c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801803e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018040:	330e      	adds	r3, #14
 8018042:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018044:	4618      	mov	r0, r3
 8018046:	f7fe fae9 	bl	801661c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801804a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801804c:	3316      	adds	r3, #22
 801804e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018050:	4618      	mov	r0, r3
 8018052:	f7fe fae3 	bl	801661c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018058:	330b      	adds	r3, #11
 801805a:	2220      	movs	r2, #32
 801805c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801805e:	693b      	ldr	r3, [r7, #16]
 8018060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018062:	4611      	mov	r1, r2
 8018064:	4618      	mov	r0, r3
 8018066:	f7ff fa32 	bl	80174ce <ld_clust>
 801806a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801806c:	693b      	ldr	r3, [r7, #16]
 801806e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018070:	2200      	movs	r2, #0
 8018072:	4618      	mov	r0, r3
 8018074:	f7ff fa4a 	bl	801750c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801807a:	331c      	adds	r3, #28
 801807c:	2100      	movs	r1, #0
 801807e:	4618      	mov	r0, r3
 8018080:	f7fe facc 	bl	801661c <st_dword>
					fs->wflag = 1;
 8018084:	693b      	ldr	r3, [r7, #16]
 8018086:	2201      	movs	r2, #1
 8018088:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801808a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801808c:	2b00      	cmp	r3, #0
 801808e:	d037      	beq.n	8018100 <f_open+0x1d4>
						dw = fs->winsect;
 8018090:	693b      	ldr	r3, [r7, #16]
 8018092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018094:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8018096:	f107 0314 	add.w	r3, r7, #20
 801809a:	2200      	movs	r2, #0
 801809c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801809e:	4618      	mov	r0, r3
 80180a0:	f7fe ff5d 	bl	8016f5e <remove_chain>
 80180a4:	4603      	mov	r3, r0
 80180a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80180aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d126      	bne.n	8018100 <f_open+0x1d4>
							res = move_window(fs, dw);
 80180b2:	693b      	ldr	r3, [r7, #16]
 80180b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80180b6:	4618      	mov	r0, r3
 80180b8:	f7fe fd0a 	bl	8016ad0 <move_window>
 80180bc:	4603      	mov	r3, r0
 80180be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80180c2:	693b      	ldr	r3, [r7, #16]
 80180c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80180c6:	3a01      	subs	r2, #1
 80180c8:	60da      	str	r2, [r3, #12]
 80180ca:	e019      	b.n	8018100 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80180cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d115      	bne.n	8018100 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80180d4:	7ebb      	ldrb	r3, [r7, #26]
 80180d6:	f003 0310 	and.w	r3, r3, #16
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d003      	beq.n	80180e6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80180de:	2304      	movs	r3, #4
 80180e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80180e4:	e00c      	b.n	8018100 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80180e6:	79fb      	ldrb	r3, [r7, #7]
 80180e8:	f003 0302 	and.w	r3, r3, #2
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d007      	beq.n	8018100 <f_open+0x1d4>
 80180f0:	7ebb      	ldrb	r3, [r7, #26]
 80180f2:	f003 0301 	and.w	r3, r3, #1
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d002      	beq.n	8018100 <f_open+0x1d4>
						res = FR_DENIED;
 80180fa:	2307      	movs	r3, #7
 80180fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8018100:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018104:	2b00      	cmp	r3, #0
 8018106:	d128      	bne.n	801815a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018108:	79fb      	ldrb	r3, [r7, #7]
 801810a:	f003 0308 	and.w	r3, r3, #8
 801810e:	2b00      	cmp	r3, #0
 8018110:	d003      	beq.n	801811a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8018112:	79fb      	ldrb	r3, [r7, #7]
 8018114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018118:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801811a:	693b      	ldr	r3, [r7, #16]
 801811c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8018122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018128:	79fb      	ldrb	r3, [r7, #7]
 801812a:	f023 0301 	bic.w	r3, r3, #1
 801812e:	2b00      	cmp	r3, #0
 8018130:	bf14      	ite	ne
 8018132:	2301      	movne	r3, #1
 8018134:	2300      	moveq	r3, #0
 8018136:	b2db      	uxtb	r3, r3
 8018138:	461a      	mov	r2, r3
 801813a:	f107 0314 	add.w	r3, r7, #20
 801813e:	4611      	mov	r1, r2
 8018140:	4618      	mov	r0, r3
 8018142:	f7fe fb93 	bl	801686c <inc_lock>
 8018146:	4602      	mov	r2, r0
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	691b      	ldr	r3, [r3, #16]
 8018150:	2b00      	cmp	r3, #0
 8018152:	d102      	bne.n	801815a <f_open+0x22e>
 8018154:	2302      	movs	r3, #2
 8018156:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801815a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801815e:	2b00      	cmp	r3, #0
 8018160:	f040 8095 	bne.w	801828e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018164:	693b      	ldr	r3, [r7, #16]
 8018166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018168:	4611      	mov	r1, r2
 801816a:	4618      	mov	r0, r3
 801816c:	f7ff f9af 	bl	80174ce <ld_clust>
 8018170:	4602      	mov	r2, r0
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8018176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018178:	331c      	adds	r3, #28
 801817a:	4618      	mov	r0, r3
 801817c:	f7fe fa10 	bl	80165a0 <ld_dword>
 8018180:	4602      	mov	r2, r0
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	2200      	movs	r2, #0
 801818a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801818c:	693a      	ldr	r2, [r7, #16]
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8018192:	693b      	ldr	r3, [r7, #16]
 8018194:	88da      	ldrh	r2, [r3, #6]
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	79fa      	ldrb	r2, [r7, #7]
 801819e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	2200      	movs	r2, #0
 80181a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	2200      	movs	r2, #0
 80181aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	2200      	movs	r2, #0
 80181b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	3330      	adds	r3, #48	; 0x30
 80181b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80181ba:	2100      	movs	r1, #0
 80181bc:	4618      	mov	r0, r3
 80181be:	f7fe fa7a 	bl	80166b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80181c2:	79fb      	ldrb	r3, [r7, #7]
 80181c4:	f003 0320 	and.w	r3, r3, #32
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d060      	beq.n	801828e <f_open+0x362>
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	68db      	ldr	r3, [r3, #12]
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d05c      	beq.n	801828e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	68da      	ldr	r2, [r3, #12]
 80181d8:	68fb      	ldr	r3, [r7, #12]
 80181da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80181dc:	693b      	ldr	r3, [r7, #16]
 80181de:	895b      	ldrh	r3, [r3, #10]
 80181e0:	025b      	lsls	r3, r3, #9
 80181e2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	689b      	ldr	r3, [r3, #8]
 80181e8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80181ea:	68fb      	ldr	r3, [r7, #12]
 80181ec:	68db      	ldr	r3, [r3, #12]
 80181ee:	657b      	str	r3, [r7, #84]	; 0x54
 80181f0:	e016      	b.n	8018220 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80181f6:	4618      	mov	r0, r3
 80181f8:	f7fe fd25 	bl	8016c46 <get_fat>
 80181fc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80181fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018200:	2b01      	cmp	r3, #1
 8018202:	d802      	bhi.n	801820a <f_open+0x2de>
 8018204:	2302      	movs	r3, #2
 8018206:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801820a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801820c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018210:	d102      	bne.n	8018218 <f_open+0x2ec>
 8018212:	2301      	movs	r3, #1
 8018214:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018218:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801821a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801821c:	1ad3      	subs	r3, r2, r3
 801821e:	657b      	str	r3, [r7, #84]	; 0x54
 8018220:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018224:	2b00      	cmp	r3, #0
 8018226:	d103      	bne.n	8018230 <f_open+0x304>
 8018228:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801822a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801822c:	429a      	cmp	r2, r3
 801822e:	d8e0      	bhi.n	80181f2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018234:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8018236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801823a:	2b00      	cmp	r3, #0
 801823c:	d127      	bne.n	801828e <f_open+0x362>
 801823e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018244:	2b00      	cmp	r3, #0
 8018246:	d022      	beq.n	801828e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018248:	693b      	ldr	r3, [r7, #16]
 801824a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801824c:	4618      	mov	r0, r3
 801824e:	f7fe fcdb 	bl	8016c08 <clust2sect>
 8018252:	6478      	str	r0, [r7, #68]	; 0x44
 8018254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018256:	2b00      	cmp	r3, #0
 8018258:	d103      	bne.n	8018262 <f_open+0x336>
						res = FR_INT_ERR;
 801825a:	2302      	movs	r3, #2
 801825c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018260:	e015      	b.n	801828e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018264:	0a5a      	lsrs	r2, r3, #9
 8018266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018268:	441a      	add	r2, r3
 801826a:	68fb      	ldr	r3, [r7, #12]
 801826c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801826e:	693b      	ldr	r3, [r7, #16]
 8018270:	7858      	ldrb	r0, [r3, #1]
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	6a1a      	ldr	r2, [r3, #32]
 801827c:	2301      	movs	r3, #1
 801827e:	f7fe f919 	bl	80164b4 <disk_read>
 8018282:	4603      	mov	r3, r0
 8018284:	2b00      	cmp	r3, #0
 8018286:	d002      	beq.n	801828e <f_open+0x362>
 8018288:	2301      	movs	r3, #1
 801828a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801828e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018292:	2b00      	cmp	r3, #0
 8018294:	d002      	beq.n	801829c <f_open+0x370>
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	2200      	movs	r2, #0
 801829a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801829c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80182a0:	4618      	mov	r0, r3
 80182a2:	3760      	adds	r7, #96	; 0x60
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bd80      	pop	{r7, pc}

080182a8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80182a8:	b580      	push	{r7, lr}
 80182aa:	b08e      	sub	sp, #56	; 0x38
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	60f8      	str	r0, [r7, #12]
 80182b0:	60b9      	str	r1, [r7, #8]
 80182b2:	607a      	str	r2, [r7, #4]
 80182b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80182b6:	68bb      	ldr	r3, [r7, #8]
 80182b8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80182ba:	683b      	ldr	r3, [r7, #0]
 80182bc:	2200      	movs	r2, #0
 80182be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	f107 0214 	add.w	r2, r7, #20
 80182c6:	4611      	mov	r1, r2
 80182c8:	4618      	mov	r0, r3
 80182ca:	f7ff fdb3 	bl	8017e34 <validate>
 80182ce:	4603      	mov	r3, r0
 80182d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80182d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d107      	bne.n	80182ec <f_read+0x44>
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	7d5b      	ldrb	r3, [r3, #21]
 80182e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80182e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d002      	beq.n	80182f2 <f_read+0x4a>
 80182ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80182f0:	e115      	b.n	801851e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	7d1b      	ldrb	r3, [r3, #20]
 80182f6:	f003 0301 	and.w	r3, r3, #1
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d101      	bne.n	8018302 <f_read+0x5a>
 80182fe:	2307      	movs	r3, #7
 8018300:	e10d      	b.n	801851e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	68da      	ldr	r2, [r3, #12]
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	699b      	ldr	r3, [r3, #24]
 801830a:	1ad3      	subs	r3, r2, r3
 801830c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801830e:	687a      	ldr	r2, [r7, #4]
 8018310:	6a3b      	ldr	r3, [r7, #32]
 8018312:	429a      	cmp	r2, r3
 8018314:	f240 80fe 	bls.w	8018514 <f_read+0x26c>
 8018318:	6a3b      	ldr	r3, [r7, #32]
 801831a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801831c:	e0fa      	b.n	8018514 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	699b      	ldr	r3, [r3, #24]
 8018322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018326:	2b00      	cmp	r3, #0
 8018328:	f040 80c6 	bne.w	80184b8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	699b      	ldr	r3, [r3, #24]
 8018330:	0a5b      	lsrs	r3, r3, #9
 8018332:	697a      	ldr	r2, [r7, #20]
 8018334:	8952      	ldrh	r2, [r2, #10]
 8018336:	3a01      	subs	r2, #1
 8018338:	4013      	ands	r3, r2
 801833a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801833c:	69fb      	ldr	r3, [r7, #28]
 801833e:	2b00      	cmp	r3, #0
 8018340:	d12f      	bne.n	80183a2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	699b      	ldr	r3, [r3, #24]
 8018346:	2b00      	cmp	r3, #0
 8018348:	d103      	bne.n	8018352 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	689b      	ldr	r3, [r3, #8]
 801834e:	633b      	str	r3, [r7, #48]	; 0x30
 8018350:	e013      	b.n	801837a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018356:	2b00      	cmp	r3, #0
 8018358:	d007      	beq.n	801836a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	699b      	ldr	r3, [r3, #24]
 801835e:	4619      	mov	r1, r3
 8018360:	68f8      	ldr	r0, [r7, #12]
 8018362:	f7fe fef9 	bl	8017158 <clmt_clust>
 8018366:	6338      	str	r0, [r7, #48]	; 0x30
 8018368:	e007      	b.n	801837a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801836a:	68fa      	ldr	r2, [r7, #12]
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	69db      	ldr	r3, [r3, #28]
 8018370:	4619      	mov	r1, r3
 8018372:	4610      	mov	r0, r2
 8018374:	f7fe fc67 	bl	8016c46 <get_fat>
 8018378:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801837c:	2b01      	cmp	r3, #1
 801837e:	d804      	bhi.n	801838a <f_read+0xe2>
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	2202      	movs	r2, #2
 8018384:	755a      	strb	r2, [r3, #21]
 8018386:	2302      	movs	r3, #2
 8018388:	e0c9      	b.n	801851e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801838c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018390:	d104      	bne.n	801839c <f_read+0xf4>
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	2201      	movs	r2, #1
 8018396:	755a      	strb	r2, [r3, #21]
 8018398:	2301      	movs	r3, #1
 801839a:	e0c0      	b.n	801851e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183a0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80183a2:	697a      	ldr	r2, [r7, #20]
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	69db      	ldr	r3, [r3, #28]
 80183a8:	4619      	mov	r1, r3
 80183aa:	4610      	mov	r0, r2
 80183ac:	f7fe fc2c 	bl	8016c08 <clust2sect>
 80183b0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80183b2:	69bb      	ldr	r3, [r7, #24]
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d104      	bne.n	80183c2 <f_read+0x11a>
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	2202      	movs	r2, #2
 80183bc:	755a      	strb	r2, [r3, #21]
 80183be:	2302      	movs	r3, #2
 80183c0:	e0ad      	b.n	801851e <f_read+0x276>
			sect += csect;
 80183c2:	69ba      	ldr	r2, [r7, #24]
 80183c4:	69fb      	ldr	r3, [r7, #28]
 80183c6:	4413      	add	r3, r2
 80183c8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	0a5b      	lsrs	r3, r3, #9
 80183ce:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80183d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d039      	beq.n	801844a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80183d6:	69fa      	ldr	r2, [r7, #28]
 80183d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183da:	4413      	add	r3, r2
 80183dc:	697a      	ldr	r2, [r7, #20]
 80183de:	8952      	ldrh	r2, [r2, #10]
 80183e0:	4293      	cmp	r3, r2
 80183e2:	d905      	bls.n	80183f0 <f_read+0x148>
					cc = fs->csize - csect;
 80183e4:	697b      	ldr	r3, [r7, #20]
 80183e6:	895b      	ldrh	r3, [r3, #10]
 80183e8:	461a      	mov	r2, r3
 80183ea:	69fb      	ldr	r3, [r7, #28]
 80183ec:	1ad3      	subs	r3, r2, r3
 80183ee:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80183f0:	697b      	ldr	r3, [r7, #20]
 80183f2:	7858      	ldrb	r0, [r3, #1]
 80183f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183f6:	69ba      	ldr	r2, [r7, #24]
 80183f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80183fa:	f7fe f85b 	bl	80164b4 <disk_read>
 80183fe:	4603      	mov	r3, r0
 8018400:	2b00      	cmp	r3, #0
 8018402:	d004      	beq.n	801840e <f_read+0x166>
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	2201      	movs	r2, #1
 8018408:	755a      	strb	r2, [r3, #21]
 801840a:	2301      	movs	r3, #1
 801840c:	e087      	b.n	801851e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	7d1b      	ldrb	r3, [r3, #20]
 8018412:	b25b      	sxtb	r3, r3
 8018414:	2b00      	cmp	r3, #0
 8018416:	da14      	bge.n	8018442 <f_read+0x19a>
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	6a1a      	ldr	r2, [r3, #32]
 801841c:	69bb      	ldr	r3, [r7, #24]
 801841e:	1ad3      	subs	r3, r2, r3
 8018420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018422:	429a      	cmp	r2, r3
 8018424:	d90d      	bls.n	8018442 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	6a1a      	ldr	r2, [r3, #32]
 801842a:	69bb      	ldr	r3, [r7, #24]
 801842c:	1ad3      	subs	r3, r2, r3
 801842e:	025b      	lsls	r3, r3, #9
 8018430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018432:	18d0      	adds	r0, r2, r3
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	3330      	adds	r3, #48	; 0x30
 8018438:	f44f 7200 	mov.w	r2, #512	; 0x200
 801843c:	4619      	mov	r1, r3
 801843e:	f7fe f919 	bl	8016674 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8018442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018444:	025b      	lsls	r3, r3, #9
 8018446:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8018448:	e050      	b.n	80184ec <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	6a1b      	ldr	r3, [r3, #32]
 801844e:	69ba      	ldr	r2, [r7, #24]
 8018450:	429a      	cmp	r2, r3
 8018452:	d02e      	beq.n	80184b2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	7d1b      	ldrb	r3, [r3, #20]
 8018458:	b25b      	sxtb	r3, r3
 801845a:	2b00      	cmp	r3, #0
 801845c:	da18      	bge.n	8018490 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801845e:	697b      	ldr	r3, [r7, #20]
 8018460:	7858      	ldrb	r0, [r3, #1]
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	6a1a      	ldr	r2, [r3, #32]
 801846c:	2301      	movs	r3, #1
 801846e:	f7fe f841 	bl	80164f4 <disk_write>
 8018472:	4603      	mov	r3, r0
 8018474:	2b00      	cmp	r3, #0
 8018476:	d004      	beq.n	8018482 <f_read+0x1da>
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	2201      	movs	r2, #1
 801847c:	755a      	strb	r2, [r3, #21]
 801847e:	2301      	movs	r3, #1
 8018480:	e04d      	b.n	801851e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	7d1b      	ldrb	r3, [r3, #20]
 8018486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801848a:	b2da      	uxtb	r2, r3
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8018490:	697b      	ldr	r3, [r7, #20]
 8018492:	7858      	ldrb	r0, [r3, #1]
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801849a:	2301      	movs	r3, #1
 801849c:	69ba      	ldr	r2, [r7, #24]
 801849e:	f7fe f809 	bl	80164b4 <disk_read>
 80184a2:	4603      	mov	r3, r0
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d004      	beq.n	80184b2 <f_read+0x20a>
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	2201      	movs	r2, #1
 80184ac:	755a      	strb	r2, [r3, #21]
 80184ae:	2301      	movs	r3, #1
 80184b0:	e035      	b.n	801851e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	69ba      	ldr	r2, [r7, #24]
 80184b6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	699b      	ldr	r3, [r3, #24]
 80184bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80184c0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80184c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80184c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	429a      	cmp	r2, r3
 80184cc:	d901      	bls.n	80184d2 <f_read+0x22a>
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	699b      	ldr	r3, [r3, #24]
 80184dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80184e0:	4413      	add	r3, r2
 80184e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184e4:	4619      	mov	r1, r3
 80184e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184e8:	f7fe f8c4 	bl	8016674 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80184ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184f0:	4413      	add	r3, r2
 80184f2:	627b      	str	r3, [r7, #36]	; 0x24
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	699a      	ldr	r2, [r3, #24]
 80184f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184fa:	441a      	add	r2, r3
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	619a      	str	r2, [r3, #24]
 8018500:	683b      	ldr	r3, [r7, #0]
 8018502:	681a      	ldr	r2, [r3, #0]
 8018504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018506:	441a      	add	r2, r3
 8018508:	683b      	ldr	r3, [r7, #0]
 801850a:	601a      	str	r2, [r3, #0]
 801850c:	687a      	ldr	r2, [r7, #4]
 801850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018510:	1ad3      	subs	r3, r2, r3
 8018512:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	2b00      	cmp	r3, #0
 8018518:	f47f af01 	bne.w	801831e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801851c:	2300      	movs	r3, #0
}
 801851e:	4618      	mov	r0, r3
 8018520:	3738      	adds	r7, #56	; 0x38
 8018522:	46bd      	mov	sp, r7
 8018524:	bd80      	pop	{r7, pc}

08018526 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8018526:	b580      	push	{r7, lr}
 8018528:	b08c      	sub	sp, #48	; 0x30
 801852a:	af00      	add	r7, sp, #0
 801852c:	60f8      	str	r0, [r7, #12]
 801852e:	60b9      	str	r1, [r7, #8]
 8018530:	607a      	str	r2, [r7, #4]
 8018532:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018534:	68bb      	ldr	r3, [r7, #8]
 8018536:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018538:	683b      	ldr	r3, [r7, #0]
 801853a:	2200      	movs	r2, #0
 801853c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	f107 0210 	add.w	r2, r7, #16
 8018544:	4611      	mov	r1, r2
 8018546:	4618      	mov	r0, r3
 8018548:	f7ff fc74 	bl	8017e34 <validate>
 801854c:	4603      	mov	r3, r0
 801854e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018552:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018556:	2b00      	cmp	r3, #0
 8018558:	d107      	bne.n	801856a <f_write+0x44>
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	7d5b      	ldrb	r3, [r3, #21]
 801855e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018566:	2b00      	cmp	r3, #0
 8018568:	d002      	beq.n	8018570 <f_write+0x4a>
 801856a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801856e:	e14b      	b.n	8018808 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018570:	68fb      	ldr	r3, [r7, #12]
 8018572:	7d1b      	ldrb	r3, [r3, #20]
 8018574:	f003 0302 	and.w	r3, r3, #2
 8018578:	2b00      	cmp	r3, #0
 801857a:	d101      	bne.n	8018580 <f_write+0x5a>
 801857c:	2307      	movs	r3, #7
 801857e:	e143      	b.n	8018808 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	699a      	ldr	r2, [r3, #24]
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	441a      	add	r2, r3
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	699b      	ldr	r3, [r3, #24]
 801858c:	429a      	cmp	r2, r3
 801858e:	f080 812d 	bcs.w	80187ec <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	699b      	ldr	r3, [r3, #24]
 8018596:	43db      	mvns	r3, r3
 8018598:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801859a:	e127      	b.n	80187ec <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	699b      	ldr	r3, [r3, #24]
 80185a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	f040 80e3 	bne.w	8018770 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	699b      	ldr	r3, [r3, #24]
 80185ae:	0a5b      	lsrs	r3, r3, #9
 80185b0:	693a      	ldr	r2, [r7, #16]
 80185b2:	8952      	ldrh	r2, [r2, #10]
 80185b4:	3a01      	subs	r2, #1
 80185b6:	4013      	ands	r3, r2
 80185b8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80185ba:	69bb      	ldr	r3, [r7, #24]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d143      	bne.n	8018648 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	699b      	ldr	r3, [r3, #24]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d10c      	bne.n	80185e2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	689b      	ldr	r3, [r3, #8]
 80185cc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80185ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d11a      	bne.n	801860a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	2100      	movs	r1, #0
 80185d8:	4618      	mov	r0, r3
 80185da:	f7fe fd25 	bl	8017028 <create_chain>
 80185de:	62b8      	str	r0, [r7, #40]	; 0x28
 80185e0:	e013      	b.n	801860a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d007      	beq.n	80185fa <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80185ea:	68fb      	ldr	r3, [r7, #12]
 80185ec:	699b      	ldr	r3, [r3, #24]
 80185ee:	4619      	mov	r1, r3
 80185f0:	68f8      	ldr	r0, [r7, #12]
 80185f2:	f7fe fdb1 	bl	8017158 <clmt_clust>
 80185f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80185f8:	e007      	b.n	801860a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80185fa:	68fa      	ldr	r2, [r7, #12]
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	69db      	ldr	r3, [r3, #28]
 8018600:	4619      	mov	r1, r3
 8018602:	4610      	mov	r0, r2
 8018604:	f7fe fd10 	bl	8017028 <create_chain>
 8018608:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801860a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801860c:	2b00      	cmp	r3, #0
 801860e:	f000 80f2 	beq.w	80187f6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018614:	2b01      	cmp	r3, #1
 8018616:	d104      	bne.n	8018622 <f_write+0xfc>
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	2202      	movs	r2, #2
 801861c:	755a      	strb	r2, [r3, #21]
 801861e:	2302      	movs	r3, #2
 8018620:	e0f2      	b.n	8018808 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018628:	d104      	bne.n	8018634 <f_write+0x10e>
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	2201      	movs	r2, #1
 801862e:	755a      	strb	r2, [r3, #21]
 8018630:	2301      	movs	r3, #1
 8018632:	e0e9      	b.n	8018808 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018638:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	689b      	ldr	r3, [r3, #8]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d102      	bne.n	8018648 <f_write+0x122>
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018646:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	7d1b      	ldrb	r3, [r3, #20]
 801864c:	b25b      	sxtb	r3, r3
 801864e:	2b00      	cmp	r3, #0
 8018650:	da18      	bge.n	8018684 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018652:	693b      	ldr	r3, [r7, #16]
 8018654:	7858      	ldrb	r0, [r3, #1]
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	6a1a      	ldr	r2, [r3, #32]
 8018660:	2301      	movs	r3, #1
 8018662:	f7fd ff47 	bl	80164f4 <disk_write>
 8018666:	4603      	mov	r3, r0
 8018668:	2b00      	cmp	r3, #0
 801866a:	d004      	beq.n	8018676 <f_write+0x150>
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	2201      	movs	r2, #1
 8018670:	755a      	strb	r2, [r3, #21]
 8018672:	2301      	movs	r3, #1
 8018674:	e0c8      	b.n	8018808 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	7d1b      	ldrb	r3, [r3, #20]
 801867a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801867e:	b2da      	uxtb	r2, r3
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018684:	693a      	ldr	r2, [r7, #16]
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	69db      	ldr	r3, [r3, #28]
 801868a:	4619      	mov	r1, r3
 801868c:	4610      	mov	r0, r2
 801868e:	f7fe fabb 	bl	8016c08 <clust2sect>
 8018692:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018694:	697b      	ldr	r3, [r7, #20]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d104      	bne.n	80186a4 <f_write+0x17e>
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	2202      	movs	r2, #2
 801869e:	755a      	strb	r2, [r3, #21]
 80186a0:	2302      	movs	r3, #2
 80186a2:	e0b1      	b.n	8018808 <f_write+0x2e2>
			sect += csect;
 80186a4:	697a      	ldr	r2, [r7, #20]
 80186a6:	69bb      	ldr	r3, [r7, #24]
 80186a8:	4413      	add	r3, r2
 80186aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	0a5b      	lsrs	r3, r3, #9
 80186b0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80186b2:	6a3b      	ldr	r3, [r7, #32]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d03c      	beq.n	8018732 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80186b8:	69ba      	ldr	r2, [r7, #24]
 80186ba:	6a3b      	ldr	r3, [r7, #32]
 80186bc:	4413      	add	r3, r2
 80186be:	693a      	ldr	r2, [r7, #16]
 80186c0:	8952      	ldrh	r2, [r2, #10]
 80186c2:	4293      	cmp	r3, r2
 80186c4:	d905      	bls.n	80186d2 <f_write+0x1ac>
					cc = fs->csize - csect;
 80186c6:	693b      	ldr	r3, [r7, #16]
 80186c8:	895b      	ldrh	r3, [r3, #10]
 80186ca:	461a      	mov	r2, r3
 80186cc:	69bb      	ldr	r3, [r7, #24]
 80186ce:	1ad3      	subs	r3, r2, r3
 80186d0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80186d2:	693b      	ldr	r3, [r7, #16]
 80186d4:	7858      	ldrb	r0, [r3, #1]
 80186d6:	6a3b      	ldr	r3, [r7, #32]
 80186d8:	697a      	ldr	r2, [r7, #20]
 80186da:	69f9      	ldr	r1, [r7, #28]
 80186dc:	f7fd ff0a 	bl	80164f4 <disk_write>
 80186e0:	4603      	mov	r3, r0
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d004      	beq.n	80186f0 <f_write+0x1ca>
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	2201      	movs	r2, #1
 80186ea:	755a      	strb	r2, [r3, #21]
 80186ec:	2301      	movs	r3, #1
 80186ee:	e08b      	b.n	8018808 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	6a1a      	ldr	r2, [r3, #32]
 80186f4:	697b      	ldr	r3, [r7, #20]
 80186f6:	1ad3      	subs	r3, r2, r3
 80186f8:	6a3a      	ldr	r2, [r7, #32]
 80186fa:	429a      	cmp	r2, r3
 80186fc:	d915      	bls.n	801872a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	6a1a      	ldr	r2, [r3, #32]
 8018708:	697b      	ldr	r3, [r7, #20]
 801870a:	1ad3      	subs	r3, r2, r3
 801870c:	025b      	lsls	r3, r3, #9
 801870e:	69fa      	ldr	r2, [r7, #28]
 8018710:	4413      	add	r3, r2
 8018712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018716:	4619      	mov	r1, r3
 8018718:	f7fd ffac 	bl	8016674 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	7d1b      	ldrb	r3, [r3, #20]
 8018720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018724:	b2da      	uxtb	r2, r3
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801872a:	6a3b      	ldr	r3, [r7, #32]
 801872c:	025b      	lsls	r3, r3, #9
 801872e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8018730:	e03f      	b.n	80187b2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	6a1b      	ldr	r3, [r3, #32]
 8018736:	697a      	ldr	r2, [r7, #20]
 8018738:	429a      	cmp	r2, r3
 801873a:	d016      	beq.n	801876a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	699a      	ldr	r2, [r3, #24]
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018744:	429a      	cmp	r2, r3
 8018746:	d210      	bcs.n	801876a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018748:	693b      	ldr	r3, [r7, #16]
 801874a:	7858      	ldrb	r0, [r3, #1]
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018752:	2301      	movs	r3, #1
 8018754:	697a      	ldr	r2, [r7, #20]
 8018756:	f7fd fead 	bl	80164b4 <disk_read>
 801875a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801875c:	2b00      	cmp	r3, #0
 801875e:	d004      	beq.n	801876a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8018760:	68fb      	ldr	r3, [r7, #12]
 8018762:	2201      	movs	r2, #1
 8018764:	755a      	strb	r2, [r3, #21]
 8018766:	2301      	movs	r3, #1
 8018768:	e04e      	b.n	8018808 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	697a      	ldr	r2, [r7, #20]
 801876e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	699b      	ldr	r3, [r3, #24]
 8018774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018778:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801877c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801877e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	429a      	cmp	r2, r3
 8018784:	d901      	bls.n	801878a <f_write+0x264>
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	699b      	ldr	r3, [r3, #24]
 8018794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018798:	4413      	add	r3, r2
 801879a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801879c:	69f9      	ldr	r1, [r7, #28]
 801879e:	4618      	mov	r0, r3
 80187a0:	f7fd ff68 	bl	8016674 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	7d1b      	ldrb	r3, [r3, #20]
 80187a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80187ac:	b2da      	uxtb	r2, r3
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80187b2:	69fa      	ldr	r2, [r7, #28]
 80187b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187b6:	4413      	add	r3, r2
 80187b8:	61fb      	str	r3, [r7, #28]
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	699a      	ldr	r2, [r3, #24]
 80187be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c0:	441a      	add	r2, r3
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	619a      	str	r2, [r3, #24]
 80187c6:	68fb      	ldr	r3, [r7, #12]
 80187c8:	68da      	ldr	r2, [r3, #12]
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	699b      	ldr	r3, [r3, #24]
 80187ce:	429a      	cmp	r2, r3
 80187d0:	bf38      	it	cc
 80187d2:	461a      	movcc	r2, r3
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	60da      	str	r2, [r3, #12]
 80187d8:	683b      	ldr	r3, [r7, #0]
 80187da:	681a      	ldr	r2, [r3, #0]
 80187dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187de:	441a      	add	r2, r3
 80187e0:	683b      	ldr	r3, [r7, #0]
 80187e2:	601a      	str	r2, [r3, #0]
 80187e4:	687a      	ldr	r2, [r7, #4]
 80187e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e8:	1ad3      	subs	r3, r2, r3
 80187ea:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	f47f aed4 	bne.w	801859c <f_write+0x76>
 80187f4:	e000      	b.n	80187f8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80187f6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	7d1b      	ldrb	r3, [r3, #20]
 80187fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018800:	b2da      	uxtb	r2, r3
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8018806:	2300      	movs	r3, #0
}
 8018808:	4618      	mov	r0, r3
 801880a:	3730      	adds	r7, #48	; 0x30
 801880c:	46bd      	mov	sp, r7
 801880e:	bd80      	pop	{r7, pc}

08018810 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8018810:	b580      	push	{r7, lr}
 8018812:	b086      	sub	sp, #24
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	f107 0208 	add.w	r2, r7, #8
 801881e:	4611      	mov	r1, r2
 8018820:	4618      	mov	r0, r3
 8018822:	f7ff fb07 	bl	8017e34 <validate>
 8018826:	4603      	mov	r3, r0
 8018828:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801882a:	7dfb      	ldrb	r3, [r7, #23]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d168      	bne.n	8018902 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	7d1b      	ldrb	r3, [r3, #20]
 8018834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018838:	2b00      	cmp	r3, #0
 801883a:	d062      	beq.n	8018902 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	7d1b      	ldrb	r3, [r3, #20]
 8018840:	b25b      	sxtb	r3, r3
 8018842:	2b00      	cmp	r3, #0
 8018844:	da15      	bge.n	8018872 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018846:	68bb      	ldr	r3, [r7, #8]
 8018848:	7858      	ldrb	r0, [r3, #1]
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	6a1a      	ldr	r2, [r3, #32]
 8018854:	2301      	movs	r3, #1
 8018856:	f7fd fe4d 	bl	80164f4 <disk_write>
 801885a:	4603      	mov	r3, r0
 801885c:	2b00      	cmp	r3, #0
 801885e:	d001      	beq.n	8018864 <f_sync+0x54>
 8018860:	2301      	movs	r3, #1
 8018862:	e04f      	b.n	8018904 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	7d1b      	ldrb	r3, [r3, #20]
 8018868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801886c:	b2da      	uxtb	r2, r3
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8018872:	f7fa fce1 	bl	8013238 <get_fattime>
 8018876:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8018878:	68ba      	ldr	r2, [r7, #8]
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801887e:	4619      	mov	r1, r3
 8018880:	4610      	mov	r0, r2
 8018882:	f7fe f925 	bl	8016ad0 <move_window>
 8018886:	4603      	mov	r3, r0
 8018888:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801888a:	7dfb      	ldrb	r3, [r7, #23]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d138      	bne.n	8018902 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018894:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	330b      	adds	r3, #11
 801889a:	781a      	ldrb	r2, [r3, #0]
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	330b      	adds	r3, #11
 80188a0:	f042 0220 	orr.w	r2, r2, #32
 80188a4:	b2d2      	uxtb	r2, r2
 80188a6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	6818      	ldr	r0, [r3, #0]
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	689b      	ldr	r3, [r3, #8]
 80188b0:	461a      	mov	r2, r3
 80188b2:	68f9      	ldr	r1, [r7, #12]
 80188b4:	f7fe fe2a 	bl	801750c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	f103 021c 	add.w	r2, r3, #28
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	68db      	ldr	r3, [r3, #12]
 80188c2:	4619      	mov	r1, r3
 80188c4:	4610      	mov	r0, r2
 80188c6:	f7fd fea9 	bl	801661c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	3316      	adds	r3, #22
 80188ce:	6939      	ldr	r1, [r7, #16]
 80188d0:	4618      	mov	r0, r3
 80188d2:	f7fd fea3 	bl	801661c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	3312      	adds	r3, #18
 80188da:	2100      	movs	r1, #0
 80188dc:	4618      	mov	r0, r3
 80188de:	f7fd fe82 	bl	80165e6 <st_word>
					fs->wflag = 1;
 80188e2:	68bb      	ldr	r3, [r7, #8]
 80188e4:	2201      	movs	r2, #1
 80188e6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80188e8:	68bb      	ldr	r3, [r7, #8]
 80188ea:	4618      	mov	r0, r3
 80188ec:	f7fe f91e 	bl	8016b2c <sync_fs>
 80188f0:	4603      	mov	r3, r0
 80188f2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	7d1b      	ldrb	r3, [r3, #20]
 80188f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80188fc:	b2da      	uxtb	r2, r3
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8018902:	7dfb      	ldrb	r3, [r7, #23]
}
 8018904:	4618      	mov	r0, r3
 8018906:	3718      	adds	r7, #24
 8018908:	46bd      	mov	sp, r7
 801890a:	bd80      	pop	{r7, pc}

0801890c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801890c:	b580      	push	{r7, lr}
 801890e:	b084      	sub	sp, #16
 8018910:	af00      	add	r7, sp, #0
 8018912:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8018914:	6878      	ldr	r0, [r7, #4]
 8018916:	f7ff ff7b 	bl	8018810 <f_sync>
 801891a:	4603      	mov	r3, r0
 801891c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801891e:	7bfb      	ldrb	r3, [r7, #15]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d118      	bne.n	8018956 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	f107 0208 	add.w	r2, r7, #8
 801892a:	4611      	mov	r1, r2
 801892c:	4618      	mov	r0, r3
 801892e:	f7ff fa81 	bl	8017e34 <validate>
 8018932:	4603      	mov	r3, r0
 8018934:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8018936:	7bfb      	ldrb	r3, [r7, #15]
 8018938:	2b00      	cmp	r3, #0
 801893a:	d10c      	bne.n	8018956 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	691b      	ldr	r3, [r3, #16]
 8018940:	4618      	mov	r0, r3
 8018942:	f7fe f821 	bl	8016988 <dec_lock>
 8018946:	4603      	mov	r3, r0
 8018948:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801894a:	7bfb      	ldrb	r3, [r7, #15]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d102      	bne.n	8018956 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	2200      	movs	r2, #0
 8018954:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8018956:	7bfb      	ldrb	r3, [r7, #15]
}
 8018958:	4618      	mov	r0, r3
 801895a:	3710      	adds	r7, #16
 801895c:	46bd      	mov	sp, r7
 801895e:	bd80      	pop	{r7, pc}

08018960 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018960:	b480      	push	{r7}
 8018962:	b087      	sub	sp, #28
 8018964:	af00      	add	r7, sp, #0
 8018966:	60f8      	str	r0, [r7, #12]
 8018968:	60b9      	str	r1, [r7, #8]
 801896a:	4613      	mov	r3, r2
 801896c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801896e:	2301      	movs	r3, #1
 8018970:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8018972:	2300      	movs	r3, #0
 8018974:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8018976:	4b1f      	ldr	r3, [pc, #124]	; (80189f4 <FATFS_LinkDriverEx+0x94>)
 8018978:	7a5b      	ldrb	r3, [r3, #9]
 801897a:	b2db      	uxtb	r3, r3
 801897c:	2b00      	cmp	r3, #0
 801897e:	d131      	bne.n	80189e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018980:	4b1c      	ldr	r3, [pc, #112]	; (80189f4 <FATFS_LinkDriverEx+0x94>)
 8018982:	7a5b      	ldrb	r3, [r3, #9]
 8018984:	b2db      	uxtb	r3, r3
 8018986:	461a      	mov	r2, r3
 8018988:	4b1a      	ldr	r3, [pc, #104]	; (80189f4 <FATFS_LinkDriverEx+0x94>)
 801898a:	2100      	movs	r1, #0
 801898c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801898e:	4b19      	ldr	r3, [pc, #100]	; (80189f4 <FATFS_LinkDriverEx+0x94>)
 8018990:	7a5b      	ldrb	r3, [r3, #9]
 8018992:	b2db      	uxtb	r3, r3
 8018994:	4a17      	ldr	r2, [pc, #92]	; (80189f4 <FATFS_LinkDriverEx+0x94>)
 8018996:	009b      	lsls	r3, r3, #2
 8018998:	4413      	add	r3, r2
 801899a:	68fa      	ldr	r2, [r7, #12]
 801899c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801899e:	4b15      	ldr	r3, [pc, #84]	; (80189f4 <FATFS_LinkDriverEx+0x94>)
 80189a0:	7a5b      	ldrb	r3, [r3, #9]
 80189a2:	b2db      	uxtb	r3, r3
 80189a4:	461a      	mov	r2, r3
 80189a6:	4b13      	ldr	r3, [pc, #76]	; (80189f4 <FATFS_LinkDriverEx+0x94>)
 80189a8:	4413      	add	r3, r2
 80189aa:	79fa      	ldrb	r2, [r7, #7]
 80189ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80189ae:	4b11      	ldr	r3, [pc, #68]	; (80189f4 <FATFS_LinkDriverEx+0x94>)
 80189b0:	7a5b      	ldrb	r3, [r3, #9]
 80189b2:	b2db      	uxtb	r3, r3
 80189b4:	1c5a      	adds	r2, r3, #1
 80189b6:	b2d1      	uxtb	r1, r2
 80189b8:	4a0e      	ldr	r2, [pc, #56]	; (80189f4 <FATFS_LinkDriverEx+0x94>)
 80189ba:	7251      	strb	r1, [r2, #9]
 80189bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80189be:	7dbb      	ldrb	r3, [r7, #22]
 80189c0:	3330      	adds	r3, #48	; 0x30
 80189c2:	b2da      	uxtb	r2, r3
 80189c4:	68bb      	ldr	r3, [r7, #8]
 80189c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80189c8:	68bb      	ldr	r3, [r7, #8]
 80189ca:	3301      	adds	r3, #1
 80189cc:	223a      	movs	r2, #58	; 0x3a
 80189ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80189d0:	68bb      	ldr	r3, [r7, #8]
 80189d2:	3302      	adds	r3, #2
 80189d4:	222f      	movs	r2, #47	; 0x2f
 80189d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80189d8:	68bb      	ldr	r3, [r7, #8]
 80189da:	3303      	adds	r3, #3
 80189dc:	2200      	movs	r2, #0
 80189de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80189e0:	2300      	movs	r3, #0
 80189e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80189e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80189e6:	4618      	mov	r0, r3
 80189e8:	371c      	adds	r7, #28
 80189ea:	46bd      	mov	sp, r7
 80189ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f0:	4770      	bx	lr
 80189f2:	bf00      	nop
 80189f4:	24000b84 	.word	0x24000b84

080189f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80189f8:	b580      	push	{r7, lr}
 80189fa:	b082      	sub	sp, #8
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	6078      	str	r0, [r7, #4]
 8018a00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018a02:	2200      	movs	r2, #0
 8018a04:	6839      	ldr	r1, [r7, #0]
 8018a06:	6878      	ldr	r0, [r7, #4]
 8018a08:	f7ff ffaa 	bl	8018960 <FATFS_LinkDriverEx>
 8018a0c:	4603      	mov	r3, r0
}
 8018a0e:	4618      	mov	r0, r3
 8018a10:	3708      	adds	r7, #8
 8018a12:	46bd      	mov	sp, r7
 8018a14:	bd80      	pop	{r7, pc}
	...

08018a18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018a18:	b580      	push	{r7, lr}
 8018a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018a1c:	2200      	movs	r2, #0
 8018a1e:	4913      	ldr	r1, [pc, #76]	; (8018a6c <MX_USB_DEVICE_Init+0x54>)
 8018a20:	4813      	ldr	r0, [pc, #76]	; (8018a70 <MX_USB_DEVICE_Init+0x58>)
 8018a22:	f7fc fc20 	bl	8015266 <USBD_Init>
 8018a26:	4603      	mov	r3, r0
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d001      	beq.n	8018a30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018a2c:	f7eb f8ee 	bl	8003c0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8018a30:	4910      	ldr	r1, [pc, #64]	; (8018a74 <MX_USB_DEVICE_Init+0x5c>)
 8018a32:	480f      	ldr	r0, [pc, #60]	; (8018a70 <MX_USB_DEVICE_Init+0x58>)
 8018a34:	f7fc fc4d 	bl	80152d2 <USBD_RegisterClass>
 8018a38:	4603      	mov	r3, r0
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d001      	beq.n	8018a42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018a3e:	f7eb f8e5 	bl	8003c0c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8018a42:	490d      	ldr	r1, [pc, #52]	; (8018a78 <MX_USB_DEVICE_Init+0x60>)
 8018a44:	480a      	ldr	r0, [pc, #40]	; (8018a70 <MX_USB_DEVICE_Init+0x58>)
 8018a46:	f7fa fff7 	bl	8013a38 <USBD_MSC_RegisterStorage>
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d001      	beq.n	8018a54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018a50:	f7eb f8dc 	bl	8003c0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018a54:	4806      	ldr	r0, [pc, #24]	; (8018a70 <MX_USB_DEVICE_Init+0x58>)
 8018a56:	f7fc fc5d 	bl	8015314 <USBD_Start>
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d001      	beq.n	8018a64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018a60:	f7eb f8d4 	bl	8003c0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8018a64:	f7f0 fe2e 	bl	80096c4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018a68:	bf00      	nop
 8018a6a:	bd80      	pop	{r7, pc}
 8018a6c:	24000108 	.word	0x24000108
 8018a70:	24001bd4 	.word	0x24001bd4
 8018a74:	24000020 	.word	0x24000020
 8018a78:	24000158 	.word	0x24000158

08018a7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a7c:	b480      	push	{r7}
 8018a7e:	b083      	sub	sp, #12
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	4603      	mov	r3, r0
 8018a84:	6039      	str	r1, [r7, #0]
 8018a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018a88:	683b      	ldr	r3, [r7, #0]
 8018a8a:	2212      	movs	r2, #18
 8018a8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018a8e:	4b03      	ldr	r3, [pc, #12]	; (8018a9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018a90:	4618      	mov	r0, r3
 8018a92:	370c      	adds	r7, #12
 8018a94:	46bd      	mov	sp, r7
 8018a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a9a:	4770      	bx	lr
 8018a9c:	24000124 	.word	0x24000124

08018aa0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018aa0:	b480      	push	{r7}
 8018aa2:	b083      	sub	sp, #12
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	4603      	mov	r3, r0
 8018aa8:	6039      	str	r1, [r7, #0]
 8018aaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018aac:	683b      	ldr	r3, [r7, #0]
 8018aae:	2204      	movs	r2, #4
 8018ab0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018ab2:	4b03      	ldr	r3, [pc, #12]	; (8018ac0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	370c      	adds	r7, #12
 8018ab8:	46bd      	mov	sp, r7
 8018aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018abe:	4770      	bx	lr
 8018ac0:	24000138 	.word	0x24000138

08018ac4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ac4:	b580      	push	{r7, lr}
 8018ac6:	b082      	sub	sp, #8
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	4603      	mov	r3, r0
 8018acc:	6039      	str	r1, [r7, #0]
 8018ace:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018ad0:	79fb      	ldrb	r3, [r7, #7]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d105      	bne.n	8018ae2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018ad6:	683a      	ldr	r2, [r7, #0]
 8018ad8:	4907      	ldr	r1, [pc, #28]	; (8018af8 <USBD_FS_ProductStrDescriptor+0x34>)
 8018ada:	4808      	ldr	r0, [pc, #32]	; (8018afc <USBD_FS_ProductStrDescriptor+0x38>)
 8018adc:	f7fd fbe7 	bl	80162ae <USBD_GetString>
 8018ae0:	e004      	b.n	8018aec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018ae2:	683a      	ldr	r2, [r7, #0]
 8018ae4:	4904      	ldr	r1, [pc, #16]	; (8018af8 <USBD_FS_ProductStrDescriptor+0x34>)
 8018ae6:	4805      	ldr	r0, [pc, #20]	; (8018afc <USBD_FS_ProductStrDescriptor+0x38>)
 8018ae8:	f7fd fbe1 	bl	80162ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8018aec:	4b02      	ldr	r3, [pc, #8]	; (8018af8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018aee:	4618      	mov	r0, r3
 8018af0:	3708      	adds	r7, #8
 8018af2:	46bd      	mov	sp, r7
 8018af4:	bd80      	pop	{r7, pc}
 8018af6:	bf00      	nop
 8018af8:	24001ea4 	.word	0x24001ea4
 8018afc:	0801af04 	.word	0x0801af04

08018b00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b00:	b580      	push	{r7, lr}
 8018b02:	b082      	sub	sp, #8
 8018b04:	af00      	add	r7, sp, #0
 8018b06:	4603      	mov	r3, r0
 8018b08:	6039      	str	r1, [r7, #0]
 8018b0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018b0c:	683a      	ldr	r2, [r7, #0]
 8018b0e:	4904      	ldr	r1, [pc, #16]	; (8018b20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018b10:	4804      	ldr	r0, [pc, #16]	; (8018b24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018b12:	f7fd fbcc 	bl	80162ae <USBD_GetString>
  return USBD_StrDesc;
 8018b16:	4b02      	ldr	r3, [pc, #8]	; (8018b20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018b18:	4618      	mov	r0, r3
 8018b1a:	3708      	adds	r7, #8
 8018b1c:	46bd      	mov	sp, r7
 8018b1e:	bd80      	pop	{r7, pc}
 8018b20:	24001ea4 	.word	0x24001ea4
 8018b24:	0801af18 	.word	0x0801af18

08018b28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b28:	b580      	push	{r7, lr}
 8018b2a:	b082      	sub	sp, #8
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	4603      	mov	r3, r0
 8018b30:	6039      	str	r1, [r7, #0]
 8018b32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018b34:	683b      	ldr	r3, [r7, #0]
 8018b36:	221a      	movs	r2, #26
 8018b38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018b3a:	f000 f843 	bl	8018bc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018b3e:	4b02      	ldr	r3, [pc, #8]	; (8018b48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018b40:	4618      	mov	r0, r3
 8018b42:	3708      	adds	r7, #8
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bd80      	pop	{r7, pc}
 8018b48:	2400013c 	.word	0x2400013c

08018b4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b082      	sub	sp, #8
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	4603      	mov	r3, r0
 8018b54:	6039      	str	r1, [r7, #0]
 8018b56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018b58:	79fb      	ldrb	r3, [r7, #7]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d105      	bne.n	8018b6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018b5e:	683a      	ldr	r2, [r7, #0]
 8018b60:	4907      	ldr	r1, [pc, #28]	; (8018b80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018b62:	4808      	ldr	r0, [pc, #32]	; (8018b84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018b64:	f7fd fba3 	bl	80162ae <USBD_GetString>
 8018b68:	e004      	b.n	8018b74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018b6a:	683a      	ldr	r2, [r7, #0]
 8018b6c:	4904      	ldr	r1, [pc, #16]	; (8018b80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018b6e:	4805      	ldr	r0, [pc, #20]	; (8018b84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018b70:	f7fd fb9d 	bl	80162ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8018b74:	4b02      	ldr	r3, [pc, #8]	; (8018b80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018b76:	4618      	mov	r0, r3
 8018b78:	3708      	adds	r7, #8
 8018b7a:	46bd      	mov	sp, r7
 8018b7c:	bd80      	pop	{r7, pc}
 8018b7e:	bf00      	nop
 8018b80:	24001ea4 	.word	0x24001ea4
 8018b84:	0801af2c 	.word	0x0801af2c

08018b88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b88:	b580      	push	{r7, lr}
 8018b8a:	b082      	sub	sp, #8
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	4603      	mov	r3, r0
 8018b90:	6039      	str	r1, [r7, #0]
 8018b92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018b94:	79fb      	ldrb	r3, [r7, #7]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d105      	bne.n	8018ba6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018b9a:	683a      	ldr	r2, [r7, #0]
 8018b9c:	4907      	ldr	r1, [pc, #28]	; (8018bbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018b9e:	4808      	ldr	r0, [pc, #32]	; (8018bc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018ba0:	f7fd fb85 	bl	80162ae <USBD_GetString>
 8018ba4:	e004      	b.n	8018bb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018ba6:	683a      	ldr	r2, [r7, #0]
 8018ba8:	4904      	ldr	r1, [pc, #16]	; (8018bbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018baa:	4805      	ldr	r0, [pc, #20]	; (8018bc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018bac:	f7fd fb7f 	bl	80162ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8018bb0:	4b02      	ldr	r3, [pc, #8]	; (8018bbc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	3708      	adds	r7, #8
 8018bb6:	46bd      	mov	sp, r7
 8018bb8:	bd80      	pop	{r7, pc}
 8018bba:	bf00      	nop
 8018bbc:	24001ea4 	.word	0x24001ea4
 8018bc0:	0801af38 	.word	0x0801af38

08018bc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018bc4:	b580      	push	{r7, lr}
 8018bc6:	b084      	sub	sp, #16
 8018bc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018bca:	4b0f      	ldr	r3, [pc, #60]	; (8018c08 <Get_SerialNum+0x44>)
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018bd0:	4b0e      	ldr	r3, [pc, #56]	; (8018c0c <Get_SerialNum+0x48>)
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018bd6:	4b0e      	ldr	r3, [pc, #56]	; (8018c10 <Get_SerialNum+0x4c>)
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018bdc:	68fa      	ldr	r2, [r7, #12]
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	4413      	add	r3, r2
 8018be2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d009      	beq.n	8018bfe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018bea:	2208      	movs	r2, #8
 8018bec:	4909      	ldr	r1, [pc, #36]	; (8018c14 <Get_SerialNum+0x50>)
 8018bee:	68f8      	ldr	r0, [r7, #12]
 8018bf0:	f000 f814 	bl	8018c1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018bf4:	2204      	movs	r2, #4
 8018bf6:	4908      	ldr	r1, [pc, #32]	; (8018c18 <Get_SerialNum+0x54>)
 8018bf8:	68b8      	ldr	r0, [r7, #8]
 8018bfa:	f000 f80f 	bl	8018c1c <IntToUnicode>
  }
}
 8018bfe:	bf00      	nop
 8018c00:	3710      	adds	r7, #16
 8018c02:	46bd      	mov	sp, r7
 8018c04:	bd80      	pop	{r7, pc}
 8018c06:	bf00      	nop
 8018c08:	1ff1e800 	.word	0x1ff1e800
 8018c0c:	1ff1e804 	.word	0x1ff1e804
 8018c10:	1ff1e808 	.word	0x1ff1e808
 8018c14:	2400013e 	.word	0x2400013e
 8018c18:	2400014e 	.word	0x2400014e

08018c1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018c1c:	b480      	push	{r7}
 8018c1e:	b087      	sub	sp, #28
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	60f8      	str	r0, [r7, #12]
 8018c24:	60b9      	str	r1, [r7, #8]
 8018c26:	4613      	mov	r3, r2
 8018c28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018c2e:	2300      	movs	r3, #0
 8018c30:	75fb      	strb	r3, [r7, #23]
 8018c32:	e027      	b.n	8018c84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	0f1b      	lsrs	r3, r3, #28
 8018c38:	2b09      	cmp	r3, #9
 8018c3a:	d80b      	bhi.n	8018c54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	0f1b      	lsrs	r3, r3, #28
 8018c40:	b2da      	uxtb	r2, r3
 8018c42:	7dfb      	ldrb	r3, [r7, #23]
 8018c44:	005b      	lsls	r3, r3, #1
 8018c46:	4619      	mov	r1, r3
 8018c48:	68bb      	ldr	r3, [r7, #8]
 8018c4a:	440b      	add	r3, r1
 8018c4c:	3230      	adds	r2, #48	; 0x30
 8018c4e:	b2d2      	uxtb	r2, r2
 8018c50:	701a      	strb	r2, [r3, #0]
 8018c52:	e00a      	b.n	8018c6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018c54:	68fb      	ldr	r3, [r7, #12]
 8018c56:	0f1b      	lsrs	r3, r3, #28
 8018c58:	b2da      	uxtb	r2, r3
 8018c5a:	7dfb      	ldrb	r3, [r7, #23]
 8018c5c:	005b      	lsls	r3, r3, #1
 8018c5e:	4619      	mov	r1, r3
 8018c60:	68bb      	ldr	r3, [r7, #8]
 8018c62:	440b      	add	r3, r1
 8018c64:	3237      	adds	r2, #55	; 0x37
 8018c66:	b2d2      	uxtb	r2, r2
 8018c68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	011b      	lsls	r3, r3, #4
 8018c6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018c70:	7dfb      	ldrb	r3, [r7, #23]
 8018c72:	005b      	lsls	r3, r3, #1
 8018c74:	3301      	adds	r3, #1
 8018c76:	68ba      	ldr	r2, [r7, #8]
 8018c78:	4413      	add	r3, r2
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018c7e:	7dfb      	ldrb	r3, [r7, #23]
 8018c80:	3301      	adds	r3, #1
 8018c82:	75fb      	strb	r3, [r7, #23]
 8018c84:	7dfa      	ldrb	r2, [r7, #23]
 8018c86:	79fb      	ldrb	r3, [r7, #7]
 8018c88:	429a      	cmp	r2, r3
 8018c8a:	d3d3      	bcc.n	8018c34 <IntToUnicode+0x18>
  }
}
 8018c8c:	bf00      	nop
 8018c8e:	371c      	adds	r7, #28
 8018c90:	46bd      	mov	sp, r7
 8018c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c96:	4770      	bx	lr

08018c98 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8018c98:	b480      	push	{r7}
 8018c9a:	b083      	sub	sp, #12
 8018c9c:	af00      	add	r7, sp, #0
 8018c9e:	4603      	mov	r3, r0
 8018ca0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8018ca2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	370c      	adds	r7, #12
 8018ca8:	46bd      	mov	sp, r7
 8018caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cae:	4770      	bx	lr

08018cb0 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b08e      	sub	sp, #56	; 0x38
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	4603      	mov	r3, r0
 8018cb8:	60b9      	str	r1, [r7, #8]
 8018cba:	607a      	str	r2, [r7, #4]
 8018cbc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8018cbe:	23ff      	movs	r3, #255	; 0xff
 8018cc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8018cc4:	f107 0310 	add.w	r3, r7, #16
 8018cc8:	4619      	mov	r1, r3
 8018cca:	480a      	ldr	r0, [pc, #40]	; (8018cf4 <STORAGE_GetCapacity_FS+0x44>)
 8018ccc:	f7f5 f89a 	bl	800de04 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8018cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cd2:	1e5a      	subs	r2, r3, #1
 8018cd4:	68bb      	ldr	r3, [r7, #8]
 8018cd6:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8018cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cda:	b29a      	uxth	r2, r3
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8018ce6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8018cea:	4618      	mov	r0, r3
 8018cec:	3738      	adds	r7, #56	; 0x38
 8018cee:	46bd      	mov	sp, r7
 8018cf0:	bd80      	pop	{r7, pc}
 8018cf2:	bf00      	nop
 8018cf4:	24001470 	.word	0x24001470

08018cf8 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8018cf8:	b480      	push	{r7}
 8018cfa:	b083      	sub	sp, #12
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	4603      	mov	r3, r0
 8018d00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018d02:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018d04:	4618      	mov	r0, r3
 8018d06:	370c      	adds	r7, #12
 8018d08:	46bd      	mov	sp, r7
 8018d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d0e:	4770      	bx	lr

08018d10 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8018d10:	b480      	push	{r7}
 8018d12:	b083      	sub	sp, #12
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	4603      	mov	r3, r0
 8018d18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8018d1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	370c      	adds	r7, #12
 8018d20:	46bd      	mov	sp, r7
 8018d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d26:	4770      	bx	lr

08018d28 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b088      	sub	sp, #32
 8018d2c:	af02      	add	r7, sp, #8
 8018d2e:	60b9      	str	r1, [r7, #8]
 8018d30:	607a      	str	r2, [r7, #4]
 8018d32:	461a      	mov	r2, r3
 8018d34:	4603      	mov	r3, r0
 8018d36:	73fb      	strb	r3, [r7, #15]
 8018d38:	4613      	mov	r3, r2
 8018d3a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8018d3c:	23ff      	movs	r3, #255	; 0xff
 8018d3e:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018d40:	89ba      	ldrh	r2, [r7, #12]
 8018d42:	f04f 33ff 	mov.w	r3, #4294967295
 8018d46:	9300      	str	r3, [sp, #0]
 8018d48:	4613      	mov	r3, r2
 8018d4a:	687a      	ldr	r2, [r7, #4]
 8018d4c:	68b9      	ldr	r1, [r7, #8]
 8018d4e:	4809      	ldr	r0, [pc, #36]	; (8018d74 <STORAGE_Read_FS+0x4c>)
 8018d50:	f7f3 ffca 	bl	800cce8 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8018d54:	bf00      	nop
 8018d56:	4807      	ldr	r0, [pc, #28]	; (8018d74 <STORAGE_Read_FS+0x4c>)
 8018d58:	f7f5 f92a 	bl	800dfb0 <HAL_SD_GetCardState>
 8018d5c:	4603      	mov	r3, r0
 8018d5e:	2b04      	cmp	r3, #4
 8018d60:	d1f9      	bne.n	8018d56 <STORAGE_Read_FS+0x2e>
	ret = 0;
 8018d62:	2300      	movs	r3, #0
 8018d64:	75fb      	strb	r3, [r7, #23]
	return ret;
 8018d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8018d6a:	4618      	mov	r0, r3
 8018d6c:	3718      	adds	r7, #24
 8018d6e:	46bd      	mov	sp, r7
 8018d70:	bd80      	pop	{r7, pc}
 8018d72:	bf00      	nop
 8018d74:	24001470 	.word	0x24001470

08018d78 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b088      	sub	sp, #32
 8018d7c:	af02      	add	r7, sp, #8
 8018d7e:	60b9      	str	r1, [r7, #8]
 8018d80:	607a      	str	r2, [r7, #4]
 8018d82:	461a      	mov	r2, r3
 8018d84:	4603      	mov	r3, r0
 8018d86:	73fb      	strb	r3, [r7, #15]
 8018d88:	4613      	mov	r3, r2
 8018d8a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8018d8c:	23ff      	movs	r3, #255	; 0xff
 8018d8e:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018d90:	89ba      	ldrh	r2, [r7, #12]
 8018d92:	f04f 33ff 	mov.w	r3, #4294967295
 8018d96:	9300      	str	r3, [sp, #0]
 8018d98:	4613      	mov	r3, r2
 8018d9a:	687a      	ldr	r2, [r7, #4]
 8018d9c:	68b9      	ldr	r1, [r7, #8]
 8018d9e:	4809      	ldr	r0, [pc, #36]	; (8018dc4 <STORAGE_Write_FS+0x4c>)
 8018da0:	f7f4 f92c 	bl	800cffc <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8018da4:	bf00      	nop
 8018da6:	4807      	ldr	r0, [pc, #28]	; (8018dc4 <STORAGE_Write_FS+0x4c>)
 8018da8:	f7f5 f902 	bl	800dfb0 <HAL_SD_GetCardState>
 8018dac:	4603      	mov	r3, r0
 8018dae:	2b04      	cmp	r3, #4
 8018db0:	d1f9      	bne.n	8018da6 <STORAGE_Write_FS+0x2e>
	ret = 0;
 8018db2:	2300      	movs	r3, #0
 8018db4:	75fb      	strb	r3, [r7, #23]
	return ret;
 8018db6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8018dba:	4618      	mov	r0, r3
 8018dbc:	3718      	adds	r7, #24
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	bd80      	pop	{r7, pc}
 8018dc2:	bf00      	nop
 8018dc4:	24001470 	.word	0x24001470

08018dc8 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8018dc8:	b480      	push	{r7}
 8018dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8018dcc:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8018dce:	4618      	mov	r0, r3
 8018dd0:	46bd      	mov	sp, r7
 8018dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd6:	4770      	bx	lr

08018dd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b08a      	sub	sp, #40	; 0x28
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018de0:	f107 0314 	add.w	r3, r7, #20
 8018de4:	2200      	movs	r2, #0
 8018de6:	601a      	str	r2, [r3, #0]
 8018de8:	605a      	str	r2, [r3, #4]
 8018dea:	609a      	str	r2, [r3, #8]
 8018dec:	60da      	str	r2, [r3, #12]
 8018dee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	4a1e      	ldr	r2, [pc, #120]	; (8018e70 <HAL_PCD_MspInit+0x98>)
 8018df6:	4293      	cmp	r3, r2
 8018df8:	d136      	bne.n	8018e68 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018dfa:	4b1e      	ldr	r3, [pc, #120]	; (8018e74 <HAL_PCD_MspInit+0x9c>)
 8018dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018e00:	4a1c      	ldr	r2, [pc, #112]	; (8018e74 <HAL_PCD_MspInit+0x9c>)
 8018e02:	f043 0301 	orr.w	r3, r3, #1
 8018e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8018e0a:	4b1a      	ldr	r3, [pc, #104]	; (8018e74 <HAL_PCD_MspInit+0x9c>)
 8018e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018e10:	f003 0301 	and.w	r3, r3, #1
 8018e14:	613b      	str	r3, [r7, #16]
 8018e16:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018e18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018e1e:	2302      	movs	r3, #2
 8018e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018e22:	2300      	movs	r3, #0
 8018e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018e26:	2300      	movs	r3, #0
 8018e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8018e2a:	230a      	movs	r3, #10
 8018e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018e2e:	f107 0314 	add.w	r3, r7, #20
 8018e32:	4619      	mov	r1, r3
 8018e34:	4810      	ldr	r0, [pc, #64]	; (8018e78 <HAL_PCD_MspInit+0xa0>)
 8018e36:	f7ee ff2f 	bl	8007c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018e3a:	4b0e      	ldr	r3, [pc, #56]	; (8018e74 <HAL_PCD_MspInit+0x9c>)
 8018e3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018e40:	4a0c      	ldr	r2, [pc, #48]	; (8018e74 <HAL_PCD_MspInit+0x9c>)
 8018e42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018e46:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8018e4a:	4b0a      	ldr	r3, [pc, #40]	; (8018e74 <HAL_PCD_MspInit+0x9c>)
 8018e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018e54:	60fb      	str	r3, [r7, #12]
 8018e56:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018e58:	2200      	movs	r2, #0
 8018e5a:	2100      	movs	r1, #0
 8018e5c:	2065      	movs	r0, #101	; 0x65
 8018e5e:	f7eb fcd2 	bl	8004806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018e62:	2065      	movs	r0, #101	; 0x65
 8018e64:	f7eb fce9 	bl	800483a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018e68:	bf00      	nop
 8018e6a:	3728      	adds	r7, #40	; 0x28
 8018e6c:	46bd      	mov	sp, r7
 8018e6e:	bd80      	pop	{r7, pc}
 8018e70:	40080000 	.word	0x40080000
 8018e74:	58024400 	.word	0x58024400
 8018e78:	58020000 	.word	0x58020000

08018e7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b082      	sub	sp, #8
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018e90:	4619      	mov	r1, r3
 8018e92:	4610      	mov	r0, r2
 8018e94:	f7fc fa89 	bl	80153aa <USBD_LL_SetupStage>
}
 8018e98:	bf00      	nop
 8018e9a:	3708      	adds	r7, #8
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	bd80      	pop	{r7, pc}

08018ea0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ea0:	b580      	push	{r7, lr}
 8018ea2:	b082      	sub	sp, #8
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	6078      	str	r0, [r7, #4]
 8018ea8:	460b      	mov	r3, r1
 8018eaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018eb2:	78fa      	ldrb	r2, [r7, #3]
 8018eb4:	6879      	ldr	r1, [r7, #4]
 8018eb6:	4613      	mov	r3, r2
 8018eb8:	00db      	lsls	r3, r3, #3
 8018eba:	1a9b      	subs	r3, r3, r2
 8018ebc:	009b      	lsls	r3, r3, #2
 8018ebe:	440b      	add	r3, r1
 8018ec0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018ec4:	681a      	ldr	r2, [r3, #0]
 8018ec6:	78fb      	ldrb	r3, [r7, #3]
 8018ec8:	4619      	mov	r1, r3
 8018eca:	f7fc fac1 	bl	8015450 <USBD_LL_DataOutStage>
}
 8018ece:	bf00      	nop
 8018ed0:	3708      	adds	r7, #8
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	bd80      	pop	{r7, pc}

08018ed6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ed6:	b580      	push	{r7, lr}
 8018ed8:	b082      	sub	sp, #8
 8018eda:	af00      	add	r7, sp, #0
 8018edc:	6078      	str	r0, [r7, #4]
 8018ede:	460b      	mov	r3, r1
 8018ee0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018ee8:	78fa      	ldrb	r2, [r7, #3]
 8018eea:	6879      	ldr	r1, [r7, #4]
 8018eec:	4613      	mov	r3, r2
 8018eee:	00db      	lsls	r3, r3, #3
 8018ef0:	1a9b      	subs	r3, r3, r2
 8018ef2:	009b      	lsls	r3, r3, #2
 8018ef4:	440b      	add	r3, r1
 8018ef6:	3348      	adds	r3, #72	; 0x48
 8018ef8:	681a      	ldr	r2, [r3, #0]
 8018efa:	78fb      	ldrb	r3, [r7, #3]
 8018efc:	4619      	mov	r1, r3
 8018efe:	f7fc fb0a 	bl	8015516 <USBD_LL_DataInStage>
}
 8018f02:	bf00      	nop
 8018f04:	3708      	adds	r7, #8
 8018f06:	46bd      	mov	sp, r7
 8018f08:	bd80      	pop	{r7, pc}

08018f0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f0a:	b580      	push	{r7, lr}
 8018f0c:	b082      	sub	sp, #8
 8018f0e:	af00      	add	r7, sp, #0
 8018f10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f18:	4618      	mov	r0, r3
 8018f1a:	f7fc fc0e 	bl	801573a <USBD_LL_SOF>
}
 8018f1e:	bf00      	nop
 8018f20:	3708      	adds	r7, #8
 8018f22:	46bd      	mov	sp, r7
 8018f24:	bd80      	pop	{r7, pc}

08018f26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f26:	b580      	push	{r7, lr}
 8018f28:	b084      	sub	sp, #16
 8018f2a:	af00      	add	r7, sp, #0
 8018f2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018f2e:	2301      	movs	r3, #1
 8018f30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	68db      	ldr	r3, [r3, #12]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d102      	bne.n	8018f40 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018f3a:	2300      	movs	r3, #0
 8018f3c:	73fb      	strb	r3, [r7, #15]
 8018f3e:	e008      	b.n	8018f52 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	68db      	ldr	r3, [r3, #12]
 8018f44:	2b02      	cmp	r3, #2
 8018f46:	d102      	bne.n	8018f4e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018f48:	2301      	movs	r3, #1
 8018f4a:	73fb      	strb	r3, [r7, #15]
 8018f4c:	e001      	b.n	8018f52 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018f4e:	f7ea fe5d 	bl	8003c0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f58:	7bfa      	ldrb	r2, [r7, #15]
 8018f5a:	4611      	mov	r1, r2
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	f7fc fbb1 	bl	80156c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f68:	4618      	mov	r0, r3
 8018f6a:	f7fc fb6a 	bl	8015642 <USBD_LL_Reset>
}
 8018f6e:	bf00      	nop
 8018f70:	3710      	adds	r7, #16
 8018f72:	46bd      	mov	sp, r7
 8018f74:	bd80      	pop	{r7, pc}
	...

08018f78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f78:	b580      	push	{r7, lr}
 8018f7a:	b082      	sub	sp, #8
 8018f7c:	af00      	add	r7, sp, #0
 8018f7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f86:	4618      	mov	r0, r3
 8018f88:	f7fc fbac 	bl	80156e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	687a      	ldr	r2, [r7, #4]
 8018f98:	6812      	ldr	r2, [r2, #0]
 8018f9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018f9e:	f043 0301 	orr.w	r3, r3, #1
 8018fa2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	6a1b      	ldr	r3, [r3, #32]
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d005      	beq.n	8018fb8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018fac:	4b04      	ldr	r3, [pc, #16]	; (8018fc0 <HAL_PCD_SuspendCallback+0x48>)
 8018fae:	691b      	ldr	r3, [r3, #16]
 8018fb0:	4a03      	ldr	r2, [pc, #12]	; (8018fc0 <HAL_PCD_SuspendCallback+0x48>)
 8018fb2:	f043 0306 	orr.w	r3, r3, #6
 8018fb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018fb8:	bf00      	nop
 8018fba:	3708      	adds	r7, #8
 8018fbc:	46bd      	mov	sp, r7
 8018fbe:	bd80      	pop	{r7, pc}
 8018fc0:	e000ed00 	.word	0xe000ed00

08018fc4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fc4:	b580      	push	{r7, lr}
 8018fc6:	b082      	sub	sp, #8
 8018fc8:	af00      	add	r7, sp, #0
 8018fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	f7fc fb9b 	bl	801570e <USBD_LL_Resume>
}
 8018fd8:	bf00      	nop
 8018fda:	3708      	adds	r7, #8
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	bd80      	pop	{r7, pc}

08018fe0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b082      	sub	sp, #8
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]
 8018fe8:	460b      	mov	r3, r1
 8018fea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018ff2:	78fa      	ldrb	r2, [r7, #3]
 8018ff4:	4611      	mov	r1, r2
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	f7fc fbc6 	bl	8015788 <USBD_LL_IsoOUTIncomplete>
}
 8018ffc:	bf00      	nop
 8018ffe:	3708      	adds	r7, #8
 8019000:	46bd      	mov	sp, r7
 8019002:	bd80      	pop	{r7, pc}

08019004 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019004:	b580      	push	{r7, lr}
 8019006:	b082      	sub	sp, #8
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
 801900c:	460b      	mov	r3, r1
 801900e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019016:	78fa      	ldrb	r2, [r7, #3]
 8019018:	4611      	mov	r1, r2
 801901a:	4618      	mov	r0, r3
 801901c:	f7fc fba7 	bl	801576e <USBD_LL_IsoINIncomplete>
}
 8019020:	bf00      	nop
 8019022:	3708      	adds	r7, #8
 8019024:	46bd      	mov	sp, r7
 8019026:	bd80      	pop	{r7, pc}

08019028 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019028:	b580      	push	{r7, lr}
 801902a:	b082      	sub	sp, #8
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019036:	4618      	mov	r0, r3
 8019038:	f7fc fbb3 	bl	80157a2 <USBD_LL_DevConnected>
}
 801903c:	bf00      	nop
 801903e:	3708      	adds	r7, #8
 8019040:	46bd      	mov	sp, r7
 8019042:	bd80      	pop	{r7, pc}

08019044 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019044:	b580      	push	{r7, lr}
 8019046:	b082      	sub	sp, #8
 8019048:	af00      	add	r7, sp, #0
 801904a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019052:	4618      	mov	r0, r3
 8019054:	f7fc fbb0 	bl	80157b8 <USBD_LL_DevDisconnected>
}
 8019058:	bf00      	nop
 801905a:	3708      	adds	r7, #8
 801905c:	46bd      	mov	sp, r7
 801905e:	bd80      	pop	{r7, pc}

08019060 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019060:	b580      	push	{r7, lr}
 8019062:	b082      	sub	sp, #8
 8019064:	af00      	add	r7, sp, #0
 8019066:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	781b      	ldrb	r3, [r3, #0]
 801906c:	2b00      	cmp	r3, #0
 801906e:	d13e      	bne.n	80190ee <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019070:	4a21      	ldr	r2, [pc, #132]	; (80190f8 <USBD_LL_Init+0x98>)
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	4a1f      	ldr	r2, [pc, #124]	; (80190f8 <USBD_LL_Init+0x98>)
 801907c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019080:	4b1d      	ldr	r3, [pc, #116]	; (80190f8 <USBD_LL_Init+0x98>)
 8019082:	4a1e      	ldr	r2, [pc, #120]	; (80190fc <USBD_LL_Init+0x9c>)
 8019084:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8019086:	4b1c      	ldr	r3, [pc, #112]	; (80190f8 <USBD_LL_Init+0x98>)
 8019088:	2209      	movs	r2, #9
 801908a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801908c:	4b1a      	ldr	r3, [pc, #104]	; (80190f8 <USBD_LL_Init+0x98>)
 801908e:	2202      	movs	r2, #2
 8019090:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019092:	4b19      	ldr	r3, [pc, #100]	; (80190f8 <USBD_LL_Init+0x98>)
 8019094:	2200      	movs	r2, #0
 8019096:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019098:	4b17      	ldr	r3, [pc, #92]	; (80190f8 <USBD_LL_Init+0x98>)
 801909a:	2202      	movs	r2, #2
 801909c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801909e:	4b16      	ldr	r3, [pc, #88]	; (80190f8 <USBD_LL_Init+0x98>)
 80190a0:	2200      	movs	r2, #0
 80190a2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80190a4:	4b14      	ldr	r3, [pc, #80]	; (80190f8 <USBD_LL_Init+0x98>)
 80190a6:	2200      	movs	r2, #0
 80190a8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80190aa:	4b13      	ldr	r3, [pc, #76]	; (80190f8 <USBD_LL_Init+0x98>)
 80190ac:	2200      	movs	r2, #0
 80190ae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80190b0:	4b11      	ldr	r3, [pc, #68]	; (80190f8 <USBD_LL_Init+0x98>)
 80190b2:	2200      	movs	r2, #0
 80190b4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80190b6:	4b10      	ldr	r3, [pc, #64]	; (80190f8 <USBD_LL_Init+0x98>)
 80190b8:	2200      	movs	r2, #0
 80190ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80190bc:	4b0e      	ldr	r3, [pc, #56]	; (80190f8 <USBD_LL_Init+0x98>)
 80190be:	2200      	movs	r2, #0
 80190c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80190c2:	480d      	ldr	r0, [pc, #52]	; (80190f8 <USBD_LL_Init+0x98>)
 80190c4:	f7ef f822 	bl	800810c <HAL_PCD_Init>
 80190c8:	4603      	mov	r3, r0
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d001      	beq.n	80190d2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80190ce:	f7ea fd9d 	bl	8003c0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80190d2:	2180      	movs	r1, #128	; 0x80
 80190d4:	4808      	ldr	r0, [pc, #32]	; (80190f8 <USBD_LL_Init+0x98>)
 80190d6:	f7f0 f9e0 	bl	800949a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80190da:	2240      	movs	r2, #64	; 0x40
 80190dc:	2100      	movs	r1, #0
 80190de:	4806      	ldr	r0, [pc, #24]	; (80190f8 <USBD_LL_Init+0x98>)
 80190e0:	f7f0 f994 	bl	800940c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80190e4:	2280      	movs	r2, #128	; 0x80
 80190e6:	2101      	movs	r1, #1
 80190e8:	4803      	ldr	r0, [pc, #12]	; (80190f8 <USBD_LL_Init+0x98>)
 80190ea:	f7f0 f98f 	bl	800940c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80190ee:	2300      	movs	r3, #0
}
 80190f0:	4618      	mov	r0, r3
 80190f2:	3708      	adds	r7, #8
 80190f4:	46bd      	mov	sp, r7
 80190f6:	bd80      	pop	{r7, pc}
 80190f8:	240020a4 	.word	0x240020a4
 80190fc:	40080000 	.word	0x40080000

08019100 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019100:	b580      	push	{r7, lr}
 8019102:	b084      	sub	sp, #16
 8019104:	af00      	add	r7, sp, #0
 8019106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019108:	2300      	movs	r3, #0
 801910a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801910c:	2300      	movs	r3, #0
 801910e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019116:	4618      	mov	r0, r3
 8019118:	f7ef f91c 	bl	8008354 <HAL_PCD_Start>
 801911c:	4603      	mov	r3, r0
 801911e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019120:	7bfb      	ldrb	r3, [r7, #15]
 8019122:	4618      	mov	r0, r3
 8019124:	f000 f94a 	bl	80193bc <USBD_Get_USB_Status>
 8019128:	4603      	mov	r3, r0
 801912a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801912c:	7bbb      	ldrb	r3, [r7, #14]
}
 801912e:	4618      	mov	r0, r3
 8019130:	3710      	adds	r7, #16
 8019132:	46bd      	mov	sp, r7
 8019134:	bd80      	pop	{r7, pc}

08019136 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019136:	b580      	push	{r7, lr}
 8019138:	b084      	sub	sp, #16
 801913a:	af00      	add	r7, sp, #0
 801913c:	6078      	str	r0, [r7, #4]
 801913e:	4608      	mov	r0, r1
 8019140:	4611      	mov	r1, r2
 8019142:	461a      	mov	r2, r3
 8019144:	4603      	mov	r3, r0
 8019146:	70fb      	strb	r3, [r7, #3]
 8019148:	460b      	mov	r3, r1
 801914a:	70bb      	strb	r3, [r7, #2]
 801914c:	4613      	mov	r3, r2
 801914e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019150:	2300      	movs	r3, #0
 8019152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019154:	2300      	movs	r3, #0
 8019156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801915e:	78bb      	ldrb	r3, [r7, #2]
 8019160:	883a      	ldrh	r2, [r7, #0]
 8019162:	78f9      	ldrb	r1, [r7, #3]
 8019164:	f7ef fd2d 	bl	8008bc2 <HAL_PCD_EP_Open>
 8019168:	4603      	mov	r3, r0
 801916a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801916c:	7bfb      	ldrb	r3, [r7, #15]
 801916e:	4618      	mov	r0, r3
 8019170:	f000 f924 	bl	80193bc <USBD_Get_USB_Status>
 8019174:	4603      	mov	r3, r0
 8019176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019178:	7bbb      	ldrb	r3, [r7, #14]
}
 801917a:	4618      	mov	r0, r3
 801917c:	3710      	adds	r7, #16
 801917e:	46bd      	mov	sp, r7
 8019180:	bd80      	pop	{r7, pc}

08019182 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019182:	b580      	push	{r7, lr}
 8019184:	b084      	sub	sp, #16
 8019186:	af00      	add	r7, sp, #0
 8019188:	6078      	str	r0, [r7, #4]
 801918a:	460b      	mov	r3, r1
 801918c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801918e:	2300      	movs	r3, #0
 8019190:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019192:	2300      	movs	r3, #0
 8019194:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801919c:	78fa      	ldrb	r2, [r7, #3]
 801919e:	4611      	mov	r1, r2
 80191a0:	4618      	mov	r0, r3
 80191a2:	f7ef fd76 	bl	8008c92 <HAL_PCD_EP_Close>
 80191a6:	4603      	mov	r3, r0
 80191a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191aa:	7bfb      	ldrb	r3, [r7, #15]
 80191ac:	4618      	mov	r0, r3
 80191ae:	f000 f905 	bl	80193bc <USBD_Get_USB_Status>
 80191b2:	4603      	mov	r3, r0
 80191b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80191b8:	4618      	mov	r0, r3
 80191ba:	3710      	adds	r7, #16
 80191bc:	46bd      	mov	sp, r7
 80191be:	bd80      	pop	{r7, pc}

080191c0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80191c0:	b580      	push	{r7, lr}
 80191c2:	b084      	sub	sp, #16
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	6078      	str	r0, [r7, #4]
 80191c8:	460b      	mov	r3, r1
 80191ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191cc:	2300      	movs	r3, #0
 80191ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191d0:	2300      	movs	r3, #0
 80191d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191da:	78fa      	ldrb	r2, [r7, #3]
 80191dc:	4611      	mov	r1, r2
 80191de:	4618      	mov	r0, r3
 80191e0:	f7ef ff08 	bl	8008ff4 <HAL_PCD_EP_Flush>
 80191e4:	4603      	mov	r3, r0
 80191e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191e8:	7bfb      	ldrb	r3, [r7, #15]
 80191ea:	4618      	mov	r0, r3
 80191ec:	f000 f8e6 	bl	80193bc <USBD_Get_USB_Status>
 80191f0:	4603      	mov	r3, r0
 80191f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80191f6:	4618      	mov	r0, r3
 80191f8:	3710      	adds	r7, #16
 80191fa:	46bd      	mov	sp, r7
 80191fc:	bd80      	pop	{r7, pc}

080191fe <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80191fe:	b580      	push	{r7, lr}
 8019200:	b084      	sub	sp, #16
 8019202:	af00      	add	r7, sp, #0
 8019204:	6078      	str	r0, [r7, #4]
 8019206:	460b      	mov	r3, r1
 8019208:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801920a:	2300      	movs	r3, #0
 801920c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801920e:	2300      	movs	r3, #0
 8019210:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019218:	78fa      	ldrb	r2, [r7, #3]
 801921a:	4611      	mov	r1, r2
 801921c:	4618      	mov	r0, r3
 801921e:	f7ef fe2f 	bl	8008e80 <HAL_PCD_EP_SetStall>
 8019222:	4603      	mov	r3, r0
 8019224:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019226:	7bfb      	ldrb	r3, [r7, #15]
 8019228:	4618      	mov	r0, r3
 801922a:	f000 f8c7 	bl	80193bc <USBD_Get_USB_Status>
 801922e:	4603      	mov	r3, r0
 8019230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019232:	7bbb      	ldrb	r3, [r7, #14]
}
 8019234:	4618      	mov	r0, r3
 8019236:	3710      	adds	r7, #16
 8019238:	46bd      	mov	sp, r7
 801923a:	bd80      	pop	{r7, pc}

0801923c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b084      	sub	sp, #16
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
 8019244:	460b      	mov	r3, r1
 8019246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019248:	2300      	movs	r3, #0
 801924a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801924c:	2300      	movs	r3, #0
 801924e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019256:	78fa      	ldrb	r2, [r7, #3]
 8019258:	4611      	mov	r1, r2
 801925a:	4618      	mov	r0, r3
 801925c:	f7ef fe74 	bl	8008f48 <HAL_PCD_EP_ClrStall>
 8019260:	4603      	mov	r3, r0
 8019262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019264:	7bfb      	ldrb	r3, [r7, #15]
 8019266:	4618      	mov	r0, r3
 8019268:	f000 f8a8 	bl	80193bc <USBD_Get_USB_Status>
 801926c:	4603      	mov	r3, r0
 801926e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019270:	7bbb      	ldrb	r3, [r7, #14]
}
 8019272:	4618      	mov	r0, r3
 8019274:	3710      	adds	r7, #16
 8019276:	46bd      	mov	sp, r7
 8019278:	bd80      	pop	{r7, pc}

0801927a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801927a:	b480      	push	{r7}
 801927c:	b085      	sub	sp, #20
 801927e:	af00      	add	r7, sp, #0
 8019280:	6078      	str	r0, [r7, #4]
 8019282:	460b      	mov	r3, r1
 8019284:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801928c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801928e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019292:	2b00      	cmp	r3, #0
 8019294:	da0b      	bge.n	80192ae <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019296:	78fb      	ldrb	r3, [r7, #3]
 8019298:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801929c:	68f9      	ldr	r1, [r7, #12]
 801929e:	4613      	mov	r3, r2
 80192a0:	00db      	lsls	r3, r3, #3
 80192a2:	1a9b      	subs	r3, r3, r2
 80192a4:	009b      	lsls	r3, r3, #2
 80192a6:	440b      	add	r3, r1
 80192a8:	333e      	adds	r3, #62	; 0x3e
 80192aa:	781b      	ldrb	r3, [r3, #0]
 80192ac:	e00b      	b.n	80192c6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80192ae:	78fb      	ldrb	r3, [r7, #3]
 80192b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80192b4:	68f9      	ldr	r1, [r7, #12]
 80192b6:	4613      	mov	r3, r2
 80192b8:	00db      	lsls	r3, r3, #3
 80192ba:	1a9b      	subs	r3, r3, r2
 80192bc:	009b      	lsls	r3, r3, #2
 80192be:	440b      	add	r3, r1
 80192c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80192c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80192c6:	4618      	mov	r0, r3
 80192c8:	3714      	adds	r7, #20
 80192ca:	46bd      	mov	sp, r7
 80192cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d0:	4770      	bx	lr

080192d2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80192d2:	b580      	push	{r7, lr}
 80192d4:	b084      	sub	sp, #16
 80192d6:	af00      	add	r7, sp, #0
 80192d8:	6078      	str	r0, [r7, #4]
 80192da:	460b      	mov	r3, r1
 80192dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192de:	2300      	movs	r3, #0
 80192e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192e2:	2300      	movs	r3, #0
 80192e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192ec:	78fa      	ldrb	r2, [r7, #3]
 80192ee:	4611      	mov	r1, r2
 80192f0:	4618      	mov	r0, r3
 80192f2:	f7ef fc41 	bl	8008b78 <HAL_PCD_SetAddress>
 80192f6:	4603      	mov	r3, r0
 80192f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192fa:	7bfb      	ldrb	r3, [r7, #15]
 80192fc:	4618      	mov	r0, r3
 80192fe:	f000 f85d 	bl	80193bc <USBD_Get_USB_Status>
 8019302:	4603      	mov	r3, r0
 8019304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019306:	7bbb      	ldrb	r3, [r7, #14]
}
 8019308:	4618      	mov	r0, r3
 801930a:	3710      	adds	r7, #16
 801930c:	46bd      	mov	sp, r7
 801930e:	bd80      	pop	{r7, pc}

08019310 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b086      	sub	sp, #24
 8019314:	af00      	add	r7, sp, #0
 8019316:	60f8      	str	r0, [r7, #12]
 8019318:	607a      	str	r2, [r7, #4]
 801931a:	603b      	str	r3, [r7, #0]
 801931c:	460b      	mov	r3, r1
 801931e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019320:	2300      	movs	r3, #0
 8019322:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019324:	2300      	movs	r3, #0
 8019326:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801932e:	7af9      	ldrb	r1, [r7, #11]
 8019330:	683b      	ldr	r3, [r7, #0]
 8019332:	687a      	ldr	r2, [r7, #4]
 8019334:	f7ef fd5a 	bl	8008dec <HAL_PCD_EP_Transmit>
 8019338:	4603      	mov	r3, r0
 801933a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801933c:	7dfb      	ldrb	r3, [r7, #23]
 801933e:	4618      	mov	r0, r3
 8019340:	f000 f83c 	bl	80193bc <USBD_Get_USB_Status>
 8019344:	4603      	mov	r3, r0
 8019346:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019348:	7dbb      	ldrb	r3, [r7, #22]
}
 801934a:	4618      	mov	r0, r3
 801934c:	3718      	adds	r7, #24
 801934e:	46bd      	mov	sp, r7
 8019350:	bd80      	pop	{r7, pc}

08019352 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019352:	b580      	push	{r7, lr}
 8019354:	b086      	sub	sp, #24
 8019356:	af00      	add	r7, sp, #0
 8019358:	60f8      	str	r0, [r7, #12]
 801935a:	607a      	str	r2, [r7, #4]
 801935c:	603b      	str	r3, [r7, #0]
 801935e:	460b      	mov	r3, r1
 8019360:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019362:	2300      	movs	r3, #0
 8019364:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019366:	2300      	movs	r3, #0
 8019368:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019370:	7af9      	ldrb	r1, [r7, #11]
 8019372:	683b      	ldr	r3, [r7, #0]
 8019374:	687a      	ldr	r2, [r7, #4]
 8019376:	f7ef fcd6 	bl	8008d26 <HAL_PCD_EP_Receive>
 801937a:	4603      	mov	r3, r0
 801937c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801937e:	7dfb      	ldrb	r3, [r7, #23]
 8019380:	4618      	mov	r0, r3
 8019382:	f000 f81b 	bl	80193bc <USBD_Get_USB_Status>
 8019386:	4603      	mov	r3, r0
 8019388:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801938a:	7dbb      	ldrb	r3, [r7, #22]
}
 801938c:	4618      	mov	r0, r3
 801938e:	3718      	adds	r7, #24
 8019390:	46bd      	mov	sp, r7
 8019392:	bd80      	pop	{r7, pc}

08019394 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019394:	b580      	push	{r7, lr}
 8019396:	b082      	sub	sp, #8
 8019398:	af00      	add	r7, sp, #0
 801939a:	6078      	str	r0, [r7, #4]
 801939c:	460b      	mov	r3, r1
 801939e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80193a6:	78fa      	ldrb	r2, [r7, #3]
 80193a8:	4611      	mov	r1, r2
 80193aa:	4618      	mov	r0, r3
 80193ac:	f7ef fd06 	bl	8008dbc <HAL_PCD_EP_GetRxCount>
 80193b0:	4603      	mov	r3, r0
}
 80193b2:	4618      	mov	r0, r3
 80193b4:	3708      	adds	r7, #8
 80193b6:	46bd      	mov	sp, r7
 80193b8:	bd80      	pop	{r7, pc}
	...

080193bc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80193bc:	b480      	push	{r7}
 80193be:	b085      	sub	sp, #20
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	4603      	mov	r3, r0
 80193c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193c6:	2300      	movs	r3, #0
 80193c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80193ca:	79fb      	ldrb	r3, [r7, #7]
 80193cc:	2b03      	cmp	r3, #3
 80193ce:	d817      	bhi.n	8019400 <USBD_Get_USB_Status+0x44>
 80193d0:	a201      	add	r2, pc, #4	; (adr r2, 80193d8 <USBD_Get_USB_Status+0x1c>)
 80193d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193d6:	bf00      	nop
 80193d8:	080193e9 	.word	0x080193e9
 80193dc:	080193ef 	.word	0x080193ef
 80193e0:	080193f5 	.word	0x080193f5
 80193e4:	080193fb 	.word	0x080193fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80193e8:	2300      	movs	r3, #0
 80193ea:	73fb      	strb	r3, [r7, #15]
    break;
 80193ec:	e00b      	b.n	8019406 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80193ee:	2303      	movs	r3, #3
 80193f0:	73fb      	strb	r3, [r7, #15]
    break;
 80193f2:	e008      	b.n	8019406 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80193f4:	2301      	movs	r3, #1
 80193f6:	73fb      	strb	r3, [r7, #15]
    break;
 80193f8:	e005      	b.n	8019406 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80193fa:	2303      	movs	r3, #3
 80193fc:	73fb      	strb	r3, [r7, #15]
    break;
 80193fe:	e002      	b.n	8019406 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019400:	2303      	movs	r3, #3
 8019402:	73fb      	strb	r3, [r7, #15]
    break;
 8019404:	bf00      	nop
  }
  return usb_status;
 8019406:	7bfb      	ldrb	r3, [r7, #15]
}
 8019408:	4618      	mov	r0, r3
 801940a:	3714      	adds	r7, #20
 801940c:	46bd      	mov	sp, r7
 801940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019412:	4770      	bx	lr

08019414 <__errno>:
 8019414:	4b01      	ldr	r3, [pc, #4]	; (801941c <__errno+0x8>)
 8019416:	6818      	ldr	r0, [r3, #0]
 8019418:	4770      	bx	lr
 801941a:	bf00      	nop
 801941c:	24000178 	.word	0x24000178

08019420 <__libc_init_array>:
 8019420:	b570      	push	{r4, r5, r6, lr}
 8019422:	4e0d      	ldr	r6, [pc, #52]	; (8019458 <__libc_init_array+0x38>)
 8019424:	4c0d      	ldr	r4, [pc, #52]	; (801945c <__libc_init_array+0x3c>)
 8019426:	1ba4      	subs	r4, r4, r6
 8019428:	10a4      	asrs	r4, r4, #2
 801942a:	2500      	movs	r5, #0
 801942c:	42a5      	cmp	r5, r4
 801942e:	d109      	bne.n	8019444 <__libc_init_array+0x24>
 8019430:	4e0b      	ldr	r6, [pc, #44]	; (8019460 <__libc_init_array+0x40>)
 8019432:	4c0c      	ldr	r4, [pc, #48]	; (8019464 <__libc_init_array+0x44>)
 8019434:	f001 f97a 	bl	801a72c <_init>
 8019438:	1ba4      	subs	r4, r4, r6
 801943a:	10a4      	asrs	r4, r4, #2
 801943c:	2500      	movs	r5, #0
 801943e:	42a5      	cmp	r5, r4
 8019440:	d105      	bne.n	801944e <__libc_init_array+0x2e>
 8019442:	bd70      	pop	{r4, r5, r6, pc}
 8019444:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019448:	4798      	blx	r3
 801944a:	3501      	adds	r5, #1
 801944c:	e7ee      	b.n	801942c <__libc_init_array+0xc>
 801944e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019452:	4798      	blx	r3
 8019454:	3501      	adds	r5, #1
 8019456:	e7f2      	b.n	801943e <__libc_init_array+0x1e>
 8019458:	0801b0e0 	.word	0x0801b0e0
 801945c:	0801b0e0 	.word	0x0801b0e0
 8019460:	0801b0e0 	.word	0x0801b0e0
 8019464:	0801b0e4 	.word	0x0801b0e4

08019468 <malloc>:
 8019468:	4b02      	ldr	r3, [pc, #8]	; (8019474 <malloc+0xc>)
 801946a:	4601      	mov	r1, r0
 801946c:	6818      	ldr	r0, [r3, #0]
 801946e:	f000 b86d 	b.w	801954c <_malloc_r>
 8019472:	bf00      	nop
 8019474:	24000178 	.word	0x24000178

08019478 <free>:
 8019478:	4b02      	ldr	r3, [pc, #8]	; (8019484 <free+0xc>)
 801947a:	4601      	mov	r1, r0
 801947c:	6818      	ldr	r0, [r3, #0]
 801947e:	f000 b817 	b.w	80194b0 <_free_r>
 8019482:	bf00      	nop
 8019484:	24000178 	.word	0x24000178

08019488 <memcpy>:
 8019488:	b510      	push	{r4, lr}
 801948a:	1e43      	subs	r3, r0, #1
 801948c:	440a      	add	r2, r1
 801948e:	4291      	cmp	r1, r2
 8019490:	d100      	bne.n	8019494 <memcpy+0xc>
 8019492:	bd10      	pop	{r4, pc}
 8019494:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019498:	f803 4f01 	strb.w	r4, [r3, #1]!
 801949c:	e7f7      	b.n	801948e <memcpy+0x6>

0801949e <memset>:
 801949e:	4402      	add	r2, r0
 80194a0:	4603      	mov	r3, r0
 80194a2:	4293      	cmp	r3, r2
 80194a4:	d100      	bne.n	80194a8 <memset+0xa>
 80194a6:	4770      	bx	lr
 80194a8:	f803 1b01 	strb.w	r1, [r3], #1
 80194ac:	e7f9      	b.n	80194a2 <memset+0x4>
	...

080194b0 <_free_r>:
 80194b0:	b538      	push	{r3, r4, r5, lr}
 80194b2:	4605      	mov	r5, r0
 80194b4:	2900      	cmp	r1, #0
 80194b6:	d045      	beq.n	8019544 <_free_r+0x94>
 80194b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80194bc:	1f0c      	subs	r4, r1, #4
 80194be:	2b00      	cmp	r3, #0
 80194c0:	bfb8      	it	lt
 80194c2:	18e4      	addlt	r4, r4, r3
 80194c4:	f000 fc22 	bl	8019d0c <__malloc_lock>
 80194c8:	4a1f      	ldr	r2, [pc, #124]	; (8019548 <_free_r+0x98>)
 80194ca:	6813      	ldr	r3, [r2, #0]
 80194cc:	4610      	mov	r0, r2
 80194ce:	b933      	cbnz	r3, 80194de <_free_r+0x2e>
 80194d0:	6063      	str	r3, [r4, #4]
 80194d2:	6014      	str	r4, [r2, #0]
 80194d4:	4628      	mov	r0, r5
 80194d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80194da:	f000 bc18 	b.w	8019d0e <__malloc_unlock>
 80194de:	42a3      	cmp	r3, r4
 80194e0:	d90c      	bls.n	80194fc <_free_r+0x4c>
 80194e2:	6821      	ldr	r1, [r4, #0]
 80194e4:	1862      	adds	r2, r4, r1
 80194e6:	4293      	cmp	r3, r2
 80194e8:	bf04      	itt	eq
 80194ea:	681a      	ldreq	r2, [r3, #0]
 80194ec:	685b      	ldreq	r3, [r3, #4]
 80194ee:	6063      	str	r3, [r4, #4]
 80194f0:	bf04      	itt	eq
 80194f2:	1852      	addeq	r2, r2, r1
 80194f4:	6022      	streq	r2, [r4, #0]
 80194f6:	6004      	str	r4, [r0, #0]
 80194f8:	e7ec      	b.n	80194d4 <_free_r+0x24>
 80194fa:	4613      	mov	r3, r2
 80194fc:	685a      	ldr	r2, [r3, #4]
 80194fe:	b10a      	cbz	r2, 8019504 <_free_r+0x54>
 8019500:	42a2      	cmp	r2, r4
 8019502:	d9fa      	bls.n	80194fa <_free_r+0x4a>
 8019504:	6819      	ldr	r1, [r3, #0]
 8019506:	1858      	adds	r0, r3, r1
 8019508:	42a0      	cmp	r0, r4
 801950a:	d10b      	bne.n	8019524 <_free_r+0x74>
 801950c:	6820      	ldr	r0, [r4, #0]
 801950e:	4401      	add	r1, r0
 8019510:	1858      	adds	r0, r3, r1
 8019512:	4282      	cmp	r2, r0
 8019514:	6019      	str	r1, [r3, #0]
 8019516:	d1dd      	bne.n	80194d4 <_free_r+0x24>
 8019518:	6810      	ldr	r0, [r2, #0]
 801951a:	6852      	ldr	r2, [r2, #4]
 801951c:	605a      	str	r2, [r3, #4]
 801951e:	4401      	add	r1, r0
 8019520:	6019      	str	r1, [r3, #0]
 8019522:	e7d7      	b.n	80194d4 <_free_r+0x24>
 8019524:	d902      	bls.n	801952c <_free_r+0x7c>
 8019526:	230c      	movs	r3, #12
 8019528:	602b      	str	r3, [r5, #0]
 801952a:	e7d3      	b.n	80194d4 <_free_r+0x24>
 801952c:	6820      	ldr	r0, [r4, #0]
 801952e:	1821      	adds	r1, r4, r0
 8019530:	428a      	cmp	r2, r1
 8019532:	bf04      	itt	eq
 8019534:	6811      	ldreq	r1, [r2, #0]
 8019536:	6852      	ldreq	r2, [r2, #4]
 8019538:	6062      	str	r2, [r4, #4]
 801953a:	bf04      	itt	eq
 801953c:	1809      	addeq	r1, r1, r0
 801953e:	6021      	streq	r1, [r4, #0]
 8019540:	605c      	str	r4, [r3, #4]
 8019542:	e7c7      	b.n	80194d4 <_free_r+0x24>
 8019544:	bd38      	pop	{r3, r4, r5, pc}
 8019546:	bf00      	nop
 8019548:	24000b90 	.word	0x24000b90

0801954c <_malloc_r>:
 801954c:	b570      	push	{r4, r5, r6, lr}
 801954e:	1ccd      	adds	r5, r1, #3
 8019550:	f025 0503 	bic.w	r5, r5, #3
 8019554:	3508      	adds	r5, #8
 8019556:	2d0c      	cmp	r5, #12
 8019558:	bf38      	it	cc
 801955a:	250c      	movcc	r5, #12
 801955c:	2d00      	cmp	r5, #0
 801955e:	4606      	mov	r6, r0
 8019560:	db01      	blt.n	8019566 <_malloc_r+0x1a>
 8019562:	42a9      	cmp	r1, r5
 8019564:	d903      	bls.n	801956e <_malloc_r+0x22>
 8019566:	230c      	movs	r3, #12
 8019568:	6033      	str	r3, [r6, #0]
 801956a:	2000      	movs	r0, #0
 801956c:	bd70      	pop	{r4, r5, r6, pc}
 801956e:	f000 fbcd 	bl	8019d0c <__malloc_lock>
 8019572:	4a21      	ldr	r2, [pc, #132]	; (80195f8 <_malloc_r+0xac>)
 8019574:	6814      	ldr	r4, [r2, #0]
 8019576:	4621      	mov	r1, r4
 8019578:	b991      	cbnz	r1, 80195a0 <_malloc_r+0x54>
 801957a:	4c20      	ldr	r4, [pc, #128]	; (80195fc <_malloc_r+0xb0>)
 801957c:	6823      	ldr	r3, [r4, #0]
 801957e:	b91b      	cbnz	r3, 8019588 <_malloc_r+0x3c>
 8019580:	4630      	mov	r0, r6
 8019582:	f000 f8b9 	bl	80196f8 <_sbrk_r>
 8019586:	6020      	str	r0, [r4, #0]
 8019588:	4629      	mov	r1, r5
 801958a:	4630      	mov	r0, r6
 801958c:	f000 f8b4 	bl	80196f8 <_sbrk_r>
 8019590:	1c43      	adds	r3, r0, #1
 8019592:	d124      	bne.n	80195de <_malloc_r+0x92>
 8019594:	230c      	movs	r3, #12
 8019596:	6033      	str	r3, [r6, #0]
 8019598:	4630      	mov	r0, r6
 801959a:	f000 fbb8 	bl	8019d0e <__malloc_unlock>
 801959e:	e7e4      	b.n	801956a <_malloc_r+0x1e>
 80195a0:	680b      	ldr	r3, [r1, #0]
 80195a2:	1b5b      	subs	r3, r3, r5
 80195a4:	d418      	bmi.n	80195d8 <_malloc_r+0x8c>
 80195a6:	2b0b      	cmp	r3, #11
 80195a8:	d90f      	bls.n	80195ca <_malloc_r+0x7e>
 80195aa:	600b      	str	r3, [r1, #0]
 80195ac:	50cd      	str	r5, [r1, r3]
 80195ae:	18cc      	adds	r4, r1, r3
 80195b0:	4630      	mov	r0, r6
 80195b2:	f000 fbac 	bl	8019d0e <__malloc_unlock>
 80195b6:	f104 000b 	add.w	r0, r4, #11
 80195ba:	1d23      	adds	r3, r4, #4
 80195bc:	f020 0007 	bic.w	r0, r0, #7
 80195c0:	1ac3      	subs	r3, r0, r3
 80195c2:	d0d3      	beq.n	801956c <_malloc_r+0x20>
 80195c4:	425a      	negs	r2, r3
 80195c6:	50e2      	str	r2, [r4, r3]
 80195c8:	e7d0      	b.n	801956c <_malloc_r+0x20>
 80195ca:	428c      	cmp	r4, r1
 80195cc:	684b      	ldr	r3, [r1, #4]
 80195ce:	bf16      	itet	ne
 80195d0:	6063      	strne	r3, [r4, #4]
 80195d2:	6013      	streq	r3, [r2, #0]
 80195d4:	460c      	movne	r4, r1
 80195d6:	e7eb      	b.n	80195b0 <_malloc_r+0x64>
 80195d8:	460c      	mov	r4, r1
 80195da:	6849      	ldr	r1, [r1, #4]
 80195dc:	e7cc      	b.n	8019578 <_malloc_r+0x2c>
 80195de:	1cc4      	adds	r4, r0, #3
 80195e0:	f024 0403 	bic.w	r4, r4, #3
 80195e4:	42a0      	cmp	r0, r4
 80195e6:	d005      	beq.n	80195f4 <_malloc_r+0xa8>
 80195e8:	1a21      	subs	r1, r4, r0
 80195ea:	4630      	mov	r0, r6
 80195ec:	f000 f884 	bl	80196f8 <_sbrk_r>
 80195f0:	3001      	adds	r0, #1
 80195f2:	d0cf      	beq.n	8019594 <_malloc_r+0x48>
 80195f4:	6025      	str	r5, [r4, #0]
 80195f6:	e7db      	b.n	80195b0 <_malloc_r+0x64>
 80195f8:	24000b90 	.word	0x24000b90
 80195fc:	24000b94 	.word	0x24000b94

08019600 <iprintf>:
 8019600:	b40f      	push	{r0, r1, r2, r3}
 8019602:	4b0a      	ldr	r3, [pc, #40]	; (801962c <iprintf+0x2c>)
 8019604:	b513      	push	{r0, r1, r4, lr}
 8019606:	681c      	ldr	r4, [r3, #0]
 8019608:	b124      	cbz	r4, 8019614 <iprintf+0x14>
 801960a:	69a3      	ldr	r3, [r4, #24]
 801960c:	b913      	cbnz	r3, 8019614 <iprintf+0x14>
 801960e:	4620      	mov	r0, r4
 8019610:	f000 fa8e 	bl	8019b30 <__sinit>
 8019614:	ab05      	add	r3, sp, #20
 8019616:	9a04      	ldr	r2, [sp, #16]
 8019618:	68a1      	ldr	r1, [r4, #8]
 801961a:	9301      	str	r3, [sp, #4]
 801961c:	4620      	mov	r0, r4
 801961e:	f000 fcf3 	bl	801a008 <_vfiprintf_r>
 8019622:	b002      	add	sp, #8
 8019624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019628:	b004      	add	sp, #16
 801962a:	4770      	bx	lr
 801962c:	24000178 	.word	0x24000178

08019630 <_puts_r>:
 8019630:	b570      	push	{r4, r5, r6, lr}
 8019632:	460e      	mov	r6, r1
 8019634:	4605      	mov	r5, r0
 8019636:	b118      	cbz	r0, 8019640 <_puts_r+0x10>
 8019638:	6983      	ldr	r3, [r0, #24]
 801963a:	b90b      	cbnz	r3, 8019640 <_puts_r+0x10>
 801963c:	f000 fa78 	bl	8019b30 <__sinit>
 8019640:	69ab      	ldr	r3, [r5, #24]
 8019642:	68ac      	ldr	r4, [r5, #8]
 8019644:	b913      	cbnz	r3, 801964c <_puts_r+0x1c>
 8019646:	4628      	mov	r0, r5
 8019648:	f000 fa72 	bl	8019b30 <__sinit>
 801964c:	4b23      	ldr	r3, [pc, #140]	; (80196dc <_puts_r+0xac>)
 801964e:	429c      	cmp	r4, r3
 8019650:	d117      	bne.n	8019682 <_puts_r+0x52>
 8019652:	686c      	ldr	r4, [r5, #4]
 8019654:	89a3      	ldrh	r3, [r4, #12]
 8019656:	071b      	lsls	r3, r3, #28
 8019658:	d51d      	bpl.n	8019696 <_puts_r+0x66>
 801965a:	6923      	ldr	r3, [r4, #16]
 801965c:	b1db      	cbz	r3, 8019696 <_puts_r+0x66>
 801965e:	3e01      	subs	r6, #1
 8019660:	68a3      	ldr	r3, [r4, #8]
 8019662:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019666:	3b01      	subs	r3, #1
 8019668:	60a3      	str	r3, [r4, #8]
 801966a:	b9e9      	cbnz	r1, 80196a8 <_puts_r+0x78>
 801966c:	2b00      	cmp	r3, #0
 801966e:	da2e      	bge.n	80196ce <_puts_r+0x9e>
 8019670:	4622      	mov	r2, r4
 8019672:	210a      	movs	r1, #10
 8019674:	4628      	mov	r0, r5
 8019676:	f000 f8ab 	bl	80197d0 <__swbuf_r>
 801967a:	3001      	adds	r0, #1
 801967c:	d011      	beq.n	80196a2 <_puts_r+0x72>
 801967e:	200a      	movs	r0, #10
 8019680:	e011      	b.n	80196a6 <_puts_r+0x76>
 8019682:	4b17      	ldr	r3, [pc, #92]	; (80196e0 <_puts_r+0xb0>)
 8019684:	429c      	cmp	r4, r3
 8019686:	d101      	bne.n	801968c <_puts_r+0x5c>
 8019688:	68ac      	ldr	r4, [r5, #8]
 801968a:	e7e3      	b.n	8019654 <_puts_r+0x24>
 801968c:	4b15      	ldr	r3, [pc, #84]	; (80196e4 <_puts_r+0xb4>)
 801968e:	429c      	cmp	r4, r3
 8019690:	bf08      	it	eq
 8019692:	68ec      	ldreq	r4, [r5, #12]
 8019694:	e7de      	b.n	8019654 <_puts_r+0x24>
 8019696:	4621      	mov	r1, r4
 8019698:	4628      	mov	r0, r5
 801969a:	f000 f8eb 	bl	8019874 <__swsetup_r>
 801969e:	2800      	cmp	r0, #0
 80196a0:	d0dd      	beq.n	801965e <_puts_r+0x2e>
 80196a2:	f04f 30ff 	mov.w	r0, #4294967295
 80196a6:	bd70      	pop	{r4, r5, r6, pc}
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	da04      	bge.n	80196b6 <_puts_r+0x86>
 80196ac:	69a2      	ldr	r2, [r4, #24]
 80196ae:	429a      	cmp	r2, r3
 80196b0:	dc06      	bgt.n	80196c0 <_puts_r+0x90>
 80196b2:	290a      	cmp	r1, #10
 80196b4:	d004      	beq.n	80196c0 <_puts_r+0x90>
 80196b6:	6823      	ldr	r3, [r4, #0]
 80196b8:	1c5a      	adds	r2, r3, #1
 80196ba:	6022      	str	r2, [r4, #0]
 80196bc:	7019      	strb	r1, [r3, #0]
 80196be:	e7cf      	b.n	8019660 <_puts_r+0x30>
 80196c0:	4622      	mov	r2, r4
 80196c2:	4628      	mov	r0, r5
 80196c4:	f000 f884 	bl	80197d0 <__swbuf_r>
 80196c8:	3001      	adds	r0, #1
 80196ca:	d1c9      	bne.n	8019660 <_puts_r+0x30>
 80196cc:	e7e9      	b.n	80196a2 <_puts_r+0x72>
 80196ce:	6823      	ldr	r3, [r4, #0]
 80196d0:	200a      	movs	r0, #10
 80196d2:	1c5a      	adds	r2, r3, #1
 80196d4:	6022      	str	r2, [r4, #0]
 80196d6:	7018      	strb	r0, [r3, #0]
 80196d8:	e7e5      	b.n	80196a6 <_puts_r+0x76>
 80196da:	bf00      	nop
 80196dc:	0801b064 	.word	0x0801b064
 80196e0:	0801b084 	.word	0x0801b084
 80196e4:	0801b044 	.word	0x0801b044

080196e8 <puts>:
 80196e8:	4b02      	ldr	r3, [pc, #8]	; (80196f4 <puts+0xc>)
 80196ea:	4601      	mov	r1, r0
 80196ec:	6818      	ldr	r0, [r3, #0]
 80196ee:	f7ff bf9f 	b.w	8019630 <_puts_r>
 80196f2:	bf00      	nop
 80196f4:	24000178 	.word	0x24000178

080196f8 <_sbrk_r>:
 80196f8:	b538      	push	{r3, r4, r5, lr}
 80196fa:	4c06      	ldr	r4, [pc, #24]	; (8019714 <_sbrk_r+0x1c>)
 80196fc:	2300      	movs	r3, #0
 80196fe:	4605      	mov	r5, r0
 8019700:	4608      	mov	r0, r1
 8019702:	6023      	str	r3, [r4, #0]
 8019704:	f7ea fdf8 	bl	80042f8 <_sbrk>
 8019708:	1c43      	adds	r3, r0, #1
 801970a:	d102      	bne.n	8019712 <_sbrk_r+0x1a>
 801970c:	6823      	ldr	r3, [r4, #0]
 801970e:	b103      	cbz	r3, 8019712 <_sbrk_r+0x1a>
 8019710:	602b      	str	r3, [r5, #0]
 8019712:	bd38      	pop	{r3, r4, r5, pc}
 8019714:	240024ac 	.word	0x240024ac

08019718 <sniprintf>:
 8019718:	b40c      	push	{r2, r3}
 801971a:	b530      	push	{r4, r5, lr}
 801971c:	4b17      	ldr	r3, [pc, #92]	; (801977c <sniprintf+0x64>)
 801971e:	1e0c      	subs	r4, r1, #0
 8019720:	b09d      	sub	sp, #116	; 0x74
 8019722:	681d      	ldr	r5, [r3, #0]
 8019724:	da08      	bge.n	8019738 <sniprintf+0x20>
 8019726:	238b      	movs	r3, #139	; 0x8b
 8019728:	602b      	str	r3, [r5, #0]
 801972a:	f04f 30ff 	mov.w	r0, #4294967295
 801972e:	b01d      	add	sp, #116	; 0x74
 8019730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019734:	b002      	add	sp, #8
 8019736:	4770      	bx	lr
 8019738:	f44f 7302 	mov.w	r3, #520	; 0x208
 801973c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019740:	bf14      	ite	ne
 8019742:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019746:	4623      	moveq	r3, r4
 8019748:	9304      	str	r3, [sp, #16]
 801974a:	9307      	str	r3, [sp, #28]
 801974c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019750:	9002      	str	r0, [sp, #8]
 8019752:	9006      	str	r0, [sp, #24]
 8019754:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019758:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801975a:	ab21      	add	r3, sp, #132	; 0x84
 801975c:	a902      	add	r1, sp, #8
 801975e:	4628      	mov	r0, r5
 8019760:	9301      	str	r3, [sp, #4]
 8019762:	f000 fb2f 	bl	8019dc4 <_svfiprintf_r>
 8019766:	1c43      	adds	r3, r0, #1
 8019768:	bfbc      	itt	lt
 801976a:	238b      	movlt	r3, #139	; 0x8b
 801976c:	602b      	strlt	r3, [r5, #0]
 801976e:	2c00      	cmp	r4, #0
 8019770:	d0dd      	beq.n	801972e <sniprintf+0x16>
 8019772:	9b02      	ldr	r3, [sp, #8]
 8019774:	2200      	movs	r2, #0
 8019776:	701a      	strb	r2, [r3, #0]
 8019778:	e7d9      	b.n	801972e <sniprintf+0x16>
 801977a:	bf00      	nop
 801977c:	24000178 	.word	0x24000178

08019780 <siprintf>:
 8019780:	b40e      	push	{r1, r2, r3}
 8019782:	b500      	push	{lr}
 8019784:	b09c      	sub	sp, #112	; 0x70
 8019786:	ab1d      	add	r3, sp, #116	; 0x74
 8019788:	9002      	str	r0, [sp, #8]
 801978a:	9006      	str	r0, [sp, #24]
 801978c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019790:	4809      	ldr	r0, [pc, #36]	; (80197b8 <siprintf+0x38>)
 8019792:	9107      	str	r1, [sp, #28]
 8019794:	9104      	str	r1, [sp, #16]
 8019796:	4909      	ldr	r1, [pc, #36]	; (80197bc <siprintf+0x3c>)
 8019798:	f853 2b04 	ldr.w	r2, [r3], #4
 801979c:	9105      	str	r1, [sp, #20]
 801979e:	6800      	ldr	r0, [r0, #0]
 80197a0:	9301      	str	r3, [sp, #4]
 80197a2:	a902      	add	r1, sp, #8
 80197a4:	f000 fb0e 	bl	8019dc4 <_svfiprintf_r>
 80197a8:	9b02      	ldr	r3, [sp, #8]
 80197aa:	2200      	movs	r2, #0
 80197ac:	701a      	strb	r2, [r3, #0]
 80197ae:	b01c      	add	sp, #112	; 0x70
 80197b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80197b4:	b003      	add	sp, #12
 80197b6:	4770      	bx	lr
 80197b8:	24000178 	.word	0x24000178
 80197bc:	ffff0208 	.word	0xffff0208

080197c0 <strcpy>:
 80197c0:	4603      	mov	r3, r0
 80197c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80197c6:	f803 2b01 	strb.w	r2, [r3], #1
 80197ca:	2a00      	cmp	r2, #0
 80197cc:	d1f9      	bne.n	80197c2 <strcpy+0x2>
 80197ce:	4770      	bx	lr

080197d0 <__swbuf_r>:
 80197d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197d2:	460e      	mov	r6, r1
 80197d4:	4614      	mov	r4, r2
 80197d6:	4605      	mov	r5, r0
 80197d8:	b118      	cbz	r0, 80197e2 <__swbuf_r+0x12>
 80197da:	6983      	ldr	r3, [r0, #24]
 80197dc:	b90b      	cbnz	r3, 80197e2 <__swbuf_r+0x12>
 80197de:	f000 f9a7 	bl	8019b30 <__sinit>
 80197e2:	4b21      	ldr	r3, [pc, #132]	; (8019868 <__swbuf_r+0x98>)
 80197e4:	429c      	cmp	r4, r3
 80197e6:	d12a      	bne.n	801983e <__swbuf_r+0x6e>
 80197e8:	686c      	ldr	r4, [r5, #4]
 80197ea:	69a3      	ldr	r3, [r4, #24]
 80197ec:	60a3      	str	r3, [r4, #8]
 80197ee:	89a3      	ldrh	r3, [r4, #12]
 80197f0:	071a      	lsls	r2, r3, #28
 80197f2:	d52e      	bpl.n	8019852 <__swbuf_r+0x82>
 80197f4:	6923      	ldr	r3, [r4, #16]
 80197f6:	b363      	cbz	r3, 8019852 <__swbuf_r+0x82>
 80197f8:	6923      	ldr	r3, [r4, #16]
 80197fa:	6820      	ldr	r0, [r4, #0]
 80197fc:	1ac0      	subs	r0, r0, r3
 80197fe:	6963      	ldr	r3, [r4, #20]
 8019800:	b2f6      	uxtb	r6, r6
 8019802:	4283      	cmp	r3, r0
 8019804:	4637      	mov	r7, r6
 8019806:	dc04      	bgt.n	8019812 <__swbuf_r+0x42>
 8019808:	4621      	mov	r1, r4
 801980a:	4628      	mov	r0, r5
 801980c:	f000 f926 	bl	8019a5c <_fflush_r>
 8019810:	bb28      	cbnz	r0, 801985e <__swbuf_r+0x8e>
 8019812:	68a3      	ldr	r3, [r4, #8]
 8019814:	3b01      	subs	r3, #1
 8019816:	60a3      	str	r3, [r4, #8]
 8019818:	6823      	ldr	r3, [r4, #0]
 801981a:	1c5a      	adds	r2, r3, #1
 801981c:	6022      	str	r2, [r4, #0]
 801981e:	701e      	strb	r6, [r3, #0]
 8019820:	6963      	ldr	r3, [r4, #20]
 8019822:	3001      	adds	r0, #1
 8019824:	4283      	cmp	r3, r0
 8019826:	d004      	beq.n	8019832 <__swbuf_r+0x62>
 8019828:	89a3      	ldrh	r3, [r4, #12]
 801982a:	07db      	lsls	r3, r3, #31
 801982c:	d519      	bpl.n	8019862 <__swbuf_r+0x92>
 801982e:	2e0a      	cmp	r6, #10
 8019830:	d117      	bne.n	8019862 <__swbuf_r+0x92>
 8019832:	4621      	mov	r1, r4
 8019834:	4628      	mov	r0, r5
 8019836:	f000 f911 	bl	8019a5c <_fflush_r>
 801983a:	b190      	cbz	r0, 8019862 <__swbuf_r+0x92>
 801983c:	e00f      	b.n	801985e <__swbuf_r+0x8e>
 801983e:	4b0b      	ldr	r3, [pc, #44]	; (801986c <__swbuf_r+0x9c>)
 8019840:	429c      	cmp	r4, r3
 8019842:	d101      	bne.n	8019848 <__swbuf_r+0x78>
 8019844:	68ac      	ldr	r4, [r5, #8]
 8019846:	e7d0      	b.n	80197ea <__swbuf_r+0x1a>
 8019848:	4b09      	ldr	r3, [pc, #36]	; (8019870 <__swbuf_r+0xa0>)
 801984a:	429c      	cmp	r4, r3
 801984c:	bf08      	it	eq
 801984e:	68ec      	ldreq	r4, [r5, #12]
 8019850:	e7cb      	b.n	80197ea <__swbuf_r+0x1a>
 8019852:	4621      	mov	r1, r4
 8019854:	4628      	mov	r0, r5
 8019856:	f000 f80d 	bl	8019874 <__swsetup_r>
 801985a:	2800      	cmp	r0, #0
 801985c:	d0cc      	beq.n	80197f8 <__swbuf_r+0x28>
 801985e:	f04f 37ff 	mov.w	r7, #4294967295
 8019862:	4638      	mov	r0, r7
 8019864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019866:	bf00      	nop
 8019868:	0801b064 	.word	0x0801b064
 801986c:	0801b084 	.word	0x0801b084
 8019870:	0801b044 	.word	0x0801b044

08019874 <__swsetup_r>:
 8019874:	4b32      	ldr	r3, [pc, #200]	; (8019940 <__swsetup_r+0xcc>)
 8019876:	b570      	push	{r4, r5, r6, lr}
 8019878:	681d      	ldr	r5, [r3, #0]
 801987a:	4606      	mov	r6, r0
 801987c:	460c      	mov	r4, r1
 801987e:	b125      	cbz	r5, 801988a <__swsetup_r+0x16>
 8019880:	69ab      	ldr	r3, [r5, #24]
 8019882:	b913      	cbnz	r3, 801988a <__swsetup_r+0x16>
 8019884:	4628      	mov	r0, r5
 8019886:	f000 f953 	bl	8019b30 <__sinit>
 801988a:	4b2e      	ldr	r3, [pc, #184]	; (8019944 <__swsetup_r+0xd0>)
 801988c:	429c      	cmp	r4, r3
 801988e:	d10f      	bne.n	80198b0 <__swsetup_r+0x3c>
 8019890:	686c      	ldr	r4, [r5, #4]
 8019892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019896:	b29a      	uxth	r2, r3
 8019898:	0715      	lsls	r5, r2, #28
 801989a:	d42c      	bmi.n	80198f6 <__swsetup_r+0x82>
 801989c:	06d0      	lsls	r0, r2, #27
 801989e:	d411      	bmi.n	80198c4 <__swsetup_r+0x50>
 80198a0:	2209      	movs	r2, #9
 80198a2:	6032      	str	r2, [r6, #0]
 80198a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198a8:	81a3      	strh	r3, [r4, #12]
 80198aa:	f04f 30ff 	mov.w	r0, #4294967295
 80198ae:	e03e      	b.n	801992e <__swsetup_r+0xba>
 80198b0:	4b25      	ldr	r3, [pc, #148]	; (8019948 <__swsetup_r+0xd4>)
 80198b2:	429c      	cmp	r4, r3
 80198b4:	d101      	bne.n	80198ba <__swsetup_r+0x46>
 80198b6:	68ac      	ldr	r4, [r5, #8]
 80198b8:	e7eb      	b.n	8019892 <__swsetup_r+0x1e>
 80198ba:	4b24      	ldr	r3, [pc, #144]	; (801994c <__swsetup_r+0xd8>)
 80198bc:	429c      	cmp	r4, r3
 80198be:	bf08      	it	eq
 80198c0:	68ec      	ldreq	r4, [r5, #12]
 80198c2:	e7e6      	b.n	8019892 <__swsetup_r+0x1e>
 80198c4:	0751      	lsls	r1, r2, #29
 80198c6:	d512      	bpl.n	80198ee <__swsetup_r+0x7a>
 80198c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80198ca:	b141      	cbz	r1, 80198de <__swsetup_r+0x6a>
 80198cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80198d0:	4299      	cmp	r1, r3
 80198d2:	d002      	beq.n	80198da <__swsetup_r+0x66>
 80198d4:	4630      	mov	r0, r6
 80198d6:	f7ff fdeb 	bl	80194b0 <_free_r>
 80198da:	2300      	movs	r3, #0
 80198dc:	6363      	str	r3, [r4, #52]	; 0x34
 80198de:	89a3      	ldrh	r3, [r4, #12]
 80198e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80198e4:	81a3      	strh	r3, [r4, #12]
 80198e6:	2300      	movs	r3, #0
 80198e8:	6063      	str	r3, [r4, #4]
 80198ea:	6923      	ldr	r3, [r4, #16]
 80198ec:	6023      	str	r3, [r4, #0]
 80198ee:	89a3      	ldrh	r3, [r4, #12]
 80198f0:	f043 0308 	orr.w	r3, r3, #8
 80198f4:	81a3      	strh	r3, [r4, #12]
 80198f6:	6923      	ldr	r3, [r4, #16]
 80198f8:	b94b      	cbnz	r3, 801990e <__swsetup_r+0x9a>
 80198fa:	89a3      	ldrh	r3, [r4, #12]
 80198fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019904:	d003      	beq.n	801990e <__swsetup_r+0x9a>
 8019906:	4621      	mov	r1, r4
 8019908:	4630      	mov	r0, r6
 801990a:	f000 f9bf 	bl	8019c8c <__smakebuf_r>
 801990e:	89a2      	ldrh	r2, [r4, #12]
 8019910:	f012 0301 	ands.w	r3, r2, #1
 8019914:	d00c      	beq.n	8019930 <__swsetup_r+0xbc>
 8019916:	2300      	movs	r3, #0
 8019918:	60a3      	str	r3, [r4, #8]
 801991a:	6963      	ldr	r3, [r4, #20]
 801991c:	425b      	negs	r3, r3
 801991e:	61a3      	str	r3, [r4, #24]
 8019920:	6923      	ldr	r3, [r4, #16]
 8019922:	b953      	cbnz	r3, 801993a <__swsetup_r+0xc6>
 8019924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019928:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801992c:	d1ba      	bne.n	80198a4 <__swsetup_r+0x30>
 801992e:	bd70      	pop	{r4, r5, r6, pc}
 8019930:	0792      	lsls	r2, r2, #30
 8019932:	bf58      	it	pl
 8019934:	6963      	ldrpl	r3, [r4, #20]
 8019936:	60a3      	str	r3, [r4, #8]
 8019938:	e7f2      	b.n	8019920 <__swsetup_r+0xac>
 801993a:	2000      	movs	r0, #0
 801993c:	e7f7      	b.n	801992e <__swsetup_r+0xba>
 801993e:	bf00      	nop
 8019940:	24000178 	.word	0x24000178
 8019944:	0801b064 	.word	0x0801b064
 8019948:	0801b084 	.word	0x0801b084
 801994c:	0801b044 	.word	0x0801b044

08019950 <__sflush_r>:
 8019950:	898a      	ldrh	r2, [r1, #12]
 8019952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019956:	4605      	mov	r5, r0
 8019958:	0710      	lsls	r0, r2, #28
 801995a:	460c      	mov	r4, r1
 801995c:	d458      	bmi.n	8019a10 <__sflush_r+0xc0>
 801995e:	684b      	ldr	r3, [r1, #4]
 8019960:	2b00      	cmp	r3, #0
 8019962:	dc05      	bgt.n	8019970 <__sflush_r+0x20>
 8019964:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019966:	2b00      	cmp	r3, #0
 8019968:	dc02      	bgt.n	8019970 <__sflush_r+0x20>
 801996a:	2000      	movs	r0, #0
 801996c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019972:	2e00      	cmp	r6, #0
 8019974:	d0f9      	beq.n	801996a <__sflush_r+0x1a>
 8019976:	2300      	movs	r3, #0
 8019978:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801997c:	682f      	ldr	r7, [r5, #0]
 801997e:	6a21      	ldr	r1, [r4, #32]
 8019980:	602b      	str	r3, [r5, #0]
 8019982:	d032      	beq.n	80199ea <__sflush_r+0x9a>
 8019984:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019986:	89a3      	ldrh	r3, [r4, #12]
 8019988:	075a      	lsls	r2, r3, #29
 801998a:	d505      	bpl.n	8019998 <__sflush_r+0x48>
 801998c:	6863      	ldr	r3, [r4, #4]
 801998e:	1ac0      	subs	r0, r0, r3
 8019990:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019992:	b10b      	cbz	r3, 8019998 <__sflush_r+0x48>
 8019994:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019996:	1ac0      	subs	r0, r0, r3
 8019998:	2300      	movs	r3, #0
 801999a:	4602      	mov	r2, r0
 801999c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801999e:	6a21      	ldr	r1, [r4, #32]
 80199a0:	4628      	mov	r0, r5
 80199a2:	47b0      	blx	r6
 80199a4:	1c43      	adds	r3, r0, #1
 80199a6:	89a3      	ldrh	r3, [r4, #12]
 80199a8:	d106      	bne.n	80199b8 <__sflush_r+0x68>
 80199aa:	6829      	ldr	r1, [r5, #0]
 80199ac:	291d      	cmp	r1, #29
 80199ae:	d848      	bhi.n	8019a42 <__sflush_r+0xf2>
 80199b0:	4a29      	ldr	r2, [pc, #164]	; (8019a58 <__sflush_r+0x108>)
 80199b2:	40ca      	lsrs	r2, r1
 80199b4:	07d6      	lsls	r6, r2, #31
 80199b6:	d544      	bpl.n	8019a42 <__sflush_r+0xf2>
 80199b8:	2200      	movs	r2, #0
 80199ba:	6062      	str	r2, [r4, #4]
 80199bc:	04d9      	lsls	r1, r3, #19
 80199be:	6922      	ldr	r2, [r4, #16]
 80199c0:	6022      	str	r2, [r4, #0]
 80199c2:	d504      	bpl.n	80199ce <__sflush_r+0x7e>
 80199c4:	1c42      	adds	r2, r0, #1
 80199c6:	d101      	bne.n	80199cc <__sflush_r+0x7c>
 80199c8:	682b      	ldr	r3, [r5, #0]
 80199ca:	b903      	cbnz	r3, 80199ce <__sflush_r+0x7e>
 80199cc:	6560      	str	r0, [r4, #84]	; 0x54
 80199ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80199d0:	602f      	str	r7, [r5, #0]
 80199d2:	2900      	cmp	r1, #0
 80199d4:	d0c9      	beq.n	801996a <__sflush_r+0x1a>
 80199d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80199da:	4299      	cmp	r1, r3
 80199dc:	d002      	beq.n	80199e4 <__sflush_r+0x94>
 80199de:	4628      	mov	r0, r5
 80199e0:	f7ff fd66 	bl	80194b0 <_free_r>
 80199e4:	2000      	movs	r0, #0
 80199e6:	6360      	str	r0, [r4, #52]	; 0x34
 80199e8:	e7c0      	b.n	801996c <__sflush_r+0x1c>
 80199ea:	2301      	movs	r3, #1
 80199ec:	4628      	mov	r0, r5
 80199ee:	47b0      	blx	r6
 80199f0:	1c41      	adds	r1, r0, #1
 80199f2:	d1c8      	bne.n	8019986 <__sflush_r+0x36>
 80199f4:	682b      	ldr	r3, [r5, #0]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d0c5      	beq.n	8019986 <__sflush_r+0x36>
 80199fa:	2b1d      	cmp	r3, #29
 80199fc:	d001      	beq.n	8019a02 <__sflush_r+0xb2>
 80199fe:	2b16      	cmp	r3, #22
 8019a00:	d101      	bne.n	8019a06 <__sflush_r+0xb6>
 8019a02:	602f      	str	r7, [r5, #0]
 8019a04:	e7b1      	b.n	801996a <__sflush_r+0x1a>
 8019a06:	89a3      	ldrh	r3, [r4, #12]
 8019a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a0c:	81a3      	strh	r3, [r4, #12]
 8019a0e:	e7ad      	b.n	801996c <__sflush_r+0x1c>
 8019a10:	690f      	ldr	r7, [r1, #16]
 8019a12:	2f00      	cmp	r7, #0
 8019a14:	d0a9      	beq.n	801996a <__sflush_r+0x1a>
 8019a16:	0793      	lsls	r3, r2, #30
 8019a18:	680e      	ldr	r6, [r1, #0]
 8019a1a:	bf08      	it	eq
 8019a1c:	694b      	ldreq	r3, [r1, #20]
 8019a1e:	600f      	str	r7, [r1, #0]
 8019a20:	bf18      	it	ne
 8019a22:	2300      	movne	r3, #0
 8019a24:	eba6 0807 	sub.w	r8, r6, r7
 8019a28:	608b      	str	r3, [r1, #8]
 8019a2a:	f1b8 0f00 	cmp.w	r8, #0
 8019a2e:	dd9c      	ble.n	801996a <__sflush_r+0x1a>
 8019a30:	4643      	mov	r3, r8
 8019a32:	463a      	mov	r2, r7
 8019a34:	6a21      	ldr	r1, [r4, #32]
 8019a36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019a38:	4628      	mov	r0, r5
 8019a3a:	47b0      	blx	r6
 8019a3c:	2800      	cmp	r0, #0
 8019a3e:	dc06      	bgt.n	8019a4e <__sflush_r+0xfe>
 8019a40:	89a3      	ldrh	r3, [r4, #12]
 8019a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a46:	81a3      	strh	r3, [r4, #12]
 8019a48:	f04f 30ff 	mov.w	r0, #4294967295
 8019a4c:	e78e      	b.n	801996c <__sflush_r+0x1c>
 8019a4e:	4407      	add	r7, r0
 8019a50:	eba8 0800 	sub.w	r8, r8, r0
 8019a54:	e7e9      	b.n	8019a2a <__sflush_r+0xda>
 8019a56:	bf00      	nop
 8019a58:	20400001 	.word	0x20400001

08019a5c <_fflush_r>:
 8019a5c:	b538      	push	{r3, r4, r5, lr}
 8019a5e:	690b      	ldr	r3, [r1, #16]
 8019a60:	4605      	mov	r5, r0
 8019a62:	460c      	mov	r4, r1
 8019a64:	b1db      	cbz	r3, 8019a9e <_fflush_r+0x42>
 8019a66:	b118      	cbz	r0, 8019a70 <_fflush_r+0x14>
 8019a68:	6983      	ldr	r3, [r0, #24]
 8019a6a:	b90b      	cbnz	r3, 8019a70 <_fflush_r+0x14>
 8019a6c:	f000 f860 	bl	8019b30 <__sinit>
 8019a70:	4b0c      	ldr	r3, [pc, #48]	; (8019aa4 <_fflush_r+0x48>)
 8019a72:	429c      	cmp	r4, r3
 8019a74:	d109      	bne.n	8019a8a <_fflush_r+0x2e>
 8019a76:	686c      	ldr	r4, [r5, #4]
 8019a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a7c:	b17b      	cbz	r3, 8019a9e <_fflush_r+0x42>
 8019a7e:	4621      	mov	r1, r4
 8019a80:	4628      	mov	r0, r5
 8019a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a86:	f7ff bf63 	b.w	8019950 <__sflush_r>
 8019a8a:	4b07      	ldr	r3, [pc, #28]	; (8019aa8 <_fflush_r+0x4c>)
 8019a8c:	429c      	cmp	r4, r3
 8019a8e:	d101      	bne.n	8019a94 <_fflush_r+0x38>
 8019a90:	68ac      	ldr	r4, [r5, #8]
 8019a92:	e7f1      	b.n	8019a78 <_fflush_r+0x1c>
 8019a94:	4b05      	ldr	r3, [pc, #20]	; (8019aac <_fflush_r+0x50>)
 8019a96:	429c      	cmp	r4, r3
 8019a98:	bf08      	it	eq
 8019a9a:	68ec      	ldreq	r4, [r5, #12]
 8019a9c:	e7ec      	b.n	8019a78 <_fflush_r+0x1c>
 8019a9e:	2000      	movs	r0, #0
 8019aa0:	bd38      	pop	{r3, r4, r5, pc}
 8019aa2:	bf00      	nop
 8019aa4:	0801b064 	.word	0x0801b064
 8019aa8:	0801b084 	.word	0x0801b084
 8019aac:	0801b044 	.word	0x0801b044

08019ab0 <std>:
 8019ab0:	2300      	movs	r3, #0
 8019ab2:	b510      	push	{r4, lr}
 8019ab4:	4604      	mov	r4, r0
 8019ab6:	e9c0 3300 	strd	r3, r3, [r0]
 8019aba:	6083      	str	r3, [r0, #8]
 8019abc:	8181      	strh	r1, [r0, #12]
 8019abe:	6643      	str	r3, [r0, #100]	; 0x64
 8019ac0:	81c2      	strh	r2, [r0, #14]
 8019ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019ac6:	6183      	str	r3, [r0, #24]
 8019ac8:	4619      	mov	r1, r3
 8019aca:	2208      	movs	r2, #8
 8019acc:	305c      	adds	r0, #92	; 0x5c
 8019ace:	f7ff fce6 	bl	801949e <memset>
 8019ad2:	4b05      	ldr	r3, [pc, #20]	; (8019ae8 <std+0x38>)
 8019ad4:	6263      	str	r3, [r4, #36]	; 0x24
 8019ad6:	4b05      	ldr	r3, [pc, #20]	; (8019aec <std+0x3c>)
 8019ad8:	62a3      	str	r3, [r4, #40]	; 0x28
 8019ada:	4b05      	ldr	r3, [pc, #20]	; (8019af0 <std+0x40>)
 8019adc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019ade:	4b05      	ldr	r3, [pc, #20]	; (8019af4 <std+0x44>)
 8019ae0:	6224      	str	r4, [r4, #32]
 8019ae2:	6323      	str	r3, [r4, #48]	; 0x30
 8019ae4:	bd10      	pop	{r4, pc}
 8019ae6:	bf00      	nop
 8019ae8:	0801a545 	.word	0x0801a545
 8019aec:	0801a567 	.word	0x0801a567
 8019af0:	0801a59f 	.word	0x0801a59f
 8019af4:	0801a5c3 	.word	0x0801a5c3

08019af8 <_cleanup_r>:
 8019af8:	4901      	ldr	r1, [pc, #4]	; (8019b00 <_cleanup_r+0x8>)
 8019afa:	f000 b885 	b.w	8019c08 <_fwalk_reent>
 8019afe:	bf00      	nop
 8019b00:	08019a5d 	.word	0x08019a5d

08019b04 <__sfmoreglue>:
 8019b04:	b570      	push	{r4, r5, r6, lr}
 8019b06:	1e4a      	subs	r2, r1, #1
 8019b08:	2568      	movs	r5, #104	; 0x68
 8019b0a:	4355      	muls	r5, r2
 8019b0c:	460e      	mov	r6, r1
 8019b0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019b12:	f7ff fd1b 	bl	801954c <_malloc_r>
 8019b16:	4604      	mov	r4, r0
 8019b18:	b140      	cbz	r0, 8019b2c <__sfmoreglue+0x28>
 8019b1a:	2100      	movs	r1, #0
 8019b1c:	e9c0 1600 	strd	r1, r6, [r0]
 8019b20:	300c      	adds	r0, #12
 8019b22:	60a0      	str	r0, [r4, #8]
 8019b24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019b28:	f7ff fcb9 	bl	801949e <memset>
 8019b2c:	4620      	mov	r0, r4
 8019b2e:	bd70      	pop	{r4, r5, r6, pc}

08019b30 <__sinit>:
 8019b30:	6983      	ldr	r3, [r0, #24]
 8019b32:	b510      	push	{r4, lr}
 8019b34:	4604      	mov	r4, r0
 8019b36:	bb33      	cbnz	r3, 8019b86 <__sinit+0x56>
 8019b38:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8019b3c:	6503      	str	r3, [r0, #80]	; 0x50
 8019b3e:	4b12      	ldr	r3, [pc, #72]	; (8019b88 <__sinit+0x58>)
 8019b40:	4a12      	ldr	r2, [pc, #72]	; (8019b8c <__sinit+0x5c>)
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	6282      	str	r2, [r0, #40]	; 0x28
 8019b46:	4298      	cmp	r0, r3
 8019b48:	bf04      	itt	eq
 8019b4a:	2301      	moveq	r3, #1
 8019b4c:	6183      	streq	r3, [r0, #24]
 8019b4e:	f000 f81f 	bl	8019b90 <__sfp>
 8019b52:	6060      	str	r0, [r4, #4]
 8019b54:	4620      	mov	r0, r4
 8019b56:	f000 f81b 	bl	8019b90 <__sfp>
 8019b5a:	60a0      	str	r0, [r4, #8]
 8019b5c:	4620      	mov	r0, r4
 8019b5e:	f000 f817 	bl	8019b90 <__sfp>
 8019b62:	2200      	movs	r2, #0
 8019b64:	60e0      	str	r0, [r4, #12]
 8019b66:	2104      	movs	r1, #4
 8019b68:	6860      	ldr	r0, [r4, #4]
 8019b6a:	f7ff ffa1 	bl	8019ab0 <std>
 8019b6e:	2201      	movs	r2, #1
 8019b70:	2109      	movs	r1, #9
 8019b72:	68a0      	ldr	r0, [r4, #8]
 8019b74:	f7ff ff9c 	bl	8019ab0 <std>
 8019b78:	2202      	movs	r2, #2
 8019b7a:	2112      	movs	r1, #18
 8019b7c:	68e0      	ldr	r0, [r4, #12]
 8019b7e:	f7ff ff97 	bl	8019ab0 <std>
 8019b82:	2301      	movs	r3, #1
 8019b84:	61a3      	str	r3, [r4, #24]
 8019b86:	bd10      	pop	{r4, pc}
 8019b88:	0801b040 	.word	0x0801b040
 8019b8c:	08019af9 	.word	0x08019af9

08019b90 <__sfp>:
 8019b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b92:	4b1b      	ldr	r3, [pc, #108]	; (8019c00 <__sfp+0x70>)
 8019b94:	681e      	ldr	r6, [r3, #0]
 8019b96:	69b3      	ldr	r3, [r6, #24]
 8019b98:	4607      	mov	r7, r0
 8019b9a:	b913      	cbnz	r3, 8019ba2 <__sfp+0x12>
 8019b9c:	4630      	mov	r0, r6
 8019b9e:	f7ff ffc7 	bl	8019b30 <__sinit>
 8019ba2:	3648      	adds	r6, #72	; 0x48
 8019ba4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019ba8:	3b01      	subs	r3, #1
 8019baa:	d503      	bpl.n	8019bb4 <__sfp+0x24>
 8019bac:	6833      	ldr	r3, [r6, #0]
 8019bae:	b133      	cbz	r3, 8019bbe <__sfp+0x2e>
 8019bb0:	6836      	ldr	r6, [r6, #0]
 8019bb2:	e7f7      	b.n	8019ba4 <__sfp+0x14>
 8019bb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019bb8:	b16d      	cbz	r5, 8019bd6 <__sfp+0x46>
 8019bba:	3468      	adds	r4, #104	; 0x68
 8019bbc:	e7f4      	b.n	8019ba8 <__sfp+0x18>
 8019bbe:	2104      	movs	r1, #4
 8019bc0:	4638      	mov	r0, r7
 8019bc2:	f7ff ff9f 	bl	8019b04 <__sfmoreglue>
 8019bc6:	6030      	str	r0, [r6, #0]
 8019bc8:	2800      	cmp	r0, #0
 8019bca:	d1f1      	bne.n	8019bb0 <__sfp+0x20>
 8019bcc:	230c      	movs	r3, #12
 8019bce:	603b      	str	r3, [r7, #0]
 8019bd0:	4604      	mov	r4, r0
 8019bd2:	4620      	mov	r0, r4
 8019bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bd6:	4b0b      	ldr	r3, [pc, #44]	; (8019c04 <__sfp+0x74>)
 8019bd8:	6665      	str	r5, [r4, #100]	; 0x64
 8019bda:	e9c4 5500 	strd	r5, r5, [r4]
 8019bde:	60a5      	str	r5, [r4, #8]
 8019be0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8019be4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8019be8:	2208      	movs	r2, #8
 8019bea:	4629      	mov	r1, r5
 8019bec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019bf0:	f7ff fc55 	bl	801949e <memset>
 8019bf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019bf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019bfc:	e7e9      	b.n	8019bd2 <__sfp+0x42>
 8019bfe:	bf00      	nop
 8019c00:	0801b040 	.word	0x0801b040
 8019c04:	ffff0001 	.word	0xffff0001

08019c08 <_fwalk_reent>:
 8019c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c0c:	4680      	mov	r8, r0
 8019c0e:	4689      	mov	r9, r1
 8019c10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019c14:	2600      	movs	r6, #0
 8019c16:	b914      	cbnz	r4, 8019c1e <_fwalk_reent+0x16>
 8019c18:	4630      	mov	r0, r6
 8019c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8019c22:	3f01      	subs	r7, #1
 8019c24:	d501      	bpl.n	8019c2a <_fwalk_reent+0x22>
 8019c26:	6824      	ldr	r4, [r4, #0]
 8019c28:	e7f5      	b.n	8019c16 <_fwalk_reent+0xe>
 8019c2a:	89ab      	ldrh	r3, [r5, #12]
 8019c2c:	2b01      	cmp	r3, #1
 8019c2e:	d907      	bls.n	8019c40 <_fwalk_reent+0x38>
 8019c30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019c34:	3301      	adds	r3, #1
 8019c36:	d003      	beq.n	8019c40 <_fwalk_reent+0x38>
 8019c38:	4629      	mov	r1, r5
 8019c3a:	4640      	mov	r0, r8
 8019c3c:	47c8      	blx	r9
 8019c3e:	4306      	orrs	r6, r0
 8019c40:	3568      	adds	r5, #104	; 0x68
 8019c42:	e7ee      	b.n	8019c22 <_fwalk_reent+0x1a>

08019c44 <__swhatbuf_r>:
 8019c44:	b570      	push	{r4, r5, r6, lr}
 8019c46:	460e      	mov	r6, r1
 8019c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c4c:	2900      	cmp	r1, #0
 8019c4e:	b096      	sub	sp, #88	; 0x58
 8019c50:	4614      	mov	r4, r2
 8019c52:	461d      	mov	r5, r3
 8019c54:	da07      	bge.n	8019c66 <__swhatbuf_r+0x22>
 8019c56:	2300      	movs	r3, #0
 8019c58:	602b      	str	r3, [r5, #0]
 8019c5a:	89b3      	ldrh	r3, [r6, #12]
 8019c5c:	061a      	lsls	r2, r3, #24
 8019c5e:	d410      	bmi.n	8019c82 <__swhatbuf_r+0x3e>
 8019c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019c64:	e00e      	b.n	8019c84 <__swhatbuf_r+0x40>
 8019c66:	466a      	mov	r2, sp
 8019c68:	f000 fcd2 	bl	801a610 <_fstat_r>
 8019c6c:	2800      	cmp	r0, #0
 8019c6e:	dbf2      	blt.n	8019c56 <__swhatbuf_r+0x12>
 8019c70:	9a01      	ldr	r2, [sp, #4]
 8019c72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019c76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019c7a:	425a      	negs	r2, r3
 8019c7c:	415a      	adcs	r2, r3
 8019c7e:	602a      	str	r2, [r5, #0]
 8019c80:	e7ee      	b.n	8019c60 <__swhatbuf_r+0x1c>
 8019c82:	2340      	movs	r3, #64	; 0x40
 8019c84:	2000      	movs	r0, #0
 8019c86:	6023      	str	r3, [r4, #0]
 8019c88:	b016      	add	sp, #88	; 0x58
 8019c8a:	bd70      	pop	{r4, r5, r6, pc}

08019c8c <__smakebuf_r>:
 8019c8c:	898b      	ldrh	r3, [r1, #12]
 8019c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019c90:	079d      	lsls	r5, r3, #30
 8019c92:	4606      	mov	r6, r0
 8019c94:	460c      	mov	r4, r1
 8019c96:	d507      	bpl.n	8019ca8 <__smakebuf_r+0x1c>
 8019c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019c9c:	6023      	str	r3, [r4, #0]
 8019c9e:	6123      	str	r3, [r4, #16]
 8019ca0:	2301      	movs	r3, #1
 8019ca2:	6163      	str	r3, [r4, #20]
 8019ca4:	b002      	add	sp, #8
 8019ca6:	bd70      	pop	{r4, r5, r6, pc}
 8019ca8:	ab01      	add	r3, sp, #4
 8019caa:	466a      	mov	r2, sp
 8019cac:	f7ff ffca 	bl	8019c44 <__swhatbuf_r>
 8019cb0:	9900      	ldr	r1, [sp, #0]
 8019cb2:	4605      	mov	r5, r0
 8019cb4:	4630      	mov	r0, r6
 8019cb6:	f7ff fc49 	bl	801954c <_malloc_r>
 8019cba:	b948      	cbnz	r0, 8019cd0 <__smakebuf_r+0x44>
 8019cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019cc0:	059a      	lsls	r2, r3, #22
 8019cc2:	d4ef      	bmi.n	8019ca4 <__smakebuf_r+0x18>
 8019cc4:	f023 0303 	bic.w	r3, r3, #3
 8019cc8:	f043 0302 	orr.w	r3, r3, #2
 8019ccc:	81a3      	strh	r3, [r4, #12]
 8019cce:	e7e3      	b.n	8019c98 <__smakebuf_r+0xc>
 8019cd0:	4b0d      	ldr	r3, [pc, #52]	; (8019d08 <__smakebuf_r+0x7c>)
 8019cd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8019cd4:	89a3      	ldrh	r3, [r4, #12]
 8019cd6:	6020      	str	r0, [r4, #0]
 8019cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019cdc:	81a3      	strh	r3, [r4, #12]
 8019cde:	9b00      	ldr	r3, [sp, #0]
 8019ce0:	6163      	str	r3, [r4, #20]
 8019ce2:	9b01      	ldr	r3, [sp, #4]
 8019ce4:	6120      	str	r0, [r4, #16]
 8019ce6:	b15b      	cbz	r3, 8019d00 <__smakebuf_r+0x74>
 8019ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019cec:	4630      	mov	r0, r6
 8019cee:	f000 fca1 	bl	801a634 <_isatty_r>
 8019cf2:	b128      	cbz	r0, 8019d00 <__smakebuf_r+0x74>
 8019cf4:	89a3      	ldrh	r3, [r4, #12]
 8019cf6:	f023 0303 	bic.w	r3, r3, #3
 8019cfa:	f043 0301 	orr.w	r3, r3, #1
 8019cfe:	81a3      	strh	r3, [r4, #12]
 8019d00:	89a3      	ldrh	r3, [r4, #12]
 8019d02:	431d      	orrs	r5, r3
 8019d04:	81a5      	strh	r5, [r4, #12]
 8019d06:	e7cd      	b.n	8019ca4 <__smakebuf_r+0x18>
 8019d08:	08019af9 	.word	0x08019af9

08019d0c <__malloc_lock>:
 8019d0c:	4770      	bx	lr

08019d0e <__malloc_unlock>:
 8019d0e:	4770      	bx	lr

08019d10 <__ssputs_r>:
 8019d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d14:	688e      	ldr	r6, [r1, #8]
 8019d16:	429e      	cmp	r6, r3
 8019d18:	4682      	mov	sl, r0
 8019d1a:	460c      	mov	r4, r1
 8019d1c:	4690      	mov	r8, r2
 8019d1e:	4699      	mov	r9, r3
 8019d20:	d837      	bhi.n	8019d92 <__ssputs_r+0x82>
 8019d22:	898a      	ldrh	r2, [r1, #12]
 8019d24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019d28:	d031      	beq.n	8019d8e <__ssputs_r+0x7e>
 8019d2a:	6825      	ldr	r5, [r4, #0]
 8019d2c:	6909      	ldr	r1, [r1, #16]
 8019d2e:	1a6f      	subs	r7, r5, r1
 8019d30:	6965      	ldr	r5, [r4, #20]
 8019d32:	2302      	movs	r3, #2
 8019d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d38:	fb95 f5f3 	sdiv	r5, r5, r3
 8019d3c:	f109 0301 	add.w	r3, r9, #1
 8019d40:	443b      	add	r3, r7
 8019d42:	429d      	cmp	r5, r3
 8019d44:	bf38      	it	cc
 8019d46:	461d      	movcc	r5, r3
 8019d48:	0553      	lsls	r3, r2, #21
 8019d4a:	d530      	bpl.n	8019dae <__ssputs_r+0x9e>
 8019d4c:	4629      	mov	r1, r5
 8019d4e:	f7ff fbfd 	bl	801954c <_malloc_r>
 8019d52:	4606      	mov	r6, r0
 8019d54:	b950      	cbnz	r0, 8019d6c <__ssputs_r+0x5c>
 8019d56:	230c      	movs	r3, #12
 8019d58:	f8ca 3000 	str.w	r3, [sl]
 8019d5c:	89a3      	ldrh	r3, [r4, #12]
 8019d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d62:	81a3      	strh	r3, [r4, #12]
 8019d64:	f04f 30ff 	mov.w	r0, #4294967295
 8019d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d6c:	463a      	mov	r2, r7
 8019d6e:	6921      	ldr	r1, [r4, #16]
 8019d70:	f7ff fb8a 	bl	8019488 <memcpy>
 8019d74:	89a3      	ldrh	r3, [r4, #12]
 8019d76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d7e:	81a3      	strh	r3, [r4, #12]
 8019d80:	6126      	str	r6, [r4, #16]
 8019d82:	6165      	str	r5, [r4, #20]
 8019d84:	443e      	add	r6, r7
 8019d86:	1bed      	subs	r5, r5, r7
 8019d88:	6026      	str	r6, [r4, #0]
 8019d8a:	60a5      	str	r5, [r4, #8]
 8019d8c:	464e      	mov	r6, r9
 8019d8e:	454e      	cmp	r6, r9
 8019d90:	d900      	bls.n	8019d94 <__ssputs_r+0x84>
 8019d92:	464e      	mov	r6, r9
 8019d94:	4632      	mov	r2, r6
 8019d96:	4641      	mov	r1, r8
 8019d98:	6820      	ldr	r0, [r4, #0]
 8019d9a:	f000 fc6d 	bl	801a678 <memmove>
 8019d9e:	68a3      	ldr	r3, [r4, #8]
 8019da0:	1b9b      	subs	r3, r3, r6
 8019da2:	60a3      	str	r3, [r4, #8]
 8019da4:	6823      	ldr	r3, [r4, #0]
 8019da6:	441e      	add	r6, r3
 8019da8:	6026      	str	r6, [r4, #0]
 8019daa:	2000      	movs	r0, #0
 8019dac:	e7dc      	b.n	8019d68 <__ssputs_r+0x58>
 8019dae:	462a      	mov	r2, r5
 8019db0:	f000 fc7b 	bl	801a6aa <_realloc_r>
 8019db4:	4606      	mov	r6, r0
 8019db6:	2800      	cmp	r0, #0
 8019db8:	d1e2      	bne.n	8019d80 <__ssputs_r+0x70>
 8019dba:	6921      	ldr	r1, [r4, #16]
 8019dbc:	4650      	mov	r0, sl
 8019dbe:	f7ff fb77 	bl	80194b0 <_free_r>
 8019dc2:	e7c8      	b.n	8019d56 <__ssputs_r+0x46>

08019dc4 <_svfiprintf_r>:
 8019dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dc8:	461d      	mov	r5, r3
 8019dca:	898b      	ldrh	r3, [r1, #12]
 8019dcc:	061f      	lsls	r7, r3, #24
 8019dce:	b09d      	sub	sp, #116	; 0x74
 8019dd0:	4680      	mov	r8, r0
 8019dd2:	460c      	mov	r4, r1
 8019dd4:	4616      	mov	r6, r2
 8019dd6:	d50f      	bpl.n	8019df8 <_svfiprintf_r+0x34>
 8019dd8:	690b      	ldr	r3, [r1, #16]
 8019dda:	b96b      	cbnz	r3, 8019df8 <_svfiprintf_r+0x34>
 8019ddc:	2140      	movs	r1, #64	; 0x40
 8019dde:	f7ff fbb5 	bl	801954c <_malloc_r>
 8019de2:	6020      	str	r0, [r4, #0]
 8019de4:	6120      	str	r0, [r4, #16]
 8019de6:	b928      	cbnz	r0, 8019df4 <_svfiprintf_r+0x30>
 8019de8:	230c      	movs	r3, #12
 8019dea:	f8c8 3000 	str.w	r3, [r8]
 8019dee:	f04f 30ff 	mov.w	r0, #4294967295
 8019df2:	e0c8      	b.n	8019f86 <_svfiprintf_r+0x1c2>
 8019df4:	2340      	movs	r3, #64	; 0x40
 8019df6:	6163      	str	r3, [r4, #20]
 8019df8:	2300      	movs	r3, #0
 8019dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8019dfc:	2320      	movs	r3, #32
 8019dfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e02:	2330      	movs	r3, #48	; 0x30
 8019e04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e08:	9503      	str	r5, [sp, #12]
 8019e0a:	f04f 0b01 	mov.w	fp, #1
 8019e0e:	4637      	mov	r7, r6
 8019e10:	463d      	mov	r5, r7
 8019e12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019e16:	b10b      	cbz	r3, 8019e1c <_svfiprintf_r+0x58>
 8019e18:	2b25      	cmp	r3, #37	; 0x25
 8019e1a:	d13e      	bne.n	8019e9a <_svfiprintf_r+0xd6>
 8019e1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8019e20:	d00b      	beq.n	8019e3a <_svfiprintf_r+0x76>
 8019e22:	4653      	mov	r3, sl
 8019e24:	4632      	mov	r2, r6
 8019e26:	4621      	mov	r1, r4
 8019e28:	4640      	mov	r0, r8
 8019e2a:	f7ff ff71 	bl	8019d10 <__ssputs_r>
 8019e2e:	3001      	adds	r0, #1
 8019e30:	f000 80a4 	beq.w	8019f7c <_svfiprintf_r+0x1b8>
 8019e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e36:	4453      	add	r3, sl
 8019e38:	9309      	str	r3, [sp, #36]	; 0x24
 8019e3a:	783b      	ldrb	r3, [r7, #0]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	f000 809d 	beq.w	8019f7c <_svfiprintf_r+0x1b8>
 8019e42:	2300      	movs	r3, #0
 8019e44:	f04f 32ff 	mov.w	r2, #4294967295
 8019e48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e4c:	9304      	str	r3, [sp, #16]
 8019e4e:	9307      	str	r3, [sp, #28]
 8019e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019e54:	931a      	str	r3, [sp, #104]	; 0x68
 8019e56:	462f      	mov	r7, r5
 8019e58:	2205      	movs	r2, #5
 8019e5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019e5e:	4850      	ldr	r0, [pc, #320]	; (8019fa0 <_svfiprintf_r+0x1dc>)
 8019e60:	f7e6 fa46 	bl	80002f0 <memchr>
 8019e64:	9b04      	ldr	r3, [sp, #16]
 8019e66:	b9d0      	cbnz	r0, 8019e9e <_svfiprintf_r+0xda>
 8019e68:	06d9      	lsls	r1, r3, #27
 8019e6a:	bf44      	itt	mi
 8019e6c:	2220      	movmi	r2, #32
 8019e6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019e72:	071a      	lsls	r2, r3, #28
 8019e74:	bf44      	itt	mi
 8019e76:	222b      	movmi	r2, #43	; 0x2b
 8019e78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019e7c:	782a      	ldrb	r2, [r5, #0]
 8019e7e:	2a2a      	cmp	r2, #42	; 0x2a
 8019e80:	d015      	beq.n	8019eae <_svfiprintf_r+0xea>
 8019e82:	9a07      	ldr	r2, [sp, #28]
 8019e84:	462f      	mov	r7, r5
 8019e86:	2000      	movs	r0, #0
 8019e88:	250a      	movs	r5, #10
 8019e8a:	4639      	mov	r1, r7
 8019e8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019e90:	3b30      	subs	r3, #48	; 0x30
 8019e92:	2b09      	cmp	r3, #9
 8019e94:	d94d      	bls.n	8019f32 <_svfiprintf_r+0x16e>
 8019e96:	b1b8      	cbz	r0, 8019ec8 <_svfiprintf_r+0x104>
 8019e98:	e00f      	b.n	8019eba <_svfiprintf_r+0xf6>
 8019e9a:	462f      	mov	r7, r5
 8019e9c:	e7b8      	b.n	8019e10 <_svfiprintf_r+0x4c>
 8019e9e:	4a40      	ldr	r2, [pc, #256]	; (8019fa0 <_svfiprintf_r+0x1dc>)
 8019ea0:	1a80      	subs	r0, r0, r2
 8019ea2:	fa0b f000 	lsl.w	r0, fp, r0
 8019ea6:	4318      	orrs	r0, r3
 8019ea8:	9004      	str	r0, [sp, #16]
 8019eaa:	463d      	mov	r5, r7
 8019eac:	e7d3      	b.n	8019e56 <_svfiprintf_r+0x92>
 8019eae:	9a03      	ldr	r2, [sp, #12]
 8019eb0:	1d11      	adds	r1, r2, #4
 8019eb2:	6812      	ldr	r2, [r2, #0]
 8019eb4:	9103      	str	r1, [sp, #12]
 8019eb6:	2a00      	cmp	r2, #0
 8019eb8:	db01      	blt.n	8019ebe <_svfiprintf_r+0xfa>
 8019eba:	9207      	str	r2, [sp, #28]
 8019ebc:	e004      	b.n	8019ec8 <_svfiprintf_r+0x104>
 8019ebe:	4252      	negs	r2, r2
 8019ec0:	f043 0302 	orr.w	r3, r3, #2
 8019ec4:	9207      	str	r2, [sp, #28]
 8019ec6:	9304      	str	r3, [sp, #16]
 8019ec8:	783b      	ldrb	r3, [r7, #0]
 8019eca:	2b2e      	cmp	r3, #46	; 0x2e
 8019ecc:	d10c      	bne.n	8019ee8 <_svfiprintf_r+0x124>
 8019ece:	787b      	ldrb	r3, [r7, #1]
 8019ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8019ed2:	d133      	bne.n	8019f3c <_svfiprintf_r+0x178>
 8019ed4:	9b03      	ldr	r3, [sp, #12]
 8019ed6:	1d1a      	adds	r2, r3, #4
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	9203      	str	r2, [sp, #12]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	bfb8      	it	lt
 8019ee0:	f04f 33ff 	movlt.w	r3, #4294967295
 8019ee4:	3702      	adds	r7, #2
 8019ee6:	9305      	str	r3, [sp, #20]
 8019ee8:	4d2e      	ldr	r5, [pc, #184]	; (8019fa4 <_svfiprintf_r+0x1e0>)
 8019eea:	7839      	ldrb	r1, [r7, #0]
 8019eec:	2203      	movs	r2, #3
 8019eee:	4628      	mov	r0, r5
 8019ef0:	f7e6 f9fe 	bl	80002f0 <memchr>
 8019ef4:	b138      	cbz	r0, 8019f06 <_svfiprintf_r+0x142>
 8019ef6:	2340      	movs	r3, #64	; 0x40
 8019ef8:	1b40      	subs	r0, r0, r5
 8019efa:	fa03 f000 	lsl.w	r0, r3, r0
 8019efe:	9b04      	ldr	r3, [sp, #16]
 8019f00:	4303      	orrs	r3, r0
 8019f02:	3701      	adds	r7, #1
 8019f04:	9304      	str	r3, [sp, #16]
 8019f06:	7839      	ldrb	r1, [r7, #0]
 8019f08:	4827      	ldr	r0, [pc, #156]	; (8019fa8 <_svfiprintf_r+0x1e4>)
 8019f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f0e:	2206      	movs	r2, #6
 8019f10:	1c7e      	adds	r6, r7, #1
 8019f12:	f7e6 f9ed 	bl	80002f0 <memchr>
 8019f16:	2800      	cmp	r0, #0
 8019f18:	d038      	beq.n	8019f8c <_svfiprintf_r+0x1c8>
 8019f1a:	4b24      	ldr	r3, [pc, #144]	; (8019fac <_svfiprintf_r+0x1e8>)
 8019f1c:	bb13      	cbnz	r3, 8019f64 <_svfiprintf_r+0x1a0>
 8019f1e:	9b03      	ldr	r3, [sp, #12]
 8019f20:	3307      	adds	r3, #7
 8019f22:	f023 0307 	bic.w	r3, r3, #7
 8019f26:	3308      	adds	r3, #8
 8019f28:	9303      	str	r3, [sp, #12]
 8019f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f2c:	444b      	add	r3, r9
 8019f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8019f30:	e76d      	b.n	8019e0e <_svfiprintf_r+0x4a>
 8019f32:	fb05 3202 	mla	r2, r5, r2, r3
 8019f36:	2001      	movs	r0, #1
 8019f38:	460f      	mov	r7, r1
 8019f3a:	e7a6      	b.n	8019e8a <_svfiprintf_r+0xc6>
 8019f3c:	2300      	movs	r3, #0
 8019f3e:	3701      	adds	r7, #1
 8019f40:	9305      	str	r3, [sp, #20]
 8019f42:	4619      	mov	r1, r3
 8019f44:	250a      	movs	r5, #10
 8019f46:	4638      	mov	r0, r7
 8019f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f4c:	3a30      	subs	r2, #48	; 0x30
 8019f4e:	2a09      	cmp	r2, #9
 8019f50:	d903      	bls.n	8019f5a <_svfiprintf_r+0x196>
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d0c8      	beq.n	8019ee8 <_svfiprintf_r+0x124>
 8019f56:	9105      	str	r1, [sp, #20]
 8019f58:	e7c6      	b.n	8019ee8 <_svfiprintf_r+0x124>
 8019f5a:	fb05 2101 	mla	r1, r5, r1, r2
 8019f5e:	2301      	movs	r3, #1
 8019f60:	4607      	mov	r7, r0
 8019f62:	e7f0      	b.n	8019f46 <_svfiprintf_r+0x182>
 8019f64:	ab03      	add	r3, sp, #12
 8019f66:	9300      	str	r3, [sp, #0]
 8019f68:	4622      	mov	r2, r4
 8019f6a:	4b11      	ldr	r3, [pc, #68]	; (8019fb0 <_svfiprintf_r+0x1ec>)
 8019f6c:	a904      	add	r1, sp, #16
 8019f6e:	4640      	mov	r0, r8
 8019f70:	f3af 8000 	nop.w
 8019f74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019f78:	4681      	mov	r9, r0
 8019f7a:	d1d6      	bne.n	8019f2a <_svfiprintf_r+0x166>
 8019f7c:	89a3      	ldrh	r3, [r4, #12]
 8019f7e:	065b      	lsls	r3, r3, #25
 8019f80:	f53f af35 	bmi.w	8019dee <_svfiprintf_r+0x2a>
 8019f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019f86:	b01d      	add	sp, #116	; 0x74
 8019f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f8c:	ab03      	add	r3, sp, #12
 8019f8e:	9300      	str	r3, [sp, #0]
 8019f90:	4622      	mov	r2, r4
 8019f92:	4b07      	ldr	r3, [pc, #28]	; (8019fb0 <_svfiprintf_r+0x1ec>)
 8019f94:	a904      	add	r1, sp, #16
 8019f96:	4640      	mov	r0, r8
 8019f98:	f000 f9c2 	bl	801a320 <_printf_i>
 8019f9c:	e7ea      	b.n	8019f74 <_svfiprintf_r+0x1b0>
 8019f9e:	bf00      	nop
 8019fa0:	0801b0a4 	.word	0x0801b0a4
 8019fa4:	0801b0aa 	.word	0x0801b0aa
 8019fa8:	0801b0ae 	.word	0x0801b0ae
 8019fac:	00000000 	.word	0x00000000
 8019fb0:	08019d11 	.word	0x08019d11

08019fb4 <__sfputc_r>:
 8019fb4:	6893      	ldr	r3, [r2, #8]
 8019fb6:	3b01      	subs	r3, #1
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	b410      	push	{r4}
 8019fbc:	6093      	str	r3, [r2, #8]
 8019fbe:	da08      	bge.n	8019fd2 <__sfputc_r+0x1e>
 8019fc0:	6994      	ldr	r4, [r2, #24]
 8019fc2:	42a3      	cmp	r3, r4
 8019fc4:	db01      	blt.n	8019fca <__sfputc_r+0x16>
 8019fc6:	290a      	cmp	r1, #10
 8019fc8:	d103      	bne.n	8019fd2 <__sfputc_r+0x1e>
 8019fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fce:	f7ff bbff 	b.w	80197d0 <__swbuf_r>
 8019fd2:	6813      	ldr	r3, [r2, #0]
 8019fd4:	1c58      	adds	r0, r3, #1
 8019fd6:	6010      	str	r0, [r2, #0]
 8019fd8:	7019      	strb	r1, [r3, #0]
 8019fda:	4608      	mov	r0, r1
 8019fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fe0:	4770      	bx	lr

08019fe2 <__sfputs_r>:
 8019fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fe4:	4606      	mov	r6, r0
 8019fe6:	460f      	mov	r7, r1
 8019fe8:	4614      	mov	r4, r2
 8019fea:	18d5      	adds	r5, r2, r3
 8019fec:	42ac      	cmp	r4, r5
 8019fee:	d101      	bne.n	8019ff4 <__sfputs_r+0x12>
 8019ff0:	2000      	movs	r0, #0
 8019ff2:	e007      	b.n	801a004 <__sfputs_r+0x22>
 8019ff4:	463a      	mov	r2, r7
 8019ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ffa:	4630      	mov	r0, r6
 8019ffc:	f7ff ffda 	bl	8019fb4 <__sfputc_r>
 801a000:	1c43      	adds	r3, r0, #1
 801a002:	d1f3      	bne.n	8019fec <__sfputs_r+0xa>
 801a004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a008 <_vfiprintf_r>:
 801a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a00c:	460c      	mov	r4, r1
 801a00e:	b09d      	sub	sp, #116	; 0x74
 801a010:	4617      	mov	r7, r2
 801a012:	461d      	mov	r5, r3
 801a014:	4606      	mov	r6, r0
 801a016:	b118      	cbz	r0, 801a020 <_vfiprintf_r+0x18>
 801a018:	6983      	ldr	r3, [r0, #24]
 801a01a:	b90b      	cbnz	r3, 801a020 <_vfiprintf_r+0x18>
 801a01c:	f7ff fd88 	bl	8019b30 <__sinit>
 801a020:	4b7c      	ldr	r3, [pc, #496]	; (801a214 <_vfiprintf_r+0x20c>)
 801a022:	429c      	cmp	r4, r3
 801a024:	d158      	bne.n	801a0d8 <_vfiprintf_r+0xd0>
 801a026:	6874      	ldr	r4, [r6, #4]
 801a028:	89a3      	ldrh	r3, [r4, #12]
 801a02a:	0718      	lsls	r0, r3, #28
 801a02c:	d55e      	bpl.n	801a0ec <_vfiprintf_r+0xe4>
 801a02e:	6923      	ldr	r3, [r4, #16]
 801a030:	2b00      	cmp	r3, #0
 801a032:	d05b      	beq.n	801a0ec <_vfiprintf_r+0xe4>
 801a034:	2300      	movs	r3, #0
 801a036:	9309      	str	r3, [sp, #36]	; 0x24
 801a038:	2320      	movs	r3, #32
 801a03a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a03e:	2330      	movs	r3, #48	; 0x30
 801a040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a044:	9503      	str	r5, [sp, #12]
 801a046:	f04f 0b01 	mov.w	fp, #1
 801a04a:	46b8      	mov	r8, r7
 801a04c:	4645      	mov	r5, r8
 801a04e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a052:	b10b      	cbz	r3, 801a058 <_vfiprintf_r+0x50>
 801a054:	2b25      	cmp	r3, #37	; 0x25
 801a056:	d154      	bne.n	801a102 <_vfiprintf_r+0xfa>
 801a058:	ebb8 0a07 	subs.w	sl, r8, r7
 801a05c:	d00b      	beq.n	801a076 <_vfiprintf_r+0x6e>
 801a05e:	4653      	mov	r3, sl
 801a060:	463a      	mov	r2, r7
 801a062:	4621      	mov	r1, r4
 801a064:	4630      	mov	r0, r6
 801a066:	f7ff ffbc 	bl	8019fe2 <__sfputs_r>
 801a06a:	3001      	adds	r0, #1
 801a06c:	f000 80c2 	beq.w	801a1f4 <_vfiprintf_r+0x1ec>
 801a070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a072:	4453      	add	r3, sl
 801a074:	9309      	str	r3, [sp, #36]	; 0x24
 801a076:	f898 3000 	ldrb.w	r3, [r8]
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	f000 80ba 	beq.w	801a1f4 <_vfiprintf_r+0x1ec>
 801a080:	2300      	movs	r3, #0
 801a082:	f04f 32ff 	mov.w	r2, #4294967295
 801a086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a08a:	9304      	str	r3, [sp, #16]
 801a08c:	9307      	str	r3, [sp, #28]
 801a08e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a092:	931a      	str	r3, [sp, #104]	; 0x68
 801a094:	46a8      	mov	r8, r5
 801a096:	2205      	movs	r2, #5
 801a098:	f818 1b01 	ldrb.w	r1, [r8], #1
 801a09c:	485e      	ldr	r0, [pc, #376]	; (801a218 <_vfiprintf_r+0x210>)
 801a09e:	f7e6 f927 	bl	80002f0 <memchr>
 801a0a2:	9b04      	ldr	r3, [sp, #16]
 801a0a4:	bb78      	cbnz	r0, 801a106 <_vfiprintf_r+0xfe>
 801a0a6:	06d9      	lsls	r1, r3, #27
 801a0a8:	bf44      	itt	mi
 801a0aa:	2220      	movmi	r2, #32
 801a0ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a0b0:	071a      	lsls	r2, r3, #28
 801a0b2:	bf44      	itt	mi
 801a0b4:	222b      	movmi	r2, #43	; 0x2b
 801a0b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a0ba:	782a      	ldrb	r2, [r5, #0]
 801a0bc:	2a2a      	cmp	r2, #42	; 0x2a
 801a0be:	d02a      	beq.n	801a116 <_vfiprintf_r+0x10e>
 801a0c0:	9a07      	ldr	r2, [sp, #28]
 801a0c2:	46a8      	mov	r8, r5
 801a0c4:	2000      	movs	r0, #0
 801a0c6:	250a      	movs	r5, #10
 801a0c8:	4641      	mov	r1, r8
 801a0ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a0ce:	3b30      	subs	r3, #48	; 0x30
 801a0d0:	2b09      	cmp	r3, #9
 801a0d2:	d969      	bls.n	801a1a8 <_vfiprintf_r+0x1a0>
 801a0d4:	b360      	cbz	r0, 801a130 <_vfiprintf_r+0x128>
 801a0d6:	e024      	b.n	801a122 <_vfiprintf_r+0x11a>
 801a0d8:	4b50      	ldr	r3, [pc, #320]	; (801a21c <_vfiprintf_r+0x214>)
 801a0da:	429c      	cmp	r4, r3
 801a0dc:	d101      	bne.n	801a0e2 <_vfiprintf_r+0xda>
 801a0de:	68b4      	ldr	r4, [r6, #8]
 801a0e0:	e7a2      	b.n	801a028 <_vfiprintf_r+0x20>
 801a0e2:	4b4f      	ldr	r3, [pc, #316]	; (801a220 <_vfiprintf_r+0x218>)
 801a0e4:	429c      	cmp	r4, r3
 801a0e6:	bf08      	it	eq
 801a0e8:	68f4      	ldreq	r4, [r6, #12]
 801a0ea:	e79d      	b.n	801a028 <_vfiprintf_r+0x20>
 801a0ec:	4621      	mov	r1, r4
 801a0ee:	4630      	mov	r0, r6
 801a0f0:	f7ff fbc0 	bl	8019874 <__swsetup_r>
 801a0f4:	2800      	cmp	r0, #0
 801a0f6:	d09d      	beq.n	801a034 <_vfiprintf_r+0x2c>
 801a0f8:	f04f 30ff 	mov.w	r0, #4294967295
 801a0fc:	b01d      	add	sp, #116	; 0x74
 801a0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a102:	46a8      	mov	r8, r5
 801a104:	e7a2      	b.n	801a04c <_vfiprintf_r+0x44>
 801a106:	4a44      	ldr	r2, [pc, #272]	; (801a218 <_vfiprintf_r+0x210>)
 801a108:	1a80      	subs	r0, r0, r2
 801a10a:	fa0b f000 	lsl.w	r0, fp, r0
 801a10e:	4318      	orrs	r0, r3
 801a110:	9004      	str	r0, [sp, #16]
 801a112:	4645      	mov	r5, r8
 801a114:	e7be      	b.n	801a094 <_vfiprintf_r+0x8c>
 801a116:	9a03      	ldr	r2, [sp, #12]
 801a118:	1d11      	adds	r1, r2, #4
 801a11a:	6812      	ldr	r2, [r2, #0]
 801a11c:	9103      	str	r1, [sp, #12]
 801a11e:	2a00      	cmp	r2, #0
 801a120:	db01      	blt.n	801a126 <_vfiprintf_r+0x11e>
 801a122:	9207      	str	r2, [sp, #28]
 801a124:	e004      	b.n	801a130 <_vfiprintf_r+0x128>
 801a126:	4252      	negs	r2, r2
 801a128:	f043 0302 	orr.w	r3, r3, #2
 801a12c:	9207      	str	r2, [sp, #28]
 801a12e:	9304      	str	r3, [sp, #16]
 801a130:	f898 3000 	ldrb.w	r3, [r8]
 801a134:	2b2e      	cmp	r3, #46	; 0x2e
 801a136:	d10e      	bne.n	801a156 <_vfiprintf_r+0x14e>
 801a138:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a13c:	2b2a      	cmp	r3, #42	; 0x2a
 801a13e:	d138      	bne.n	801a1b2 <_vfiprintf_r+0x1aa>
 801a140:	9b03      	ldr	r3, [sp, #12]
 801a142:	1d1a      	adds	r2, r3, #4
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	9203      	str	r2, [sp, #12]
 801a148:	2b00      	cmp	r3, #0
 801a14a:	bfb8      	it	lt
 801a14c:	f04f 33ff 	movlt.w	r3, #4294967295
 801a150:	f108 0802 	add.w	r8, r8, #2
 801a154:	9305      	str	r3, [sp, #20]
 801a156:	4d33      	ldr	r5, [pc, #204]	; (801a224 <_vfiprintf_r+0x21c>)
 801a158:	f898 1000 	ldrb.w	r1, [r8]
 801a15c:	2203      	movs	r2, #3
 801a15e:	4628      	mov	r0, r5
 801a160:	f7e6 f8c6 	bl	80002f0 <memchr>
 801a164:	b140      	cbz	r0, 801a178 <_vfiprintf_r+0x170>
 801a166:	2340      	movs	r3, #64	; 0x40
 801a168:	1b40      	subs	r0, r0, r5
 801a16a:	fa03 f000 	lsl.w	r0, r3, r0
 801a16e:	9b04      	ldr	r3, [sp, #16]
 801a170:	4303      	orrs	r3, r0
 801a172:	f108 0801 	add.w	r8, r8, #1
 801a176:	9304      	str	r3, [sp, #16]
 801a178:	f898 1000 	ldrb.w	r1, [r8]
 801a17c:	482a      	ldr	r0, [pc, #168]	; (801a228 <_vfiprintf_r+0x220>)
 801a17e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a182:	2206      	movs	r2, #6
 801a184:	f108 0701 	add.w	r7, r8, #1
 801a188:	f7e6 f8b2 	bl	80002f0 <memchr>
 801a18c:	2800      	cmp	r0, #0
 801a18e:	d037      	beq.n	801a200 <_vfiprintf_r+0x1f8>
 801a190:	4b26      	ldr	r3, [pc, #152]	; (801a22c <_vfiprintf_r+0x224>)
 801a192:	bb1b      	cbnz	r3, 801a1dc <_vfiprintf_r+0x1d4>
 801a194:	9b03      	ldr	r3, [sp, #12]
 801a196:	3307      	adds	r3, #7
 801a198:	f023 0307 	bic.w	r3, r3, #7
 801a19c:	3308      	adds	r3, #8
 801a19e:	9303      	str	r3, [sp, #12]
 801a1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1a2:	444b      	add	r3, r9
 801a1a4:	9309      	str	r3, [sp, #36]	; 0x24
 801a1a6:	e750      	b.n	801a04a <_vfiprintf_r+0x42>
 801a1a8:	fb05 3202 	mla	r2, r5, r2, r3
 801a1ac:	2001      	movs	r0, #1
 801a1ae:	4688      	mov	r8, r1
 801a1b0:	e78a      	b.n	801a0c8 <_vfiprintf_r+0xc0>
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	f108 0801 	add.w	r8, r8, #1
 801a1b8:	9305      	str	r3, [sp, #20]
 801a1ba:	4619      	mov	r1, r3
 801a1bc:	250a      	movs	r5, #10
 801a1be:	4640      	mov	r0, r8
 801a1c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1c4:	3a30      	subs	r2, #48	; 0x30
 801a1c6:	2a09      	cmp	r2, #9
 801a1c8:	d903      	bls.n	801a1d2 <_vfiprintf_r+0x1ca>
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d0c3      	beq.n	801a156 <_vfiprintf_r+0x14e>
 801a1ce:	9105      	str	r1, [sp, #20]
 801a1d0:	e7c1      	b.n	801a156 <_vfiprintf_r+0x14e>
 801a1d2:	fb05 2101 	mla	r1, r5, r1, r2
 801a1d6:	2301      	movs	r3, #1
 801a1d8:	4680      	mov	r8, r0
 801a1da:	e7f0      	b.n	801a1be <_vfiprintf_r+0x1b6>
 801a1dc:	ab03      	add	r3, sp, #12
 801a1de:	9300      	str	r3, [sp, #0]
 801a1e0:	4622      	mov	r2, r4
 801a1e2:	4b13      	ldr	r3, [pc, #76]	; (801a230 <_vfiprintf_r+0x228>)
 801a1e4:	a904      	add	r1, sp, #16
 801a1e6:	4630      	mov	r0, r6
 801a1e8:	f3af 8000 	nop.w
 801a1ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a1f0:	4681      	mov	r9, r0
 801a1f2:	d1d5      	bne.n	801a1a0 <_vfiprintf_r+0x198>
 801a1f4:	89a3      	ldrh	r3, [r4, #12]
 801a1f6:	065b      	lsls	r3, r3, #25
 801a1f8:	f53f af7e 	bmi.w	801a0f8 <_vfiprintf_r+0xf0>
 801a1fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a1fe:	e77d      	b.n	801a0fc <_vfiprintf_r+0xf4>
 801a200:	ab03      	add	r3, sp, #12
 801a202:	9300      	str	r3, [sp, #0]
 801a204:	4622      	mov	r2, r4
 801a206:	4b0a      	ldr	r3, [pc, #40]	; (801a230 <_vfiprintf_r+0x228>)
 801a208:	a904      	add	r1, sp, #16
 801a20a:	4630      	mov	r0, r6
 801a20c:	f000 f888 	bl	801a320 <_printf_i>
 801a210:	e7ec      	b.n	801a1ec <_vfiprintf_r+0x1e4>
 801a212:	bf00      	nop
 801a214:	0801b064 	.word	0x0801b064
 801a218:	0801b0a4 	.word	0x0801b0a4
 801a21c:	0801b084 	.word	0x0801b084
 801a220:	0801b044 	.word	0x0801b044
 801a224:	0801b0aa 	.word	0x0801b0aa
 801a228:	0801b0ae 	.word	0x0801b0ae
 801a22c:	00000000 	.word	0x00000000
 801a230:	08019fe3 	.word	0x08019fe3

0801a234 <_printf_common>:
 801a234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a238:	4691      	mov	r9, r2
 801a23a:	461f      	mov	r7, r3
 801a23c:	688a      	ldr	r2, [r1, #8]
 801a23e:	690b      	ldr	r3, [r1, #16]
 801a240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a244:	4293      	cmp	r3, r2
 801a246:	bfb8      	it	lt
 801a248:	4613      	movlt	r3, r2
 801a24a:	f8c9 3000 	str.w	r3, [r9]
 801a24e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a252:	4606      	mov	r6, r0
 801a254:	460c      	mov	r4, r1
 801a256:	b112      	cbz	r2, 801a25e <_printf_common+0x2a>
 801a258:	3301      	adds	r3, #1
 801a25a:	f8c9 3000 	str.w	r3, [r9]
 801a25e:	6823      	ldr	r3, [r4, #0]
 801a260:	0699      	lsls	r1, r3, #26
 801a262:	bf42      	ittt	mi
 801a264:	f8d9 3000 	ldrmi.w	r3, [r9]
 801a268:	3302      	addmi	r3, #2
 801a26a:	f8c9 3000 	strmi.w	r3, [r9]
 801a26e:	6825      	ldr	r5, [r4, #0]
 801a270:	f015 0506 	ands.w	r5, r5, #6
 801a274:	d107      	bne.n	801a286 <_printf_common+0x52>
 801a276:	f104 0a19 	add.w	sl, r4, #25
 801a27a:	68e3      	ldr	r3, [r4, #12]
 801a27c:	f8d9 2000 	ldr.w	r2, [r9]
 801a280:	1a9b      	subs	r3, r3, r2
 801a282:	42ab      	cmp	r3, r5
 801a284:	dc28      	bgt.n	801a2d8 <_printf_common+0xa4>
 801a286:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a28a:	6822      	ldr	r2, [r4, #0]
 801a28c:	3300      	adds	r3, #0
 801a28e:	bf18      	it	ne
 801a290:	2301      	movne	r3, #1
 801a292:	0692      	lsls	r2, r2, #26
 801a294:	d42d      	bmi.n	801a2f2 <_printf_common+0xbe>
 801a296:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a29a:	4639      	mov	r1, r7
 801a29c:	4630      	mov	r0, r6
 801a29e:	47c0      	blx	r8
 801a2a0:	3001      	adds	r0, #1
 801a2a2:	d020      	beq.n	801a2e6 <_printf_common+0xb2>
 801a2a4:	6823      	ldr	r3, [r4, #0]
 801a2a6:	68e5      	ldr	r5, [r4, #12]
 801a2a8:	f8d9 2000 	ldr.w	r2, [r9]
 801a2ac:	f003 0306 	and.w	r3, r3, #6
 801a2b0:	2b04      	cmp	r3, #4
 801a2b2:	bf08      	it	eq
 801a2b4:	1aad      	subeq	r5, r5, r2
 801a2b6:	68a3      	ldr	r3, [r4, #8]
 801a2b8:	6922      	ldr	r2, [r4, #16]
 801a2ba:	bf0c      	ite	eq
 801a2bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a2c0:	2500      	movne	r5, #0
 801a2c2:	4293      	cmp	r3, r2
 801a2c4:	bfc4      	itt	gt
 801a2c6:	1a9b      	subgt	r3, r3, r2
 801a2c8:	18ed      	addgt	r5, r5, r3
 801a2ca:	f04f 0900 	mov.w	r9, #0
 801a2ce:	341a      	adds	r4, #26
 801a2d0:	454d      	cmp	r5, r9
 801a2d2:	d11a      	bne.n	801a30a <_printf_common+0xd6>
 801a2d4:	2000      	movs	r0, #0
 801a2d6:	e008      	b.n	801a2ea <_printf_common+0xb6>
 801a2d8:	2301      	movs	r3, #1
 801a2da:	4652      	mov	r2, sl
 801a2dc:	4639      	mov	r1, r7
 801a2de:	4630      	mov	r0, r6
 801a2e0:	47c0      	blx	r8
 801a2e2:	3001      	adds	r0, #1
 801a2e4:	d103      	bne.n	801a2ee <_printf_common+0xba>
 801a2e6:	f04f 30ff 	mov.w	r0, #4294967295
 801a2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2ee:	3501      	adds	r5, #1
 801a2f0:	e7c3      	b.n	801a27a <_printf_common+0x46>
 801a2f2:	18e1      	adds	r1, r4, r3
 801a2f4:	1c5a      	adds	r2, r3, #1
 801a2f6:	2030      	movs	r0, #48	; 0x30
 801a2f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a2fc:	4422      	add	r2, r4
 801a2fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a302:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a306:	3302      	adds	r3, #2
 801a308:	e7c5      	b.n	801a296 <_printf_common+0x62>
 801a30a:	2301      	movs	r3, #1
 801a30c:	4622      	mov	r2, r4
 801a30e:	4639      	mov	r1, r7
 801a310:	4630      	mov	r0, r6
 801a312:	47c0      	blx	r8
 801a314:	3001      	adds	r0, #1
 801a316:	d0e6      	beq.n	801a2e6 <_printf_common+0xb2>
 801a318:	f109 0901 	add.w	r9, r9, #1
 801a31c:	e7d8      	b.n	801a2d0 <_printf_common+0x9c>
	...

0801a320 <_printf_i>:
 801a320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a324:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801a328:	460c      	mov	r4, r1
 801a32a:	7e09      	ldrb	r1, [r1, #24]
 801a32c:	b085      	sub	sp, #20
 801a32e:	296e      	cmp	r1, #110	; 0x6e
 801a330:	4617      	mov	r7, r2
 801a332:	4606      	mov	r6, r0
 801a334:	4698      	mov	r8, r3
 801a336:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a338:	f000 80b3 	beq.w	801a4a2 <_printf_i+0x182>
 801a33c:	d822      	bhi.n	801a384 <_printf_i+0x64>
 801a33e:	2963      	cmp	r1, #99	; 0x63
 801a340:	d036      	beq.n	801a3b0 <_printf_i+0x90>
 801a342:	d80a      	bhi.n	801a35a <_printf_i+0x3a>
 801a344:	2900      	cmp	r1, #0
 801a346:	f000 80b9 	beq.w	801a4bc <_printf_i+0x19c>
 801a34a:	2958      	cmp	r1, #88	; 0x58
 801a34c:	f000 8083 	beq.w	801a456 <_printf_i+0x136>
 801a350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a354:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a358:	e032      	b.n	801a3c0 <_printf_i+0xa0>
 801a35a:	2964      	cmp	r1, #100	; 0x64
 801a35c:	d001      	beq.n	801a362 <_printf_i+0x42>
 801a35e:	2969      	cmp	r1, #105	; 0x69
 801a360:	d1f6      	bne.n	801a350 <_printf_i+0x30>
 801a362:	6820      	ldr	r0, [r4, #0]
 801a364:	6813      	ldr	r3, [r2, #0]
 801a366:	0605      	lsls	r5, r0, #24
 801a368:	f103 0104 	add.w	r1, r3, #4
 801a36c:	d52a      	bpl.n	801a3c4 <_printf_i+0xa4>
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	6011      	str	r1, [r2, #0]
 801a372:	2b00      	cmp	r3, #0
 801a374:	da03      	bge.n	801a37e <_printf_i+0x5e>
 801a376:	222d      	movs	r2, #45	; 0x2d
 801a378:	425b      	negs	r3, r3
 801a37a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a37e:	486f      	ldr	r0, [pc, #444]	; (801a53c <_printf_i+0x21c>)
 801a380:	220a      	movs	r2, #10
 801a382:	e039      	b.n	801a3f8 <_printf_i+0xd8>
 801a384:	2973      	cmp	r1, #115	; 0x73
 801a386:	f000 809d 	beq.w	801a4c4 <_printf_i+0x1a4>
 801a38a:	d808      	bhi.n	801a39e <_printf_i+0x7e>
 801a38c:	296f      	cmp	r1, #111	; 0x6f
 801a38e:	d020      	beq.n	801a3d2 <_printf_i+0xb2>
 801a390:	2970      	cmp	r1, #112	; 0x70
 801a392:	d1dd      	bne.n	801a350 <_printf_i+0x30>
 801a394:	6823      	ldr	r3, [r4, #0]
 801a396:	f043 0320 	orr.w	r3, r3, #32
 801a39a:	6023      	str	r3, [r4, #0]
 801a39c:	e003      	b.n	801a3a6 <_printf_i+0x86>
 801a39e:	2975      	cmp	r1, #117	; 0x75
 801a3a0:	d017      	beq.n	801a3d2 <_printf_i+0xb2>
 801a3a2:	2978      	cmp	r1, #120	; 0x78
 801a3a4:	d1d4      	bne.n	801a350 <_printf_i+0x30>
 801a3a6:	2378      	movs	r3, #120	; 0x78
 801a3a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a3ac:	4864      	ldr	r0, [pc, #400]	; (801a540 <_printf_i+0x220>)
 801a3ae:	e055      	b.n	801a45c <_printf_i+0x13c>
 801a3b0:	6813      	ldr	r3, [r2, #0]
 801a3b2:	1d19      	adds	r1, r3, #4
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	6011      	str	r1, [r2, #0]
 801a3b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a3bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a3c0:	2301      	movs	r3, #1
 801a3c2:	e08c      	b.n	801a4de <_printf_i+0x1be>
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	6011      	str	r1, [r2, #0]
 801a3c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a3cc:	bf18      	it	ne
 801a3ce:	b21b      	sxthne	r3, r3
 801a3d0:	e7cf      	b.n	801a372 <_printf_i+0x52>
 801a3d2:	6813      	ldr	r3, [r2, #0]
 801a3d4:	6825      	ldr	r5, [r4, #0]
 801a3d6:	1d18      	adds	r0, r3, #4
 801a3d8:	6010      	str	r0, [r2, #0]
 801a3da:	0628      	lsls	r0, r5, #24
 801a3dc:	d501      	bpl.n	801a3e2 <_printf_i+0xc2>
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	e002      	b.n	801a3e8 <_printf_i+0xc8>
 801a3e2:	0668      	lsls	r0, r5, #25
 801a3e4:	d5fb      	bpl.n	801a3de <_printf_i+0xbe>
 801a3e6:	881b      	ldrh	r3, [r3, #0]
 801a3e8:	4854      	ldr	r0, [pc, #336]	; (801a53c <_printf_i+0x21c>)
 801a3ea:	296f      	cmp	r1, #111	; 0x6f
 801a3ec:	bf14      	ite	ne
 801a3ee:	220a      	movne	r2, #10
 801a3f0:	2208      	moveq	r2, #8
 801a3f2:	2100      	movs	r1, #0
 801a3f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a3f8:	6865      	ldr	r5, [r4, #4]
 801a3fa:	60a5      	str	r5, [r4, #8]
 801a3fc:	2d00      	cmp	r5, #0
 801a3fe:	f2c0 8095 	blt.w	801a52c <_printf_i+0x20c>
 801a402:	6821      	ldr	r1, [r4, #0]
 801a404:	f021 0104 	bic.w	r1, r1, #4
 801a408:	6021      	str	r1, [r4, #0]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d13d      	bne.n	801a48a <_printf_i+0x16a>
 801a40e:	2d00      	cmp	r5, #0
 801a410:	f040 808e 	bne.w	801a530 <_printf_i+0x210>
 801a414:	4665      	mov	r5, ip
 801a416:	2a08      	cmp	r2, #8
 801a418:	d10b      	bne.n	801a432 <_printf_i+0x112>
 801a41a:	6823      	ldr	r3, [r4, #0]
 801a41c:	07db      	lsls	r3, r3, #31
 801a41e:	d508      	bpl.n	801a432 <_printf_i+0x112>
 801a420:	6923      	ldr	r3, [r4, #16]
 801a422:	6862      	ldr	r2, [r4, #4]
 801a424:	429a      	cmp	r2, r3
 801a426:	bfde      	ittt	le
 801a428:	2330      	movle	r3, #48	; 0x30
 801a42a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a42e:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a432:	ebac 0305 	sub.w	r3, ip, r5
 801a436:	6123      	str	r3, [r4, #16]
 801a438:	f8cd 8000 	str.w	r8, [sp]
 801a43c:	463b      	mov	r3, r7
 801a43e:	aa03      	add	r2, sp, #12
 801a440:	4621      	mov	r1, r4
 801a442:	4630      	mov	r0, r6
 801a444:	f7ff fef6 	bl	801a234 <_printf_common>
 801a448:	3001      	adds	r0, #1
 801a44a:	d14d      	bne.n	801a4e8 <_printf_i+0x1c8>
 801a44c:	f04f 30ff 	mov.w	r0, #4294967295
 801a450:	b005      	add	sp, #20
 801a452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a456:	4839      	ldr	r0, [pc, #228]	; (801a53c <_printf_i+0x21c>)
 801a458:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a45c:	6813      	ldr	r3, [r2, #0]
 801a45e:	6821      	ldr	r1, [r4, #0]
 801a460:	1d1d      	adds	r5, r3, #4
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	6015      	str	r5, [r2, #0]
 801a466:	060a      	lsls	r2, r1, #24
 801a468:	d50b      	bpl.n	801a482 <_printf_i+0x162>
 801a46a:	07ca      	lsls	r2, r1, #31
 801a46c:	bf44      	itt	mi
 801a46e:	f041 0120 	orrmi.w	r1, r1, #32
 801a472:	6021      	strmi	r1, [r4, #0]
 801a474:	b91b      	cbnz	r3, 801a47e <_printf_i+0x15e>
 801a476:	6822      	ldr	r2, [r4, #0]
 801a478:	f022 0220 	bic.w	r2, r2, #32
 801a47c:	6022      	str	r2, [r4, #0]
 801a47e:	2210      	movs	r2, #16
 801a480:	e7b7      	b.n	801a3f2 <_printf_i+0xd2>
 801a482:	064d      	lsls	r5, r1, #25
 801a484:	bf48      	it	mi
 801a486:	b29b      	uxthmi	r3, r3
 801a488:	e7ef      	b.n	801a46a <_printf_i+0x14a>
 801a48a:	4665      	mov	r5, ip
 801a48c:	fbb3 f1f2 	udiv	r1, r3, r2
 801a490:	fb02 3311 	mls	r3, r2, r1, r3
 801a494:	5cc3      	ldrb	r3, [r0, r3]
 801a496:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a49a:	460b      	mov	r3, r1
 801a49c:	2900      	cmp	r1, #0
 801a49e:	d1f5      	bne.n	801a48c <_printf_i+0x16c>
 801a4a0:	e7b9      	b.n	801a416 <_printf_i+0xf6>
 801a4a2:	6813      	ldr	r3, [r2, #0]
 801a4a4:	6825      	ldr	r5, [r4, #0]
 801a4a6:	6961      	ldr	r1, [r4, #20]
 801a4a8:	1d18      	adds	r0, r3, #4
 801a4aa:	6010      	str	r0, [r2, #0]
 801a4ac:	0628      	lsls	r0, r5, #24
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	d501      	bpl.n	801a4b6 <_printf_i+0x196>
 801a4b2:	6019      	str	r1, [r3, #0]
 801a4b4:	e002      	b.n	801a4bc <_printf_i+0x19c>
 801a4b6:	066a      	lsls	r2, r5, #25
 801a4b8:	d5fb      	bpl.n	801a4b2 <_printf_i+0x192>
 801a4ba:	8019      	strh	r1, [r3, #0]
 801a4bc:	2300      	movs	r3, #0
 801a4be:	6123      	str	r3, [r4, #16]
 801a4c0:	4665      	mov	r5, ip
 801a4c2:	e7b9      	b.n	801a438 <_printf_i+0x118>
 801a4c4:	6813      	ldr	r3, [r2, #0]
 801a4c6:	1d19      	adds	r1, r3, #4
 801a4c8:	6011      	str	r1, [r2, #0]
 801a4ca:	681d      	ldr	r5, [r3, #0]
 801a4cc:	6862      	ldr	r2, [r4, #4]
 801a4ce:	2100      	movs	r1, #0
 801a4d0:	4628      	mov	r0, r5
 801a4d2:	f7e5 ff0d 	bl	80002f0 <memchr>
 801a4d6:	b108      	cbz	r0, 801a4dc <_printf_i+0x1bc>
 801a4d8:	1b40      	subs	r0, r0, r5
 801a4da:	6060      	str	r0, [r4, #4]
 801a4dc:	6863      	ldr	r3, [r4, #4]
 801a4de:	6123      	str	r3, [r4, #16]
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a4e6:	e7a7      	b.n	801a438 <_printf_i+0x118>
 801a4e8:	6923      	ldr	r3, [r4, #16]
 801a4ea:	462a      	mov	r2, r5
 801a4ec:	4639      	mov	r1, r7
 801a4ee:	4630      	mov	r0, r6
 801a4f0:	47c0      	blx	r8
 801a4f2:	3001      	adds	r0, #1
 801a4f4:	d0aa      	beq.n	801a44c <_printf_i+0x12c>
 801a4f6:	6823      	ldr	r3, [r4, #0]
 801a4f8:	079b      	lsls	r3, r3, #30
 801a4fa:	d413      	bmi.n	801a524 <_printf_i+0x204>
 801a4fc:	68e0      	ldr	r0, [r4, #12]
 801a4fe:	9b03      	ldr	r3, [sp, #12]
 801a500:	4298      	cmp	r0, r3
 801a502:	bfb8      	it	lt
 801a504:	4618      	movlt	r0, r3
 801a506:	e7a3      	b.n	801a450 <_printf_i+0x130>
 801a508:	2301      	movs	r3, #1
 801a50a:	464a      	mov	r2, r9
 801a50c:	4639      	mov	r1, r7
 801a50e:	4630      	mov	r0, r6
 801a510:	47c0      	blx	r8
 801a512:	3001      	adds	r0, #1
 801a514:	d09a      	beq.n	801a44c <_printf_i+0x12c>
 801a516:	3501      	adds	r5, #1
 801a518:	68e3      	ldr	r3, [r4, #12]
 801a51a:	9a03      	ldr	r2, [sp, #12]
 801a51c:	1a9b      	subs	r3, r3, r2
 801a51e:	42ab      	cmp	r3, r5
 801a520:	dcf2      	bgt.n	801a508 <_printf_i+0x1e8>
 801a522:	e7eb      	b.n	801a4fc <_printf_i+0x1dc>
 801a524:	2500      	movs	r5, #0
 801a526:	f104 0919 	add.w	r9, r4, #25
 801a52a:	e7f5      	b.n	801a518 <_printf_i+0x1f8>
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d1ac      	bne.n	801a48a <_printf_i+0x16a>
 801a530:	7803      	ldrb	r3, [r0, #0]
 801a532:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a536:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a53a:	e76c      	b.n	801a416 <_printf_i+0xf6>
 801a53c:	0801b0b5 	.word	0x0801b0b5
 801a540:	0801b0c6 	.word	0x0801b0c6

0801a544 <__sread>:
 801a544:	b510      	push	{r4, lr}
 801a546:	460c      	mov	r4, r1
 801a548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a54c:	f000 f8d4 	bl	801a6f8 <_read_r>
 801a550:	2800      	cmp	r0, #0
 801a552:	bfab      	itete	ge
 801a554:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a556:	89a3      	ldrhlt	r3, [r4, #12]
 801a558:	181b      	addge	r3, r3, r0
 801a55a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a55e:	bfac      	ite	ge
 801a560:	6563      	strge	r3, [r4, #84]	; 0x54
 801a562:	81a3      	strhlt	r3, [r4, #12]
 801a564:	bd10      	pop	{r4, pc}

0801a566 <__swrite>:
 801a566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a56a:	461f      	mov	r7, r3
 801a56c:	898b      	ldrh	r3, [r1, #12]
 801a56e:	05db      	lsls	r3, r3, #23
 801a570:	4605      	mov	r5, r0
 801a572:	460c      	mov	r4, r1
 801a574:	4616      	mov	r6, r2
 801a576:	d505      	bpl.n	801a584 <__swrite+0x1e>
 801a578:	2302      	movs	r3, #2
 801a57a:	2200      	movs	r2, #0
 801a57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a580:	f000 f868 	bl	801a654 <_lseek_r>
 801a584:	89a3      	ldrh	r3, [r4, #12]
 801a586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a58a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a58e:	81a3      	strh	r3, [r4, #12]
 801a590:	4632      	mov	r2, r6
 801a592:	463b      	mov	r3, r7
 801a594:	4628      	mov	r0, r5
 801a596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a59a:	f000 b817 	b.w	801a5cc <_write_r>

0801a59e <__sseek>:
 801a59e:	b510      	push	{r4, lr}
 801a5a0:	460c      	mov	r4, r1
 801a5a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5a6:	f000 f855 	bl	801a654 <_lseek_r>
 801a5aa:	1c43      	adds	r3, r0, #1
 801a5ac:	89a3      	ldrh	r3, [r4, #12]
 801a5ae:	bf15      	itete	ne
 801a5b0:	6560      	strne	r0, [r4, #84]	; 0x54
 801a5b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a5b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a5ba:	81a3      	strheq	r3, [r4, #12]
 801a5bc:	bf18      	it	ne
 801a5be:	81a3      	strhne	r3, [r4, #12]
 801a5c0:	bd10      	pop	{r4, pc}

0801a5c2 <__sclose>:
 801a5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5c6:	f000 b813 	b.w	801a5f0 <_close_r>
	...

0801a5cc <_write_r>:
 801a5cc:	b538      	push	{r3, r4, r5, lr}
 801a5ce:	4c07      	ldr	r4, [pc, #28]	; (801a5ec <_write_r+0x20>)
 801a5d0:	4605      	mov	r5, r0
 801a5d2:	4608      	mov	r0, r1
 801a5d4:	4611      	mov	r1, r2
 801a5d6:	2200      	movs	r2, #0
 801a5d8:	6022      	str	r2, [r4, #0]
 801a5da:	461a      	mov	r2, r3
 801a5dc:	f7e9 fb47 	bl	8003c6e <_write>
 801a5e0:	1c43      	adds	r3, r0, #1
 801a5e2:	d102      	bne.n	801a5ea <_write_r+0x1e>
 801a5e4:	6823      	ldr	r3, [r4, #0]
 801a5e6:	b103      	cbz	r3, 801a5ea <_write_r+0x1e>
 801a5e8:	602b      	str	r3, [r5, #0]
 801a5ea:	bd38      	pop	{r3, r4, r5, pc}
 801a5ec:	240024ac 	.word	0x240024ac

0801a5f0 <_close_r>:
 801a5f0:	b538      	push	{r3, r4, r5, lr}
 801a5f2:	4c06      	ldr	r4, [pc, #24]	; (801a60c <_close_r+0x1c>)
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	4605      	mov	r5, r0
 801a5f8:	4608      	mov	r0, r1
 801a5fa:	6023      	str	r3, [r4, #0]
 801a5fc:	f7e9 fe47 	bl	800428e <_close>
 801a600:	1c43      	adds	r3, r0, #1
 801a602:	d102      	bne.n	801a60a <_close_r+0x1a>
 801a604:	6823      	ldr	r3, [r4, #0]
 801a606:	b103      	cbz	r3, 801a60a <_close_r+0x1a>
 801a608:	602b      	str	r3, [r5, #0]
 801a60a:	bd38      	pop	{r3, r4, r5, pc}
 801a60c:	240024ac 	.word	0x240024ac

0801a610 <_fstat_r>:
 801a610:	b538      	push	{r3, r4, r5, lr}
 801a612:	4c07      	ldr	r4, [pc, #28]	; (801a630 <_fstat_r+0x20>)
 801a614:	2300      	movs	r3, #0
 801a616:	4605      	mov	r5, r0
 801a618:	4608      	mov	r0, r1
 801a61a:	4611      	mov	r1, r2
 801a61c:	6023      	str	r3, [r4, #0]
 801a61e:	f7e9 fe42 	bl	80042a6 <_fstat>
 801a622:	1c43      	adds	r3, r0, #1
 801a624:	d102      	bne.n	801a62c <_fstat_r+0x1c>
 801a626:	6823      	ldr	r3, [r4, #0]
 801a628:	b103      	cbz	r3, 801a62c <_fstat_r+0x1c>
 801a62a:	602b      	str	r3, [r5, #0]
 801a62c:	bd38      	pop	{r3, r4, r5, pc}
 801a62e:	bf00      	nop
 801a630:	240024ac 	.word	0x240024ac

0801a634 <_isatty_r>:
 801a634:	b538      	push	{r3, r4, r5, lr}
 801a636:	4c06      	ldr	r4, [pc, #24]	; (801a650 <_isatty_r+0x1c>)
 801a638:	2300      	movs	r3, #0
 801a63a:	4605      	mov	r5, r0
 801a63c:	4608      	mov	r0, r1
 801a63e:	6023      	str	r3, [r4, #0]
 801a640:	f7e9 fe41 	bl	80042c6 <_isatty>
 801a644:	1c43      	adds	r3, r0, #1
 801a646:	d102      	bne.n	801a64e <_isatty_r+0x1a>
 801a648:	6823      	ldr	r3, [r4, #0]
 801a64a:	b103      	cbz	r3, 801a64e <_isatty_r+0x1a>
 801a64c:	602b      	str	r3, [r5, #0]
 801a64e:	bd38      	pop	{r3, r4, r5, pc}
 801a650:	240024ac 	.word	0x240024ac

0801a654 <_lseek_r>:
 801a654:	b538      	push	{r3, r4, r5, lr}
 801a656:	4c07      	ldr	r4, [pc, #28]	; (801a674 <_lseek_r+0x20>)
 801a658:	4605      	mov	r5, r0
 801a65a:	4608      	mov	r0, r1
 801a65c:	4611      	mov	r1, r2
 801a65e:	2200      	movs	r2, #0
 801a660:	6022      	str	r2, [r4, #0]
 801a662:	461a      	mov	r2, r3
 801a664:	f7e9 fe3a 	bl	80042dc <_lseek>
 801a668:	1c43      	adds	r3, r0, #1
 801a66a:	d102      	bne.n	801a672 <_lseek_r+0x1e>
 801a66c:	6823      	ldr	r3, [r4, #0]
 801a66e:	b103      	cbz	r3, 801a672 <_lseek_r+0x1e>
 801a670:	602b      	str	r3, [r5, #0]
 801a672:	bd38      	pop	{r3, r4, r5, pc}
 801a674:	240024ac 	.word	0x240024ac

0801a678 <memmove>:
 801a678:	4288      	cmp	r0, r1
 801a67a:	b510      	push	{r4, lr}
 801a67c:	eb01 0302 	add.w	r3, r1, r2
 801a680:	d807      	bhi.n	801a692 <memmove+0x1a>
 801a682:	1e42      	subs	r2, r0, #1
 801a684:	4299      	cmp	r1, r3
 801a686:	d00a      	beq.n	801a69e <memmove+0x26>
 801a688:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a68c:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a690:	e7f8      	b.n	801a684 <memmove+0xc>
 801a692:	4283      	cmp	r3, r0
 801a694:	d9f5      	bls.n	801a682 <memmove+0xa>
 801a696:	1881      	adds	r1, r0, r2
 801a698:	1ad2      	subs	r2, r2, r3
 801a69a:	42d3      	cmn	r3, r2
 801a69c:	d100      	bne.n	801a6a0 <memmove+0x28>
 801a69e:	bd10      	pop	{r4, pc}
 801a6a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a6a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a6a8:	e7f7      	b.n	801a69a <memmove+0x22>

0801a6aa <_realloc_r>:
 801a6aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6ac:	4607      	mov	r7, r0
 801a6ae:	4614      	mov	r4, r2
 801a6b0:	460e      	mov	r6, r1
 801a6b2:	b921      	cbnz	r1, 801a6be <_realloc_r+0x14>
 801a6b4:	4611      	mov	r1, r2
 801a6b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a6ba:	f7fe bf47 	b.w	801954c <_malloc_r>
 801a6be:	b922      	cbnz	r2, 801a6ca <_realloc_r+0x20>
 801a6c0:	f7fe fef6 	bl	80194b0 <_free_r>
 801a6c4:	4625      	mov	r5, r4
 801a6c6:	4628      	mov	r0, r5
 801a6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6ca:	f000 f827 	bl	801a71c <_malloc_usable_size_r>
 801a6ce:	42a0      	cmp	r0, r4
 801a6d0:	d20f      	bcs.n	801a6f2 <_realloc_r+0x48>
 801a6d2:	4621      	mov	r1, r4
 801a6d4:	4638      	mov	r0, r7
 801a6d6:	f7fe ff39 	bl	801954c <_malloc_r>
 801a6da:	4605      	mov	r5, r0
 801a6dc:	2800      	cmp	r0, #0
 801a6de:	d0f2      	beq.n	801a6c6 <_realloc_r+0x1c>
 801a6e0:	4631      	mov	r1, r6
 801a6e2:	4622      	mov	r2, r4
 801a6e4:	f7fe fed0 	bl	8019488 <memcpy>
 801a6e8:	4631      	mov	r1, r6
 801a6ea:	4638      	mov	r0, r7
 801a6ec:	f7fe fee0 	bl	80194b0 <_free_r>
 801a6f0:	e7e9      	b.n	801a6c6 <_realloc_r+0x1c>
 801a6f2:	4635      	mov	r5, r6
 801a6f4:	e7e7      	b.n	801a6c6 <_realloc_r+0x1c>
	...

0801a6f8 <_read_r>:
 801a6f8:	b538      	push	{r3, r4, r5, lr}
 801a6fa:	4c07      	ldr	r4, [pc, #28]	; (801a718 <_read_r+0x20>)
 801a6fc:	4605      	mov	r5, r0
 801a6fe:	4608      	mov	r0, r1
 801a700:	4611      	mov	r1, r2
 801a702:	2200      	movs	r2, #0
 801a704:	6022      	str	r2, [r4, #0]
 801a706:	461a      	mov	r2, r3
 801a708:	f7e9 fda4 	bl	8004254 <_read>
 801a70c:	1c43      	adds	r3, r0, #1
 801a70e:	d102      	bne.n	801a716 <_read_r+0x1e>
 801a710:	6823      	ldr	r3, [r4, #0]
 801a712:	b103      	cbz	r3, 801a716 <_read_r+0x1e>
 801a714:	602b      	str	r3, [r5, #0]
 801a716:	bd38      	pop	{r3, r4, r5, pc}
 801a718:	240024ac 	.word	0x240024ac

0801a71c <_malloc_usable_size_r>:
 801a71c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a720:	1f18      	subs	r0, r3, #4
 801a722:	2b00      	cmp	r3, #0
 801a724:	bfbc      	itt	lt
 801a726:	580b      	ldrlt	r3, [r1, r0]
 801a728:	18c0      	addlt	r0, r0, r3
 801a72a:	4770      	bx	lr

0801a72c <_init>:
 801a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a72e:	bf00      	nop
 801a730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a732:	bc08      	pop	{r3}
 801a734:	469e      	mov	lr, r3
 801a736:	4770      	bx	lr

0801a738 <_fini>:
 801a738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a73a:	bf00      	nop
 801a73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a73e:	bc08      	pop	{r3}
 801a740:	469e      	mov	lr, r3
 801a742:	4770      	bx	lr

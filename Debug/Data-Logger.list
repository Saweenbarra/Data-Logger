
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019460  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  08019700  08019700  00029700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a050  0801a050  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a050  0801a050  0002a050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a058  0801a058  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a058  0801a058  0002a058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a05c  0801a05c  0002a05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  24000000  0801a060  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00041ab0  240001d8  0801a238  000301d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24041c88  0801a238  00031c88  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049e33  00000000  00000000  00030206  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007bc2  00000000  00000000  0007a039  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002420  00000000  00000000  00081c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002128  00000000  00000000  00084020  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000430f0  00000000  00000000  00086148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002801d  00000000  00000000  000c9238  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001785f0  00000000  00000000  000f1255  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00269845  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f58  00000000  00000000  002698c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080196e8 	.word	0x080196e8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	080196e8 	.word	0x080196e8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <myprintf.h>

int FDCAN_Flag = 0;
int CAN_Flag = 0;

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f005 fb78 	bl	8005db0 <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f005 fbe6 	bl	8005e9c <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f002 fa7f 	bl	8002bd8 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f005 fc2e 	bl	8005f3c <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f002 fa77 	bl	8002bd8 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f005 fdae 	bl	8006250 <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f002 fa6d 	bl	8002bd8 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f005 fbf9 	bl	8005ef6 <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b31      	ldr	r3, [pc, #196]	; (80007dc <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000718:	4a31      	ldr	r2, [pc, #196]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f005 fc39 	bl	8005f94 <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d155      	bne.n	80007d4 <HAL_FDCAN_RxFifo0Callback+0xc8>
			      {
					uint32_t time = HAL_GetTick();
 8000728:	f002 ff3e 	bl	80035a8 <HAL_GetTick>
 800072c:	60f8      	str	r0, [r7, #12]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800072e:	2101      	movs	r1, #1
 8000730:	482c      	ldr	r0, [pc, #176]	; (80007e4 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8000732:	f006 fc78 	bl	8007026 <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000736:	482c      	ldr	r0, [pc, #176]	; (80007e8 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000738:	f017 ffbc 	bl	80186b4 <puts>
					if(RxHeader.FDFormat == FDCAN_CLASSIC_CAN){
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d121      	bne.n	8000788 <HAL_FDCAN_RxFifo0Callback+0x7c>
						CanFrame.id = RxHeader.Identifier;
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a28      	ldr	r2, [pc, #160]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 800074a:	6013      	str	r3, [r2, #0]
						CanFrame.length = RxHeader.DataLength;
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000754:	715a      	strb	r2, [r3, #5]
						CanFrame.time = time;
 8000756:	4a25      	ldr	r2, [pc, #148]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6093      	str	r3, [r2, #8]
						CAN_Flag = 1;
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
						memcpy(CanFrame.data.bytes, RxData, CanFrame.length);
 8000762:	4b22      	ldr	r3, [pc, #136]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000764:	795b      	ldrb	r3, [r3, #5]
 8000766:	461a      	mov	r2, r3
 8000768:	491c      	ldr	r1, [pc, #112]	; (80007dc <HAL_FDCAN_RxFifo0Callback+0xd0>)
 800076a:	4822      	ldr	r0, [pc, #136]	; (80007f4 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800076c:	f017 fe72 	bl	8018454 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000778:	d103      	bne.n	8000782 <HAL_FDCAN_RxFifo0Callback+0x76>
							CanFrame.extended = 1;
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 800077c:	2201      	movs	r2, #1
 800077e:	711a      	strb	r2, [r3, #4]
 8000780:	e002      	b.n	8000788 <HAL_FDCAN_RxFifo0Callback+0x7c>
						}
						else{
							CanFrame.extended = 0;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000784:	2200      	movs	r2, #0
 8000786:	711a      	strb	r2, [r3, #4]
						}
					}
					if(RxHeader.FDFormat == FDCAN_FD_CAN){
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000790:	d120      	bne.n	80007d4 <HAL_FDCAN_RxFifo0Callback+0xc8>
						CanFDFrame.id = RxHeader.Identifier;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000798:	6013      	str	r3, [r2, #0]
						CanFDFrame.length = RxHeader.DataLength;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80007a0:	6093      	str	r3, [r2, #8]
						CanFDFrame.time = time;
 80007a2:	4a15      	ldr	r2, [pc, #84]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	60d3      	str	r3, [r2, #12]
						FDCAN_Flag = 1;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_FDCAN_RxFifo0Callback+0xf0>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
						memcpy(CanFDFrame.data.bytes, RxData, CanFDFrame.length);
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	461a      	mov	r2, r3
 80007b4:	4909      	ldr	r1, [pc, #36]	; (80007dc <HAL_FDCAN_RxFifo0Callback+0xd0>)
 80007b6:	4812      	ldr	r0, [pc, #72]	; (8000800 <HAL_FDCAN_RxFifo0Callback+0xf4>)
 80007b8:	f017 fe4c 	bl	8018454 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007c4:	d103      	bne.n	80007ce <HAL_FDCAN_RxFifo0Callback+0xc2>
							CanFDFrame.extended = 1;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	711a      	strb	r2, [r3, #4]
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 80007cc:	e002      	b.n	80007d4 <HAL_FDCAN_RxFifo0Callback+0xc8>
							CanFDFrame.extended = 0;
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	711a      	strb	r2, [r3, #4]
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	240407f8 	.word	0x240407f8
 80007e0:	24040888 	.word	0x24040888
 80007e4:	58020400 	.word	0x58020400
 80007e8:	08019700 	.word	0x08019700
 80007ec:	240408b0 	.word	0x240408b0
 80007f0:	240001f8 	.word	0x240001f8
 80007f4:	240408c0 	.word	0x240408c0
 80007f8:	24040838 	.word	0x24040838
 80007fc:	240001f4 	.word	0x240001f4
 8000800:	24040848 	.word	0x24040848

08000804 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000804:	b580      	push	{r7, lr}
 8000806:	b09e      	sub	sp, #120	; 0x78
 8000808:	af02      	add	r7, sp, #8
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 8000810:	68b8      	ldr	r0, [r7, #8]
 8000812:	f7ff fd65 	bl	80002e0 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	2b03      	cmp	r3, #3
 800081a:	d001      	beq.n	8000820 <gps_msg_config+0x1c>
 800081c:	2301      	movs	r3, #1
 800081e:	e052      	b.n	80008c6 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 8000820:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	4a29      	ldr	r2, [pc, #164]	; (80008d0 <gps_msg_config+0xcc>)
 800082c:	211f      	movs	r1, #31
 800082e:	f017 ff59 	bl	80186e4 <sniprintf>

	int checksum_int = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 8000836:	2300      	movs	r3, #0
 8000838:	66bb      	str	r3, [r7, #104]	; 0x68
 800083a:	e00b      	b.n	8000854 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 800083c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000842:	4413      	add	r3, r2
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800084a:	4053      	eors	r3, r2
 800084c:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 800084e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000850:	3301      	adds	r3, #1
 8000852:	66bb      	str	r3, [r7, #104]	; 0x68
 8000854:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800085a:	4413      	add	r3, r2
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <gps_msg_config+0x64>
 8000862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000864:	2b1f      	cmp	r3, #31
 8000866:	dde9      	ble.n	800083c <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 8000868:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800086c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <gps_msg_config+0xd0>)
 8000870:	2107      	movs	r1, #7
 8000872:	f017 ff37 	bl	80186e4 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 8000876:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800087a:	f107 0014 	add.w	r0, r7, #20
 800087e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	4613      	mov	r3, r2
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <gps_msg_config+0xd4>)
 8000888:	2129      	movs	r1, #41	; 0x29
 800088a:	f017 ff2b 	bl	80186e4 <sniprintf>
	printf("\n\rSending: ");
 800088e:	4813      	ldr	r0, [pc, #76]	; (80008dc <gps_msg_config+0xd8>)
 8000890:	f017 fe9c 	bl	80185cc <iprintf>
	printf("%s", messagetosend);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <gps_msg_config+0xdc>)
 800089c:	f017 fe96 	bl	80185cc <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fd1b 	bl	80002e0 <strlen>
 80008aa:	4603      	mov	r3, r0
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	f107 0114 	add.w	r1, r7, #20
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f00e f95e 	bl	800eb76 <HAL_UART_Transmit>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <gps_msg_config+0xc0>
		Error_Handler();
 80008c0:	f002 f98a 	bl	8002bd8 <Error_Handler>
	}
	return 0;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3770      	adds	r7, #112	; 0x70
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	08019714 	.word	0x08019714
 80008d4:	0801972c 	.word	0x0801972c
 80008d8:	08019734 	.word	0x08019734
 80008dc:	0801973c 	.word	0x0801973c
 80008e0:	08019748 	.word	0x08019748

080008e4 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	4608      	mov	r0, r1
 80008ee:	4611      	mov	r1, r2
 80008f0:	461a      	mov	r2, r3
 80008f2:	4603      	mov	r3, r0
 80008f4:	817b      	strh	r3, [r7, #10]
 80008f6:	460b      	mov	r3, r1
 80008f8:	813b      	strh	r3, [r7, #8]
 80008fa:	4613      	mov	r3, r2
 80008fc:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 80008fe:	2306      	movs	r3, #6
 8000900:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 8000902:	23b5      	movs	r3, #181	; 0xb5
 8000904:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000906:	2362      	movs	r3, #98	; 0x62
 8000908:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 800090a:	2306      	movs	r3, #6
 800090c:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 800090e:	2308      	movs	r3, #8
 8000910:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 8000912:	8bfb      	ldrh	r3, [r7, #30]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 800091c:	897b      	ldrh	r3, [r7, #10]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000926:	893b      	ldrh	r3, [r7, #8]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
 800094a:	e013      	b.n	8000974 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 800094c:	f107 0210 	add.w	r2, r7, #16
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	4413      	add	r3, r2
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800095a:	4413      	add	r3, r2
 800095c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 8000960:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000968:	4413      	add	r3, r2
 800096a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	3301      	adds	r3, #1
 8000972:	623b      	str	r3, [r7, #32]
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	2b0b      	cmp	r3, #11
 8000978:	dde8      	ble.n	800094c <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 800097a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800097e:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 8000980:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000984:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000986:	f107 0110 	add.w	r1, r7, #16
 800098a:	2364      	movs	r3, #100	; 0x64
 800098c:	220e      	movs	r2, #14
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f00e f8f1 	bl	800eb76 <HAL_UART_Transmit>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <gps_rate_config+0xbe>
				Error_Handler();
 800099a:	f002 f91d 	bl	8002bd8 <Error_Handler>
				return 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	e000      	b.n	80009a4 <gps_rate_config+0xc0>
			}
		return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  GPS_flag = 1;
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <HAL_UART_RxHalfCpltCallback+0x1c>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	240001fc 	.word	0x240001fc

080009cc <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d008      	beq.n	80009ec <NRF24_csn+0x20>
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <NRF24_csn+0x38>)
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <NRF24_csn+0x3c>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	2201      	movs	r2, #1
 80009e4:	4619      	mov	r1, r3
 80009e6:	f006 fb05 	bl	8006ff4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80009ea:	e007      	b.n	80009fc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <NRF24_csn+0x38>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <NRF24_csn+0x3c>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	2200      	movs	r2, #0
 80009f6:	4619      	mov	r1, r3
 80009f8:	f006 fafc 	bl	8006ff4 <HAL_GPIO_WritePin>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	24000204 	.word	0x24000204
 8000a08:	24000208 	.word	0x24000208

08000a0c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d008      	beq.n	8000a2c <NRF24_ce+0x20>
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <NRF24_ce+0x38>)
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <NRF24_ce+0x3c>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	2201      	movs	r2, #1
 8000a24:	4619      	mov	r1, r3
 8000a26:	f006 fae5 	bl	8006ff4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000a2a:	e007      	b.n	8000a3c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <NRF24_ce+0x38>)
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <NRF24_ce+0x3c>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	4619      	mov	r1, r3
 8000a38:	f006 fadc 	bl	8006ff4 <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	24000204 	.word	0x24000204
 8000a48:	2400020a 	.word	0x2400020a

08000a4c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff ffb8 	bl	80009cc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 031f 	and.w	r3, r3, #31
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000a66:	f107 010c 	add.w	r1, r7, #12
 8000a6a:	2364      	movs	r3, #100	; 0x64
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	480a      	ldr	r0, [pc, #40]	; (8000a98 <NRF24_read_register+0x4c>)
 8000a70:	f00d f878 	bl	800db64 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	1c59      	adds	r1, r3, #1
 8000a7a:	2364      	movs	r3, #100	; 0x64
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <NRF24_read_register+0x4c>)
 8000a80:	f00d fa62 	bl	800df48 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000a84:	7b7b      	ldrb	r3, [r7, #13]
 8000a86:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff ff9f 	bl	80009cc <NRF24_csn>
	return retData;
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2400020c 	.word	0x2400020c

08000a9c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff ff8d 	bl	80009cc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 031f 	and.w	r3, r3, #31
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000abc:	f107 010c 	add.w	r1, r7, #12
 8000ac0:	2364      	movs	r3, #100	; 0x64
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <NRF24_read_registerN+0x4c>)
 8000ac6:	f00d f84d 	bl	800db64 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	2364      	movs	r3, #100	; 0x64
 8000ad0:	6839      	ldr	r1, [r7, #0]
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <NRF24_read_registerN+0x4c>)
 8000ad4:	f00d fa38 	bl	800df48 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f7ff ff77 	bl	80009cc <NRF24_csn>
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2400020c 	.word	0x2400020c

08000aec <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	460a      	mov	r2, r1
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	4613      	mov	r3, r2
 8000afa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff ff65 	bl	80009cc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f043 0320 	orr.w	r3, r3, #32
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000b0c:	79bb      	ldrb	r3, [r7, #6]
 8000b0e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000b10:	f107 010c 	add.w	r1, r7, #12
 8000b14:	2364      	movs	r3, #100	; 0x64
 8000b16:	2202      	movs	r2, #2
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <NRF24_write_register+0x40>)
 8000b1a:	f00d f823 	bl	800db64 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff ff54 	bl	80009cc <NRF24_csn>
}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2400020c 	.word	0x2400020c

08000b30 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff ff43 	bl	80009cc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f043 0320 	orr.w	r3, r3, #32
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000b50:	f107 010c 	add.w	r1, r7, #12
 8000b54:	2364      	movs	r3, #100	; 0x64
 8000b56:	2201      	movs	r2, #1
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <NRF24_write_registerN+0x4c>)
 8000b5a:	f00d f803 	bl	800db64 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000b5e:	79bb      	ldrb	r3, [r7, #6]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	2364      	movs	r3, #100	; 0x64
 8000b64:	6839      	ldr	r1, [r7, #0]
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <NRF24_write_registerN+0x4c>)
 8000b68:	f00c fffc 	bl	800db64 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff ff2d 	bl	80009cc <NRF24_csn>
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2400020c 	.word	0x2400020c

08000b80 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000b84:	21ff      	movs	r1, #255	; 0xff
 8000b86:	20e1      	movs	r0, #225	; 0xe1
 8000b88:	f7ff ffb0 	bl	8000aec <NRF24_write_register>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000b94:	21ff      	movs	r1, #255	; 0xff
 8000b96:	20e2      	movs	r0, #226	; 0xe2
 8000b98:	f7ff ffa8 	bl	8000aec <NRF24_write_register>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	61fb      	str	r3, [r7, #28]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000bb4:	4b66      	ldr	r3, [pc, #408]	; (8000d50 <NRF24_begin+0x1b0>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2288      	movs	r2, #136	; 0x88
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f017 fc48 	bl	8018454 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000bc4:	4a63      	ldr	r2, [pc, #396]	; (8000d54 <NRF24_begin+0x1b4>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000bca:	4a63      	ldr	r2, [pc, #396]	; (8000d58 <NRF24_begin+0x1b8>)
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000bd0:	4a62      	ldr	r2, [pc, #392]	; (8000d5c <NRF24_begin+0x1bc>)
 8000bd2:	883b      	ldrh	r3, [r7, #0]
 8000bd4:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff fef8 	bl	80009cc <NRF24_csn>
	NRF24_ce(0);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff ff15 	bl	8000a0c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000be2:	2005      	movs	r0, #5
 8000be4:	f002 fcec 	bl	80035c0 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000be8:	2108      	movs	r1, #8
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff ff7e 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000bf0:	213f      	movs	r1, #63	; 0x3f
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff ff7a 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f7ff ff76 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000c00:	2103      	movs	r1, #3
 8000c02:	2003      	movs	r0, #3
 8000c04:	f7ff ff72 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000c08:	2103      	movs	r1, #3
 8000c0a:	2004      	movs	r0, #4
 8000c0c:	f7ff ff6e 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000c10:	2102      	movs	r1, #2
 8000c12:	2005      	movs	r0, #5
 8000c14:	f7ff ff6a 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000c18:	210f      	movs	r1, #15
 8000c1a:	2006      	movs	r0, #6
 8000c1c:	f7ff ff66 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000c20:	210e      	movs	r1, #14
 8000c22:	2007      	movs	r0, #7
 8000c24:	f7ff ff62 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2008      	movs	r0, #8
 8000c2c:	f7ff ff5e 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000c30:	2100      	movs	r1, #0
 8000c32:	2009      	movs	r0, #9
 8000c34:	f7ff ff5a 	bl	8000aec <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000c38:	23e7      	movs	r3, #231	; 0xe7
 8000c3a:	733b      	strb	r3, [r7, #12]
 8000c3c:	23e7      	movs	r3, #231	; 0xe7
 8000c3e:	72fb      	strb	r3, [r7, #11]
 8000c40:	23e7      	movs	r3, #231	; 0xe7
 8000c42:	72bb      	strb	r3, [r7, #10]
 8000c44:	23e7      	movs	r3, #231	; 0xe7
 8000c46:	727b      	strb	r3, [r7, #9]
 8000c48:	23e7      	movs	r3, #231	; 0xe7
 8000c4a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	2205      	movs	r2, #5
 8000c52:	4619      	mov	r1, r3
 8000c54:	200a      	movs	r0, #10
 8000c56:	f7ff ff6b 	bl	8000b30 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000c5a:	23c2      	movs	r3, #194	; 0xc2
 8000c5c:	733b      	strb	r3, [r7, #12]
 8000c5e:	23c2      	movs	r3, #194	; 0xc2
 8000c60:	72fb      	strb	r3, [r7, #11]
 8000c62:	23c2      	movs	r3, #194	; 0xc2
 8000c64:	72bb      	strb	r3, [r7, #10]
 8000c66:	23c2      	movs	r3, #194	; 0xc2
 8000c68:	727b      	strb	r3, [r7, #9]
 8000c6a:	23c2      	movs	r3, #194	; 0xc2
 8000c6c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2205      	movs	r2, #5
 8000c74:	4619      	mov	r1, r3
 8000c76:	200b      	movs	r0, #11
 8000c78:	f7ff ff5a 	bl	8000b30 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000c7c:	21c3      	movs	r1, #195	; 0xc3
 8000c7e:	200c      	movs	r0, #12
 8000c80:	f7ff ff34 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000c84:	21c4      	movs	r1, #196	; 0xc4
 8000c86:	200d      	movs	r0, #13
 8000c88:	f7ff ff30 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000c8c:	21c5      	movs	r1, #197	; 0xc5
 8000c8e:	200e      	movs	r0, #14
 8000c90:	f7ff ff2c 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000c94:	21c6      	movs	r1, #198	; 0xc6
 8000c96:	200f      	movs	r0, #15
 8000c98:	f7ff ff28 	bl	8000aec <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000c9c:	23e7      	movs	r3, #231	; 0xe7
 8000c9e:	733b      	strb	r3, [r7, #12]
 8000ca0:	23e7      	movs	r3, #231	; 0xe7
 8000ca2:	72fb      	strb	r3, [r7, #11]
 8000ca4:	23e7      	movs	r3, #231	; 0xe7
 8000ca6:	72bb      	strb	r3, [r7, #10]
 8000ca8:	23e7      	movs	r3, #231	; 0xe7
 8000caa:	727b      	strb	r3, [r7, #9]
 8000cac:	23e7      	movs	r3, #231	; 0xe7
 8000cae:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	2205      	movs	r2, #5
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	2010      	movs	r0, #16
 8000cba:	f7ff ff39 	bl	8000b30 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2011      	movs	r0, #17
 8000cc2:	f7ff ff13 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2012      	movs	r0, #18
 8000cca:	f7ff ff0f 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2013      	movs	r0, #19
 8000cd2:	f7ff ff0b 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2014      	movs	r0, #20
 8000cda:	f7ff ff07 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2015      	movs	r0, #21
 8000ce2:	f7ff ff03 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2016      	movs	r0, #22
 8000cea:	f7ff feff 	bl	8000aec <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000cee:	f000 f99b 	bl	8001028 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	201c      	movs	r0, #28
 8000cf6:	f7ff fef9 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	201d      	movs	r0, #29
 8000cfe:	f7ff fef5 	bl	8000aec <NRF24_write_register>
	printRadioSettings();
 8000d02:	f000 f9ab 	bl	800105c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000d06:	210f      	movs	r1, #15
 8000d08:	200f      	movs	r0, #15
 8000d0a:	f000 f859 	bl	8000dc0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000d0e:	2003      	movs	r0, #3
 8000d10:	f000 f8cb 	bl	8000eaa <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 f901 	bl	8000f1c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f000 f944 	bl	8000fa8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000d20:	f000 f896 	bl	8000e50 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000d24:	2020      	movs	r0, #32
 8000d26:	f000 f87b 	bl	8000e20 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000d2a:	f000 f974 	bl	8001016 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000d2e:	204c      	movs	r0, #76	; 0x4c
 8000d30:	f000 f861 	bl	8000df6 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000d34:	f7ff ff24 	bl	8000b80 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000d38:	f7ff ff2a 	bl	8000b90 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000d3c:	f000 f95c 	bl	8000ff8 <NRF24_powerDown>
	
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d4a:	b002      	add	sp, #8
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	2400020c 	.word	0x2400020c
 8000d54:	24000204 	.word	0x24000204
 8000d58:	24000208 	.word	0x24000208
 8000d5c:	2400020a 	.word	0x2400020a

08000d60 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fe51 	bl	8000a0c <NRF24_ce>
	NRF24_flush_tx();
 8000d6a:	f7ff ff09 	bl	8000b80 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000d6e:	f7ff ff0f 	bl	8000b90 <NRF24_flush_rx>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000d82:	463b      	mov	r3, r7
 8000d84:	2205      	movs	r2, #5
 8000d86:	4619      	mov	r1, r3
 8000d88:	200a      	movs	r0, #10
 8000d8a:	f7ff fed1 	bl	8000b30 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2205      	movs	r2, #5
 8000d92:	4619      	mov	r1, r3
 8000d94:	2010      	movs	r0, #16
 8000d96:	f7ff fecb 	bl	8000b30 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000d9a:	2320      	movs	r3, #32
 8000d9c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <NRF24_openWritingPipe+0x44>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	7bfa      	ldrb	r2, [r7, #15]
 8000da4:	4293      	cmp	r3, r2
 8000da6:	bf28      	it	cs
 8000da8:	4613      	movcs	r3, r2
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4619      	mov	r1, r3
 8000dae:	2011      	movs	r0, #17
 8000db0:	f7ff fe9c 	bl	8000aec <NRF24_write_register>
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	24000200 	.word	0x24000200

08000dc0 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	460a      	mov	r2, r1
 8000dca:	71fb      	strb	r3, [r7, #7]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	b25a      	sxtb	r2, r3
 8000dd6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	4619      	mov	r1, r3
 8000de8:	2004      	movs	r0, #4
 8000dea:	f7ff fe7f 	bl	8000aec <NRF24_write_register>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b084      	sub	sp, #16
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000e00:	237f      	movs	r3, #127	; 0x7f
 8000e02:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000e04:	7bfa      	ldrb	r2, [r7, #15]
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	bf28      	it	cs
 8000e0c:	4613      	movcs	r3, r2
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	4619      	mov	r1, r3
 8000e12:	2005      	movs	r0, #5
 8000e14:	f7ff fe6a 	bl	8000aec <NRF24_write_register>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000e2e:	7bfa      	ldrb	r2, [r7, #15]
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4293      	cmp	r3, r2
 8000e34:	bf28      	it	cs
 8000e36:	4613      	movcs	r3, r2
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <NRF24_setPayloadSize+0x2c>)
 8000e3c:	701a      	strb	r2, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	24000200 	.word	0x24000200

08000e50 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e54:	201d      	movs	r0, #29
 8000e56:	f7ff fdf9 	bl	8000a4c <NRF24_read_register>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4619      	mov	r1, r3
 8000e64:	201d      	movs	r0, #29
 8000e66:	f7ff fe41 	bl	8000aec <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	201c      	movs	r0, #28
 8000e6e:	f7ff fe3d 	bl	8000aec <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e72:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <NRF24_disableDynamicPayloads+0x2c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	24000201 	.word	0x24000201

08000e80 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000e90:	213f      	movs	r1, #63	; 0x3f
 8000e92:	2001      	movs	r0, #1
 8000e94:	f7ff fe2a 	bl	8000aec <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000e98:	e003      	b.n	8000ea2 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f7ff fe25 	bl	8000aec <NRF24_write_register>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000eb4:	2006      	movs	r0, #6
 8000eb6:	f7ff fdc9 	bl	8000a4c <NRF24_read_register>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	f023 0306 	bic.w	r3, r3, #6
 8000ec4:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d104      	bne.n	8000ed6 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	f043 0306 	orr.w	r3, r3, #6
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e019      	b.n	8000f0a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d104      	bne.n	8000ee6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e011      	b.n	8000f0a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d104      	bne.n	8000ef6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e009      	b.n	8000f0a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d103      	bne.n	8000f0a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	f043 0306 	orr.w	r3, r3, #6
 8000f08:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2006      	movs	r0, #6
 8000f10:	f7ff fdec 	bl	8000aec <NRF24_write_register>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f2a:	2006      	movs	r0, #6
 8000f2c:	f7ff fd8e 	bl	8000a4c <NRF24_read_register>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <NRF24_setDataRate+0x88>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f40:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d107      	bne.n	8000f58 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <NRF24_setDataRate+0x88>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	f043 0320 	orr.w	r3, r3, #32
 8000f54:	73bb      	strb	r3, [r7, #14]
 8000f56:	e00d      	b.n	8000f74 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d107      	bne.n	8000f6e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <NRF24_setDataRate+0x88>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	73bb      	strb	r3, [r7, #14]
 8000f6c:	e002      	b.n	8000f74 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <NRF24_setDataRate+0x88>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	4619      	mov	r1, r3
 8000f78:	2006      	movs	r0, #6
 8000f7a:	f7ff fdb7 	bl	8000aec <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f7e:	2006      	movs	r0, #6
 8000f80:	f7ff fd64 	bl	8000a4c <NRF24_read_register>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d102      	bne.n	8000f94 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e002      	b.n	8000f9a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <NRF24_setDataRate+0x88>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	24000202 	.word	0x24000202

08000fa8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff fd4a 	bl	8000a4c <NRF24_read_register>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f023 030c 	bic.w	r3, r3, #12
 8000fbe:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00f      	beq.n	8000fe6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d104      	bne.n	8000fd6 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f043 0308 	orr.w	r3, r3, #8
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	e007      	b.n	8000fe6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff fd7e 	bl	8000aec <NRF24_write_register>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff fd25 	bl	8000a4c <NRF24_read_register>
 8001002:	4603      	mov	r3, r0
 8001004:	f023 0302 	bic.w	r3, r3, #2
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4619      	mov	r1, r3
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff fd6d 	bl	8000aec <NRF24_write_register>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}

08001016 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800101a:	2170      	movs	r1, #112	; 0x70
 800101c:	2007      	movs	r0, #7
 800101e:	f7ff fd65 	bl	8000aec <NRF24_write_register>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff fccc 	bl	80009cc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001034:	2350      	movs	r3, #80	; 0x50
 8001036:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001038:	2373      	movs	r3, #115	; 0x73
 800103a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800103c:	1d39      	adds	r1, r7, #4
 800103e:	2364      	movs	r3, #100	; 0x64
 8001040:	2202      	movs	r2, #2
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <NRF24_ACTIVATE_cmd+0x30>)
 8001044:	f00c fd8e 	bl	800db64 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff fcbf 	bl	80009cc <NRF24_csn>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2400020c 	.word	0x2400020c

0800105c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	b0a1      	sub	sp, #132	; 0x84
 8001060:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	4ab6      	ldr	r2, [pc, #728]	; (8001340 <printRadioSettings+0x2e4>)
 8001068:	461c      	mov	r4, r3
 800106a:	4615      	mov	r5, r2
 800106c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	8022      	strh	r2, [r4, #0]
 800107e:	3402      	adds	r4, #2
 8001080:	0c1b      	lsrs	r3, r3, #16
 8001082:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f929 	bl	80002e0 <strlen>
 800108e:	4603      	mov	r3, r0
 8001090:	b29a      	uxth	r2, r3
 8001092:	f107 0108 	add.w	r1, r7, #8
 8001096:	230a      	movs	r3, #10
 8001098:	48aa      	ldr	r0, [pc, #680]	; (8001344 <printRadioSettings+0x2e8>)
 800109a:	f00d fd6c 	bl	800eb76 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff fcd4 	bl	8000a4c <NRF24_read_register>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80010aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d020      	beq.n	80010f8 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80010b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00b      	beq.n	80010da <printRadioSettings+0x7e>
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	4aa0      	ldr	r2, [pc, #640]	; (8001348 <printRadioSettings+0x2ec>)
 80010c8:	461c      	mov	r4, r3
 80010ca:	4615      	mov	r5, r2
 80010cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010d8:	e017      	b.n	800110a <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	4a9b      	ldr	r2, [pc, #620]	; (800134c <printRadioSettings+0x2f0>)
 80010e0:	461c      	mov	r4, r3
 80010e2:	4615      	mov	r5, r2
 80010e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ec:	c403      	stmia	r4!, {r0, r1}
 80010ee:	8022      	strh	r2, [r4, #0]
 80010f0:	3402      	adds	r4, #2
 80010f2:	0c13      	lsrs	r3, r2, #16
 80010f4:	7023      	strb	r3, [r4, #0]
 80010f6:	e008      	b.n	800110a <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4a94      	ldr	r2, [pc, #592]	; (8001350 <printRadioSettings+0x2f4>)
 80010fe:	461c      	mov	r4, r3
 8001100:	4615      	mov	r5, r2
 8001102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001106:	682b      	ldr	r3, [r5, #0]
 8001108:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f8e6 	bl	80002e0 <strlen>
 8001114:	4603      	mov	r3, r0
 8001116:	b29a      	uxth	r2, r3
 8001118:	f107 0108 	add.w	r1, r7, #8
 800111c:	230a      	movs	r3, #10
 800111e:	4889      	ldr	r0, [pc, #548]	; (8001344 <printRadioSettings+0x2e8>)
 8001120:	f00d fd29 	bl	800eb76 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001124:	2001      	movs	r0, #1
 8001126:	f7ff fc91 	bl	8000a4c <NRF24_read_register>
 800112a:	4603      	mov	r3, r0
 800112c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001130:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001134:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001138:	2b00      	cmp	r3, #0
 800113a:	bfcc      	ite	gt
 800113c:	2301      	movgt	r3, #1
 800113e:	2300      	movle	r3, #0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001144:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001148:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800114c:	2b00      	cmp	r3, #0
 800114e:	bfcc      	ite	gt
 8001150:	2301      	movgt	r3, #1
 8001152:	2300      	movle	r3, #0
 8001154:	b2db      	uxtb	r3, r3
 8001156:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001158:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800115c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001160:	2b00      	cmp	r3, #0
 8001162:	bfcc      	ite	gt
 8001164:	2301      	movgt	r3, #1
 8001166:	2300      	movle	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800116c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001170:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001174:	2b00      	cmp	r3, #0
 8001176:	bfcc      	ite	gt
 8001178:	2301      	movgt	r3, #1
 800117a:	2300      	movle	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001180:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001184:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001188:	2b00      	cmp	r3, #0
 800118a:	bfcc      	ite	gt
 800118c:	2301      	movgt	r3, #1
 800118e:	2300      	movle	r3, #0
 8001190:	b2db      	uxtb	r3, r3
 8001192:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001194:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001198:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800119c:	2b00      	cmp	r3, #0
 800119e:	bfcc      	ite	gt
 80011a0:	2301      	movgt	r3, #1
 80011a2:	2300      	movle	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	f107 0008 	add.w	r0, r7, #8
 80011aa:	9303      	str	r3, [sp, #12]
 80011ac:	9402      	str	r4, [sp, #8]
 80011ae:	9101      	str	r1, [sp, #4]
 80011b0:	9200      	str	r2, [sp, #0]
 80011b2:	4633      	mov	r3, r6
 80011b4:	462a      	mov	r2, r5
 80011b6:	4967      	ldr	r1, [pc, #412]	; (8001354 <printRadioSettings+0x2f8>)
 80011b8:	f017 fac8 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f88d 	bl	80002e0 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	f107 0108 	add.w	r1, r7, #8
 80011ce:	230a      	movs	r3, #10
 80011d0:	485c      	ldr	r0, [pc, #368]	; (8001344 <printRadioSettings+0x2e8>)
 80011d2:	f00d fcd0 	bl	800eb76 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80011d6:	2002      	movs	r0, #2
 80011d8:	f7ff fc38 	bl	8000a4c <NRF24_read_register>
 80011dc:	4603      	mov	r3, r0
 80011de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011e6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bfcc      	ite	gt
 80011ee:	2301      	movgt	r3, #1
 80011f0:	2300      	movle	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011fa:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011fe:	2b00      	cmp	r3, #0
 8001200:	bfcc      	ite	gt
 8001202:	2301      	movgt	r3, #1
 8001204:	2300      	movle	r3, #0
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800120a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800120e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001212:	2b00      	cmp	r3, #0
 8001214:	bfcc      	ite	gt
 8001216:	2301      	movgt	r3, #1
 8001218:	2300      	movle	r3, #0
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800121e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001222:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001226:	2b00      	cmp	r3, #0
 8001228:	bfcc      	ite	gt
 800122a:	2301      	movgt	r3, #1
 800122c:	2300      	movle	r3, #0
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001232:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001236:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800123a:	2b00      	cmp	r3, #0
 800123c:	bfcc      	ite	gt
 800123e:	2301      	movgt	r3, #1
 8001240:	2300      	movle	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001246:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800124a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800124e:	2b00      	cmp	r3, #0
 8001250:	bfcc      	ite	gt
 8001252:	2301      	movgt	r3, #1
 8001254:	2300      	movle	r3, #0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f107 0008 	add.w	r0, r7, #8
 800125c:	9303      	str	r3, [sp, #12]
 800125e:	9402      	str	r4, [sp, #8]
 8001260:	9101      	str	r1, [sp, #4]
 8001262:	9200      	str	r2, [sp, #0]
 8001264:	4633      	mov	r3, r6
 8001266:	462a      	mov	r2, r5
 8001268:	493b      	ldr	r1, [pc, #236]	; (8001358 <printRadioSettings+0x2fc>)
 800126a:	f017 fa6f 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f834 	bl	80002e0 <strlen>
 8001278:	4603      	mov	r3, r0
 800127a:	b29a      	uxth	r2, r3
 800127c:	f107 0108 	add.w	r1, r7, #8
 8001280:	230a      	movs	r3, #10
 8001282:	4830      	ldr	r0, [pc, #192]	; (8001344 <printRadioSettings+0x2e8>)
 8001284:	f00d fc77 	bl	800eb76 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001288:	2003      	movs	r0, #3
 800128a:	f7ff fbdf 	bl	8000a4c <NRF24_read_register>
 800128e:	4603      	mov	r3, r0
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001298:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800129c:	3302      	adds	r3, #2
 800129e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012a2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	492c      	ldr	r1, [pc, #176]	; (800135c <printRadioSettings+0x300>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f017 fa4d 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f812 	bl	80002e0 <strlen>
 80012bc:	4603      	mov	r3, r0
 80012be:	b29a      	uxth	r2, r3
 80012c0:	f107 0108 	add.w	r1, r7, #8
 80012c4:	230a      	movs	r3, #10
 80012c6:	481f      	ldr	r0, [pc, #124]	; (8001344 <printRadioSettings+0x2e8>)
 80012c8:	f00d fc55 	bl	800eb76 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80012cc:	2005      	movs	r0, #5
 80012ce:	f7ff fbbd 	bl	8000a4c <NRF24_read_register>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80012d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	491e      	ldr	r1, [pc, #120]	; (8001360 <printRadioSettings+0x304>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f017 fa30 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7fe fff5 	bl	80002e0 <strlen>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	f107 0108 	add.w	r1, r7, #8
 80012fe:	230a      	movs	r3, #10
 8001300:	4810      	ldr	r0, [pc, #64]	; (8001344 <printRadioSettings+0x2e8>)
 8001302:	f00d fc38 	bl	800eb76 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001306:	2006      	movs	r0, #6
 8001308:	f7ff fba0 	bl	8000a4c <NRF24_read_register>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001312:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d024      	beq.n	8001368 <printRadioSettings+0x30c>
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	4a10      	ldr	r2, [pc, #64]	; (8001364 <printRadioSettings+0x308>)
 8001324:	461c      	mov	r4, r3
 8001326:	4615      	mov	r5, r2
 8001328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001330:	6020      	str	r0, [r4, #0]
 8001332:	3404      	adds	r4, #4
 8001334:	8021      	strh	r1, [r4, #0]
 8001336:	3402      	adds	r4, #2
 8001338:	0c0b      	lsrs	r3, r1, #16
 800133a:	7023      	strb	r3, [r4, #0]
 800133c:	e023      	b.n	8001386 <printRadioSettings+0x32a>
 800133e:	bf00      	nop
 8001340:	08019754 	.word	0x08019754
 8001344:	24000294 	.word	0x24000294
 8001348:	08019788 	.word	0x08019788
 800134c:	080197a4 	.word	0x080197a4
 8001350:	080197c0 	.word	0x080197c0
 8001354:	080197d4 	.word	0x080197d4
 8001358:	08019818 	.word	0x08019818
 800135c:	08019864 	.word	0x08019864
 8001360:	08019880 	.word	0x08019880
 8001364:	08019894 	.word	0x08019894
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4a29      	ldr	r2, [pc, #164]	; (8001414 <printRadioSettings+0x3b8>)
 800136e:	461c      	mov	r4, r3
 8001370:	4615      	mov	r5, r2
 8001372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001376:	e895 0003 	ldmia.w	r5, {r0, r1}
 800137a:	6020      	str	r0, [r4, #0]
 800137c:	3404      	adds	r4, #4
 800137e:	8021      	strh	r1, [r4, #0]
 8001380:	3402      	adds	r4, #2
 8001382:	0c0b      	lsrs	r3, r1, #16
 8001384:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ffa8 	bl	80002e0 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f107 0108 	add.w	r1, r7, #8
 8001398:	230a      	movs	r3, #10
 800139a:	481f      	ldr	r0, [pc, #124]	; (8001418 <printRadioSettings+0x3bc>)
 800139c:	f00d fbeb 	bl	800eb76 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80013a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a4:	f003 0306 	and.w	r3, r3, #6
 80013a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80013ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013b0:	085b      	lsrs	r3, r3, #1
 80013b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80013b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d109      	bne.n	80013d2 <printRadioSettings+0x376>
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	4a16      	ldr	r2, [pc, #88]	; (800141c <printRadioSettings+0x3c0>)
 80013c4:	461c      	mov	r4, r3
 80013c6:	4615      	mov	r5, r2
 80013c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013cc:	682b      	ldr	r3, [r5, #0]
 80013ce:	6023      	str	r3, [r4, #0]
 80013d0:	e037      	b.n	8001442 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80013d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d109      	bne.n	80013ee <printRadioSettings+0x392>
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4a10      	ldr	r2, [pc, #64]	; (8001420 <printRadioSettings+0x3c4>)
 80013e0:	461c      	mov	r4, r3
 80013e2:	4615      	mov	r5, r2
 80013e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e8:	682b      	ldr	r3, [r5, #0]
 80013ea:	6023      	str	r3, [r4, #0]
 80013ec:	e029      	b.n	8001442 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d118      	bne.n	8001428 <printRadioSettings+0x3cc>
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <printRadioSettings+0x3c8>)
 80013fc:	461c      	mov	r4, r3
 80013fe:	4615      	mov	r5, r2
 8001400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	8022      	strh	r2, [r4, #0]
 800140a:	3402      	adds	r4, #2
 800140c:	0c1b      	lsrs	r3, r3, #16
 800140e:	7023      	strb	r3, [r4, #0]
 8001410:	e017      	b.n	8001442 <printRadioSettings+0x3e6>
 8001412:	bf00      	nop
 8001414:	080198ac 	.word	0x080198ac
 8001418:	24000294 	.word	0x24000294
 800141c:	080198c4 	.word	0x080198c4
 8001420:	080198d8 	.word	0x080198d8
 8001424:	080198ec 	.word	0x080198ec
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001428:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800142c:	2b03      	cmp	r3, #3
 800142e:	d108      	bne.n	8001442 <printRadioSettings+0x3e6>
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	4ad7      	ldr	r2, [pc, #860]	; (8001794 <printRadioSettings+0x738>)
 8001436:	461c      	mov	r4, r3
 8001438:	4615      	mov	r5, r2
 800143a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143e:	682b      	ldr	r3, [r5, #0]
 8001440:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe ff4a 	bl	80002e0 <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	b29a      	uxth	r2, r3
 8001450:	f107 0108 	add.w	r1, r7, #8
 8001454:	230a      	movs	r3, #10
 8001456:	48d0      	ldr	r0, [pc, #832]	; (8001798 <printRadioSettings+0x73c>)
 8001458:	f00d fb8d 	bl	800eb76 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800145c:	463b      	mov	r3, r7
 800145e:	2205      	movs	r2, #5
 8001460:	4619      	mov	r1, r3
 8001462:	200a      	movs	r0, #10
 8001464:	f7ff fb1a 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001468:	793b      	ldrb	r3, [r7, #4]
 800146a:	461c      	mov	r4, r3
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	461d      	mov	r5, r3
 8001470:	78bb      	ldrb	r3, [r7, #2]
 8001472:	787a      	ldrb	r2, [r7, #1]
 8001474:	7839      	ldrb	r1, [r7, #0]
 8001476:	f107 0008 	add.w	r0, r7, #8
 800147a:	9102      	str	r1, [sp, #8]
 800147c:	9201      	str	r2, [sp, #4]
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	462b      	mov	r3, r5
 8001482:	4622      	mov	r2, r4
 8001484:	49c5      	ldr	r1, [pc, #788]	; (800179c <printRadioSettings+0x740>)
 8001486:	f017 f961 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe ff26 	bl	80002e0 <strlen>
 8001494:	4603      	mov	r3, r0
 8001496:	b29a      	uxth	r2, r3
 8001498:	f107 0108 	add.w	r1, r7, #8
 800149c:	230a      	movs	r3, #10
 800149e:	48be      	ldr	r0, [pc, #760]	; (8001798 <printRadioSettings+0x73c>)
 80014a0:	f00d fb69 	bl	800eb76 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80014a4:	463b      	mov	r3, r7
 80014a6:	2205      	movs	r2, #5
 80014a8:	4619      	mov	r1, r3
 80014aa:	200b      	movs	r0, #11
 80014ac:	f7ff faf6 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80014b0:	793b      	ldrb	r3, [r7, #4]
 80014b2:	461c      	mov	r4, r3
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	461d      	mov	r5, r3
 80014b8:	78bb      	ldrb	r3, [r7, #2]
 80014ba:	787a      	ldrb	r2, [r7, #1]
 80014bc:	7839      	ldrb	r1, [r7, #0]
 80014be:	f107 0008 	add.w	r0, r7, #8
 80014c2:	9102      	str	r1, [sp, #8]
 80014c4:	9201      	str	r2, [sp, #4]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	462b      	mov	r3, r5
 80014ca:	4622      	mov	r2, r4
 80014cc:	49b4      	ldr	r1, [pc, #720]	; (80017a0 <printRadioSettings+0x744>)
 80014ce:	f017 f93d 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe ff02 	bl	80002e0 <strlen>
 80014dc:	4603      	mov	r3, r0
 80014de:	b29a      	uxth	r2, r3
 80014e0:	f107 0108 	add.w	r1, r7, #8
 80014e4:	230a      	movs	r3, #10
 80014e6:	48ac      	ldr	r0, [pc, #688]	; (8001798 <printRadioSettings+0x73c>)
 80014e8:	f00d fb45 	bl	800eb76 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014ec:	463b      	mov	r3, r7
 80014ee:	2201      	movs	r2, #1
 80014f0:	4619      	mov	r1, r3
 80014f2:	200c      	movs	r0, #12
 80014f4:	f7ff fad2 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014f8:	783b      	ldrb	r3, [r7, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	49a8      	ldr	r1, [pc, #672]	; (80017a4 <printRadioSettings+0x748>)
 8001502:	4618      	mov	r0, r3
 8001504:	f017 f922 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe fee7 	bl	80002e0 <strlen>
 8001512:	4603      	mov	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	f107 0108 	add.w	r1, r7, #8
 800151a:	230a      	movs	r3, #10
 800151c:	489e      	ldr	r0, [pc, #632]	; (8001798 <printRadioSettings+0x73c>)
 800151e:	f00d fb2a 	bl	800eb76 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001522:	463b      	mov	r3, r7
 8001524:	2201      	movs	r2, #1
 8001526:	4619      	mov	r1, r3
 8001528:	200d      	movs	r0, #13
 800152a:	f7ff fab7 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800152e:	783b      	ldrb	r3, [r7, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	499c      	ldr	r1, [pc, #624]	; (80017a8 <printRadioSettings+0x74c>)
 8001538:	4618      	mov	r0, r3
 800153a:	f017 f907 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe fecc 	bl	80002e0 <strlen>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	f107 0108 	add.w	r1, r7, #8
 8001550:	230a      	movs	r3, #10
 8001552:	4891      	ldr	r0, [pc, #580]	; (8001798 <printRadioSettings+0x73c>)
 8001554:	f00d fb0f 	bl	800eb76 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001558:	463b      	mov	r3, r7
 800155a:	2201      	movs	r2, #1
 800155c:	4619      	mov	r1, r3
 800155e:	200e      	movs	r0, #14
 8001560:	f7ff fa9c 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001564:	783b      	ldrb	r3, [r7, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	498f      	ldr	r1, [pc, #572]	; (80017ac <printRadioSettings+0x750>)
 800156e:	4618      	mov	r0, r3
 8001570:	f017 f8ec 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe feb1 	bl	80002e0 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	b29a      	uxth	r2, r3
 8001582:	f107 0108 	add.w	r1, r7, #8
 8001586:	230a      	movs	r3, #10
 8001588:	4883      	ldr	r0, [pc, #524]	; (8001798 <printRadioSettings+0x73c>)
 800158a:	f00d faf4 	bl	800eb76 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800158e:	463b      	mov	r3, r7
 8001590:	2201      	movs	r2, #1
 8001592:	4619      	mov	r1, r3
 8001594:	200f      	movs	r0, #15
 8001596:	f7ff fa81 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800159a:	783b      	ldrb	r3, [r7, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	4983      	ldr	r1, [pc, #524]	; (80017b0 <printRadioSettings+0x754>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f017 f8d1 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe fe96 	bl	80002e0 <strlen>
 80015b4:	4603      	mov	r3, r0
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	f107 0108 	add.w	r1, r7, #8
 80015bc:	230a      	movs	r3, #10
 80015be:	4876      	ldr	r0, [pc, #472]	; (8001798 <printRadioSettings+0x73c>)
 80015c0:	f00d fad9 	bl	800eb76 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015c4:	463b      	mov	r3, r7
 80015c6:	2205      	movs	r2, #5
 80015c8:	4619      	mov	r1, r3
 80015ca:	2010      	movs	r0, #16
 80015cc:	f7ff fa66 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015d0:	793b      	ldrb	r3, [r7, #4]
 80015d2:	461c      	mov	r4, r3
 80015d4:	78fb      	ldrb	r3, [r7, #3]
 80015d6:	461d      	mov	r5, r3
 80015d8:	78bb      	ldrb	r3, [r7, #2]
 80015da:	787a      	ldrb	r2, [r7, #1]
 80015dc:	7839      	ldrb	r1, [r7, #0]
 80015de:	f107 0008 	add.w	r0, r7, #8
 80015e2:	9102      	str	r1, [sp, #8]
 80015e4:	9201      	str	r2, [sp, #4]
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	462b      	mov	r3, r5
 80015ea:	4622      	mov	r2, r4
 80015ec:	4971      	ldr	r1, [pc, #452]	; (80017b4 <printRadioSettings+0x758>)
 80015ee:	f017 f8ad 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe fe72 	bl	80002e0 <strlen>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b29a      	uxth	r2, r3
 8001600:	f107 0108 	add.w	r1, r7, #8
 8001604:	230a      	movs	r3, #10
 8001606:	4864      	ldr	r0, [pc, #400]	; (8001798 <printRadioSettings+0x73c>)
 8001608:	f00d fab5 	bl	800eb76 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800160c:	2011      	movs	r0, #17
 800160e:	f7ff fa1d 	bl	8000a4c <NRF24_read_register>
 8001612:	4603      	mov	r3, r0
 8001614:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001618:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	4964      	ldr	r1, [pc, #400]	; (80017b8 <printRadioSettings+0x75c>)
 8001626:	4618      	mov	r0, r3
 8001628:	f017 f890 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fe55 	bl	80002e0 <strlen>
 8001636:	4603      	mov	r3, r0
 8001638:	b29a      	uxth	r2, r3
 800163a:	f107 0108 	add.w	r1, r7, #8
 800163e:	230a      	movs	r3, #10
 8001640:	4855      	ldr	r0, [pc, #340]	; (8001798 <printRadioSettings+0x73c>)
 8001642:	f00d fa98 	bl	800eb76 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001646:	2012      	movs	r0, #18
 8001648:	f7ff fa00 	bl	8000a4c <NRF24_read_register>
 800164c:	4603      	mov	r3, r0
 800164e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001652:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	4957      	ldr	r1, [pc, #348]	; (80017bc <printRadioSettings+0x760>)
 8001660:	4618      	mov	r0, r3
 8001662:	f017 f873 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fe38 	bl	80002e0 <strlen>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	f107 0108 	add.w	r1, r7, #8
 8001678:	230a      	movs	r3, #10
 800167a:	4847      	ldr	r0, [pc, #284]	; (8001798 <printRadioSettings+0x73c>)
 800167c:	f00d fa7b 	bl	800eb76 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001680:	2013      	movs	r0, #19
 8001682:	f7ff f9e3 	bl	8000a4c <NRF24_read_register>
 8001686:	4603      	mov	r3, r0
 8001688:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800168c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001690:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	4949      	ldr	r1, [pc, #292]	; (80017c0 <printRadioSettings+0x764>)
 800169a:	4618      	mov	r0, r3
 800169c:	f017 f856 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fe1b 	bl	80002e0 <strlen>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f107 0108 	add.w	r1, r7, #8
 80016b2:	230a      	movs	r3, #10
 80016b4:	4838      	ldr	r0, [pc, #224]	; (8001798 <printRadioSettings+0x73c>)
 80016b6:	f00d fa5e 	bl	800eb76 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80016ba:	2014      	movs	r0, #20
 80016bc:	f7ff f9c6 	bl	8000a4c <NRF24_read_register>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	493c      	ldr	r1, [pc, #240]	; (80017c4 <printRadioSettings+0x768>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f017 f839 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fdfe 	bl	80002e0 <strlen>
 80016e4:	4603      	mov	r3, r0
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	f107 0108 	add.w	r1, r7, #8
 80016ec:	230a      	movs	r3, #10
 80016ee:	482a      	ldr	r0, [pc, #168]	; (8001798 <printRadioSettings+0x73c>)
 80016f0:	f00d fa41 	bl	800eb76 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 80016f4:	2015      	movs	r0, #21
 80016f6:	f7ff f9a9 	bl	8000a4c <NRF24_read_register>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001700:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001704:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	492e      	ldr	r1, [pc, #184]	; (80017c8 <printRadioSettings+0x76c>)
 800170e:	4618      	mov	r0, r3
 8001710:	f017 f81c 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe fde1 	bl	80002e0 <strlen>
 800171e:	4603      	mov	r3, r0
 8001720:	b29a      	uxth	r2, r3
 8001722:	f107 0108 	add.w	r1, r7, #8
 8001726:	230a      	movs	r3, #10
 8001728:	481b      	ldr	r0, [pc, #108]	; (8001798 <printRadioSettings+0x73c>)
 800172a:	f00d fa24 	bl	800eb76 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 800172e:	2016      	movs	r0, #22
 8001730:	f7ff f98c 	bl	8000a4c <NRF24_read_register>
 8001734:	4603      	mov	r3, r0
 8001736:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800173a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800173e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	4921      	ldr	r1, [pc, #132]	; (80017cc <printRadioSettings+0x770>)
 8001748:	4618      	mov	r0, r3
 800174a:	f016 ffff 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800174e:	f107 0308 	add.w	r3, r7, #8
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fdc4 	bl	80002e0 <strlen>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	f107 0108 	add.w	r1, r7, #8
 8001760:	230a      	movs	r3, #10
 8001762:	480d      	ldr	r0, [pc, #52]	; (8001798 <printRadioSettings+0x73c>)
 8001764:	f00d fa07 	bl	800eb76 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001768:	201c      	movs	r0, #28
 800176a:	f7ff f96f 	bl	8000a4c <NRF24_read_register>
 800176e:	4603      	mov	r3, r0
 8001770:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001774:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001778:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800177c:	2b00      	cmp	r3, #0
 800177e:	bfcc      	ite	gt
 8001780:	2301      	movgt	r3, #1
 8001782:	2300      	movle	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001788:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	e01e      	b.n	80017d0 <printRadioSettings+0x774>
 8001792:	bf00      	nop
 8001794:	08019900 	.word	0x08019900
 8001798:	24000294 	.word	0x24000294
 800179c:	08019914 	.word	0x08019914
 80017a0:	08019944 	.word	0x08019944
 80017a4:	08019974 	.word	0x08019974
 80017a8:	0801999c 	.word	0x0801999c
 80017ac:	080199c4 	.word	0x080199c4
 80017b0:	080199ec 	.word	0x080199ec
 80017b4:	08019a14 	.word	0x08019a14
 80017b8:	08019a40 	.word	0x08019a40
 80017bc:	08019a5c 	.word	0x08019a5c
 80017c0:	08019a78 	.word	0x08019a78
 80017c4:	08019a94 	.word	0x08019a94
 80017c8:	08019ab0 	.word	0x08019ab0
 80017cc:	08019acc 	.word	0x08019acc
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bfcc      	ite	gt
 80017d4:	2301      	movgt	r3, #1
 80017d6:	2300      	movle	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e0:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bfcc      	ite	gt
 80017e8:	2301      	movgt	r3, #1
 80017ea:	2300      	movle	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017f4:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bfcc      	ite	gt
 80017fc:	2301      	movgt	r3, #1
 80017fe:	2300      	movle	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001804:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001808:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800180c:	2b00      	cmp	r3, #0
 800180e:	bfcc      	ite	gt
 8001810:	2301      	movgt	r3, #1
 8001812:	2300      	movle	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001818:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800181c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001820:	2b00      	cmp	r3, #0
 8001822:	bfcc      	ite	gt
 8001824:	2301      	movgt	r3, #1
 8001826:	2300      	movle	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f107 0008 	add.w	r0, r7, #8
 800182e:	9303      	str	r3, [sp, #12]
 8001830:	9402      	str	r4, [sp, #8]
 8001832:	9101      	str	r1, [sp, #4]
 8001834:	9200      	str	r2, [sp, #0]
 8001836:	4633      	mov	r3, r6
 8001838:	462a      	mov	r2, r5
 800183a:	494a      	ldr	r1, [pc, #296]	; (8001964 <printRadioSettings+0x908>)
 800183c:	f016 ff86 	bl	801874c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fd4b 	bl	80002e0 <strlen>
 800184a:	4603      	mov	r3, r0
 800184c:	b29a      	uxth	r2, r3
 800184e:	f107 0108 	add.w	r1, r7, #8
 8001852:	230a      	movs	r3, #10
 8001854:	4844      	ldr	r0, [pc, #272]	; (8001968 <printRadioSettings+0x90c>)
 8001856:	f00d f98e 	bl	800eb76 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800185a:	201d      	movs	r0, #29
 800185c:	f7ff f8f6 	bl	8000a4c <NRF24_read_register>
 8001860:	4603      	mov	r3, r0
 8001862:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001866:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00c      	beq.n	800188c <printRadioSettings+0x830>
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	4a3d      	ldr	r2, [pc, #244]	; (800196c <printRadioSettings+0x910>)
 8001878:	461c      	mov	r4, r3
 800187a:	4615      	mov	r5, r2
 800187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001880:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001884:	6020      	str	r0, [r4, #0]
 8001886:	3404      	adds	r4, #4
 8001888:	8021      	strh	r1, [r4, #0]
 800188a:	e00e      	b.n	80018aa <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4a37      	ldr	r2, [pc, #220]	; (8001970 <printRadioSettings+0x914>)
 8001892:	461c      	mov	r4, r3
 8001894:	4615      	mov	r5, r2
 8001896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800189e:	6020      	str	r0, [r4, #0]
 80018a0:	3404      	adds	r4, #4
 80018a2:	8021      	strh	r1, [r4, #0]
 80018a4:	3402      	adds	r4, #2
 80018a6:	0c0b      	lsrs	r3, r1, #16
 80018a8:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fd16 	bl	80002e0 <strlen>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	f107 0108 	add.w	r1, r7, #8
 80018bc:	230a      	movs	r3, #10
 80018be:	482a      	ldr	r0, [pc, #168]	; (8001968 <printRadioSettings+0x90c>)
 80018c0:	f00d f959 	bl	800eb76 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80018c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00b      	beq.n	80018e8 <printRadioSettings+0x88c>
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	4a27      	ldr	r2, [pc, #156]	; (8001974 <printRadioSettings+0x918>)
 80018d6:	461c      	mov	r4, r3
 80018d8:	4615      	mov	r5, r2
 80018da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018e2:	c403      	stmia	r4!, {r0, r1}
 80018e4:	8022      	strh	r2, [r4, #0]
 80018e6:	e00d      	b.n	8001904 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	4a22      	ldr	r2, [pc, #136]	; (8001978 <printRadioSettings+0x91c>)
 80018ee:	461c      	mov	r4, r3
 80018f0:	4615      	mov	r5, r2
 80018f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018fa:	c403      	stmia	r4!, {r0, r1}
 80018fc:	8022      	strh	r2, [r4, #0]
 80018fe:	3402      	adds	r4, #2
 8001900:	0c13      	lsrs	r3, r2, #16
 8001902:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fce9 	bl	80002e0 <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	f107 0108 	add.w	r1, r7, #8
 8001916:	230a      	movs	r3, #10
 8001918:	4813      	ldr	r0, [pc, #76]	; (8001968 <printRadioSettings+0x90c>)
 800191a:	f00d f92c 	bl	800eb76 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	4a16      	ldr	r2, [pc, #88]	; (800197c <printRadioSettings+0x920>)
 8001924:	461c      	mov	r4, r3
 8001926:	4615      	mov	r5, r2
 8001928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800192c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001934:	682b      	ldr	r3, [r5, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	8022      	strh	r2, [r4, #0]
 800193a:	3402      	adds	r4, #2
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fccb 	bl	80002e0 <strlen>
 800194a:	4603      	mov	r3, r0
 800194c:	b29a      	uxth	r2, r3
 800194e:	f107 0108 	add.w	r1, r7, #8
 8001952:	230a      	movs	r3, #10
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <printRadioSettings+0x90c>)
 8001956:	f00d f90e 	bl	800eb76 <HAL_UART_Transmit>
}
 800195a:	bf00      	nop
 800195c:	3774      	adds	r7, #116	; 0x74
 800195e:	46bd      	mov	sp, r7
 8001960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001962:	bf00      	nop
 8001964:	08019ae8 	.word	0x08019ae8
 8001968:	24000294 	.word	0x24000294
 800196c:	08019b34 	.word	0x08019b34
 8001970:	08019b4c 	.word	0x08019b4c
 8001974:	08019b64 	.word	0x08019b64
 8001978:	08019b80 	.word	0x08019b80
 800197c:	08019754 	.word	0x08019754

08001980 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001980:	b084      	sub	sp, #16
 8001982:	b580      	push	{r7, lr}
 8001984:	af00      	add	r7, sp, #0
 8001986:	f107 0c08 	add.w	ip, r7, #8
 800198a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <nrf24_DebugUART_Init+0x2c>)
 8001990:	4618      	mov	r0, r3
 8001992:	f107 0108 	add.w	r1, r7, #8
 8001996:	238c      	movs	r3, #140	; 0x8c
 8001998:	461a      	mov	r2, r3
 800199a:	f016 fd5b 	bl	8018454 <memcpy>
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019a6:	b004      	add	sp, #16
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	24000294 	.word	0x24000294

080019b0 <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	dd03      	ble.n	80019c8 <WriteToBuff+0x18>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019c6:	db01      	blt.n	80019cc <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 80019c8:	2303      	movs	r3, #3
 80019ca:	e097      	b.n	8001afc <WriteToBuff+0x14c>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 80019cc:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <WriteToBuff+0x154>)
 80019ce:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019d8:	d23d      	bcs.n	8001a56 <WriteToBuff+0xa6>
 80019da:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <WriteToBuff+0x154>)
 80019dc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019ea:	d334      	bcc.n	8001a56 <WriteToBuff+0xa6>
    DataBuffer.counter = Bufflength;
 80019ec:	4b45      	ldr	r3, [pc, #276]	; (8001b04 <WriteToBuff+0x154>)
 80019ee:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80019f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019f6:	601a      	str	r2, [r3, #0]
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 80019f8:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <WriteToBuff+0x154>)
 80019fa:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a40      	ldr	r2, [pc, #256]	; (8001b04 <WriteToBuff+0x154>)
 8001a02:	4413      	add	r3, r2
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f016 fd23 	bl	8018454 <memcpy>
    DataBuffer.counter += len;
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <WriteToBuff+0x154>)
 8001a10:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	441a      	add	r2, r3
 8001a1a:	4b3a      	ldr	r3, [pc, #232]	; (8001b04 <WriteToBuff+0x154>)
 8001a1c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001a20:	601a      	str	r2, [r3, #0]
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 8001a22:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <WriteToBuff+0x158>)
 8001a24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a28:	4936      	ldr	r1, [pc, #216]	; (8001b04 <WriteToBuff+0x154>)
 8001a2a:	4838      	ldr	r0, [pc, #224]	; (8001b0c <WriteToBuff+0x15c>)
 8001a2c:	f015 fd61 	bl	80174f2 <f_write>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10d      	bne.n	8001a52 <WriteToBuff+0xa2>

      memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear next buffer after writing
 8001a36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4834      	ldr	r0, [pc, #208]	; (8001b10 <WriteToBuff+0x160>)
 8001a3e:	f016 fd14 	bl	801846a <memset>
    	f_sync(&myFILE);
 8001a42:	4832      	ldr	r0, [pc, #200]	; (8001b0c <WriteToBuff+0x15c>)
 8001a44:	f015 feca 	bl	80177dc <f_sync>
      printf("Buffer 1 has been written\n");
 8001a48:	4832      	ldr	r0, [pc, #200]	; (8001b14 <WriteToBuff+0x164>)
 8001a4a:	f016 fe33 	bl	80186b4 <puts>
      return 1; //buffer 1 has been written
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e054      	b.n	8001afc <WriteToBuff+0x14c>
    }
    return 4; //could not write :(
 8001a52:	2304      	movs	r3, #4
 8001a54:	e052      	b.n	8001afc <WriteToBuff+0x14c>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 8001a56:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <WriteToBuff+0x154>)
 8001a58:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	4413      	add	r3, r2
 8001a62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a66:	d333      	bcc.n	8001ad0 <WriteToBuff+0x120>
    DataBuffer.counter = 0;
 8001a68:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <WriteToBuff+0x154>)
 8001a6a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <WriteToBuff+0x154>)
 8001a74:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <WriteToBuff+0x154>)
 8001a7c:	4413      	add	r3, r2
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f016 fce6 	bl	8018454 <memcpy>
    DataBuffer.counter += len;
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <WriteToBuff+0x154>)
 8001a8a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	441a      	add	r2, r3
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <WriteToBuff+0x154>)
 8001a96:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001a9a:	601a      	str	r2, [r3, #0]
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <WriteToBuff+0x158>)
 8001a9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aa2:	491b      	ldr	r1, [pc, #108]	; (8001b10 <WriteToBuff+0x160>)
 8001aa4:	4819      	ldr	r0, [pc, #100]	; (8001b0c <WriteToBuff+0x15c>)
 8001aa6:	f015 fd24 	bl	80174f2 <f_write>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10d      	bne.n	8001acc <WriteToBuff+0x11c>
      memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear next buffer after writing
 8001ab0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4813      	ldr	r0, [pc, #76]	; (8001b04 <WriteToBuff+0x154>)
 8001ab8:	f016 fcd7 	bl	801846a <memset>
    	f_sync(&myFILE);
 8001abc:	4813      	ldr	r0, [pc, #76]	; (8001b0c <WriteToBuff+0x15c>)
 8001abe:	f015 fe8d 	bl	80177dc <f_sync>
      printf("Buffer 2 has been written\n");
 8001ac2:	4815      	ldr	r0, [pc, #84]	; (8001b18 <WriteToBuff+0x168>)
 8001ac4:	f016 fdf6 	bl	80186b4 <puts>
      return 2; //buffer 2 has been written
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e017      	b.n	8001afc <WriteToBuff+0x14c>
    }
    return 4; //could not write :(
 8001acc:	2304      	movs	r3, #4
 8001ace:	e015      	b.n	8001afc <WriteToBuff+0x14c>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <WriteToBuff+0x154>)
 8001ad2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <WriteToBuff+0x154>)
 8001ada:	4413      	add	r3, r2
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f016 fcb7 	bl	8018454 <memcpy>
  DataBuffer.counter += len;
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <WriteToBuff+0x154>)
 8001ae8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	441a      	add	r2, r3
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <WriteToBuff+0x154>)
 8001af4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001af8:	601a      	str	r2, [r3, #0]
  return 0; //moved data to buffer
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	24000320 	.word	0x24000320
 8001b08:	240408c8 	.word	0x240408c8
 8001b0c:	24040390 	.word	0x24040390
 8001b10:	24020320 	.word	0x24020320
 8001b14:	08019c98 	.word	0x08019c98
 8001b18:	08019cb4 	.word	0x08019cb4

08001b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	f2ad 7df4 	subw	sp, sp, #2036	; 0x7f4
 8001b22:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b24:	f001 fcba 	bl	800349c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b28:	f000 fbe6 	bl	80022f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b2c:	f000 ff46 	bl	80029bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001b30:	f000 ff24 	bl	800297c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001b34:	f000 fe12 	bl	800275c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001b38:	f010 fb52 	bl	80121e0 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001b3c:	f015 ff52 	bl	80179e4 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8001b40:	f000 fce4 	bl	800250c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001b44:	f000 fd48 	bl	80025d8 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8001b48:	f000 fe80 	bl	800284c <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001b4c:	f000 feca 	bl	80028e4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001b50:	f000 fe26 	bl	80027a0 <MX_SPI1_Init>
  MX_RTC_Init();
 8001b54:	f000 fda4 	bl	80026a0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001b58:	2101      	movs	r1, #1
 8001b5a:	488c      	ldr	r0, [pc, #560]	; (8001d8c <main+0x270>)
 8001b5c:	f005 fa63 	bl	8007026 <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 8001b60:	4c8b      	ldr	r4, [pc, #556]	; (8001d90 <main+0x274>)
 8001b62:	4668      	mov	r0, sp
 8001b64:	1d23      	adds	r3, r4, #4
 8001b66:	2284      	movs	r2, #132	; 0x84
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f016 fc73 	bl	8018454 <memcpy>
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	2201      	movs	r2, #1
 8001b72:	2102      	movs	r1, #2
 8001b74:	4887      	ldr	r0, [pc, #540]	; (8001d94 <main+0x278>)
 8001b76:	f7ff f813 	bl	8000ba0 <NRF24_begin>
    nrf24_DebugUART_Init(huart3);
 8001b7a:	4c87      	ldr	r4, [pc, #540]	; (8001d98 <main+0x27c>)
 8001b7c:	4668      	mov	r0, sp
 8001b7e:	f104 0310 	add.w	r3, r4, #16
 8001b82:	227c      	movs	r2, #124	; 0x7c
 8001b84:	4619      	mov	r1, r3
 8001b86:	f016 fc65 	bl	8018454 <memcpy>
 8001b8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b8e:	f7ff fef7 	bl	8001980 <nrf24_DebugUART_Init>



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 8001b92:	f7ff f8e5 	bl	8000d60 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 8001b96:	4b81      	ldr	r3, [pc, #516]	; (8001d9c <main+0x280>)
 8001b98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	f7ff f8ea 	bl	8000d78 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f7ff f96b 	bl	8000e80 <NRF24_setAutoAck>
    NRF24_setChannel(42);
 8001baa:	202a      	movs	r0, #42	; 0x2a
 8001bac:	f7ff f923 	bl	8000df6 <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001bb0:	2020      	movs	r0, #32
 8001bb2:	f7ff f935 	bl	8000e20 <NRF24_setPayloadSize>

    printRadioSettings();
 8001bb6:	f7ff fa51 	bl	800105c <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 8001bba:	4879      	ldr	r0, [pc, #484]	; (8001da0 <main+0x284>)
 8001bbc:	f016 fd7a 	bl	80186b4 <puts>
  FDCAN_Config(&hfdcan1);
 8001bc0:	4878      	ldr	r0, [pc, #480]	; (8001da4 <main+0x288>)
 8001bc2:	f7fe fd65 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8001bc6:	2246      	movs	r2, #70	; 0x46
 8001bc8:	4977      	ldr	r1, [pc, #476]	; (8001da8 <main+0x28c>)
 8001bca:	4873      	ldr	r0, [pc, #460]	; (8001d98 <main+0x27c>)
 8001bcc:	f00d f86a 	bl	800eca4 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8001bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bd4:	f001 fcf4 	bl	80035c0 <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8001bd8:	2364      	movs	r3, #100	; 0x64
 8001bda:	f8a7 3756 	strh.w	r3, [r7, #1878]	; 0x756
  uint16_t navRate = 1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	f8a7 3754 	strh.w	r3, [r7, #1876]	; 0x754
  uint16_t timeRef = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f8a7 3752 	strh.w	r3, [r7, #1874]	; 0x752
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8001bea:	f8b7 3752 	ldrh.w	r3, [r7, #1874]	; 0x752
 8001bee:	f8b7 2754 	ldrh.w	r2, [r7, #1876]	; 0x754
 8001bf2:	f8b7 1756 	ldrh.w	r1, [r7, #1878]	; 0x756
 8001bf6:	4868      	ldr	r0, [pc, #416]	; (8001d98 <main+0x27c>)
 8001bf8:	f7fe fe74 	bl	80008e4 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	496b      	ldr	r1, [pc, #428]	; (8001dac <main+0x290>)
 8001c00:	4865      	ldr	r0, [pc, #404]	; (8001d98 <main+0x27c>)
 8001c02:	f7fe fdff 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	4969      	ldr	r1, [pc, #420]	; (8001db0 <main+0x294>)
 8001c0a:	4863      	ldr	r0, [pc, #396]	; (8001d98 <main+0x27c>)
 8001c0c:	f7fe fdfa 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	4968      	ldr	r1, [pc, #416]	; (8001db4 <main+0x298>)
 8001c14:	4860      	ldr	r0, [pc, #384]	; (8001d98 <main+0x27c>)
 8001c16:	f7fe fdf5 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	4966      	ldr	r1, [pc, #408]	; (8001db8 <main+0x29c>)
 8001c1e:	485e      	ldr	r0, [pc, #376]	; (8001d98 <main+0x27c>)
 8001c20:	f7fe fdf0 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8001c24:	2200      	movs	r2, #0
 8001c26:	4965      	ldr	r1, [pc, #404]	; (8001dbc <main+0x2a0>)
 8001c28:	485b      	ldr	r0, [pc, #364]	; (8001d98 <main+0x27c>)
 8001c2a:	f7fe fdeb 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8001c2e:	2200      	movs	r2, #0
 8001c30:	4963      	ldr	r1, [pc, #396]	; (8001dc0 <main+0x2a4>)
 8001c32:	4859      	ldr	r0, [pc, #356]	; (8001d98 <main+0x27c>)
 8001c34:	f7fe fde6 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4962      	ldr	r1, [pc, #392]	; (8001dc4 <main+0x2a8>)
 8001c3c:	4856      	ldr	r0, [pc, #344]	; (8001d98 <main+0x27c>)
 8001c3e:	f7fe fde1 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	4960      	ldr	r1, [pc, #384]	; (8001dc8 <main+0x2ac>)
 8001c46:	4854      	ldr	r0, [pc, #336]	; (8001d98 <main+0x27c>)
 8001c48:	f7fe fddc 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	495f      	ldr	r1, [pc, #380]	; (8001dcc <main+0x2b0>)
 8001c50:	4851      	ldr	r0, [pc, #324]	; (8001d98 <main+0x27c>)
 8001c52:	f7fe fdd7 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	495d      	ldr	r1, [pc, #372]	; (8001dd0 <main+0x2b4>)
 8001c5a:	484f      	ldr	r0, [pc, #316]	; (8001d98 <main+0x27c>)
 8001c5c:	f7fe fdd2 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8001c60:	2200      	movs	r2, #0
 8001c62:	495c      	ldr	r1, [pc, #368]	; (8001dd4 <main+0x2b8>)
 8001c64:	484c      	ldr	r0, [pc, #304]	; (8001d98 <main+0x27c>)
 8001c66:	f7fe fdcd 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	495a      	ldr	r1, [pc, #360]	; (8001dd8 <main+0x2bc>)
 8001c6e:	484a      	ldr	r0, [pc, #296]	; (8001d98 <main+0x27c>)
 8001c70:	f7fe fdc8 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8001c74:	2200      	movs	r2, #0
 8001c76:	4959      	ldr	r1, [pc, #356]	; (8001ddc <main+0x2c0>)
 8001c78:	4847      	ldr	r0, [pc, #284]	; (8001d98 <main+0x27c>)
 8001c7a:	f7fe fdc3 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8001c7e:	2200      	movs	r2, #0
 8001c80:	4957      	ldr	r1, [pc, #348]	; (8001de0 <main+0x2c4>)
 8001c82:	4845      	ldr	r0, [pc, #276]	; (8001d98 <main+0x27c>)
 8001c84:	f7fe fdbe 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4956      	ldr	r1, [pc, #344]	; (8001de4 <main+0x2c8>)
 8001c8c:	4842      	ldr	r0, [pc, #264]	; (8001d98 <main+0x27c>)
 8001c8e:	f7fe fdb9 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8001c92:	2201      	movs	r2, #1
 8001c94:	4954      	ldr	r1, [pc, #336]	; (8001de8 <main+0x2cc>)
 8001c96:	4840      	ldr	r0, [pc, #256]	; (8001d98 <main+0x27c>)
 8001c98:	f7fe fdb4 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4953      	ldr	r1, [pc, #332]	; (8001dec <main+0x2d0>)
 8001ca0:	483d      	ldr	r0, [pc, #244]	; (8001d98 <main+0x27c>)
 8001ca2:	f7fe fdaf 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	4951      	ldr	r1, [pc, #324]	; (8001df0 <main+0x2d4>)
 8001caa:	483b      	ldr	r0, [pc, #236]	; (8001d98 <main+0x27c>)
 8001cac:	f7fe fdaa 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	4950      	ldr	r1, [pc, #320]	; (8001df4 <main+0x2d8>)
 8001cb4:	4838      	ldr	r0, [pc, #224]	; (8001d98 <main+0x27c>)
 8001cb6:	f7fe fda5 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 8001cba:	2200      	movs	r2, #0
 8001cbc:	494e      	ldr	r1, [pc, #312]	; (8001df8 <main+0x2dc>)
 8001cbe:	4836      	ldr	r0, [pc, #216]	; (8001d98 <main+0x27c>)
 8001cc0:	f7fe fda0 	bl	8000804 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	494d      	ldr	r1, [pc, #308]	; (8001dfc <main+0x2e0>)
 8001cc8:	484d      	ldr	r0, [pc, #308]	; (8001e00 <main+0x2e4>)
 8001cca:	f015 f8cf 	bl	8016e6c <f_mount>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f040 80b7 	bne.w	8001e44 <main+0x328>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "test1.csv\0";
 8001cd6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001cda:	4a4a      	ldr	r2, [pc, #296]	; (8001e04 <main+0x2e8>)
 8001cdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cde:	c303      	stmia	r3!, {r0, r1}
 8001ce0:	801a      	strh	r2, [r3, #0]
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	0c12      	lsrs	r2, r2, #16
 8001ce6:	701a      	strb	r2, [r3, #0]
      char ConfigPath[] ="Config.csv\0";
 8001ce8:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001cec:	4a46      	ldr	r2, [pc, #280]	; (8001e08 <main+0x2ec>)
 8001cee:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8001cf4:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4843      	ldr	r0, [pc, #268]	; (8001e0c <main+0x2f0>)
 8001cfe:	f015 f8fb 	bl	8016ef8 <f_open>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	f040 8089 	bne.w	8001e1c <main+0x300>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 8001d0a:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001d0e:	220a      	movs	r2, #10
 8001d10:	4619      	mov	r1, r3
 8001d12:	483e      	ldr	r0, [pc, #248]	; (8001e0c <main+0x2f0>)
 8001d14:	f015 f8f0 	bl	8016ef8 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4a3d      	ldr	r2, [pc, #244]	; (8001e10 <main+0x2f4>)
 8001d1c:	461c      	mov	r4, r3
 8001d1e:	4615      	mov	r5, r2
 8001d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d2c:	c403      	stmia	r4!, {r0, r1}
 8001d2e:	8022      	strh	r2, [r4, #0]
 8001d30:	3402      	adds	r4, #2
 8001d32:	0c13      	lsrs	r3, r2, #16
 8001d34:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fad1 	bl	80002e0 <strlen>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	4413      	add	r3, r2
 8001d44:	4a33      	ldr	r2, [pc, #204]	; (8001e14 <main+0x2f8>)
 8001d46:	4614      	mov	r4, r2
 8001d48:	469c      	mov	ip, r3
 8001d4a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001d4e:	4665      	mov	r5, ip
 8001d50:	4626      	mov	r6, r4
 8001d52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d54:	6028      	str	r0, [r5, #0]
 8001d56:	6069      	str	r1, [r5, #4]
 8001d58:	60aa      	str	r2, [r5, #8]
 8001d5a:	60eb      	str	r3, [r5, #12]
 8001d5c:	3410      	adds	r4, #16
 8001d5e:	f10c 0c10 	add.w	ip, ip, #16
 8001d62:	4574      	cmp	r4, lr
 8001d64:	d1f3      	bne.n	8001d4e <main+0x232>
 8001d66:	4662      	mov	r2, ip
 8001d68:	4623      	mov	r3, r4
 8001d6a:	cb03      	ldmia	r3!, {r0, r1}
 8001d6c:	6010      	str	r0, [r2, #0]
 8001d6e:	6051      	str	r1, [r2, #4]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fab2 	bl	80002e0 <strlen>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	1d39      	adds	r1, r7, #4
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <main+0x2fc>)
 8001d82:	4822      	ldr	r0, [pc, #136]	; (8001e0c <main+0x2f0>)
 8001d84:	f015 fbb5 	bl	80174f2 <f_write>
 8001d88:	e052      	b.n	8001e30 <main+0x314>
 8001d8a:	bf00      	nop
 8001d8c:	58020400 	.word	0x58020400
 8001d90:	24040e18 	.word	0x24040e18
 8001d94:	58020000 	.word	0x58020000
 8001d98:	24040bbc 	.word	0x24040bbc
 8001d9c:	24000000 	.word	0x24000000
 8001da0:	08019cd0 	.word	0x08019cd0
 8001da4:	24040cec 	.word	0x24040cec
 8001da8:	24040afc 	.word	0x24040afc
 8001dac:	08019cdc 	.word	0x08019cdc
 8001db0:	08019ce0 	.word	0x08019ce0
 8001db4:	08019ce4 	.word	0x08019ce4
 8001db8:	08019ce8 	.word	0x08019ce8
 8001dbc:	08019cec 	.word	0x08019cec
 8001dc0:	08019cf0 	.word	0x08019cf0
 8001dc4:	08019cf4 	.word	0x08019cf4
 8001dc8:	08019cf8 	.word	0x08019cf8
 8001dcc:	08019cfc 	.word	0x08019cfc
 8001dd0:	08019d00 	.word	0x08019d00
 8001dd4:	08019d04 	.word	0x08019d04
 8001dd8:	08019d08 	.word	0x08019d08
 8001ddc:	08019d0c 	.word	0x08019d0c
 8001de0:	08019d10 	.word	0x08019d10
 8001de4:	08019d14 	.word	0x08019d14
 8001de8:	08019d18 	.word	0x08019d18
 8001dec:	08019d1c 	.word	0x08019d1c
 8001df0:	08019d20 	.word	0x08019d20
 8001df4:	08019d24 	.word	0x08019d24
 8001df8:	08019d28 	.word	0x08019d28
 8001dfc:	24040f48 	.word	0x24040f48
 8001e00:	240405c8 	.word	0x240405c8
 8001e04:	08019db4 	.word	0x08019db4
 8001e08:	08019dc0 	.word	0x08019dc0
 8001e0c:	240408cc 	.word	0x240408cc
 8001e10:	08019d2c 	.word	0x08019d2c
 8001e14:	08019d58 	.word	0x08019d58
 8001e18:	240405c4 	.word	0x240405c4
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fa5e 	bl	80002e0 <strlen>
 8001e24:	4602      	mov	r2, r0
 8001e26:	1d39      	adds	r1, r7, #4
 8001e28:	4b98      	ldr	r3, [pc, #608]	; (800208c <main+0x570>)
 8001e2a:	4899      	ldr	r0, [pc, #612]	; (8002090 <main+0x574>)
 8001e2c:	f015 fa22 	bl	8017274 <f_read>
      }
      f_close(&Config);
 8001e30:	4897      	ldr	r0, [pc, #604]	; (8002090 <main+0x574>)
 8001e32:	f015 fd51 	bl	80178d8 <f_close>
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 8001e36:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e3a:	220a      	movs	r2, #10
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4895      	ldr	r0, [pc, #596]	; (8002094 <main+0x578>)
 8001e40:	f015 f85a 	bl	8016ef8 <f_open>

  extern int GPS_flag;
  extern int FDCAN_Flag;
  extern int CAN_Flag;

  sTime.SecondFraction = 999;
 8001e44:	4b94      	ldr	r3, [pc, #592]	; (8002098 <main+0x57c>)
 8001e46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e4a:	609a      	str	r2, [r3, #8]
  uint32_t LocalTime = HAL_GetTick();
 8001e4c:	f001 fbac 	bl	80035a8 <HAL_GetTick>
 8001e50:	f8c7 074c 	str.w	r0, [r7, #1868]	; 0x74c
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001e54:	2200      	movs	r2, #0
 8001e56:	4990      	ldr	r1, [pc, #576]	; (8002098 <main+0x57c>)
 8001e58:	4890      	ldr	r0, [pc, #576]	; (800209c <main+0x580>)
 8001e5a:	f009 fc07 	bl	800b66c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	498f      	ldr	r1, [pc, #572]	; (80020a0 <main+0x584>)
 8001e62:	488e      	ldr	r0, [pc, #568]	; (800209c <main+0x580>)
 8001e64:	f009 fce6 	bl	800b834 <HAL_RTC_GetDate>

  sTime.SubSeconds -= LocalTime % 1000;
 8001e68:	4b8b      	ldr	r3, [pc, #556]	; (8002098 <main+0x57c>)
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 8001e70:	4b8c      	ldr	r3, [pc, #560]	; (80020a4 <main+0x588>)
 8001e72:	fba3 0302 	umull	r0, r3, r3, r2
 8001e76:	099b      	lsrs	r3, r3, #6
 8001e78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e7c:	fb00 f303 	mul.w	r3, r0, r3
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	1acb      	subs	r3, r1, r3
 8001e84:	4a84      	ldr	r2, [pc, #528]	; (8002098 <main+0x57c>)
 8001e86:	6053      	str	r3, [r2, #4]
  LocalTime = LocalTime/1000;
 8001e88:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001e8c:	4a85      	ldr	r2, [pc, #532]	; (80020a4 <main+0x588>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	099b      	lsrs	r3, r3, #6
 8001e94:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  sTime.Seconds -= LocalTime % 60;
 8001e98:	4b7f      	ldr	r3, [pc, #508]	; (8002098 <main+0x57c>)
 8001e9a:	7898      	ldrb	r0, [r3, #2]
 8001e9c:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8001ea0:	4b81      	ldr	r3, [pc, #516]	; (80020a8 <main+0x58c>)
 8001ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ea6:	095a      	lsrs	r2, r3, #5
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	1aca      	subs	r2, r1, r3
 8001eb2:	b2d3      	uxtb	r3, r2
 8001eb4:	1ac3      	subs	r3, r0, r3
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	4b77      	ldr	r3, [pc, #476]	; (8002098 <main+0x57c>)
 8001eba:	709a      	strb	r2, [r3, #2]
  LocalTime = LocalTime/60;
 8001ebc:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001ec0:	4a79      	ldr	r2, [pc, #484]	; (80020a8 <main+0x58c>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  sTime.Minutes -= LocalTime % 60;
 8001ecc:	4b72      	ldr	r3, [pc, #456]	; (8002098 <main+0x57c>)
 8001ece:	7858      	ldrb	r0, [r3, #1]
 8001ed0:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8001ed4:	4b74      	ldr	r3, [pc, #464]	; (80020a8 <main+0x58c>)
 8001ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8001eda:	095a      	lsrs	r2, r3, #5
 8001edc:	4613      	mov	r3, r2
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	1aca      	subs	r2, r1, r3
 8001ee6:	b2d3      	uxtb	r3, r2
 8001ee8:	1ac3      	subs	r3, r0, r3
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <main+0x57c>)
 8001eee:	705a      	strb	r2, [r3, #1]
  LocalTime = LocalTime/60;
 8001ef0:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001ef4:	4a6c      	ldr	r2, [pc, #432]	; (80020a8 <main+0x58c>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  sTime.Hours -= LocalTime % 60;
 8001f00:	4b65      	ldr	r3, [pc, #404]	; (8002098 <main+0x57c>)
 8001f02:	7818      	ldrb	r0, [r3, #0]
 8001f04:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8001f08:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <main+0x58c>)
 8001f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f0e:	095a      	lsrs	r2, r3, #5
 8001f10:	4613      	mov	r3, r2
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	1aca      	subs	r2, r1, r3
 8001f1a:	b2d3      	uxtb	r3, r2
 8001f1c:	1ac3      	subs	r3, r0, r3
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	4b5d      	ldr	r3, [pc, #372]	; (8002098 <main+0x57c>)
 8001f22:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char CanWrite[400];
  int CW = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
  char CanFDWrite[400];
  int CFDW = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 3760 	str.w	r3, [r7, #1888]	; 0x760

  while (end_flag){
 8001f30:	e1bb      	b.n	80022aa <main+0x78e>

	  if(GPS_flag){
 8001f32:	4b5e      	ldr	r3, [pc, #376]	; (80020ac <main+0x590>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d006      	beq.n	8001f48 <main+0x42c>
		  WriteToBuff(rxBuf, sizeof(rxBuf));
 8001f3a:	2146      	movs	r1, #70	; 0x46
 8001f3c:	485c      	ldr	r0, [pc, #368]	; (80020b0 <main+0x594>)
 8001f3e:	f7ff fd37 	bl	80019b0 <WriteToBuff>
		  GPS_flag=0;
 8001f42:	4b5a      	ldr	r3, [pc, #360]	; (80020ac <main+0x590>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);*/
	  if(FDCAN_Flag){
 8001f48:	4b5a      	ldr	r3, [pc, #360]	; (80020b4 <main+0x598>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80e1 	beq.w	8002114 <main+0x5f8>

		  RTC_TimeTypeDef lTime = sTime;
 8001f52:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001f56:	4a50      	ldr	r2, [pc, #320]	; (8002098 <main+0x57c>)
 8001f58:	461c      	mov	r4, r3
 8001f5a:	4615      	mov	r5, r2
 8001f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f60:	682b      	ldr	r3, [r5, #0]
 8001f62:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFDFrame.time;
 8001f64:	4b54      	ldr	r3, [pc, #336]	; (80020b8 <main+0x59c>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.SubSeconds += LocalTime % 1000;
 8001f6c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001f70:	6859      	ldr	r1, [r3, #4]
 8001f72:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 8001f76:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <main+0x588>)
 8001f78:	fba3 0302 	umull	r0, r3, r3, r2
 8001f7c:	099b      	lsrs	r3, r3, #6
 8001f7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f82:	fb00 f303 	mul.w	r3, r0, r3
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	18ca      	adds	r2, r1, r3
 8001f8a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001f8e:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8001f90:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001f94:	4a43      	ldr	r2, [pc, #268]	; (80020a4 <main+0x588>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	099b      	lsrs	r3, r3, #6
 8001f9c:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Seconds += LocalTime % 60;
 8001fa0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001fa4:	7898      	ldrb	r0, [r3, #2]
 8001fa6:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8001faa:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <main+0x58c>)
 8001fac:	fba3 2301 	umull	r2, r3, r3, r1
 8001fb0:	095a      	lsrs	r2, r3, #5
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	1aca      	subs	r2, r1, r3
 8001fbc:	b2d3      	uxtb	r3, r2
 8001fbe:	4403      	add	r3, r0
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001fc6:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8001fc8:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001fcc:	4a36      	ldr	r2, [pc, #216]	; (80020a8 <main+0x58c>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Minutes += LocalTime % 60;
 8001fd8:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001fdc:	7858      	ldrb	r0, [r3, #1]
 8001fde:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8001fe2:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <main+0x58c>)
 8001fe4:	fba3 2301 	umull	r2, r3, r3, r1
 8001fe8:	095a      	lsrs	r2, r3, #5
 8001fea:	4613      	mov	r3, r2
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	1aca      	subs	r2, r1, r3
 8001ff4:	b2d3      	uxtb	r3, r2
 8001ff6:	4403      	add	r3, r0
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001ffe:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8002000:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8002004:	4a28      	ldr	r2, [pc, #160]	; (80020a8 <main+0x58c>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Hours += LocalTime % 60;
 8002010:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002014:	7818      	ldrb	r0, [r3, #0]
 8002016:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <main+0x58c>)
 800201c:	fba3 2301 	umull	r2, r3, r3, r1
 8002020:	095a      	lsrs	r2, r3, #5
 8002022:	4613      	mov	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	1aca      	subs	r2, r1, r3
 800202c:	b2d3      	uxtb	r3, r2
 800202e:	4403      	add	r3, r0
 8002030:	b2da      	uxtb	r2, r3
 8002032:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002036:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <main+0x584>)
 800203a:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 800203c:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800203e:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <main+0x584>)
 8002040:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002042:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <main+0x584>)
 8002046:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002048:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800204a:	4b13      	ldr	r3, [pc, #76]	; (8002098 <main+0x57c>)
 800204c:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 800204e:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <main+0x57c>)
 8002052:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002054:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <main+0x57c>)
 8002058:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 800205a:	461e      	mov	r6, r3
 800205c:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <main+0x57c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a15      	ldr	r2, [pc, #84]	; (80020b8 <main+0x59c>)
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	f207 402c 	addw	r0, r7, #1068	; 0x42c
 8002068:	9205      	str	r2, [sp, #20]
 800206a:	9304      	str	r3, [sp, #16]
 800206c:	9603      	str	r6, [sp, #12]
 800206e:	9502      	str	r5, [sp, #8]
 8002070:	9401      	str	r4, [sp, #4]
 8002072:	9100      	str	r1, [sp, #0]
 8002074:	4673      	mov	r3, lr
 8002076:	4662      	mov	r2, ip
 8002078:	4910      	ldr	r1, [pc, #64]	; (80020bc <main+0x5a0>)
 800207a:	f016 fb67 	bl	801874c <siprintf>
 800207e:	f8c7 0760 	str.w	r0, [r7, #1888]	; 0x760
				  CanFDFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 8002088:	e034      	b.n	80020f4 <main+0x5d8>
 800208a:	bf00      	nop
 800208c:	240405c0 	.word	0x240405c0
 8002090:	240408cc 	.word	0x240408cc
 8002094:	24040390 	.word	0x24040390
 8002098:	24040324 	.word	0x24040324
 800209c:	24040cc8 	.word	0x24040cc8
 80020a0:	24040338 	.word	0x24040338
 80020a4:	10624dd3 	.word	0x10624dd3
 80020a8:	88888889 	.word	0x88888889
 80020ac:	240001fc 	.word	0x240001fc
 80020b0:	24040afc 	.word	0x24040afc
 80020b4:	240001f4 	.word	0x240001f4
 80020b8:	24040838 	.word	0x24040838
 80020bc:	08019d94 	.word	0x08019d94
			  CFDW += sprintf(CanFDWrite + CFDW, "%x", CanFDFrame.data.bytes[i]);
 80020c0:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 80020c4:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 80020c8:	18d0      	adds	r0, r2, r3
 80020ca:	4a7f      	ldr	r2, [pc, #508]	; (80022c8 <main+0x7ac>)
 80020cc:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 80020d0:	4413      	add	r3, r2
 80020d2:	3310      	adds	r3, #16
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	497c      	ldr	r1, [pc, #496]	; (80022cc <main+0x7b0>)
 80020da:	f016 fb37 	bl	801874c <siprintf>
 80020de:	4602      	mov	r2, r0
 80020e0:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 80020e4:	4413      	add	r3, r2
 80020e6:	f8c7 3760 	str.w	r3, [r7, #1888]	; 0x760
		  for(int i = 0; i < CanFDFrame.length; i++){
 80020ea:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 80020ee:	3301      	adds	r3, #1
 80020f0:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 80020f4:	4b74      	ldr	r3, [pc, #464]	; (80022c8 <main+0x7ac>)
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d8df      	bhi.n	80020c0 <main+0x5a4>
		  }
		  WriteToBuff(CanFDWrite, CFDW);
 8002100:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8002104:	f8d7 1760 	ldr.w	r1, [r7, #1888]	; 0x760
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fc51 	bl	80019b0 <WriteToBuff>

		  FDCAN_Flag = 0;
 800210e:	4b70      	ldr	r3, [pc, #448]	; (80022d0 <main+0x7b4>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
	  }
	  if(CAN_Flag){
 8002114:	4b6f      	ldr	r3, [pc, #444]	; (80022d4 <main+0x7b8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80c6 	beq.w	80022aa <main+0x78e>

		  RTC_TimeTypeDef lTime = sTime;
 800211e:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002122:	4a6d      	ldr	r2, [pc, #436]	; (80022d8 <main+0x7bc>)
 8002124:	461c      	mov	r4, r3
 8002126:	4615      	mov	r5, r2
 8002128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800212a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800212c:	682b      	ldr	r3, [r5, #0]
 800212e:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFrame.time;
 8002130:	4b6a      	ldr	r3, [pc, #424]	; (80022dc <main+0x7c0>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.SubSeconds += LocalTime % 1000;
 8002138:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800213c:	6859      	ldr	r1, [r3, #4]
 800213e:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 8002142:	4b67      	ldr	r3, [pc, #412]	; (80022e0 <main+0x7c4>)
 8002144:	fba3 0302 	umull	r0, r3, r3, r2
 8002148:	099b      	lsrs	r3, r3, #6
 800214a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800214e:	fb00 f303 	mul.w	r3, r0, r3
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	18ca      	adds	r2, r1, r3
 8002156:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800215a:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 800215c:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8002160:	4a5f      	ldr	r2, [pc, #380]	; (80022e0 <main+0x7c4>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	099b      	lsrs	r3, r3, #6
 8002168:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Seconds += LocalTime % 60;
 800216c:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002170:	7898      	ldrb	r0, [r3, #2]
 8002172:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8002176:	4b5b      	ldr	r3, [pc, #364]	; (80022e4 <main+0x7c8>)
 8002178:	fba3 2301 	umull	r2, r3, r3, r1
 800217c:	095a      	lsrs	r2, r3, #5
 800217e:	4613      	mov	r3, r2
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	1aca      	subs	r2, r1, r3
 8002188:	b2d3      	uxtb	r3, r2
 800218a:	4403      	add	r3, r0
 800218c:	b2da      	uxtb	r2, r3
 800218e:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002192:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8002194:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8002198:	4a52      	ldr	r2, [pc, #328]	; (80022e4 <main+0x7c8>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Minutes += LocalTime % 60;
 80021a4:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80021a8:	7858      	ldrb	r0, [r3, #1]
 80021aa:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 80021ae:	4b4d      	ldr	r3, [pc, #308]	; (80022e4 <main+0x7c8>)
 80021b0:	fba3 2301 	umull	r2, r3, r3, r1
 80021b4:	095a      	lsrs	r2, r3, #5
 80021b6:	4613      	mov	r3, r2
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	1aca      	subs	r2, r1, r3
 80021c0:	b2d3      	uxtb	r3, r2
 80021c2:	4403      	add	r3, r0
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80021ca:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 80021cc:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 80021d0:	4a44      	ldr	r2, [pc, #272]	; (80022e4 <main+0x7c8>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Hours += LocalTime % 60;
 80021dc:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80021e0:	7818      	ldrb	r0, [r3, #0]
 80021e2:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 80021e6:	4b3f      	ldr	r3, [pc, #252]	; (80022e4 <main+0x7c8>)
 80021e8:	fba3 2301 	umull	r2, r3, r3, r1
 80021ec:	095a      	lsrs	r2, r3, #5
 80021ee:	4613      	mov	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	1aca      	subs	r2, r1, r3
 80021f8:	b2d3      	uxtb	r3, r2
 80021fa:	4403      	add	r3, r0
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002202:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002204:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <main+0x7cc>)
 8002206:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002208:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800220a:	4b37      	ldr	r3, [pc, #220]	; (80022e8 <main+0x7cc>)
 800220c:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 800220e:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002210:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <main+0x7cc>)
 8002212:	78db      	ldrb	r3, [r3, #3]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002214:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002216:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <main+0x7bc>)
 8002218:	781b      	ldrb	r3, [r3, #0]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 800221a:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800221c:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <main+0x7bc>)
 800221e:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002220:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <main+0x7bc>)
 8002224:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002226:	461e      	mov	r6, r3
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <main+0x7bc>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a2b      	ldr	r2, [pc, #172]	; (80022dc <main+0x7c0>)
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	f207 50bc 	addw	r0, r7, #1468	; 0x5bc
 8002234:	9205      	str	r2, [sp, #20]
 8002236:	9304      	str	r3, [sp, #16]
 8002238:	9603      	str	r6, [sp, #12]
 800223a:	9502      	str	r5, [sp, #8]
 800223c:	9401      	str	r4, [sp, #4]
 800223e:	9100      	str	r1, [sp, #0]
 8002240:	4673      	mov	r3, lr
 8002242:	4662      	mov	r2, ip
 8002244:	4929      	ldr	r1, [pc, #164]	; (80022ec <main+0x7d0>)
 8002246:	f016 fa81 	bl	801874c <siprintf>
 800224a:	f8c7 0764 	str.w	r0, [r7, #1892]	; 0x764
				  CanFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 800224e:	2300      	movs	r3, #0
 8002250:	f8c7 3758 	str.w	r3, [r7, #1880]	; 0x758
 8002254:	e019      	b.n	800228a <main+0x76e>
			  CW += sprintf(CanWrite + CW, "%x", CanFrame.data.bytes[i]);
 8002256:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 800225a:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 800225e:	18d0      	adds	r0, r2, r3
 8002260:	4a1e      	ldr	r2, [pc, #120]	; (80022dc <main+0x7c0>)
 8002262:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 8002266:	4413      	add	r3, r2
 8002268:	3310      	adds	r3, #16
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4917      	ldr	r1, [pc, #92]	; (80022cc <main+0x7b0>)
 8002270:	f016 fa6c 	bl	801874c <siprintf>
 8002274:	4602      	mov	r2, r0
 8002276:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 800227a:	4413      	add	r3, r2
 800227c:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002280:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 8002284:	3301      	adds	r3, #1
 8002286:	f8c7 3758 	str.w	r3, [r7, #1880]	; 0x758
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <main+0x7ac>)
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 8002292:	429a      	cmp	r2, r3
 8002294:	d8df      	bhi.n	8002256 <main+0x73a>
		  }
		  WriteToBuff(CanWrite, CW);
 8002296:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 800229a:	f8d7 1764 	ldr.w	r1, [r7, #1892]	; 0x764
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fb86 	bl	80019b0 <WriteToBuff>
		  CAN_Flag = 0;
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <main+0x7b8>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
  while (end_flag){
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <main+0x7d4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f47f ae3f 	bne.w	8001f32 <main+0x416>
    /* USER CODE BEGIN 3 */
}

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80022b4:	2101      	movs	r1, #1
 80022b6:	480f      	ldr	r0, [pc, #60]	; (80022f4 <main+0x7d8>)
 80022b8:	f004 feb5 	bl	8007026 <HAL_GPIO_TogglePin>
 80022bc:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 80022be:	4618      	mov	r0, r3
 80022c0:	f207 776c 	addw	r7, r7, #1900	; 0x76c
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c8:	24040838 	.word	0x24040838
 80022cc:	08019db0 	.word	0x08019db0
 80022d0:	240001f4 	.word	0x240001f4
 80022d4:	240001f8 	.word	0x240001f8
 80022d8:	24040324 	.word	0x24040324
 80022dc:	240408b0 	.word	0x240408b0
 80022e0:	10624dd3 	.word	0x10624dd3
 80022e4:	88888889 	.word	0x88888889
 80022e8:	24040338 	.word	0x24040338
 80022ec:	08019d94 	.word	0x08019d94
 80022f0:	24000008 	.word	0x24000008
 80022f4:	58020400 	.word	0x58020400

080022f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b0cc      	sub	sp, #304	; 0x130
 80022fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002302:	224c      	movs	r2, #76	; 0x4c
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f016 f8af 	bl	801846a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800230c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002310:	2220      	movs	r2, #32
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f016 f8a8 	bl	801846a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	4618      	mov	r0, r3
 8002320:	23bc      	movs	r3, #188	; 0xbc
 8002322:	461a      	mov	r2, r3
 8002324:	2100      	movs	r1, #0
 8002326:	f016 f8a0 	bl	801846a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800232a:	2002      	movs	r0, #2
 800232c:	f006 f976 	bl	800861c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	4b71      	ldr	r3, [pc, #452]	; (80024fc <SystemClock_Config+0x204>)
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	4a70      	ldr	r2, [pc, #448]	; (80024fc <SystemClock_Config+0x204>)
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002342:	4b6e      	ldr	r3, [pc, #440]	; (80024fc <SystemClock_Config+0x204>)
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	f003 0201 	and.w	r2, r3, #1
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	4b6c      	ldr	r3, [pc, #432]	; (8002500 <SystemClock_Config+0x208>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	4a6b      	ldr	r2, [pc, #428]	; (8002500 <SystemClock_Config+0x208>)
 8002354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002358:	6193      	str	r3, [r2, #24]
 800235a:	4b69      	ldr	r3, [pc, #420]	; (8002500 <SystemClock_Config+0x208>)
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800236a:	bf00      	nop
 800236c:	4b64      	ldr	r3, [pc, #400]	; (8002500 <SystemClock_Config+0x208>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002378:	d1f8      	bne.n	800236c <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800237a:	f006 f8b5 	bl	80084e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 800237e:	f001 f941 	bl	8003604 <HAL_GetREVID>
 8002382:	4b60      	ldr	r3, [pc, #384]	; (8002504 <SystemClock_Config+0x20c>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	4a5f      	ldr	r2, [pc, #380]	; (8002504 <SystemClock_Config+0x20c>)
 8002388:	f043 0318 	orr.w	r3, r3, #24
 800238c:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800238e:	4b5d      	ldr	r3, [pc, #372]	; (8002504 <SystemClock_Config+0x20c>)
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	f023 0303 	bic.w	r3, r3, #3
 8002396:	4a5b      	ldr	r2, [pc, #364]	; (8002504 <SystemClock_Config+0x20c>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 800239e:	2325      	movs	r3, #37	; 0x25
 80023a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023ac:	2301      	movs	r3, #1
 80023ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80023b2:	2301      	movs	r3, #1
 80023b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023b8:	2302      	movs	r3, #2
 80023ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023be:	2302      	movs	r3, #2
 80023c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80023c4:	2302      	movs	r3, #2
 80023c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 80023ca:	2340      	movs	r3, #64	; 0x40
 80023cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80023d0:	2302      	movs	r3, #2
 80023d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 80023d6:	230a      	movs	r3, #10
 80023d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023dc:	2302      	movs	r3, #2
 80023de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80023e2:	230c      	movs	r3, #12
 80023e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023f8:	4618      	mov	r0, r3
 80023fa:	f006 f99d 	bl	8008738 <HAL_RCC_OscConfig>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8002404:	f000 fbe8 	bl	8002bd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002408:	233f      	movs	r3, #63	; 0x3f
 800240a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800240e:	2303      	movs	r3, #3
 8002410:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002414:	2300      	movs	r3, #0
 8002416:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800241a:	2308      	movs	r3, #8
 800241c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002420:	2340      	movs	r3, #64	; 0x40
 8002422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002426:	2340      	movs	r3, #64	; 0x40
 8002428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800242c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002430:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002434:	2340      	movs	r3, #64	; 0x40
 8002436:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800243a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800243e:	2102      	movs	r1, #2
 8002440:	4618      	mov	r0, r3
 8002442:	f006 fd89 	bl	8008f58 <HAL_RCC_ClockConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <SystemClock_Config+0x158>
  {
    Error_Handler();
 800244c:	f000 fbc4 	bl	8002bd8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8002450:	f107 0308 	add.w	r3, r7, #8
 8002454:	4a2c      	ldr	r2, [pc, #176]	; (8002508 <SystemClock_Config+0x210>)
 8002456:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8002458:	f107 0308 	add.w	r3, r7, #8
 800245c:	2202      	movs	r2, #2
 800245e:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8002460:	f107 0308 	add.w	r3, r7, #8
 8002464:	220c      	movs	r2, #12
 8002466:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8002468:	f107 0308 	add.w	r3, r7, #8
 800246c:	2203      	movs	r2, #3
 800246e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002470:	f107 0308 	add.w	r3, r7, #8
 8002474:	2202      	movs	r2, #2
 8002476:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8002478:	f107 0308 	add.w	r3, r7, #8
 800247c:	2203      	movs	r2, #3
 800247e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002480:	f107 0308 	add.w	r3, r7, #8
 8002484:	22c0      	movs	r2, #192	; 0xc0
 8002486:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002488:	f107 0308 	add.w	r3, r7, #8
 800248c:	2220      	movs	r2, #32
 800248e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002490:	f107 0308 	add.w	r3, r7, #8
 8002494:	2200      	movs	r2, #0
 8002496:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8002498:	f107 0308 	add.w	r3, r7, #8
 800249c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024a0:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80024a2:	f107 0308 	add.w	r3, r7, #8
 80024a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024aa:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80024ac:	f107 0308 	add.w	r3, r7, #8
 80024b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b4:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024b6:	f107 0308 	add.w	r3, r7, #8
 80024ba:	2200      	movs	r2, #0
 80024bc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80024be:	f107 0308 	add.w	r3, r7, #8
 80024c2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80024c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80024ca:	f107 0308 	add.w	r3, r7, #8
 80024ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024d6:	f107 0308 	add.w	r3, r7, #8
 80024da:	4618      	mov	r0, r3
 80024dc:	f007 f8ec 	bl	80096b8 <HAL_RCCEx_PeriphCLKConfig>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 80024e6:	f000 fb77 	bl	8002bd8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80024ea:	f006 feeb 	bl	80092c4 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80024ee:	f006 f8cf 	bl	8008690 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80024f2:	bf00      	nop
 80024f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	58000400 	.word	0x58000400
 8002500:	58024800 	.word	0x58024800
 8002504:	58024400 	.word	0x58024400
 8002508:	00459002 	.word	0x00459002

0800250c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002510:	4b2f      	ldr	r3, [pc, #188]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002512:	4a30      	ldr	r2, [pc, #192]	; (80025d4 <MX_FDCAN1_Init+0xc8>)
 8002514:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002518:	f44f 7240 	mov.w	r2, #768	; 0x300
 800251c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800251e:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002520:	2200      	movs	r2, #0
 8002522:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002524:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002526:	2200      	movs	r2, #0
 8002528:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800252a:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 800252c:	2200      	movs	r2, #0
 800252e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002532:	2200      	movs	r2, #0
 8002534:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002538:	2201      	movs	r2, #1
 800253a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 23;
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 800253e:	2217      	movs	r2, #23
 8002540:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8002542:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002544:	2238      	movs	r2, #56	; 0x38
 8002546:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 23;
 8002548:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 800254a:	2217      	movs	r2, #23
 800254c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002550:	2201      	movs	r2, #1
 8002552:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8002554:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002556:	2205      	movs	r2, #5
 8002558:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 800255c:	220a      	movs	r2, #10
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002562:	2205      	movs	r2, #5
 8002564:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8002566:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002568:	2200      	movs	r2, #0
 800256a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 800256e:	2202      	movs	r2, #2
 8002570:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002574:	2202      	movs	r2, #2
 8002576:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 800257a:	2240      	movs	r2, #64	; 0x40
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002580:	2212      	movs	r2, #18
 8002582:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002586:	2200      	movs	r2, #0
 8002588:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 800258c:	2204      	movs	r2, #4
 800258e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002592:	2200      	movs	r2, #0
 8002594:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002596:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 8002598:	2204      	movs	r2, #4
 800259a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 800259e:	2200      	movs	r2, #0
 80025a0:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 80025b6:	2204      	movs	r2, #4
 80025b8:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80025ba:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_FDCAN1_Init+0xc4>)
 80025bc:	f003 fa16 	bl	80059ec <HAL_FDCAN_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80025c6:	f000 fb07 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	24040cec 	.word	0x24040cec
 80025d4:	4000a000 	.word	0x4000a000

080025d8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80025dc:	4b2e      	ldr	r3, [pc, #184]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 80025de:	4a2f      	ldr	r2, [pc, #188]	; (800269c <MX_FDCAN2_Init+0xc4>)
 80025e0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80025e2:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80025e8:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80025ee:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80025f4:	4b28      	ldr	r3, [pc, #160]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80025fa:	4b27      	ldr	r3, [pc, #156]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8002600:	4b25      	ldr	r3, [pc, #148]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 8002602:	2201      	movs	r2, #1
 8002604:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002606:	4b24      	ldr	r3, [pc, #144]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 8002608:	2201      	movs	r2, #1
 800260a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800260c:	4b22      	ldr	r3, [pc, #136]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 800260e:	2202      	movs	r2, #2
 8002610:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8002612:	4b21      	ldr	r3, [pc, #132]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 8002614:	2202      	movs	r2, #2
 8002616:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002618:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 800261a:	2201      	movs	r2, #1
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800261e:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 8002620:	2201      	movs	r2, #1
 8002622:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 8002626:	2201      	movs	r2, #1
 8002628:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 800262c:	2201      	movs	r2, #1
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 8002632:	2200      	movs	r2, #0
 8002634:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8002636:	4b18      	ldr	r3, [pc, #96]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 8002638:	2200      	movs	r2, #0
 800263a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800263c:	4b16      	ldr	r3, [pc, #88]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 800263e:	2200      	movs	r2, #0
 8002640:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 8002644:	2200      	movs	r2, #0
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 800264a:	2204      	movs	r2, #4
 800264c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 8002650:	2200      	movs	r2, #0
 8002652:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 8002656:	2204      	movs	r2, #4
 8002658:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 800265c:	2200      	movs	r2, #0
 800265e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 8002662:	2204      	movs	r2, #4
 8002664:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 8002668:	2200      	movs	r2, #0
 800266a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 800266e:	2200      	movs	r2, #0
 8002670:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 8002674:	2200      	movs	r2, #0
 8002676:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 800267a:	2200      	movs	r2, #0
 800267c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 8002680:	2204      	movs	r2, #4
 8002682:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002684:	4804      	ldr	r0, [pc, #16]	; (8002698 <MX_FDCAN2_Init+0xc0>)
 8002686:	f003 f9b1 	bl	80059ec <HAL_FDCAN_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8002690:	f000 faa2 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}
 8002698:	24040ea0 	.word	0x24040ea0
 800269c:	4000a400 	.word	0x4000a400

080026a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80026b4:	2300      	movs	r3, #0
 80026b6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80026b8:	4b26      	ldr	r3, [pc, #152]	; (8002754 <MX_RTC_Init+0xb4>)
 80026ba:	4a27      	ldr	r2, [pc, #156]	; (8002758 <MX_RTC_Init+0xb8>)
 80026bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80026be:	4b25      	ldr	r3, [pc, #148]	; (8002754 <MX_RTC_Init+0xb4>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 80026c4:	4b23      	ldr	r3, [pc, #140]	; (8002754 <MX_RTC_Init+0xb4>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <MX_RTC_Init+0xb4>)
 80026cc:	f244 0204 	movw	r2, #16388	; 0x4004
 80026d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <MX_RTC_Init+0xb4>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026d8:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <MX_RTC_Init+0xb4>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <MX_RTC_Init+0xb4>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <MX_RTC_Init+0xb4>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026ea:	481a      	ldr	r0, [pc, #104]	; (8002754 <MX_RTC_Init+0xb4>)
 80026ec:	f008 fea8 	bl	800b440 <HAL_RTC_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80026f6:	f000 fa6f 	bl	8002bd8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	2200      	movs	r2, #0
 8002712:	4619      	mov	r1, r3
 8002714:	480f      	ldr	r0, [pc, #60]	; (8002754 <MX_RTC_Init+0xb4>)
 8002716:	f008 ff0b 	bl	800b530 <HAL_RTC_SetTime>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002720:	f000 fa5a 	bl	8002bd8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002724:	2301      	movs	r3, #1
 8002726:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002728:	2301      	movs	r3, #1
 800272a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800272c:	2301      	movs	r3, #1
 800272e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002734:	463b      	mov	r3, r7
 8002736:	2200      	movs	r2, #0
 8002738:	4619      	mov	r1, r3
 800273a:	4806      	ldr	r0, [pc, #24]	; (8002754 <MX_RTC_Init+0xb4>)
 800273c:	f008 fff2 	bl	800b724 <HAL_RTC_SetDate>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8002746:	f000 fa47 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	24040cc8 	.word	0x24040cc8
 8002758:	58004000 	.word	0x58004000

0800275c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <MX_SDMMC1_SD_Init+0x3c>)
 8002762:	4a0e      	ldr	r2, [pc, #56]	; (800279c <MX_SDMMC1_SD_Init+0x40>)
 8002764:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <MX_SDMMC1_SD_Init+0x3c>)
 8002768:	2200      	movs	r2, #0
 800276a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <MX_SDMMC1_SD_Init+0x3c>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <MX_SDMMC1_SD_Init+0x3c>)
 8002774:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002778:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <MX_SDMMC1_SD_Init+0x3c>)
 800277c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002780:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <MX_SDMMC1_SD_Init+0x3c>)
 8002784:	2200      	movs	r2, #0
 8002786:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <MX_SDMMC1_SD_Init+0x3c>)
 800278a:	2201      	movs	r2, #1
 800278c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	24040c48 	.word	0x24040c48
 800279c:	52007000 	.word	0x52007000

080027a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027a4:	4b27      	ldr	r3, [pc, #156]	; (8002844 <MX_SPI1_Init+0xa4>)
 80027a6:	4a28      	ldr	r2, [pc, #160]	; (8002848 <MX_SPI1_Init+0xa8>)
 80027a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027aa:	4b26      	ldr	r3, [pc, #152]	; (8002844 <MX_SPI1_Init+0xa4>)
 80027ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80027b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <MX_SPI1_Init+0xa4>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027b8:	4b22      	ldr	r3, [pc, #136]	; (8002844 <MX_SPI1_Init+0xa4>)
 80027ba:	2207      	movs	r2, #7
 80027bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027be:	4b21      	ldr	r3, [pc, #132]	; (8002844 <MX_SPI1_Init+0xa4>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027c4:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <MX_SPI1_Init+0xa4>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027ca:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <MX_SPI1_Init+0xa4>)
 80027cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <MX_SPI1_Init+0xa4>)
 80027d4:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80027d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027da:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <MX_SPI1_Init+0xa4>)
 80027dc:	2200      	movs	r2, #0
 80027de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027e0:	4b18      	ldr	r3, [pc, #96]	; (8002844 <MX_SPI1_Init+0xa4>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e6:	4b17      	ldr	r3, [pc, #92]	; (8002844 <MX_SPI1_Init+0xa4>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <MX_SPI1_Init+0xa4>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <MX_SPI1_Init+0xa4>)
 80027f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027f8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <MX_SPI1_Init+0xa4>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <MX_SPI1_Init+0xa4>)
 8002802:	2200      	movs	r2, #0
 8002804:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <MX_SPI1_Init+0xa4>)
 8002808:	2200      	movs	r2, #0
 800280a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <MX_SPI1_Init+0xa4>)
 800280e:	2200      	movs	r2, #0
 8002810:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <MX_SPI1_Init+0xa4>)
 8002814:	2200      	movs	r2, #0
 8002816:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002818:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <MX_SPI1_Init+0xa4>)
 800281a:	2200      	movs	r2, #0
 800281c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <MX_SPI1_Init+0xa4>)
 8002820:	2200      	movs	r2, #0
 8002822:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002824:	4b07      	ldr	r3, [pc, #28]	; (8002844 <MX_SPI1_Init+0xa4>)
 8002826:	2200      	movs	r2, #0
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <MX_SPI1_Init+0xa4>)
 800282c:	2200      	movs	r2, #0
 800282e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002830:	4804      	ldr	r0, [pc, #16]	; (8002844 <MX_SPI1_Init+0xa4>)
 8002832:	f00b f89f 	bl	800d974 <HAL_SPI_Init>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800283c:	f000 f9cc 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}
 8002844:	24040e18 	.word	0x24040e18
 8002848:	40013000 	.word	0x40013000

0800284c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002850:	4b22      	ldr	r3, [pc, #136]	; (80028dc <MX_UART8_Init+0x90>)
 8002852:	4a23      	ldr	r2, [pc, #140]	; (80028e0 <MX_UART8_Init+0x94>)
 8002854:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002856:	4b21      	ldr	r3, [pc, #132]	; (80028dc <MX_UART8_Init+0x90>)
 8002858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800285c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <MX_UART8_Init+0x90>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <MX_UART8_Init+0x90>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800286a:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <MX_UART8_Init+0x90>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <MX_UART8_Init+0x90>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <MX_UART8_Init+0x90>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800287c:	4b17      	ldr	r3, [pc, #92]	; (80028dc <MX_UART8_Init+0x90>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <MX_UART8_Init+0x90>)
 8002884:	2200      	movs	r2, #0
 8002886:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <MX_UART8_Init+0x90>)
 800288a:	2200      	movs	r2, #0
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800288e:	4b13      	ldr	r3, [pc, #76]	; (80028dc <MX_UART8_Init+0x90>)
 8002890:	2200      	movs	r2, #0
 8002892:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002894:	4811      	ldr	r0, [pc, #68]	; (80028dc <MX_UART8_Init+0x90>)
 8002896:	f00c f91e 	bl	800ead6 <HAL_UART_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80028a0:	f000 f99a 	bl	8002bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028a4:	2100      	movs	r1, #0
 80028a6:	480d      	ldr	r0, [pc, #52]	; (80028dc <MX_UART8_Init+0x90>)
 80028a8:	f00d faae 	bl	800fe08 <HAL_UARTEx_SetTxFifoThreshold>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80028b2:	f000 f991 	bl	8002bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028b6:	2100      	movs	r1, #0
 80028b8:	4808      	ldr	r0, [pc, #32]	; (80028dc <MX_UART8_Init+0x90>)
 80028ba:	f00d fae3 	bl	800fe84 <HAL_UARTEx_SetRxFifoThreshold>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80028c4:	f000 f988 	bl	8002bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80028c8:	4804      	ldr	r0, [pc, #16]	; (80028dc <MX_UART8_Init+0x90>)
 80028ca:	f00d fa64 	bl	800fd96 <HAL_UARTEx_DisableFifoMode>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80028d4:	f000 f980 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	24040d8c 	.word	0x24040d8c
 80028e0:	40007c00 	.word	0x40007c00

080028e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028e8:	4b22      	ldr	r3, [pc, #136]	; (8002974 <MX_USART3_UART_Init+0x90>)
 80028ea:	4a23      	ldr	r2, [pc, #140]	; (8002978 <MX_USART3_UART_Init+0x94>)
 80028ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80028ee:	4b21      	ldr	r3, [pc, #132]	; (8002974 <MX_USART3_UART_Init+0x90>)
 80028f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80028f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028f6:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <MX_USART3_UART_Init+0x90>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028fc:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <MX_USART3_UART_Init+0x90>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002902:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002908:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <MX_USART3_UART_Init+0x90>)
 800290a:	220c      	movs	r2, #12
 800290c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002914:	4b17      	ldr	r3, [pc, #92]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800291a:	4b16      	ldr	r3, [pc, #88]	; (8002974 <MX_USART3_UART_Init+0x90>)
 800291c:	2200      	movs	r2, #0
 800291e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002922:	2200      	movs	r2, #0
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002928:	2200      	movs	r2, #0
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800292c:	4811      	ldr	r0, [pc, #68]	; (8002974 <MX_USART3_UART_Init+0x90>)
 800292e:	f00c f8d2 	bl	800ead6 <HAL_UART_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002938:	f000 f94e 	bl	8002bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800293c:	2100      	movs	r1, #0
 800293e:	480d      	ldr	r0, [pc, #52]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002940:	f00d fa62 	bl	800fe08 <HAL_UARTEx_SetTxFifoThreshold>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800294a:	f000 f945 	bl	8002bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800294e:	2100      	movs	r1, #0
 8002950:	4808      	ldr	r0, [pc, #32]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002952:	f00d fa97 	bl	800fe84 <HAL_UARTEx_SetRxFifoThreshold>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800295c:	f000 f93c 	bl	8002bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002960:	4804      	ldr	r0, [pc, #16]	; (8002974 <MX_USART3_UART_Init+0x90>)
 8002962:	f00d fa18 	bl	800fd96 <HAL_UARTEx_DisableFifoMode>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800296c:	f000 f934 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}
 8002974:	24040bbc 	.word	0x24040bbc
 8002978:	40004800 	.word	0x40004800

0800297c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <MX_DMA_Init+0x3c>)
 8002984:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002988:	4a0b      	ldr	r2, [pc, #44]	; (80029b8 <MX_DMA_Init+0x3c>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <MX_DMA_Init+0x3c>)
 8002994:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80029a0:	2200      	movs	r2, #0
 80029a2:	2101      	movs	r1, #1
 80029a4:	200b      	movs	r0, #11
 80029a6:	f000 ff14 	bl	80037d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80029aa:	200b      	movs	r0, #11
 80029ac:	f000 ff2b 	bl	8003806 <HAL_NVIC_EnableIRQ>

}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	58024400 	.word	0x58024400

080029bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08c      	sub	sp, #48	; 0x30
 80029c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c2:	f107 031c 	add.w	r3, r7, #28
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	60da      	str	r2, [r3, #12]
 80029d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029d2:	4b6d      	ldr	r3, [pc, #436]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 80029d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d8:	4a6b      	ldr	r2, [pc, #428]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 80029da:	f043 0310 	orr.w	r3, r3, #16
 80029de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e2:	4b69      	ldr	r3, [pc, #420]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 80029e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f0:	4b65      	ldr	r3, [pc, #404]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 80029f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f6:	4a64      	ldr	r2, [pc, #400]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a00:	4b61      	ldr	r3, [pc, #388]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 8002a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a0e:	4b5e      	ldr	r3, [pc, #376]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 8002a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a14:	4a5c      	ldr	r2, [pc, #368]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 8002a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a1e:	4b5a      	ldr	r3, [pc, #360]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 8002a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2c:	4b56      	ldr	r3, [pc, #344]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 8002a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a32:	4a55      	ldr	r2, [pc, #340]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a3c:	4b52      	ldr	r3, [pc, #328]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 8002a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4a:	4b4f      	ldr	r3, [pc, #316]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 8002a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a50:	4a4d      	ldr	r2, [pc, #308]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 8002a52:	f043 0302 	orr.w	r3, r3, #2
 8002a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a5a:	4b4b      	ldr	r3, [pc, #300]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 8002a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a68:	4b47      	ldr	r3, [pc, #284]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 8002a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6e:	4a46      	ldr	r2, [pc, #280]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 8002a70:	f043 0308 	orr.w	r3, r3, #8
 8002a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a78:	4b43      	ldr	r3, [pc, #268]	; (8002b88 <MX_GPIO_Init+0x1cc>)
 8002a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8002a86:	2200      	movs	r2, #0
 8002a88:	210c      	movs	r1, #12
 8002a8a:	4840      	ldr	r0, [pc, #256]	; (8002b8c <MX_GPIO_Init+0x1d0>)
 8002a8c:	f004 fab2 	bl	8006ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8002a90:	2200      	movs	r2, #0
 8002a92:	2103      	movs	r1, #3
 8002a94:	483e      	ldr	r0, [pc, #248]	; (8002b90 <MX_GPIO_Init+0x1d4>)
 8002a96:	f004 faad 	bl	8006ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	483d      	ldr	r0, [pc, #244]	; (8002b94 <MX_GPIO_Init+0x1d8>)
 8002aa0:	f004 faa8 	bl	8006ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aaa:	483b      	ldr	r0, [pc, #236]	; (8002b98 <MX_GPIO_Init+0x1dc>)
 8002aac:	f004 faa2 	bl	8006ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8002ab0:	230c      	movs	r3, #12
 8002ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4831      	ldr	r0, [pc, #196]	; (8002b8c <MX_GPIO_Init+0x1d0>)
 8002ac8:	f004 f8cc 	bl	8006c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8002acc:	2303      	movs	r3, #3
 8002ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	482b      	ldr	r0, [pc, #172]	; (8002b90 <MX_GPIO_Init+0x1d4>)
 8002ae4:	f004 f8be 	bl	8006c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8002ae8:	2304      	movs	r3, #4
 8002aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aec:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <MX_GPIO_Init+0x1e0>)
 8002aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002af4:	f107 031c 	add.w	r3, r7, #28
 8002af8:	4619      	mov	r1, r3
 8002afa:	4825      	ldr	r0, [pc, #148]	; (8002b90 <MX_GPIO_Init+0x1d4>)
 8002afc:	f004 f8b2 	bl	8006c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002b00:	2301      	movs	r3, #1
 8002b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b04:	2301      	movs	r3, #1
 8002b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002b10:	f107 031c 	add.w	r3, r7, #28
 8002b14:	4619      	mov	r1, r3
 8002b16:	481f      	ldr	r0, [pc, #124]	; (8002b94 <MX_GPIO_Init+0x1d8>)
 8002b18:	f004 f8a4 	bl	8006c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8002b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b22:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <MX_GPIO_Init+0x1e0>)
 8002b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8002b2a:	f107 031c 	add.w	r3, r7, #28
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4816      	ldr	r0, [pc, #88]	; (8002b8c <MX_GPIO_Init+0x1d0>)
 8002b32:	f004 f897 	bl	8006c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8002b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8002b48:	f107 031c 	add.w	r3, r7, #28
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4812      	ldr	r0, [pc, #72]	; (8002b98 <MX_GPIO_Init+0x1dc>)
 8002b50:	f004 f888 	bl	8006c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8002b54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8002b62:	f107 031c 	add.w	r3, r7, #28
 8002b66:	4619      	mov	r1, r3
 8002b68:	4809      	ldr	r0, [pc, #36]	; (8002b90 <MX_GPIO_Init+0x1d4>)
 8002b6a:	f004 f87b 	bl	8006c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2100      	movs	r1, #0
 8002b72:	2017      	movs	r0, #23
 8002b74:	f000 fe2d 	bl	80037d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b78:	2017      	movs	r0, #23
 8002b7a:	f000 fe44 	bl	8003806 <HAL_NVIC_EnableIRQ>

}
 8002b7e:	bf00      	nop
 8002b80:	3730      	adds	r7, #48	; 0x30
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	58024400 	.word	0x58024400
 8002b8c:	58021000 	.word	0x58021000
 8002b90:	58020000 	.word	0x58020000
 8002b94:	58020400 	.word	0x58020400
 8002b98:	58020c00 	.word	0x58020c00
 8002b9c:	11110000 	.word	0x11110000

08002ba0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  end_flag = 0;
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x1c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	24000008 	.word	0x24000008

08002bc0 <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_PWR_PVDCallback+0x14>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
}
 8002bca:	bf00      	nop
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	24000008 	.word	0x24000008

08002bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bdc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 8002bde:	4802      	ldr	r0, [pc, #8]	; (8002be8 <Error_Handler+0x10>)
 8002be0:	f015 fd68 	bl	80186b4 <puts>
 8002be4:	e7fb      	b.n	8002bde <Error_Handler+0x6>
 8002be6:	bf00      	nop
 8002be8:	08019dcc 	.word	0x08019dcc

08002bec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002bf4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002bf8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d013      	beq.n	8002c2c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002c04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c08:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002c0c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00b      	beq.n	8002c2c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002c14:	e000      	b.n	8002c18 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002c16:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002c18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f9      	beq.n	8002c16 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002c22:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002c2c:	687b      	ldr	r3, [r7, #4]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
  int i=0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	e009      	b.n	8002c64 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	60ba      	str	r2, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ffc7 	bl	8002bec <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3301      	adds	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	dbf1      	blt.n	8002c50 <_write+0x16>
  return len;
 8002c6c:	687b      	ldr	r3, [r7, #4]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8002c7e:	f107 0308 	add.w	r3, r7, #8
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c88:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <HAL_MspInit+0x60>)
 8002c8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c8e:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <HAL_MspInit+0x60>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HAL_MspInit+0x60>)
 8002c9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2100      	movs	r1, #0
 8002caa:	2001      	movs	r0, #1
 8002cac:	f000 fd91 	bl	80037d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f000 fda8 	bl	8003806 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8002cb6:	23c0      	movs	r3, #192	; 0xc0
 8002cb8:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8002cba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002cbe:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002cc0:	f107 0308 	add.w	r3, r7, #8
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f005 fc1f 	bl	8008508 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8002cca:	f005 fc97 	bl	80085fc <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	58024400 	.word	0x58024400

08002cdc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08c      	sub	sp, #48	; 0x30
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 031c 	add.w	r3, r7, #28
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a48      	ldr	r2, [pc, #288]	; (8002e1c <HAL_FDCAN_MspInit+0x140>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d14e      	bne.n	8002d9c <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002cfe:	4b48      	ldr	r3, [pc, #288]	; (8002e20 <HAL_FDCAN_MspInit+0x144>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	4a46      	ldr	r2, [pc, #280]	; (8002e20 <HAL_FDCAN_MspInit+0x144>)
 8002d06:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002d08:	4b45      	ldr	r3, [pc, #276]	; (8002e20 <HAL_FDCAN_MspInit+0x144>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d10e      	bne.n	8002d2e <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002d10:	4b44      	ldr	r3, [pc, #272]	; (8002e24 <HAL_FDCAN_MspInit+0x148>)
 8002d12:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d16:	4a43      	ldr	r2, [pc, #268]	; (8002e24 <HAL_FDCAN_MspInit+0x148>)
 8002d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002d20:	4b40      	ldr	r3, [pc, #256]	; (8002e24 <HAL_FDCAN_MspInit+0x148>)
 8002d22:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	61bb      	str	r3, [r7, #24]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2e:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <HAL_FDCAN_MspInit+0x148>)
 8002d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d34:	4a3b      	ldr	r2, [pc, #236]	; (8002e24 <HAL_FDCAN_MspInit+0x148>)
 8002d36:	f043 0302 	orr.w	r3, r3, #2
 8002d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d3e:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <HAL_FDCAN_MspInit+0x148>)
 8002d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002d5e:	2309      	movs	r3, #9
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d62:	f107 031c 	add.w	r3, r7, #28
 8002d66:	4619      	mov	r1, r3
 8002d68:	482f      	ldr	r0, [pc, #188]	; (8002e28 <HAL_FDCAN_MspInit+0x14c>)
 8002d6a:	f003 ff7b 	bl	8006c64 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8002d6e:	2040      	movs	r0, #64	; 0x40
 8002d70:	f004 f98e 	bl	8007090 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8002d74:	2080      	movs	r0, #128	; 0x80
 8002d76:	f004 f98b 	bl	8007090 <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	2013      	movs	r0, #19
 8002d80:	f000 fd27 	bl	80037d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002d84:	2013      	movs	r0, #19
 8002d86:	f000 fd3e 	bl	8003806 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	2015      	movs	r0, #21
 8002d90:	f000 fd1f 	bl	80037d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002d94:	2015      	movs	r0, #21
 8002d96:	f000 fd36 	bl	8003806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002d9a:	e03b      	b.n	8002e14 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_FDCAN_MspInit+0x150>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d136      	bne.n	8002e14 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002da6:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <HAL_FDCAN_MspInit+0x144>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3301      	adds	r3, #1
 8002dac:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <HAL_FDCAN_MspInit+0x144>)
 8002dae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_FDCAN_MspInit+0x144>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d10e      	bne.n	8002dd6 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002db8:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_FDCAN_MspInit+0x148>)
 8002dba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002dbe:	4a19      	ldr	r2, [pc, #100]	; (8002e24 <HAL_FDCAN_MspInit+0x148>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002dc8:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <HAL_FDCAN_MspInit+0x148>)
 8002dca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd6:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <HAL_FDCAN_MspInit+0x148>)
 8002dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ddc:	4a11      	ldr	r2, [pc, #68]	; (8002e24 <HAL_FDCAN_MspInit+0x148>)
 8002dde:	f043 0302 	orr.w	r3, r3, #2
 8002de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002de6:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <HAL_FDCAN_MspInit+0x148>)
 8002de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002df4:	2360      	movs	r3, #96	; 0x60
 8002df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e00:	2300      	movs	r3, #0
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002e04:	2309      	movs	r3, #9
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e08:	f107 031c 	add.w	r3, r7, #28
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4806      	ldr	r0, [pc, #24]	; (8002e28 <HAL_FDCAN_MspInit+0x14c>)
 8002e10:	f003 ff28 	bl	8006c64 <HAL_GPIO_Init>
}
 8002e14:	bf00      	nop
 8002e16:	3730      	adds	r7, #48	; 0x30
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	4000a000 	.word	0x4000a000
 8002e20:	2404033c 	.word	0x2404033c
 8002e24:	58024400 	.word	0x58024400
 8002e28:	58020400 	.word	0x58020400
 8002e2c:	4000a400 	.word	0x4000a400

08002e30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a07      	ldr	r2, [pc, #28]	; (8002e5c <HAL_RTC_MspInit+0x2c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d105      	bne.n	8002e4e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <HAL_RTC_MspInit+0x30>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <HAL_RTC_MspInit+0x30>)
 8002e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	58004000 	.word	0x58004000
 8002e60:	58024400 	.word	0x58024400

08002e64 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a2e      	ldr	r2, [pc, #184]	; (8002f3c <HAL_SD_MspInit+0xd8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d155      	bne.n	8002f32 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e86:	4b2e      	ldr	r3, [pc, #184]	; (8002f40 <HAL_SD_MspInit+0xdc>)
 8002e88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002e8c:	4a2c      	ldr	r2, [pc, #176]	; (8002f40 <HAL_SD_MspInit+0xdc>)
 8002e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e92:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002e96:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <HAL_SD_MspInit+0xdc>)
 8002e98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea4:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <HAL_SD_MspInit+0xdc>)
 8002ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eaa:	4a25      	ldr	r2, [pc, #148]	; (8002f40 <HAL_SD_MspInit+0xdc>)
 8002eac:	f043 0304 	orr.w	r3, r3, #4
 8002eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eb4:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_SD_MspInit+0xdc>)
 8002eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ec2:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <HAL_SD_MspInit+0xdc>)
 8002ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec8:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <HAL_SD_MspInit+0xdc>)
 8002eca:	f043 0308 	orr.w	r3, r3, #8
 8002ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ed2:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <HAL_SD_MspInit+0xdc>)
 8002ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002ee0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002ee4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002ef2:	230c      	movs	r3, #12
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ef6:	f107 0314 	add.w	r3, r7, #20
 8002efa:	4619      	mov	r1, r3
 8002efc:	4811      	ldr	r0, [pc, #68]	; (8002f44 <HAL_SD_MspInit+0xe0>)
 8002efe:	f003 feb1 	bl	8006c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f02:	2304      	movs	r3, #4
 8002f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002f12:	230c      	movs	r3, #12
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f16:	f107 0314 	add.w	r3, r7, #20
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	480a      	ldr	r0, [pc, #40]	; (8002f48 <HAL_SD_MspInit+0xe4>)
 8002f1e:	f003 fea1 	bl	8006c64 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2100      	movs	r1, #0
 8002f26:	2031      	movs	r0, #49	; 0x31
 8002f28:	f000 fc53 	bl	80037d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002f2c:	2031      	movs	r0, #49	; 0x31
 8002f2e:	f000 fc6a 	bl	8003806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002f32:	bf00      	nop
 8002f34:	3728      	adds	r7, #40	; 0x28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	52007000 	.word	0x52007000
 8002f40:	58024400 	.word	0x58024400
 8002f44:	58020800 	.word	0x58020800
 8002f48:	58020c00 	.word	0x58020c00

08002f4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <HAL_SPI_MspInit+0x88>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d12d      	bne.n	8002fca <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <HAL_SPI_MspInit+0x8c>)
 8002f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f74:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <HAL_SPI_MspInit+0x8c>)
 8002f76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f7e:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <HAL_SPI_MspInit+0x8c>)
 8002f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8c:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_SPI_MspInit+0x8c>)
 8002f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f92:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <HAL_SPI_MspInit+0x8c>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f9c:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <HAL_SPI_MspInit+0x8c>)
 8002f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002faa:	23e0      	movs	r3, #224	; 0xe0
 8002fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fba:	2305      	movs	r3, #5
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4805      	ldr	r0, [pc, #20]	; (8002fdc <HAL_SPI_MspInit+0x90>)
 8002fc6:	f003 fe4d 	bl	8006c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002fca:	bf00      	nop
 8002fcc:	3728      	adds	r7, #40	; 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40013000 	.word	0x40013000
 8002fd8:	58024400 	.word	0x58024400
 8002fdc:	58020000 	.word	0x58020000

08002fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08c      	sub	sp, #48	; 0x30
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 031c 	add.w	r3, r7, #28
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a4b      	ldr	r2, [pc, #300]	; (800312c <HAL_UART_MspInit+0x14c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d12e      	bne.n	8003060 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8003002:	4b4b      	ldr	r3, [pc, #300]	; (8003130 <HAL_UART_MspInit+0x150>)
 8003004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003008:	4a49      	ldr	r2, [pc, #292]	; (8003130 <HAL_UART_MspInit+0x150>)
 800300a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800300e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003012:	4b47      	ldr	r3, [pc, #284]	; (8003130 <HAL_UART_MspInit+0x150>)
 8003014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003020:	4b43      	ldr	r3, [pc, #268]	; (8003130 <HAL_UART_MspInit+0x150>)
 8003022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003026:	4a42      	ldr	r2, [pc, #264]	; (8003130 <HAL_UART_MspInit+0x150>)
 8003028:	f043 0310 	orr.w	r3, r3, #16
 800302c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003030:	4b3f      	ldr	r3, [pc, #252]	; (8003130 <HAL_UART_MspInit+0x150>)
 8003032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800303e:	2303      	movs	r3, #3
 8003040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003042:	2302      	movs	r3, #2
 8003044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304a:	2300      	movs	r3, #0
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800304e:	2308      	movs	r3, #8
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003052:	f107 031c 	add.w	r3, r7, #28
 8003056:	4619      	mov	r1, r3
 8003058:	4836      	ldr	r0, [pc, #216]	; (8003134 <HAL_UART_MspInit+0x154>)
 800305a:	f003 fe03 	bl	8006c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800305e:	e061      	b.n	8003124 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a34      	ldr	r2, [pc, #208]	; (8003138 <HAL_UART_MspInit+0x158>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d15c      	bne.n	8003124 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 800306a:	4b31      	ldr	r3, [pc, #196]	; (8003130 <HAL_UART_MspInit+0x150>)
 800306c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003070:	4a2f      	ldr	r2, [pc, #188]	; (8003130 <HAL_UART_MspInit+0x150>)
 8003072:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003076:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800307a:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <HAL_UART_MspInit+0x150>)
 800307c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003088:	4b29      	ldr	r3, [pc, #164]	; (8003130 <HAL_UART_MspInit+0x150>)
 800308a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800308e:	4a28      	ldr	r2, [pc, #160]	; (8003130 <HAL_UART_MspInit+0x150>)
 8003090:	f043 0308 	orr.w	r3, r3, #8
 8003094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003098:	4b25      	ldr	r3, [pc, #148]	; (8003130 <HAL_UART_MspInit+0x150>)
 800309a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b4:	2300      	movs	r3, #0
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030b8:	2307      	movs	r3, #7
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030bc:	f107 031c 	add.w	r3, r7, #28
 80030c0:	4619      	mov	r1, r3
 80030c2:	481e      	ldr	r0, [pc, #120]	; (800313c <HAL_UART_MspInit+0x15c>)
 80030c4:	f003 fdce 	bl	8006c64 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80030c8:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <HAL_UART_MspInit+0x160>)
 80030ca:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <HAL_UART_MspInit+0x164>)
 80030cc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80030ce:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <HAL_UART_MspInit+0x160>)
 80030d0:	222d      	movs	r2, #45	; 0x2d
 80030d2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030d4:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <HAL_UART_MspInit+0x160>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030da:	4b19      	ldr	r3, [pc, #100]	; (8003140 <HAL_UART_MspInit+0x160>)
 80030dc:	2200      	movs	r2, #0
 80030de:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030e0:	4b17      	ldr	r3, [pc, #92]	; (8003140 <HAL_UART_MspInit+0x160>)
 80030e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030e6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030e8:	4b15      	ldr	r3, [pc, #84]	; (8003140 <HAL_UART_MspInit+0x160>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030ee:	4b14      	ldr	r3, [pc, #80]	; (8003140 <HAL_UART_MspInit+0x160>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_UART_MspInit+0x160>)
 80030f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030fa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030fc:	4b10      	ldr	r3, [pc, #64]	; (8003140 <HAL_UART_MspInit+0x160>)
 80030fe:	2200      	movs	r2, #0
 8003100:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003102:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <HAL_UART_MspInit+0x160>)
 8003104:	2200      	movs	r2, #0
 8003106:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003108:	480d      	ldr	r0, [pc, #52]	; (8003140 <HAL_UART_MspInit+0x160>)
 800310a:	f000 fb97 	bl	800383c <HAL_DMA_Init>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8003114:	f7ff fd60 	bl	8002bd8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_UART_MspInit+0x160>)
 800311c:	679a      	str	r2, [r3, #120]	; 0x78
 800311e:	4a08      	ldr	r2, [pc, #32]	; (8003140 <HAL_UART_MspInit+0x160>)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003124:	bf00      	nop
 8003126:	3730      	adds	r7, #48	; 0x30
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40007c00 	.word	0x40007c00
 8003130:	58024400 	.word	0x58024400
 8003134:	58021000 	.word	0x58021000
 8003138:	40004800 	.word	0x40004800
 800313c:	58020c00 	.word	0x58020c00
 8003140:	24040b44 	.word	0x24040b44
 8003144:	40020010 	.word	0x40020010

08003148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800314c:	f006 fa98 	bl	8009680 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003150:	e7fe      	b.n	8003150 <NMI_Handler+0x8>

08003152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003156:	e7fe      	b.n	8003156 <HardFault_Handler+0x4>

08003158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800315c:	e7fe      	b.n	800315c <MemManage_Handler+0x4>

0800315e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003162:	e7fe      	b.n	8003162 <BusFault_Handler+0x4>

08003164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003168:	e7fe      	b.n	8003168 <UsageFault_Handler+0x4>

0800316a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003186:	b480      	push	{r7}
 8003188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003198:	f000 f9f2 	bl	8003580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800319c:	bf00      	nop
 800319e:	bd80      	pop	{r7, pc}

080031a0 <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 80031a4:	f005 fa84 	bl	80086b0 <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}

080031ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <DMA1_Stream0_IRQHandler+0x10>)
 80031b2:	f001 f909 	bl	80043c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	24040b44 	.word	0x24040b44

080031c0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <FDCAN1_IT0_IRQHandler+0x10>)
 80031c6:	f003 f8bd 	bl	8006344 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	24040cec 	.word	0x24040cec

080031d4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80031d8:	4802      	ldr	r0, [pc, #8]	; (80031e4 <FDCAN1_IT1_IRQHandler+0x10>)
 80031da:	f003 f8b3 	bl	8006344 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	24040cec 	.word	0x24040cec

080031e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80031ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80031f0:	f003 ff34 	bl	800705c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80031fc:	4802      	ldr	r0, [pc, #8]	; (8003208 <SDMMC1_IRQHandler+0x10>)
 80031fe:	f009 f9c1 	bl	800c584 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	24040c48 	.word	0x24040c48

0800320c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003210:	4802      	ldr	r0, [pc, #8]	; (800321c <OTG_FS_IRQHandler+0x10>)
 8003212:	f004 f8b8 	bl	8007386 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	2404187c 	.word	0x2404187c

08003220 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	e00a      	b.n	8003248 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003232:	f3af 8000 	nop.w
 8003236:	4601      	mov	r1, r0
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	60ba      	str	r2, [r7, #8]
 800323e:	b2ca      	uxtb	r2, r1
 8003240:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	3301      	adds	r3, #1
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	dbf0      	blt.n	8003232 <_read+0x12>
	}

return len;
 8003250:	687b      	ldr	r3, [r7, #4]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <_close>:
	}
	return len;
}

int _close(int file)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
	return -1;
 8003262:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003282:	605a      	str	r2, [r3, #4]
	return 0;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <_isatty>:

int _isatty(int file)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
	return 1;
 800329a:	2301      	movs	r3, #1
}
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
	return 0;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <_sbrk+0x5c>)
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <_sbrk+0x60>)
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032d8:	4b13      	ldr	r3, [pc, #76]	; (8003328 <_sbrk+0x64>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d102      	bne.n	80032e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <_sbrk+0x64>)
 80032e2:	4a12      	ldr	r2, [pc, #72]	; (800332c <_sbrk+0x68>)
 80032e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <_sbrk+0x64>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4413      	add	r3, r2
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d207      	bcs.n	8003304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032f4:	f015 f874 	bl	80183e0 <__errno>
 80032f8:	4602      	mov	r2, r0
 80032fa:	230c      	movs	r3, #12
 80032fc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003302:	e009      	b.n	8003318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003304:	4b08      	ldr	r3, [pc, #32]	; (8003328 <_sbrk+0x64>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <_sbrk+0x64>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	4a05      	ldr	r2, [pc, #20]	; (8003328 <_sbrk+0x64>)
 8003314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003316:	68fb      	ldr	r3, [r7, #12]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	24080000 	.word	0x24080000
 8003324:	00000400 	.word	0x00000400
 8003328:	24040340 	.word	0x24040340
 800332c:	24041c88 	.word	0x24041c88

08003330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003334:	4b39      	ldr	r3, [pc, #228]	; (800341c <SystemInit+0xec>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	4a38      	ldr	r2, [pc, #224]	; (800341c <SystemInit+0xec>)
 800333c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003344:	4b36      	ldr	r3, [pc, #216]	; (8003420 <SystemInit+0xf0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	2b06      	cmp	r3, #6
 800334e:	d807      	bhi.n	8003360 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003350:	4b33      	ldr	r3, [pc, #204]	; (8003420 <SystemInit+0xf0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 030f 	bic.w	r3, r3, #15
 8003358:	4a31      	ldr	r2, [pc, #196]	; (8003420 <SystemInit+0xf0>)
 800335a:	f043 0307 	orr.w	r3, r3, #7
 800335e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003360:	4b30      	ldr	r3, [pc, #192]	; (8003424 <SystemInit+0xf4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a2f      	ldr	r2, [pc, #188]	; (8003424 <SystemInit+0xf4>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800336c:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <SystemInit+0xf4>)
 800336e:	2200      	movs	r2, #0
 8003370:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003372:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <SystemInit+0xf4>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	492b      	ldr	r1, [pc, #172]	; (8003424 <SystemInit+0xf4>)
 8003378:	4b2b      	ldr	r3, [pc, #172]	; (8003428 <SystemInit+0xf8>)
 800337a:	4013      	ands	r3, r2
 800337c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800337e:	4b28      	ldr	r3, [pc, #160]	; (8003420 <SystemInit+0xf0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	2b07      	cmp	r3, #7
 8003388:	d907      	bls.n	800339a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800338a:	4b25      	ldr	r3, [pc, #148]	; (8003420 <SystemInit+0xf0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 030f 	bic.w	r3, r3, #15
 8003392:	4a23      	ldr	r2, [pc, #140]	; (8003420 <SystemInit+0xf0>)
 8003394:	f043 0307 	orr.w	r3, r3, #7
 8003398:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800339a:	4b22      	ldr	r3, [pc, #136]	; (8003424 <SystemInit+0xf4>)
 800339c:	2200      	movs	r2, #0
 800339e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <SystemInit+0xf4>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80033a6:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <SystemInit+0xf4>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80033ac:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <SystemInit+0xf4>)
 80033ae:	4a1f      	ldr	r2, [pc, #124]	; (800342c <SystemInit+0xfc>)
 80033b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80033b2:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <SystemInit+0xf4>)
 80033b4:	4a1e      	ldr	r2, [pc, #120]	; (8003430 <SystemInit+0x100>)
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <SystemInit+0xf4>)
 80033ba:	4a1e      	ldr	r2, [pc, #120]	; (8003434 <SystemInit+0x104>)
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80033be:	4b19      	ldr	r3, [pc, #100]	; (8003424 <SystemInit+0xf4>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80033c4:	4b17      	ldr	r3, [pc, #92]	; (8003424 <SystemInit+0xf4>)
 80033c6:	4a1b      	ldr	r2, [pc, #108]	; (8003434 <SystemInit+0x104>)
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80033ca:	4b16      	ldr	r3, [pc, #88]	; (8003424 <SystemInit+0xf4>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80033d0:	4b14      	ldr	r3, [pc, #80]	; (8003424 <SystemInit+0xf4>)
 80033d2:	4a18      	ldr	r2, [pc, #96]	; (8003434 <SystemInit+0x104>)
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80033d6:	4b13      	ldr	r3, [pc, #76]	; (8003424 <SystemInit+0xf4>)
 80033d8:	2200      	movs	r2, #0
 80033da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <SystemInit+0xf4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a10      	ldr	r2, [pc, #64]	; (8003424 <SystemInit+0xf4>)
 80033e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <SystemInit+0xf4>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80033ee:	4b12      	ldr	r3, [pc, #72]	; (8003438 <SystemInit+0x108>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4b12      	ldr	r3, [pc, #72]	; (800343c <SystemInit+0x10c>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033fa:	d202      	bcs.n	8003402 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80033fc:	4b10      	ldr	r3, [pc, #64]	; (8003440 <SystemInit+0x110>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <SystemInit+0x114>)
 8003404:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003408:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800340a:	4b04      	ldr	r3, [pc, #16]	; (800341c <SystemInit+0xec>)
 800340c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003410:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003412:	bf00      	nop
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000ed00 	.word	0xe000ed00
 8003420:	52002000 	.word	0x52002000
 8003424:	58024400 	.word	0x58024400
 8003428:	eaf6ed7f 	.word	0xeaf6ed7f
 800342c:	02020200 	.word	0x02020200
 8003430:	01ff0000 	.word	0x01ff0000
 8003434:	01010280 	.word	0x01010280
 8003438:	5c001000 	.word	0x5c001000
 800343c:	ffff0000 	.word	0xffff0000
 8003440:	51008108 	.word	0x51008108
 8003444:	52004000 	.word	0x52004000

08003448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003480 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800344c:	f7ff ff70 	bl	8003330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003450:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003452:	e003      	b.n	800345c <LoopCopyDataInit>

08003454 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003456:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003458:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800345a:	3104      	adds	r1, #4

0800345c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800345c:	480a      	ldr	r0, [pc, #40]	; (8003488 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003460:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003462:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003464:	d3f6      	bcc.n	8003454 <CopyDataInit>
  ldr  r2, =_sbss
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003468:	e002      	b.n	8003470 <LoopFillZerobss>

0800346a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800346a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800346c:	f842 3b04 	str.w	r3, [r2], #4

08003470 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003472:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003474:	d3f9      	bcc.n	800346a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003476:	f014 ffb9 	bl	80183ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800347a:	f7fe fb4f 	bl	8001b1c <main>
  bx  lr    
 800347e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003480:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8003484:	0801a060 	.word	0x0801a060
  ldr  r0, =_sdata
 8003488:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800348c:	240001d8 	.word	0x240001d8
  ldr  r2, =_sbss
 8003490:	240001d8 	.word	0x240001d8
  ldr  r3, = _ebss
 8003494:	24041c88 	.word	0x24041c88

08003498 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003498:	e7fe      	b.n	8003498 <ADC3_IRQHandler>
	...

0800349c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a2:	2003      	movs	r0, #3
 80034a4:	f000 f98a 	bl	80037bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034a8:	f005 ff1c 	bl	80092e4 <HAL_RCC_GetSysClockFreq>
 80034ac:	4601      	mov	r1, r0
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <HAL_Init+0x68>)
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	0a1b      	lsrs	r3, r3, #8
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	4a13      	ldr	r2, [pc, #76]	; (8003508 <HAL_Init+0x6c>)
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	fa21 f303 	lsr.w	r3, r1, r3
 80034c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034c6:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <HAL_Init+0x68>)
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	4a0e      	ldr	r2, [pc, #56]	; (8003508 <HAL_Init+0x6c>)
 80034d0:	5cd3      	ldrb	r3, [r2, r3]
 80034d2:	f003 031f 	and.w	r3, r3, #31
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
 80034dc:	4a0b      	ldr	r2, [pc, #44]	; (800350c <HAL_Init+0x70>)
 80034de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034e0:	4a0b      	ldr	r2, [pc, #44]	; (8003510 <HAL_Init+0x74>)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034e6:	2000      	movs	r0, #0
 80034e8:	f000 f814 	bl	8003514 <HAL_InitTick>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e002      	b.n	80034fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80034f6:	f7ff fbbf 	bl	8002c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	58024400 	.word	0x58024400
 8003508:	08019ec0 	.word	0x08019ec0
 800350c:	24000010 	.word	0x24000010
 8003510:	2400000c 	.word	0x2400000c

08003514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800351c:	4b15      	ldr	r3, [pc, #84]	; (8003574 <HAL_InitTick+0x60>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e021      	b.n	800356c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003528:	4b13      	ldr	r3, [pc, #76]	; (8003578 <HAL_InitTick+0x64>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <HAL_InitTick+0x60>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	4619      	mov	r1, r3
 8003532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003536:	fbb3 f3f1 	udiv	r3, r3, r1
 800353a:	fbb2 f3f3 	udiv	r3, r2, r3
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f96f 	bl	8003822 <HAL_SYSTICK_Config>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e00e      	b.n	800356c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b0f      	cmp	r3, #15
 8003552:	d80a      	bhi.n	800356a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003554:	2200      	movs	r2, #0
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	f000 f939 	bl	80037d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003560:	4a06      	ldr	r2, [pc, #24]	; (800357c <HAL_InitTick+0x68>)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	e000      	b.n	800356c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	24000018 	.word	0x24000018
 8003578:	2400000c 	.word	0x2400000c
 800357c:	24000014 	.word	0x24000014

08003580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_IncTick+0x20>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	461a      	mov	r2, r3
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_IncTick+0x24>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4413      	add	r3, r2
 8003590:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <HAL_IncTick+0x24>)
 8003592:	6013      	str	r3, [r2, #0]
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	24000018 	.word	0x24000018
 80035a4:	24040f40 	.word	0x24040f40

080035a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return uwTick;
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <HAL_GetTick+0x14>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	24040f40 	.word	0x24040f40

080035c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035c8:	f7ff ffee 	bl	80035a8 <HAL_GetTick>
 80035cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d8:	d005      	beq.n	80035e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_Delay+0x40>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035e6:	bf00      	nop
 80035e8:	f7ff ffde 	bl	80035a8 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d8f7      	bhi.n	80035e8 <HAL_Delay+0x28>
  {
  }
}
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	24000018 	.word	0x24000018

08003604 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003608:	4b03      	ldr	r3, [pc, #12]	; (8003618 <HAL_GetREVID+0x14>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	0c1b      	lsrs	r3, r3, #16
}
 800360e:	4618      	mov	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	5c001000 	.word	0x5c001000

0800361c <__NVIC_SetPriorityGrouping>:
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <__NVIC_SetPriorityGrouping+0x40>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003638:	4013      	ands	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <__NVIC_SetPriorityGrouping+0x44>)
 8003646:	4313      	orrs	r3, r2
 8003648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800364a:	4a04      	ldr	r2, [pc, #16]	; (800365c <__NVIC_SetPriorityGrouping+0x40>)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	60d3      	str	r3, [r2, #12]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000ed00 	.word	0xe000ed00
 8003660:	05fa0000 	.word	0x05fa0000

08003664 <__NVIC_GetPriorityGrouping>:
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <__NVIC_GetPriorityGrouping+0x18>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	0a1b      	lsrs	r3, r3, #8
 800366e:	f003 0307 	and.w	r3, r3, #7
}
 8003672:	4618      	mov	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <__NVIC_EnableIRQ>:
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800368a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800368e:	2b00      	cmp	r3, #0
 8003690:	db0b      	blt.n	80036aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	f003 021f 	and.w	r2, r3, #31
 8003698:	4907      	ldr	r1, [pc, #28]	; (80036b8 <__NVIC_EnableIRQ+0x38>)
 800369a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	2001      	movs	r0, #1
 80036a2:	fa00 f202 	lsl.w	r2, r0, r2
 80036a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	e000e100 	.word	0xe000e100

080036bc <__NVIC_SetPriority>:
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	6039      	str	r1, [r7, #0]
 80036c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	db0a      	blt.n	80036e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	490c      	ldr	r1, [pc, #48]	; (8003708 <__NVIC_SetPriority+0x4c>)
 80036d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036da:	0112      	lsls	r2, r2, #4
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	440b      	add	r3, r1
 80036e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036e4:	e00a      	b.n	80036fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	4908      	ldr	r1, [pc, #32]	; (800370c <__NVIC_SetPriority+0x50>)
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	3b04      	subs	r3, #4
 80036f4:	0112      	lsls	r2, r2, #4
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	440b      	add	r3, r1
 80036fa:	761a      	strb	r2, [r3, #24]
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	e000e100 	.word	0xe000e100
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <NVIC_EncodePriority>:
{
 8003710:	b480      	push	{r7}
 8003712:	b089      	sub	sp, #36	; 0x24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f1c3 0307 	rsb	r3, r3, #7
 800372a:	2b04      	cmp	r3, #4
 800372c:	bf28      	it	cs
 800372e:	2304      	movcs	r3, #4
 8003730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3304      	adds	r3, #4
 8003736:	2b06      	cmp	r3, #6
 8003738:	d902      	bls.n	8003740 <NVIC_EncodePriority+0x30>
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	3b03      	subs	r3, #3
 800373e:	e000      	b.n	8003742 <NVIC_EncodePriority+0x32>
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003744:	f04f 32ff 	mov.w	r2, #4294967295
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43da      	mvns	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	401a      	ands	r2, r3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003758:	f04f 31ff 	mov.w	r1, #4294967295
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	fa01 f303 	lsl.w	r3, r1, r3
 8003762:	43d9      	mvns	r1, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003768:	4313      	orrs	r3, r2
}
 800376a:	4618      	mov	r0, r3
 800376c:	3724      	adds	r7, #36	; 0x24
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <SysTick_Config>:
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3b01      	subs	r3, #1
 8003784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003788:	d301      	bcc.n	800378e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800378a:	2301      	movs	r3, #1
 800378c:	e00f      	b.n	80037ae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800378e:	4a0a      	ldr	r2, [pc, #40]	; (80037b8 <SysTick_Config+0x40>)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3b01      	subs	r3, #1
 8003794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003796:	210f      	movs	r1, #15
 8003798:	f04f 30ff 	mov.w	r0, #4294967295
 800379c:	f7ff ff8e 	bl	80036bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <SysTick_Config+0x40>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037a6:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <SysTick_Config+0x40>)
 80037a8:	2207      	movs	r2, #7
 80037aa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	e000e010 	.word	0xe000e010

080037bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ff29 	bl	800361c <__NVIC_SetPriorityGrouping>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b086      	sub	sp, #24
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	4603      	mov	r3, r0
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	607a      	str	r2, [r7, #4]
 80037de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037e0:	f7ff ff40 	bl	8003664 <__NVIC_GetPriorityGrouping>
 80037e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	6978      	ldr	r0, [r7, #20]
 80037ec:	f7ff ff90 	bl	8003710 <NVIC_EncodePriority>
 80037f0:	4602      	mov	r2, r0
 80037f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff ff5f 	bl	80036bc <__NVIC_SetPriority>
}
 80037fe:	bf00      	nop
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b082      	sub	sp, #8
 800380a:	af00      	add	r7, sp, #0
 800380c:	4603      	mov	r3, r0
 800380e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003810:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff ff33 	bl	8003680 <__NVIC_EnableIRQ>
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff ffa4 	bl	8003778 <SysTick_Config>
 8003830:	4603      	mov	r3, r0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003844:	f7ff feb0 	bl	80035a8 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e316      	b.n	8003e82 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a66      	ldr	r2, [pc, #408]	; (80039f4 <HAL_DMA_Init+0x1b8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d04a      	beq.n	80038f4 <HAL_DMA_Init+0xb8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a65      	ldr	r2, [pc, #404]	; (80039f8 <HAL_DMA_Init+0x1bc>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d045      	beq.n	80038f4 <HAL_DMA_Init+0xb8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a63      	ldr	r2, [pc, #396]	; (80039fc <HAL_DMA_Init+0x1c0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d040      	beq.n	80038f4 <HAL_DMA_Init+0xb8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a62      	ldr	r2, [pc, #392]	; (8003a00 <HAL_DMA_Init+0x1c4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d03b      	beq.n	80038f4 <HAL_DMA_Init+0xb8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a60      	ldr	r2, [pc, #384]	; (8003a04 <HAL_DMA_Init+0x1c8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d036      	beq.n	80038f4 <HAL_DMA_Init+0xb8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a5f      	ldr	r2, [pc, #380]	; (8003a08 <HAL_DMA_Init+0x1cc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d031      	beq.n	80038f4 <HAL_DMA_Init+0xb8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a5d      	ldr	r2, [pc, #372]	; (8003a0c <HAL_DMA_Init+0x1d0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d02c      	beq.n	80038f4 <HAL_DMA_Init+0xb8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a5c      	ldr	r2, [pc, #368]	; (8003a10 <HAL_DMA_Init+0x1d4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d027      	beq.n	80038f4 <HAL_DMA_Init+0xb8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a5a      	ldr	r2, [pc, #360]	; (8003a14 <HAL_DMA_Init+0x1d8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d022      	beq.n	80038f4 <HAL_DMA_Init+0xb8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a59      	ldr	r2, [pc, #356]	; (8003a18 <HAL_DMA_Init+0x1dc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d01d      	beq.n	80038f4 <HAL_DMA_Init+0xb8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a57      	ldr	r2, [pc, #348]	; (8003a1c <HAL_DMA_Init+0x1e0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d018      	beq.n	80038f4 <HAL_DMA_Init+0xb8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a56      	ldr	r2, [pc, #344]	; (8003a20 <HAL_DMA_Init+0x1e4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d013      	beq.n	80038f4 <HAL_DMA_Init+0xb8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a54      	ldr	r2, [pc, #336]	; (8003a24 <HAL_DMA_Init+0x1e8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00e      	beq.n	80038f4 <HAL_DMA_Init+0xb8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a53      	ldr	r2, [pc, #332]	; (8003a28 <HAL_DMA_Init+0x1ec>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d009      	beq.n	80038f4 <HAL_DMA_Init+0xb8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a51      	ldr	r2, [pc, #324]	; (8003a2c <HAL_DMA_Init+0x1f0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <HAL_DMA_Init+0xb8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a50      	ldr	r2, [pc, #320]	; (8003a30 <HAL_DMA_Init+0x1f4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d101      	bne.n	80038f8 <HAL_DMA_Init+0xbc>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <HAL_DMA_Init+0xbe>
 80038f8:	2300      	movs	r3, #0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 813b 	beq.w	8003b76 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a37      	ldr	r2, [pc, #220]	; (80039f4 <HAL_DMA_Init+0x1b8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d04a      	beq.n	80039b0 <HAL_DMA_Init+0x174>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a36      	ldr	r2, [pc, #216]	; (80039f8 <HAL_DMA_Init+0x1bc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d045      	beq.n	80039b0 <HAL_DMA_Init+0x174>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a34      	ldr	r2, [pc, #208]	; (80039fc <HAL_DMA_Init+0x1c0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d040      	beq.n	80039b0 <HAL_DMA_Init+0x174>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a33      	ldr	r2, [pc, #204]	; (8003a00 <HAL_DMA_Init+0x1c4>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d03b      	beq.n	80039b0 <HAL_DMA_Init+0x174>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a31      	ldr	r2, [pc, #196]	; (8003a04 <HAL_DMA_Init+0x1c8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d036      	beq.n	80039b0 <HAL_DMA_Init+0x174>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a30      	ldr	r2, [pc, #192]	; (8003a08 <HAL_DMA_Init+0x1cc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d031      	beq.n	80039b0 <HAL_DMA_Init+0x174>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2e      	ldr	r2, [pc, #184]	; (8003a0c <HAL_DMA_Init+0x1d0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d02c      	beq.n	80039b0 <HAL_DMA_Init+0x174>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a2d      	ldr	r2, [pc, #180]	; (8003a10 <HAL_DMA_Init+0x1d4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d027      	beq.n	80039b0 <HAL_DMA_Init+0x174>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2b      	ldr	r2, [pc, #172]	; (8003a14 <HAL_DMA_Init+0x1d8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d022      	beq.n	80039b0 <HAL_DMA_Init+0x174>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a2a      	ldr	r2, [pc, #168]	; (8003a18 <HAL_DMA_Init+0x1dc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d01d      	beq.n	80039b0 <HAL_DMA_Init+0x174>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a28      	ldr	r2, [pc, #160]	; (8003a1c <HAL_DMA_Init+0x1e0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d018      	beq.n	80039b0 <HAL_DMA_Init+0x174>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a27      	ldr	r2, [pc, #156]	; (8003a20 <HAL_DMA_Init+0x1e4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d013      	beq.n	80039b0 <HAL_DMA_Init+0x174>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a25      	ldr	r2, [pc, #148]	; (8003a24 <HAL_DMA_Init+0x1e8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00e      	beq.n	80039b0 <HAL_DMA_Init+0x174>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a24      	ldr	r2, [pc, #144]	; (8003a28 <HAL_DMA_Init+0x1ec>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d009      	beq.n	80039b0 <HAL_DMA_Init+0x174>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <HAL_DMA_Init+0x1f0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d004      	beq.n	80039b0 <HAL_DMA_Init+0x174>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a21      	ldr	r2, [pc, #132]	; (8003a30 <HAL_DMA_Init+0x1f4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d108      	bne.n	80039c2 <HAL_DMA_Init+0x186>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0201 	bic.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	e007      	b.n	80039d2 <HAL_DMA_Init+0x196>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0201 	bic.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039d2:	e02f      	b.n	8003a34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039d4:	f7ff fde8 	bl	80035a8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b05      	cmp	r3, #5
 80039e0:	d928      	bls.n	8003a34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2203      	movs	r2, #3
 80039ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e246      	b.n	8003e82 <HAL_DMA_Init+0x646>
 80039f4:	40020010 	.word	0x40020010
 80039f8:	40020028 	.word	0x40020028
 80039fc:	40020040 	.word	0x40020040
 8003a00:	40020058 	.word	0x40020058
 8003a04:	40020070 	.word	0x40020070
 8003a08:	40020088 	.word	0x40020088
 8003a0c:	400200a0 	.word	0x400200a0
 8003a10:	400200b8 	.word	0x400200b8
 8003a14:	40020410 	.word	0x40020410
 8003a18:	40020428 	.word	0x40020428
 8003a1c:	40020440 	.word	0x40020440
 8003a20:	40020458 	.word	0x40020458
 8003a24:	40020470 	.word	0x40020470
 8003a28:	40020488 	.word	0x40020488
 8003a2c:	400204a0 	.word	0x400204a0
 8003a30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1c8      	bne.n	80039d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4b83      	ldr	r3, [pc, #524]	; (8003c5c <HAL_DMA_Init+0x420>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003a5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d107      	bne.n	8003a98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	4313      	orrs	r3, r2
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003a98:	4b71      	ldr	r3, [pc, #452]	; (8003c60 <HAL_DMA_Init+0x424>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4b71      	ldr	r3, [pc, #452]	; (8003c64 <HAL_DMA_Init+0x428>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa4:	d328      	bcc.n	8003af8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b28      	cmp	r3, #40	; 0x28
 8003aac:	d903      	bls.n	8003ab6 <HAL_DMA_Init+0x27a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ab4:	d917      	bls.n	8003ae6 <HAL_DMA_Init+0x2aa>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b3e      	cmp	r3, #62	; 0x3e
 8003abc:	d903      	bls.n	8003ac6 <HAL_DMA_Init+0x28a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b42      	cmp	r3, #66	; 0x42
 8003ac4:	d90f      	bls.n	8003ae6 <HAL_DMA_Init+0x2aa>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b46      	cmp	r3, #70	; 0x46
 8003acc:	d903      	bls.n	8003ad6 <HAL_DMA_Init+0x29a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b48      	cmp	r3, #72	; 0x48
 8003ad4:	d907      	bls.n	8003ae6 <HAL_DMA_Init+0x2aa>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b4e      	cmp	r3, #78	; 0x4e
 8003adc:	d905      	bls.n	8003aea <HAL_DMA_Init+0x2ae>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b52      	cmp	r3, #82	; 0x52
 8003ae4:	d801      	bhi.n	8003aea <HAL_DMA_Init+0x2ae>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <HAL_DMA_Init+0x2b0>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003af6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f023 0307 	bic.w	r3, r3, #7
 8003b0e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d117      	bne.n	8003b52 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00e      	beq.n	8003b52 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f001 fdcf 	bl	80056d8 <DMA_CheckFifoParam>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2240      	movs	r2, #64	; 0x40
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e197      	b.n	8003e82 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f001 fd0a 	bl	8005574 <DMA_CalcBaseAndBitshift>
 8003b60:	4603      	mov	r3, r0
 8003b62:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	223f      	movs	r2, #63	; 0x3f
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	e0cd      	b.n	8003d12 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a3b      	ldr	r2, [pc, #236]	; (8003c68 <HAL_DMA_Init+0x42c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d022      	beq.n	8003bc6 <HAL_DMA_Init+0x38a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a39      	ldr	r2, [pc, #228]	; (8003c6c <HAL_DMA_Init+0x430>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d01d      	beq.n	8003bc6 <HAL_DMA_Init+0x38a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a38      	ldr	r2, [pc, #224]	; (8003c70 <HAL_DMA_Init+0x434>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d018      	beq.n	8003bc6 <HAL_DMA_Init+0x38a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a36      	ldr	r2, [pc, #216]	; (8003c74 <HAL_DMA_Init+0x438>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <HAL_DMA_Init+0x38a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a35      	ldr	r2, [pc, #212]	; (8003c78 <HAL_DMA_Init+0x43c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_DMA_Init+0x38a>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a33      	ldr	r2, [pc, #204]	; (8003c7c <HAL_DMA_Init+0x440>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d009      	beq.n	8003bc6 <HAL_DMA_Init+0x38a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a32      	ldr	r2, [pc, #200]	; (8003c80 <HAL_DMA_Init+0x444>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d004      	beq.n	8003bc6 <HAL_DMA_Init+0x38a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a30      	ldr	r2, [pc, #192]	; (8003c84 <HAL_DMA_Init+0x448>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d101      	bne.n	8003bca <HAL_DMA_Init+0x38e>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <HAL_DMA_Init+0x390>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8097 	beq.w	8003d00 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a24      	ldr	r2, [pc, #144]	; (8003c68 <HAL_DMA_Init+0x42c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d021      	beq.n	8003c20 <HAL_DMA_Init+0x3e4>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a22      	ldr	r2, [pc, #136]	; (8003c6c <HAL_DMA_Init+0x430>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d01c      	beq.n	8003c20 <HAL_DMA_Init+0x3e4>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a21      	ldr	r2, [pc, #132]	; (8003c70 <HAL_DMA_Init+0x434>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d017      	beq.n	8003c20 <HAL_DMA_Init+0x3e4>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1f      	ldr	r2, [pc, #124]	; (8003c74 <HAL_DMA_Init+0x438>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d012      	beq.n	8003c20 <HAL_DMA_Init+0x3e4>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1e      	ldr	r2, [pc, #120]	; (8003c78 <HAL_DMA_Init+0x43c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00d      	beq.n	8003c20 <HAL_DMA_Init+0x3e4>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1c      	ldr	r2, [pc, #112]	; (8003c7c <HAL_DMA_Init+0x440>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d008      	beq.n	8003c20 <HAL_DMA_Init+0x3e4>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1b      	ldr	r2, [pc, #108]	; (8003c80 <HAL_DMA_Init+0x444>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d003      	beq.n	8003c20 <HAL_DMA_Init+0x3e4>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a19      	ldr	r2, [pc, #100]	; (8003c84 <HAL_DMA_Init+0x448>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <HAL_DMA_Init+0x44c>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	d020      	beq.n	8003c8c <HAL_DMA_Init+0x450>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b80      	cmp	r3, #128	; 0x80
 8003c50:	d102      	bne.n	8003c58 <HAL_DMA_Init+0x41c>
 8003c52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c56:	e01a      	b.n	8003c8e <HAL_DMA_Init+0x452>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e018      	b.n	8003c8e <HAL_DMA_Init+0x452>
 8003c5c:	fe10803f 	.word	0xfe10803f
 8003c60:	5c001000 	.word	0x5c001000
 8003c64:	ffff0000 	.word	0xffff0000
 8003c68:	58025408 	.word	0x58025408
 8003c6c:	5802541c 	.word	0x5802541c
 8003c70:	58025430 	.word	0x58025430
 8003c74:	58025444 	.word	0x58025444
 8003c78:	58025458 	.word	0x58025458
 8003c7c:	5802546c 	.word	0x5802546c
 8003c80:	58025480 	.word	0x58025480
 8003c84:	58025494 	.word	0x58025494
 8003c88:	fffe000f 	.word	0xfffe000f
 8003c8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68d2      	ldr	r2, [r2, #12]
 8003c92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ca4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003cac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003cb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003cbc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b6e      	ldr	r3, [pc, #440]	; (8003e8c <HAL_DMA_Init+0x650>)
 8003cd4:	4413      	add	r3, r2
 8003cd6:	4a6e      	ldr	r2, [pc, #440]	; (8003e90 <HAL_DMA_Init+0x654>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	009a      	lsls	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f001 fc45 	bl	8005574 <DMA_CalcBaseAndBitshift>
 8003cea:	4603      	mov	r3, r0
 8003cec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	e008      	b.n	8003d12 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2240      	movs	r2, #64	; 0x40
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2203      	movs	r2, #3
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e0b7      	b.n	8003e82 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a5f      	ldr	r2, [pc, #380]	; (8003e94 <HAL_DMA_Init+0x658>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d072      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a5d      	ldr	r2, [pc, #372]	; (8003e98 <HAL_DMA_Init+0x65c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d06d      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a5c      	ldr	r2, [pc, #368]	; (8003e9c <HAL_DMA_Init+0x660>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d068      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a5a      	ldr	r2, [pc, #360]	; (8003ea0 <HAL_DMA_Init+0x664>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d063      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a59      	ldr	r2, [pc, #356]	; (8003ea4 <HAL_DMA_Init+0x668>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d05e      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a57      	ldr	r2, [pc, #348]	; (8003ea8 <HAL_DMA_Init+0x66c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d059      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a56      	ldr	r2, [pc, #344]	; (8003eac <HAL_DMA_Init+0x670>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d054      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a54      	ldr	r2, [pc, #336]	; (8003eb0 <HAL_DMA_Init+0x674>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d04f      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a53      	ldr	r2, [pc, #332]	; (8003eb4 <HAL_DMA_Init+0x678>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d04a      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a51      	ldr	r2, [pc, #324]	; (8003eb8 <HAL_DMA_Init+0x67c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d045      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a50      	ldr	r2, [pc, #320]	; (8003ebc <HAL_DMA_Init+0x680>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d040      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a4e      	ldr	r2, [pc, #312]	; (8003ec0 <HAL_DMA_Init+0x684>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d03b      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a4d      	ldr	r2, [pc, #308]	; (8003ec4 <HAL_DMA_Init+0x688>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d036      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a4b      	ldr	r2, [pc, #300]	; (8003ec8 <HAL_DMA_Init+0x68c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d031      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a4a      	ldr	r2, [pc, #296]	; (8003ecc <HAL_DMA_Init+0x690>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d02c      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a48      	ldr	r2, [pc, #288]	; (8003ed0 <HAL_DMA_Init+0x694>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d027      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a47      	ldr	r2, [pc, #284]	; (8003ed4 <HAL_DMA_Init+0x698>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d022      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a45      	ldr	r2, [pc, #276]	; (8003ed8 <HAL_DMA_Init+0x69c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01d      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a44      	ldr	r2, [pc, #272]	; (8003edc <HAL_DMA_Init+0x6a0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d018      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a42      	ldr	r2, [pc, #264]	; (8003ee0 <HAL_DMA_Init+0x6a4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a41      	ldr	r2, [pc, #260]	; (8003ee4 <HAL_DMA_Init+0x6a8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00e      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a3f      	ldr	r2, [pc, #252]	; (8003ee8 <HAL_DMA_Init+0x6ac>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d009      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a3e      	ldr	r2, [pc, #248]	; (8003eec <HAL_DMA_Init+0x6b0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d004      	beq.n	8003e02 <HAL_DMA_Init+0x5c6>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a3c      	ldr	r2, [pc, #240]	; (8003ef0 <HAL_DMA_Init+0x6b4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d101      	bne.n	8003e06 <HAL_DMA_Init+0x5ca>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <HAL_DMA_Init+0x5cc>
 8003e06:	2300      	movs	r3, #0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d032      	beq.n	8003e72 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f001 fcdf 	bl	80057d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b80      	cmp	r3, #128	; 0x80
 8003e18:	d102      	bne.n	8003e20 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d010      	beq.n	8003e60 <HAL_DMA_Init+0x624>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d80c      	bhi.n	8003e60 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f001 fd5c 	bl	8005904 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	e008      	b.n	8003e72 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	a7fdabf8 	.word	0xa7fdabf8
 8003e90:	cccccccd 	.word	0xcccccccd
 8003e94:	40020010 	.word	0x40020010
 8003e98:	40020028 	.word	0x40020028
 8003e9c:	40020040 	.word	0x40020040
 8003ea0:	40020058 	.word	0x40020058
 8003ea4:	40020070 	.word	0x40020070
 8003ea8:	40020088 	.word	0x40020088
 8003eac:	400200a0 	.word	0x400200a0
 8003eb0:	400200b8 	.word	0x400200b8
 8003eb4:	40020410 	.word	0x40020410
 8003eb8:	40020428 	.word	0x40020428
 8003ebc:	40020440 	.word	0x40020440
 8003ec0:	40020458 	.word	0x40020458
 8003ec4:	40020470 	.word	0x40020470
 8003ec8:	40020488 	.word	0x40020488
 8003ecc:	400204a0 	.word	0x400204a0
 8003ed0:	400204b8 	.word	0x400204b8
 8003ed4:	58025408 	.word	0x58025408
 8003ed8:	5802541c 	.word	0x5802541c
 8003edc:	58025430 	.word	0x58025430
 8003ee0:	58025444 	.word	0x58025444
 8003ee4:	58025458 	.word	0x58025458
 8003ee8:	5802546c 	.word	0x5802546c
 8003eec:	58025480 	.word	0x58025480
 8003ef0:	58025494 	.word	0x58025494

08003ef4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e226      	b.n	800435e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_DMA_Start_IT+0x2a>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e21f      	b.n	800435e <HAL_DMA_Start_IT+0x46a>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	f040 820a 	bne.w	8004348 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a68      	ldr	r2, [pc, #416]	; (80040e8 <HAL_DMA_Start_IT+0x1f4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d04a      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a66      	ldr	r2, [pc, #408]	; (80040ec <HAL_DMA_Start_IT+0x1f8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d045      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a65      	ldr	r2, [pc, #404]	; (80040f0 <HAL_DMA_Start_IT+0x1fc>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d040      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a63      	ldr	r2, [pc, #396]	; (80040f4 <HAL_DMA_Start_IT+0x200>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d03b      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a62      	ldr	r2, [pc, #392]	; (80040f8 <HAL_DMA_Start_IT+0x204>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d036      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a60      	ldr	r2, [pc, #384]	; (80040fc <HAL_DMA_Start_IT+0x208>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d031      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a5f      	ldr	r2, [pc, #380]	; (8004100 <HAL_DMA_Start_IT+0x20c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d02c      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a5d      	ldr	r2, [pc, #372]	; (8004104 <HAL_DMA_Start_IT+0x210>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d027      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a5c      	ldr	r2, [pc, #368]	; (8004108 <HAL_DMA_Start_IT+0x214>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d022      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a5a      	ldr	r2, [pc, #360]	; (800410c <HAL_DMA_Start_IT+0x218>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01d      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a59      	ldr	r2, [pc, #356]	; (8004110 <HAL_DMA_Start_IT+0x21c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d018      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a57      	ldr	r2, [pc, #348]	; (8004114 <HAL_DMA_Start_IT+0x220>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a56      	ldr	r2, [pc, #344]	; (8004118 <HAL_DMA_Start_IT+0x224>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00e      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a54      	ldr	r2, [pc, #336]	; (800411c <HAL_DMA_Start_IT+0x228>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d009      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a53      	ldr	r2, [pc, #332]	; (8004120 <HAL_DMA_Start_IT+0x22c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d004      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a51      	ldr	r2, [pc, #324]	; (8004124 <HAL_DMA_Start_IT+0x230>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d108      	bne.n	8003ff4 <HAL_DMA_Start_IT+0x100>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e007      	b.n	8004004 <HAL_DMA_Start_IT+0x110>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f001 f906 	bl	800521c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a34      	ldr	r2, [pc, #208]	; (80040e8 <HAL_DMA_Start_IT+0x1f4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d04a      	beq.n	80040b0 <HAL_DMA_Start_IT+0x1bc>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a33      	ldr	r2, [pc, #204]	; (80040ec <HAL_DMA_Start_IT+0x1f8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d045      	beq.n	80040b0 <HAL_DMA_Start_IT+0x1bc>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a31      	ldr	r2, [pc, #196]	; (80040f0 <HAL_DMA_Start_IT+0x1fc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d040      	beq.n	80040b0 <HAL_DMA_Start_IT+0x1bc>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a30      	ldr	r2, [pc, #192]	; (80040f4 <HAL_DMA_Start_IT+0x200>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d03b      	beq.n	80040b0 <HAL_DMA_Start_IT+0x1bc>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2e      	ldr	r2, [pc, #184]	; (80040f8 <HAL_DMA_Start_IT+0x204>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d036      	beq.n	80040b0 <HAL_DMA_Start_IT+0x1bc>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a2d      	ldr	r2, [pc, #180]	; (80040fc <HAL_DMA_Start_IT+0x208>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d031      	beq.n	80040b0 <HAL_DMA_Start_IT+0x1bc>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a2b      	ldr	r2, [pc, #172]	; (8004100 <HAL_DMA_Start_IT+0x20c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d02c      	beq.n	80040b0 <HAL_DMA_Start_IT+0x1bc>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2a      	ldr	r2, [pc, #168]	; (8004104 <HAL_DMA_Start_IT+0x210>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d027      	beq.n	80040b0 <HAL_DMA_Start_IT+0x1bc>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a28      	ldr	r2, [pc, #160]	; (8004108 <HAL_DMA_Start_IT+0x214>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d022      	beq.n	80040b0 <HAL_DMA_Start_IT+0x1bc>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a27      	ldr	r2, [pc, #156]	; (800410c <HAL_DMA_Start_IT+0x218>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d01d      	beq.n	80040b0 <HAL_DMA_Start_IT+0x1bc>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a25      	ldr	r2, [pc, #148]	; (8004110 <HAL_DMA_Start_IT+0x21c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d018      	beq.n	80040b0 <HAL_DMA_Start_IT+0x1bc>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a24      	ldr	r2, [pc, #144]	; (8004114 <HAL_DMA_Start_IT+0x220>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <HAL_DMA_Start_IT+0x1bc>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a22      	ldr	r2, [pc, #136]	; (8004118 <HAL_DMA_Start_IT+0x224>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00e      	beq.n	80040b0 <HAL_DMA_Start_IT+0x1bc>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a21      	ldr	r2, [pc, #132]	; (800411c <HAL_DMA_Start_IT+0x228>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d009      	beq.n	80040b0 <HAL_DMA_Start_IT+0x1bc>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1f      	ldr	r2, [pc, #124]	; (8004120 <HAL_DMA_Start_IT+0x22c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <HAL_DMA_Start_IT+0x1bc>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <HAL_DMA_Start_IT+0x230>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d101      	bne.n	80040b4 <HAL_DMA_Start_IT+0x1c0>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <HAL_DMA_Start_IT+0x1c2>
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d036      	beq.n	8004128 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f023 021e 	bic.w	r2, r3, #30
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0216 	orr.w	r2, r2, #22
 80040cc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d03e      	beq.n	8004154 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0208 	orr.w	r2, r2, #8
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e035      	b.n	8004154 <HAL_DMA_Start_IT+0x260>
 80040e8:	40020010 	.word	0x40020010
 80040ec:	40020028 	.word	0x40020028
 80040f0:	40020040 	.word	0x40020040
 80040f4:	40020058 	.word	0x40020058
 80040f8:	40020070 	.word	0x40020070
 80040fc:	40020088 	.word	0x40020088
 8004100:	400200a0 	.word	0x400200a0
 8004104:	400200b8 	.word	0x400200b8
 8004108:	40020410 	.word	0x40020410
 800410c:	40020428 	.word	0x40020428
 8004110:	40020440 	.word	0x40020440
 8004114:	40020458 	.word	0x40020458
 8004118:	40020470 	.word	0x40020470
 800411c:	40020488 	.word	0x40020488
 8004120:	400204a0 	.word	0x400204a0
 8004124:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f023 020e 	bic.w	r2, r3, #14
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 020a 	orr.w	r2, r2, #10
 800413a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0204 	orr.w	r2, r2, #4
 8004152:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a83      	ldr	r2, [pc, #524]	; (8004368 <HAL_DMA_Start_IT+0x474>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d072      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a82      	ldr	r2, [pc, #520]	; (800436c <HAL_DMA_Start_IT+0x478>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d06d      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a80      	ldr	r2, [pc, #512]	; (8004370 <HAL_DMA_Start_IT+0x47c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d068      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a7f      	ldr	r2, [pc, #508]	; (8004374 <HAL_DMA_Start_IT+0x480>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d063      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a7d      	ldr	r2, [pc, #500]	; (8004378 <HAL_DMA_Start_IT+0x484>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d05e      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a7c      	ldr	r2, [pc, #496]	; (800437c <HAL_DMA_Start_IT+0x488>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d059      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a7a      	ldr	r2, [pc, #488]	; (8004380 <HAL_DMA_Start_IT+0x48c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d054      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a79      	ldr	r2, [pc, #484]	; (8004384 <HAL_DMA_Start_IT+0x490>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d04f      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a77      	ldr	r2, [pc, #476]	; (8004388 <HAL_DMA_Start_IT+0x494>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d04a      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a76      	ldr	r2, [pc, #472]	; (800438c <HAL_DMA_Start_IT+0x498>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d045      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a74      	ldr	r2, [pc, #464]	; (8004390 <HAL_DMA_Start_IT+0x49c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d040      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a73      	ldr	r2, [pc, #460]	; (8004394 <HAL_DMA_Start_IT+0x4a0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d03b      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a71      	ldr	r2, [pc, #452]	; (8004398 <HAL_DMA_Start_IT+0x4a4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d036      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a70      	ldr	r2, [pc, #448]	; (800439c <HAL_DMA_Start_IT+0x4a8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d031      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a6e      	ldr	r2, [pc, #440]	; (80043a0 <HAL_DMA_Start_IT+0x4ac>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d02c      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a6d      	ldr	r2, [pc, #436]	; (80043a4 <HAL_DMA_Start_IT+0x4b0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d027      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a6b      	ldr	r2, [pc, #428]	; (80043a8 <HAL_DMA_Start_IT+0x4b4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d022      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a6a      	ldr	r2, [pc, #424]	; (80043ac <HAL_DMA_Start_IT+0x4b8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d01d      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a68      	ldr	r2, [pc, #416]	; (80043b0 <HAL_DMA_Start_IT+0x4bc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d018      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a67      	ldr	r2, [pc, #412]	; (80043b4 <HAL_DMA_Start_IT+0x4c0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d013      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a65      	ldr	r2, [pc, #404]	; (80043b8 <HAL_DMA_Start_IT+0x4c4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00e      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a64      	ldr	r2, [pc, #400]	; (80043bc <HAL_DMA_Start_IT+0x4c8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d009      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a62      	ldr	r2, [pc, #392]	; (80043c0 <HAL_DMA_Start_IT+0x4cc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d004      	beq.n	8004244 <HAL_DMA_Start_IT+0x350>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a61      	ldr	r2, [pc, #388]	; (80043c4 <HAL_DMA_Start_IT+0x4d0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d101      	bne.n	8004248 <HAL_DMA_Start_IT+0x354>
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <HAL_DMA_Start_IT+0x356>
 8004248:	2300      	movs	r3, #0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01a      	beq.n	8004284 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800427e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004282:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a37      	ldr	r2, [pc, #220]	; (8004368 <HAL_DMA_Start_IT+0x474>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d04a      	beq.n	8004324 <HAL_DMA_Start_IT+0x430>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a36      	ldr	r2, [pc, #216]	; (800436c <HAL_DMA_Start_IT+0x478>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d045      	beq.n	8004324 <HAL_DMA_Start_IT+0x430>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a34      	ldr	r2, [pc, #208]	; (8004370 <HAL_DMA_Start_IT+0x47c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d040      	beq.n	8004324 <HAL_DMA_Start_IT+0x430>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a33      	ldr	r2, [pc, #204]	; (8004374 <HAL_DMA_Start_IT+0x480>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d03b      	beq.n	8004324 <HAL_DMA_Start_IT+0x430>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a31      	ldr	r2, [pc, #196]	; (8004378 <HAL_DMA_Start_IT+0x484>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d036      	beq.n	8004324 <HAL_DMA_Start_IT+0x430>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a30      	ldr	r2, [pc, #192]	; (800437c <HAL_DMA_Start_IT+0x488>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d031      	beq.n	8004324 <HAL_DMA_Start_IT+0x430>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a2e      	ldr	r2, [pc, #184]	; (8004380 <HAL_DMA_Start_IT+0x48c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d02c      	beq.n	8004324 <HAL_DMA_Start_IT+0x430>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a2d      	ldr	r2, [pc, #180]	; (8004384 <HAL_DMA_Start_IT+0x490>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d027      	beq.n	8004324 <HAL_DMA_Start_IT+0x430>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2b      	ldr	r2, [pc, #172]	; (8004388 <HAL_DMA_Start_IT+0x494>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d022      	beq.n	8004324 <HAL_DMA_Start_IT+0x430>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2a      	ldr	r2, [pc, #168]	; (800438c <HAL_DMA_Start_IT+0x498>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d01d      	beq.n	8004324 <HAL_DMA_Start_IT+0x430>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a28      	ldr	r2, [pc, #160]	; (8004390 <HAL_DMA_Start_IT+0x49c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d018      	beq.n	8004324 <HAL_DMA_Start_IT+0x430>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a27      	ldr	r2, [pc, #156]	; (8004394 <HAL_DMA_Start_IT+0x4a0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d013      	beq.n	8004324 <HAL_DMA_Start_IT+0x430>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a25      	ldr	r2, [pc, #148]	; (8004398 <HAL_DMA_Start_IT+0x4a4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00e      	beq.n	8004324 <HAL_DMA_Start_IT+0x430>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a24      	ldr	r2, [pc, #144]	; (800439c <HAL_DMA_Start_IT+0x4a8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_DMA_Start_IT+0x430>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <HAL_DMA_Start_IT+0x4ac>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_DMA_Start_IT+0x430>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a21      	ldr	r2, [pc, #132]	; (80043a4 <HAL_DMA_Start_IT+0x4b0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d108      	bne.n	8004336 <HAL_DMA_Start_IT+0x442>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	e012      	b.n	800435c <HAL_DMA_Start_IT+0x468>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0201 	orr.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e009      	b.n	800435c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004356:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800435c:	7dfb      	ldrb	r3, [r7, #23]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3718      	adds	r7, #24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40020010 	.word	0x40020010
 800436c:	40020028 	.word	0x40020028
 8004370:	40020040 	.word	0x40020040
 8004374:	40020058 	.word	0x40020058
 8004378:	40020070 	.word	0x40020070
 800437c:	40020088 	.word	0x40020088
 8004380:	400200a0 	.word	0x400200a0
 8004384:	400200b8 	.word	0x400200b8
 8004388:	40020410 	.word	0x40020410
 800438c:	40020428 	.word	0x40020428
 8004390:	40020440 	.word	0x40020440
 8004394:	40020458 	.word	0x40020458
 8004398:	40020470 	.word	0x40020470
 800439c:	40020488 	.word	0x40020488
 80043a0:	400204a0 	.word	0x400204a0
 80043a4:	400204b8 	.word	0x400204b8
 80043a8:	58025408 	.word	0x58025408
 80043ac:	5802541c 	.word	0x5802541c
 80043b0:	58025430 	.word	0x58025430
 80043b4:	58025444 	.word	0x58025444
 80043b8:	58025458 	.word	0x58025458
 80043bc:	5802546c 	.word	0x5802546c
 80043c0:	58025480 	.word	0x58025480
 80043c4:	58025494 	.word	0x58025494

080043c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08a      	sub	sp, #40	; 0x28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043d4:	4b67      	ldr	r3, [pc, #412]	; (8004574 <HAL_DMA_IRQHandler+0x1ac>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a67      	ldr	r2, [pc, #412]	; (8004578 <HAL_DMA_IRQHandler+0x1b0>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	0a9b      	lsrs	r3, r3, #10
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a5f      	ldr	r2, [pc, #380]	; (800457c <HAL_DMA_IRQHandler+0x1b4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d04a      	beq.n	800449a <HAL_DMA_IRQHandler+0xd2>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a5d      	ldr	r2, [pc, #372]	; (8004580 <HAL_DMA_IRQHandler+0x1b8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d045      	beq.n	800449a <HAL_DMA_IRQHandler+0xd2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a5c      	ldr	r2, [pc, #368]	; (8004584 <HAL_DMA_IRQHandler+0x1bc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d040      	beq.n	800449a <HAL_DMA_IRQHandler+0xd2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a5a      	ldr	r2, [pc, #360]	; (8004588 <HAL_DMA_IRQHandler+0x1c0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d03b      	beq.n	800449a <HAL_DMA_IRQHandler+0xd2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a59      	ldr	r2, [pc, #356]	; (800458c <HAL_DMA_IRQHandler+0x1c4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d036      	beq.n	800449a <HAL_DMA_IRQHandler+0xd2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a57      	ldr	r2, [pc, #348]	; (8004590 <HAL_DMA_IRQHandler+0x1c8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d031      	beq.n	800449a <HAL_DMA_IRQHandler+0xd2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a56      	ldr	r2, [pc, #344]	; (8004594 <HAL_DMA_IRQHandler+0x1cc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d02c      	beq.n	800449a <HAL_DMA_IRQHandler+0xd2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a54      	ldr	r2, [pc, #336]	; (8004598 <HAL_DMA_IRQHandler+0x1d0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d027      	beq.n	800449a <HAL_DMA_IRQHandler+0xd2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a53      	ldr	r2, [pc, #332]	; (800459c <HAL_DMA_IRQHandler+0x1d4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d022      	beq.n	800449a <HAL_DMA_IRQHandler+0xd2>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a51      	ldr	r2, [pc, #324]	; (80045a0 <HAL_DMA_IRQHandler+0x1d8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01d      	beq.n	800449a <HAL_DMA_IRQHandler+0xd2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a50      	ldr	r2, [pc, #320]	; (80045a4 <HAL_DMA_IRQHandler+0x1dc>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d018      	beq.n	800449a <HAL_DMA_IRQHandler+0xd2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a4e      	ldr	r2, [pc, #312]	; (80045a8 <HAL_DMA_IRQHandler+0x1e0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <HAL_DMA_IRQHandler+0xd2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a4d      	ldr	r2, [pc, #308]	; (80045ac <HAL_DMA_IRQHandler+0x1e4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_DMA_IRQHandler+0xd2>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a4b      	ldr	r2, [pc, #300]	; (80045b0 <HAL_DMA_IRQHandler+0x1e8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <HAL_DMA_IRQHandler+0xd2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a4a      	ldr	r2, [pc, #296]	; (80045b4 <HAL_DMA_IRQHandler+0x1ec>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_DMA_IRQHandler+0xd2>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a48      	ldr	r2, [pc, #288]	; (80045b8 <HAL_DMA_IRQHandler+0x1f0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d101      	bne.n	800449e <HAL_DMA_IRQHandler+0xd6>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_DMA_IRQHandler+0xd8>
 800449e:	2300      	movs	r3, #0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 842b 	beq.w	8004cfc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	2208      	movs	r2, #8
 80044b0:	409a      	lsls	r2, r3
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	4013      	ands	r3, r2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80a2 	beq.w	8004600 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2e      	ldr	r2, [pc, #184]	; (800457c <HAL_DMA_IRQHandler+0x1b4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d04a      	beq.n	800455c <HAL_DMA_IRQHandler+0x194>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2d      	ldr	r2, [pc, #180]	; (8004580 <HAL_DMA_IRQHandler+0x1b8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d045      	beq.n	800455c <HAL_DMA_IRQHandler+0x194>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a2b      	ldr	r2, [pc, #172]	; (8004584 <HAL_DMA_IRQHandler+0x1bc>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d040      	beq.n	800455c <HAL_DMA_IRQHandler+0x194>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a2a      	ldr	r2, [pc, #168]	; (8004588 <HAL_DMA_IRQHandler+0x1c0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d03b      	beq.n	800455c <HAL_DMA_IRQHandler+0x194>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a28      	ldr	r2, [pc, #160]	; (800458c <HAL_DMA_IRQHandler+0x1c4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d036      	beq.n	800455c <HAL_DMA_IRQHandler+0x194>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a27      	ldr	r2, [pc, #156]	; (8004590 <HAL_DMA_IRQHandler+0x1c8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d031      	beq.n	800455c <HAL_DMA_IRQHandler+0x194>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a25      	ldr	r2, [pc, #148]	; (8004594 <HAL_DMA_IRQHandler+0x1cc>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d02c      	beq.n	800455c <HAL_DMA_IRQHandler+0x194>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a24      	ldr	r2, [pc, #144]	; (8004598 <HAL_DMA_IRQHandler+0x1d0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d027      	beq.n	800455c <HAL_DMA_IRQHandler+0x194>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a22      	ldr	r2, [pc, #136]	; (800459c <HAL_DMA_IRQHandler+0x1d4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d022      	beq.n	800455c <HAL_DMA_IRQHandler+0x194>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a21      	ldr	r2, [pc, #132]	; (80045a0 <HAL_DMA_IRQHandler+0x1d8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d01d      	beq.n	800455c <HAL_DMA_IRQHandler+0x194>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1f      	ldr	r2, [pc, #124]	; (80045a4 <HAL_DMA_IRQHandler+0x1dc>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d018      	beq.n	800455c <HAL_DMA_IRQHandler+0x194>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1e      	ldr	r2, [pc, #120]	; (80045a8 <HAL_DMA_IRQHandler+0x1e0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d013      	beq.n	800455c <HAL_DMA_IRQHandler+0x194>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1c      	ldr	r2, [pc, #112]	; (80045ac <HAL_DMA_IRQHandler+0x1e4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00e      	beq.n	800455c <HAL_DMA_IRQHandler+0x194>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1b      	ldr	r2, [pc, #108]	; (80045b0 <HAL_DMA_IRQHandler+0x1e8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d009      	beq.n	800455c <HAL_DMA_IRQHandler+0x194>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a19      	ldr	r2, [pc, #100]	; (80045b4 <HAL_DMA_IRQHandler+0x1ec>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d004      	beq.n	800455c <HAL_DMA_IRQHandler+0x194>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a18      	ldr	r2, [pc, #96]	; (80045b8 <HAL_DMA_IRQHandler+0x1f0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d12f      	bne.n	80045bc <HAL_DMA_IRQHandler+0x1f4>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	bf14      	ite	ne
 800456a:	2301      	movne	r3, #1
 800456c:	2300      	moveq	r3, #0
 800456e:	b2db      	uxtb	r3, r3
 8004570:	e02e      	b.n	80045d0 <HAL_DMA_IRQHandler+0x208>
 8004572:	bf00      	nop
 8004574:	2400000c 	.word	0x2400000c
 8004578:	1b4e81b5 	.word	0x1b4e81b5
 800457c:	40020010 	.word	0x40020010
 8004580:	40020028 	.word	0x40020028
 8004584:	40020040 	.word	0x40020040
 8004588:	40020058 	.word	0x40020058
 800458c:	40020070 	.word	0x40020070
 8004590:	40020088 	.word	0x40020088
 8004594:	400200a0 	.word	0x400200a0
 8004598:	400200b8 	.word	0x400200b8
 800459c:	40020410 	.word	0x40020410
 80045a0:	40020428 	.word	0x40020428
 80045a4:	40020440 	.word	0x40020440
 80045a8:	40020458 	.word	0x40020458
 80045ac:	40020470 	.word	0x40020470
 80045b0:	40020488 	.word	0x40020488
 80045b4:	400204a0 	.word	0x400204a0
 80045b8:	400204b8 	.word	0x400204b8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf14      	ite	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	2300      	moveq	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d015      	beq.n	8004600 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0204 	bic.w	r2, r2, #4
 80045e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e8:	f003 031f 	and.w	r3, r3, #31
 80045ec:	2208      	movs	r2, #8
 80045ee:	409a      	lsls	r2, r3
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f8:	f043 0201 	orr.w	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	fa22 f303 	lsr.w	r3, r2, r3
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d06e      	beq.n	80046f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a69      	ldr	r2, [pc, #420]	; (80047c0 <HAL_DMA_IRQHandler+0x3f8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d04a      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x2ee>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a67      	ldr	r2, [pc, #412]	; (80047c4 <HAL_DMA_IRQHandler+0x3fc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d045      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x2ee>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a66      	ldr	r2, [pc, #408]	; (80047c8 <HAL_DMA_IRQHandler+0x400>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d040      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x2ee>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a64      	ldr	r2, [pc, #400]	; (80047cc <HAL_DMA_IRQHandler+0x404>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d03b      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x2ee>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a63      	ldr	r2, [pc, #396]	; (80047d0 <HAL_DMA_IRQHandler+0x408>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d036      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x2ee>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a61      	ldr	r2, [pc, #388]	; (80047d4 <HAL_DMA_IRQHandler+0x40c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d031      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x2ee>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a60      	ldr	r2, [pc, #384]	; (80047d8 <HAL_DMA_IRQHandler+0x410>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d02c      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x2ee>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a5e      	ldr	r2, [pc, #376]	; (80047dc <HAL_DMA_IRQHandler+0x414>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d027      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x2ee>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a5d      	ldr	r2, [pc, #372]	; (80047e0 <HAL_DMA_IRQHandler+0x418>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d022      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x2ee>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a5b      	ldr	r2, [pc, #364]	; (80047e4 <HAL_DMA_IRQHandler+0x41c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d01d      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x2ee>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a5a      	ldr	r2, [pc, #360]	; (80047e8 <HAL_DMA_IRQHandler+0x420>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d018      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x2ee>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a58      	ldr	r2, [pc, #352]	; (80047ec <HAL_DMA_IRQHandler+0x424>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x2ee>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a57      	ldr	r2, [pc, #348]	; (80047f0 <HAL_DMA_IRQHandler+0x428>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00e      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x2ee>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a55      	ldr	r2, [pc, #340]	; (80047f4 <HAL_DMA_IRQHandler+0x42c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d009      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x2ee>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a54      	ldr	r2, [pc, #336]	; (80047f8 <HAL_DMA_IRQHandler+0x430>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d004      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x2ee>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a52      	ldr	r2, [pc, #328]	; (80047fc <HAL_DMA_IRQHandler+0x434>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d10a      	bne.n	80046cc <HAL_DMA_IRQHandler+0x304>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bf14      	ite	ne
 80046c4:	2301      	movne	r3, #1
 80046c6:	2300      	moveq	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	e003      	b.n	80046d4 <HAL_DMA_IRQHandler+0x30c>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2300      	movs	r3, #0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00d      	beq.n	80046f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	2201      	movs	r2, #1
 80046e2:	409a      	lsls	r2, r3
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ec:	f043 0202 	orr.w	r2, r3, #2
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	2204      	movs	r2, #4
 80046fe:	409a      	lsls	r2, r3
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 808f 	beq.w	8004828 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <HAL_DMA_IRQHandler+0x3f8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d04a      	beq.n	80047aa <HAL_DMA_IRQHandler+0x3e2>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2a      	ldr	r2, [pc, #168]	; (80047c4 <HAL_DMA_IRQHandler+0x3fc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d045      	beq.n	80047aa <HAL_DMA_IRQHandler+0x3e2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a29      	ldr	r2, [pc, #164]	; (80047c8 <HAL_DMA_IRQHandler+0x400>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d040      	beq.n	80047aa <HAL_DMA_IRQHandler+0x3e2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a27      	ldr	r2, [pc, #156]	; (80047cc <HAL_DMA_IRQHandler+0x404>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d03b      	beq.n	80047aa <HAL_DMA_IRQHandler+0x3e2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a26      	ldr	r2, [pc, #152]	; (80047d0 <HAL_DMA_IRQHandler+0x408>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d036      	beq.n	80047aa <HAL_DMA_IRQHandler+0x3e2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a24      	ldr	r2, [pc, #144]	; (80047d4 <HAL_DMA_IRQHandler+0x40c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d031      	beq.n	80047aa <HAL_DMA_IRQHandler+0x3e2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a23      	ldr	r2, [pc, #140]	; (80047d8 <HAL_DMA_IRQHandler+0x410>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d02c      	beq.n	80047aa <HAL_DMA_IRQHandler+0x3e2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a21      	ldr	r2, [pc, #132]	; (80047dc <HAL_DMA_IRQHandler+0x414>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d027      	beq.n	80047aa <HAL_DMA_IRQHandler+0x3e2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a20      	ldr	r2, [pc, #128]	; (80047e0 <HAL_DMA_IRQHandler+0x418>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d022      	beq.n	80047aa <HAL_DMA_IRQHandler+0x3e2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1e      	ldr	r2, [pc, #120]	; (80047e4 <HAL_DMA_IRQHandler+0x41c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d01d      	beq.n	80047aa <HAL_DMA_IRQHandler+0x3e2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1d      	ldr	r2, [pc, #116]	; (80047e8 <HAL_DMA_IRQHandler+0x420>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d018      	beq.n	80047aa <HAL_DMA_IRQHandler+0x3e2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1b      	ldr	r2, [pc, #108]	; (80047ec <HAL_DMA_IRQHandler+0x424>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <HAL_DMA_IRQHandler+0x3e2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1a      	ldr	r2, [pc, #104]	; (80047f0 <HAL_DMA_IRQHandler+0x428>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00e      	beq.n	80047aa <HAL_DMA_IRQHandler+0x3e2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <HAL_DMA_IRQHandler+0x42c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d009      	beq.n	80047aa <HAL_DMA_IRQHandler+0x3e2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a17      	ldr	r2, [pc, #92]	; (80047f8 <HAL_DMA_IRQHandler+0x430>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d004      	beq.n	80047aa <HAL_DMA_IRQHandler+0x3e2>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a15      	ldr	r2, [pc, #84]	; (80047fc <HAL_DMA_IRQHandler+0x434>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d12a      	bne.n	8004800 <HAL_DMA_IRQHandler+0x438>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e023      	b.n	8004808 <HAL_DMA_IRQHandler+0x440>
 80047c0:	40020010 	.word	0x40020010
 80047c4:	40020028 	.word	0x40020028
 80047c8:	40020040 	.word	0x40020040
 80047cc:	40020058 	.word	0x40020058
 80047d0:	40020070 	.word	0x40020070
 80047d4:	40020088 	.word	0x40020088
 80047d8:	400200a0 	.word	0x400200a0
 80047dc:	400200b8 	.word	0x400200b8
 80047e0:	40020410 	.word	0x40020410
 80047e4:	40020428 	.word	0x40020428
 80047e8:	40020440 	.word	0x40020440
 80047ec:	40020458 	.word	0x40020458
 80047f0:	40020470 	.word	0x40020470
 80047f4:	40020488 	.word	0x40020488
 80047f8:	400204a0 	.word	0x400204a0
 80047fc:	400204b8 	.word	0x400204b8
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2300      	movs	r3, #0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00d      	beq.n	8004828 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	2204      	movs	r2, #4
 8004816:	409a      	lsls	r2, r3
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004820:	f043 0204 	orr.w	r2, r3, #4
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	2210      	movs	r2, #16
 8004832:	409a      	lsls	r2, r3
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80a6 	beq.w	800498a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a85      	ldr	r2, [pc, #532]	; (8004a58 <HAL_DMA_IRQHandler+0x690>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d04a      	beq.n	80048de <HAL_DMA_IRQHandler+0x516>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a83      	ldr	r2, [pc, #524]	; (8004a5c <HAL_DMA_IRQHandler+0x694>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d045      	beq.n	80048de <HAL_DMA_IRQHandler+0x516>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a82      	ldr	r2, [pc, #520]	; (8004a60 <HAL_DMA_IRQHandler+0x698>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d040      	beq.n	80048de <HAL_DMA_IRQHandler+0x516>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a80      	ldr	r2, [pc, #512]	; (8004a64 <HAL_DMA_IRQHandler+0x69c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d03b      	beq.n	80048de <HAL_DMA_IRQHandler+0x516>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a7f      	ldr	r2, [pc, #508]	; (8004a68 <HAL_DMA_IRQHandler+0x6a0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d036      	beq.n	80048de <HAL_DMA_IRQHandler+0x516>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a7d      	ldr	r2, [pc, #500]	; (8004a6c <HAL_DMA_IRQHandler+0x6a4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d031      	beq.n	80048de <HAL_DMA_IRQHandler+0x516>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a7c      	ldr	r2, [pc, #496]	; (8004a70 <HAL_DMA_IRQHandler+0x6a8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d02c      	beq.n	80048de <HAL_DMA_IRQHandler+0x516>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a7a      	ldr	r2, [pc, #488]	; (8004a74 <HAL_DMA_IRQHandler+0x6ac>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d027      	beq.n	80048de <HAL_DMA_IRQHandler+0x516>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a79      	ldr	r2, [pc, #484]	; (8004a78 <HAL_DMA_IRQHandler+0x6b0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d022      	beq.n	80048de <HAL_DMA_IRQHandler+0x516>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a77      	ldr	r2, [pc, #476]	; (8004a7c <HAL_DMA_IRQHandler+0x6b4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d01d      	beq.n	80048de <HAL_DMA_IRQHandler+0x516>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a76      	ldr	r2, [pc, #472]	; (8004a80 <HAL_DMA_IRQHandler+0x6b8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d018      	beq.n	80048de <HAL_DMA_IRQHandler+0x516>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a74      	ldr	r2, [pc, #464]	; (8004a84 <HAL_DMA_IRQHandler+0x6bc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <HAL_DMA_IRQHandler+0x516>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a73      	ldr	r2, [pc, #460]	; (8004a88 <HAL_DMA_IRQHandler+0x6c0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00e      	beq.n	80048de <HAL_DMA_IRQHandler+0x516>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a71      	ldr	r2, [pc, #452]	; (8004a8c <HAL_DMA_IRQHandler+0x6c4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d009      	beq.n	80048de <HAL_DMA_IRQHandler+0x516>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a70      	ldr	r2, [pc, #448]	; (8004a90 <HAL_DMA_IRQHandler+0x6c8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_DMA_IRQHandler+0x516>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a6e      	ldr	r2, [pc, #440]	; (8004a94 <HAL_DMA_IRQHandler+0x6cc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d10a      	bne.n	80048f4 <HAL_DMA_IRQHandler+0x52c>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	bf14      	ite	ne
 80048ec:	2301      	movne	r3, #1
 80048ee:	2300      	moveq	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	e009      	b.n	8004908 <HAL_DMA_IRQHandler+0x540>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bf14      	ite	ne
 8004902:	2301      	movne	r3, #1
 8004904:	2300      	moveq	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d03e      	beq.n	800498a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	2210      	movs	r2, #16
 8004916:	409a      	lsls	r2, r3
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d018      	beq.n	800495c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d108      	bne.n	800494a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d024      	beq.n	800498a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4798      	blx	r3
 8004948:	e01f      	b.n	800498a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494e:	2b00      	cmp	r3, #0
 8004950:	d01b      	beq.n	800498a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	4798      	blx	r3
 800495a:	e016      	b.n	800498a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d107      	bne.n	800497a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0208 	bic.w	r2, r2, #8
 8004978:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	2220      	movs	r2, #32
 8004994:	409a      	lsls	r2, r3
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8110 	beq.w	8004bc0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a2c      	ldr	r2, [pc, #176]	; (8004a58 <HAL_DMA_IRQHandler+0x690>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d04a      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x678>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2b      	ldr	r2, [pc, #172]	; (8004a5c <HAL_DMA_IRQHandler+0x694>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d045      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x678>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a29      	ldr	r2, [pc, #164]	; (8004a60 <HAL_DMA_IRQHandler+0x698>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d040      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x678>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a28      	ldr	r2, [pc, #160]	; (8004a64 <HAL_DMA_IRQHandler+0x69c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d03b      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x678>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a26      	ldr	r2, [pc, #152]	; (8004a68 <HAL_DMA_IRQHandler+0x6a0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d036      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x678>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a25      	ldr	r2, [pc, #148]	; (8004a6c <HAL_DMA_IRQHandler+0x6a4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d031      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x678>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a23      	ldr	r2, [pc, #140]	; (8004a70 <HAL_DMA_IRQHandler+0x6a8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d02c      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x678>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a22      	ldr	r2, [pc, #136]	; (8004a74 <HAL_DMA_IRQHandler+0x6ac>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d027      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x678>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a20      	ldr	r2, [pc, #128]	; (8004a78 <HAL_DMA_IRQHandler+0x6b0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d022      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x678>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1f      	ldr	r2, [pc, #124]	; (8004a7c <HAL_DMA_IRQHandler+0x6b4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d01d      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x678>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <HAL_DMA_IRQHandler+0x6b8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d018      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x678>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <HAL_DMA_IRQHandler+0x6bc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x678>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1a      	ldr	r2, [pc, #104]	; (8004a88 <HAL_DMA_IRQHandler+0x6c0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00e      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x678>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a19      	ldr	r2, [pc, #100]	; (8004a8c <HAL_DMA_IRQHandler+0x6c4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x678>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a17      	ldr	r2, [pc, #92]	; (8004a90 <HAL_DMA_IRQHandler+0x6c8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x678>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a16      	ldr	r2, [pc, #88]	; (8004a94 <HAL_DMA_IRQHandler+0x6cc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d12b      	bne.n	8004a98 <HAL_DMA_IRQHandler+0x6d0>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0310 	and.w	r3, r3, #16
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bf14      	ite	ne
 8004a4e:	2301      	movne	r3, #1
 8004a50:	2300      	moveq	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	e02a      	b.n	8004aac <HAL_DMA_IRQHandler+0x6e4>
 8004a56:	bf00      	nop
 8004a58:	40020010 	.word	0x40020010
 8004a5c:	40020028 	.word	0x40020028
 8004a60:	40020040 	.word	0x40020040
 8004a64:	40020058 	.word	0x40020058
 8004a68:	40020070 	.word	0x40020070
 8004a6c:	40020088 	.word	0x40020088
 8004a70:	400200a0 	.word	0x400200a0
 8004a74:	400200b8 	.word	0x400200b8
 8004a78:	40020410 	.word	0x40020410
 8004a7c:	40020428 	.word	0x40020428
 8004a80:	40020440 	.word	0x40020440
 8004a84:	40020458 	.word	0x40020458
 8004a88:	40020470 	.word	0x40020470
 8004a8c:	40020488 	.word	0x40020488
 8004a90:	400204a0 	.word	0x400204a0
 8004a94:	400204b8 	.word	0x400204b8
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bf14      	ite	ne
 8004aa6:	2301      	movne	r3, #1
 8004aa8:	2300      	moveq	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8087 	beq.w	8004bc0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab6:	f003 031f 	and.w	r3, r3, #31
 8004aba:	2220      	movs	r2, #32
 8004abc:	409a      	lsls	r2, r3
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d139      	bne.n	8004b42 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0216 	bic.w	r2, r2, #22
 8004adc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d103      	bne.n	8004afe <HAL_DMA_IRQHandler+0x736>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d007      	beq.n	8004b0e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0208 	bic.w	r2, r2, #8
 8004b0c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	223f      	movs	r2, #63	; 0x3f
 8004b18:	409a      	lsls	r2, r3
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 834a 	beq.w	80051cc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	4798      	blx	r3
          }
          return;
 8004b40:	e344      	b.n	80051cc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d018      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d108      	bne.n	8004b70 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d02c      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
 8004b6e:	e027      	b.n	8004bc0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d023      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4798      	blx	r3
 8004b80:	e01e      	b.n	8004bc0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10f      	bne.n	8004bb0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0210 	bic.w	r2, r2, #16
 8004b9e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 8306 	beq.w	80051d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 8088 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2204      	movs	r2, #4
 8004bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a7a      	ldr	r2, [pc, #488]	; (8004dd0 <HAL_DMA_IRQHandler+0xa08>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d04a      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x8b8>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a79      	ldr	r2, [pc, #484]	; (8004dd4 <HAL_DMA_IRQHandler+0xa0c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d045      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x8b8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a77      	ldr	r2, [pc, #476]	; (8004dd8 <HAL_DMA_IRQHandler+0xa10>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d040      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x8b8>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a76      	ldr	r2, [pc, #472]	; (8004ddc <HAL_DMA_IRQHandler+0xa14>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d03b      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x8b8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a74      	ldr	r2, [pc, #464]	; (8004de0 <HAL_DMA_IRQHandler+0xa18>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d036      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x8b8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a73      	ldr	r2, [pc, #460]	; (8004de4 <HAL_DMA_IRQHandler+0xa1c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d031      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x8b8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a71      	ldr	r2, [pc, #452]	; (8004de8 <HAL_DMA_IRQHandler+0xa20>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d02c      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x8b8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a70      	ldr	r2, [pc, #448]	; (8004dec <HAL_DMA_IRQHandler+0xa24>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d027      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x8b8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a6e      	ldr	r2, [pc, #440]	; (8004df0 <HAL_DMA_IRQHandler+0xa28>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d022      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x8b8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6d      	ldr	r2, [pc, #436]	; (8004df4 <HAL_DMA_IRQHandler+0xa2c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d01d      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x8b8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a6b      	ldr	r2, [pc, #428]	; (8004df8 <HAL_DMA_IRQHandler+0xa30>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d018      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x8b8>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a6a      	ldr	r2, [pc, #424]	; (8004dfc <HAL_DMA_IRQHandler+0xa34>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d013      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x8b8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a68      	ldr	r2, [pc, #416]	; (8004e00 <HAL_DMA_IRQHandler+0xa38>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00e      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x8b8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a67      	ldr	r2, [pc, #412]	; (8004e04 <HAL_DMA_IRQHandler+0xa3c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d009      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x8b8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a65      	ldr	r2, [pc, #404]	; (8004e08 <HAL_DMA_IRQHandler+0xa40>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d004      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x8b8>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a64      	ldr	r2, [pc, #400]	; (8004e0c <HAL_DMA_IRQHandler+0xa44>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d108      	bne.n	8004c92 <HAL_DMA_IRQHandler+0x8ca>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0201 	bic.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	e007      	b.n	8004ca2 <HAL_DMA_IRQHandler+0x8da>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0201 	bic.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d307      	bcc.n	8004cbe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f2      	bne.n	8004ca2 <HAL_DMA_IRQHandler+0x8da>
 8004cbc:	e000      	b.n	8004cc0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004cbe:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d004      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2203      	movs	r2, #3
 8004cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004cde:	e003      	b.n	8004ce8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8272 	beq.w	80051d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	4798      	blx	r3
 8004cfa:	e26c      	b.n	80051d6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a43      	ldr	r2, [pc, #268]	; (8004e10 <HAL_DMA_IRQHandler+0xa48>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d022      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x984>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a42      	ldr	r2, [pc, #264]	; (8004e14 <HAL_DMA_IRQHandler+0xa4c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d01d      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x984>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a40      	ldr	r2, [pc, #256]	; (8004e18 <HAL_DMA_IRQHandler+0xa50>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d018      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x984>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a3f      	ldr	r2, [pc, #252]	; (8004e1c <HAL_DMA_IRQHandler+0xa54>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x984>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a3d      	ldr	r2, [pc, #244]	; (8004e20 <HAL_DMA_IRQHandler+0xa58>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00e      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x984>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a3c      	ldr	r2, [pc, #240]	; (8004e24 <HAL_DMA_IRQHandler+0xa5c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d009      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x984>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a3a      	ldr	r2, [pc, #232]	; (8004e28 <HAL_DMA_IRQHandler+0xa60>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x984>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a39      	ldr	r2, [pc, #228]	; (8004e2c <HAL_DMA_IRQHandler+0xa64>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d101      	bne.n	8004d50 <HAL_DMA_IRQHandler+0x988>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <HAL_DMA_IRQHandler+0x98a>
 8004d50:	2300      	movs	r3, #0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 823f 	beq.w	80051d6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	2204      	movs	r2, #4
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80cd 	beq.w	8004f10 <HAL_DMA_IRQHandler+0xb48>
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80c7 	beq.w	8004f10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d86:	f003 031f 	and.w	r3, r3, #31
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	409a      	lsls	r2, r3
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d049      	beq.n	8004e30 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8210 	beq.w	80051d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004db8:	e20a      	b.n	80051d0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 8206 	beq.w	80051d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dcc:	e200      	b.n	80051d0 <HAL_DMA_IRQHandler+0xe08>
 8004dce:	bf00      	nop
 8004dd0:	40020010 	.word	0x40020010
 8004dd4:	40020028 	.word	0x40020028
 8004dd8:	40020040 	.word	0x40020040
 8004ddc:	40020058 	.word	0x40020058
 8004de0:	40020070 	.word	0x40020070
 8004de4:	40020088 	.word	0x40020088
 8004de8:	400200a0 	.word	0x400200a0
 8004dec:	400200b8 	.word	0x400200b8
 8004df0:	40020410 	.word	0x40020410
 8004df4:	40020428 	.word	0x40020428
 8004df8:	40020440 	.word	0x40020440
 8004dfc:	40020458 	.word	0x40020458
 8004e00:	40020470 	.word	0x40020470
 8004e04:	40020488 	.word	0x40020488
 8004e08:	400204a0 	.word	0x400204a0
 8004e0c:	400204b8 	.word	0x400204b8
 8004e10:	58025408 	.word	0x58025408
 8004e14:	5802541c 	.word	0x5802541c
 8004e18:	58025430 	.word	0x58025430
 8004e1c:	58025444 	.word	0x58025444
 8004e20:	58025458 	.word	0x58025458
 8004e24:	5802546c 	.word	0x5802546c
 8004e28:	58025480 	.word	0x58025480
 8004e2c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d160      	bne.n	8004efc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a8c      	ldr	r2, [pc, #560]	; (8005070 <HAL_DMA_IRQHandler+0xca8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d04a      	beq.n	8004eda <HAL_DMA_IRQHandler+0xb12>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a8a      	ldr	r2, [pc, #552]	; (8005074 <HAL_DMA_IRQHandler+0xcac>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d045      	beq.n	8004eda <HAL_DMA_IRQHandler+0xb12>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a89      	ldr	r2, [pc, #548]	; (8005078 <HAL_DMA_IRQHandler+0xcb0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d040      	beq.n	8004eda <HAL_DMA_IRQHandler+0xb12>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a87      	ldr	r2, [pc, #540]	; (800507c <HAL_DMA_IRQHandler+0xcb4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d03b      	beq.n	8004eda <HAL_DMA_IRQHandler+0xb12>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a86      	ldr	r2, [pc, #536]	; (8005080 <HAL_DMA_IRQHandler+0xcb8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d036      	beq.n	8004eda <HAL_DMA_IRQHandler+0xb12>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a84      	ldr	r2, [pc, #528]	; (8005084 <HAL_DMA_IRQHandler+0xcbc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d031      	beq.n	8004eda <HAL_DMA_IRQHandler+0xb12>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a83      	ldr	r2, [pc, #524]	; (8005088 <HAL_DMA_IRQHandler+0xcc0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d02c      	beq.n	8004eda <HAL_DMA_IRQHandler+0xb12>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a81      	ldr	r2, [pc, #516]	; (800508c <HAL_DMA_IRQHandler+0xcc4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d027      	beq.n	8004eda <HAL_DMA_IRQHandler+0xb12>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a80      	ldr	r2, [pc, #512]	; (8005090 <HAL_DMA_IRQHandler+0xcc8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d022      	beq.n	8004eda <HAL_DMA_IRQHandler+0xb12>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a7e      	ldr	r2, [pc, #504]	; (8005094 <HAL_DMA_IRQHandler+0xccc>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01d      	beq.n	8004eda <HAL_DMA_IRQHandler+0xb12>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a7d      	ldr	r2, [pc, #500]	; (8005098 <HAL_DMA_IRQHandler+0xcd0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d018      	beq.n	8004eda <HAL_DMA_IRQHandler+0xb12>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a7b      	ldr	r2, [pc, #492]	; (800509c <HAL_DMA_IRQHandler+0xcd4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <HAL_DMA_IRQHandler+0xb12>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a7a      	ldr	r2, [pc, #488]	; (80050a0 <HAL_DMA_IRQHandler+0xcd8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00e      	beq.n	8004eda <HAL_DMA_IRQHandler+0xb12>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a78      	ldr	r2, [pc, #480]	; (80050a4 <HAL_DMA_IRQHandler+0xcdc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_DMA_IRQHandler+0xb12>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a77      	ldr	r2, [pc, #476]	; (80050a8 <HAL_DMA_IRQHandler+0xce0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <HAL_DMA_IRQHandler+0xb12>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a75      	ldr	r2, [pc, #468]	; (80050ac <HAL_DMA_IRQHandler+0xce4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d108      	bne.n	8004eec <HAL_DMA_IRQHandler+0xb24>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0208 	bic.w	r2, r2, #8
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	e007      	b.n	8004efc <HAL_DMA_IRQHandler+0xb34>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0204 	bic.w	r2, r2, #4
 8004efa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8165 	beq.w	80051d0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f0e:	e15f      	b.n	80051d0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f14:	f003 031f 	and.w	r3, r3, #31
 8004f18:	2202      	movs	r2, #2
 8004f1a:	409a      	lsls	r2, r3
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80c5 	beq.w	80050b0 <HAL_DMA_IRQHandler+0xce8>
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 80bf 	beq.w	80050b0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f36:	f003 031f 	and.w	r3, r3, #31
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	409a      	lsls	r2, r3
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d018      	beq.n	8004f7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d109      	bne.n	8004f6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 813a 	beq.w	80051d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f68:	e134      	b.n	80051d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 8130 	beq.w	80051d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f7c:	e12a      	b.n	80051d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d168      	bne.n	800505a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a38      	ldr	r2, [pc, #224]	; (8005070 <HAL_DMA_IRQHandler+0xca8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d04a      	beq.n	8005028 <HAL_DMA_IRQHandler+0xc60>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a37      	ldr	r2, [pc, #220]	; (8005074 <HAL_DMA_IRQHandler+0xcac>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d045      	beq.n	8005028 <HAL_DMA_IRQHandler+0xc60>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a35      	ldr	r2, [pc, #212]	; (8005078 <HAL_DMA_IRQHandler+0xcb0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d040      	beq.n	8005028 <HAL_DMA_IRQHandler+0xc60>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a34      	ldr	r2, [pc, #208]	; (800507c <HAL_DMA_IRQHandler+0xcb4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d03b      	beq.n	8005028 <HAL_DMA_IRQHandler+0xc60>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a32      	ldr	r2, [pc, #200]	; (8005080 <HAL_DMA_IRQHandler+0xcb8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d036      	beq.n	8005028 <HAL_DMA_IRQHandler+0xc60>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a31      	ldr	r2, [pc, #196]	; (8005084 <HAL_DMA_IRQHandler+0xcbc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d031      	beq.n	8005028 <HAL_DMA_IRQHandler+0xc60>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a2f      	ldr	r2, [pc, #188]	; (8005088 <HAL_DMA_IRQHandler+0xcc0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d02c      	beq.n	8005028 <HAL_DMA_IRQHandler+0xc60>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a2e      	ldr	r2, [pc, #184]	; (800508c <HAL_DMA_IRQHandler+0xcc4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d027      	beq.n	8005028 <HAL_DMA_IRQHandler+0xc60>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a2c      	ldr	r2, [pc, #176]	; (8005090 <HAL_DMA_IRQHandler+0xcc8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d022      	beq.n	8005028 <HAL_DMA_IRQHandler+0xc60>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a2b      	ldr	r2, [pc, #172]	; (8005094 <HAL_DMA_IRQHandler+0xccc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d01d      	beq.n	8005028 <HAL_DMA_IRQHandler+0xc60>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a29      	ldr	r2, [pc, #164]	; (8005098 <HAL_DMA_IRQHandler+0xcd0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d018      	beq.n	8005028 <HAL_DMA_IRQHandler+0xc60>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a28      	ldr	r2, [pc, #160]	; (800509c <HAL_DMA_IRQHandler+0xcd4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d013      	beq.n	8005028 <HAL_DMA_IRQHandler+0xc60>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a26      	ldr	r2, [pc, #152]	; (80050a0 <HAL_DMA_IRQHandler+0xcd8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00e      	beq.n	8005028 <HAL_DMA_IRQHandler+0xc60>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a25      	ldr	r2, [pc, #148]	; (80050a4 <HAL_DMA_IRQHandler+0xcdc>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d009      	beq.n	8005028 <HAL_DMA_IRQHandler+0xc60>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a23      	ldr	r2, [pc, #140]	; (80050a8 <HAL_DMA_IRQHandler+0xce0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d004      	beq.n	8005028 <HAL_DMA_IRQHandler+0xc60>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a22      	ldr	r2, [pc, #136]	; (80050ac <HAL_DMA_IRQHandler+0xce4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d108      	bne.n	800503a <HAL_DMA_IRQHandler+0xc72>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0214 	bic.w	r2, r2, #20
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e007      	b.n	800504a <HAL_DMA_IRQHandler+0xc82>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 020a 	bic.w	r2, r2, #10
 8005048:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 80b8 	beq.w	80051d4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800506c:	e0b2      	b.n	80051d4 <HAL_DMA_IRQHandler+0xe0c>
 800506e:	bf00      	nop
 8005070:	40020010 	.word	0x40020010
 8005074:	40020028 	.word	0x40020028
 8005078:	40020040 	.word	0x40020040
 800507c:	40020058 	.word	0x40020058
 8005080:	40020070 	.word	0x40020070
 8005084:	40020088 	.word	0x40020088
 8005088:	400200a0 	.word	0x400200a0
 800508c:	400200b8 	.word	0x400200b8
 8005090:	40020410 	.word	0x40020410
 8005094:	40020428 	.word	0x40020428
 8005098:	40020440 	.word	0x40020440
 800509c:	40020458 	.word	0x40020458
 80050a0:	40020470 	.word	0x40020470
 80050a4:	40020488 	.word	0x40020488
 80050a8:	400204a0 	.word	0x400204a0
 80050ac:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b4:	f003 031f 	and.w	r3, r3, #31
 80050b8:	2208      	movs	r2, #8
 80050ba:	409a      	lsls	r2, r3
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	4013      	ands	r3, r2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8088 	beq.w	80051d6 <HAL_DMA_IRQHandler+0xe0e>
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 8082 	beq.w	80051d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a41      	ldr	r2, [pc, #260]	; (80051dc <HAL_DMA_IRQHandler+0xe14>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d04a      	beq.n	8005172 <HAL_DMA_IRQHandler+0xdaa>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a3f      	ldr	r2, [pc, #252]	; (80051e0 <HAL_DMA_IRQHandler+0xe18>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d045      	beq.n	8005172 <HAL_DMA_IRQHandler+0xdaa>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a3e      	ldr	r2, [pc, #248]	; (80051e4 <HAL_DMA_IRQHandler+0xe1c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d040      	beq.n	8005172 <HAL_DMA_IRQHandler+0xdaa>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a3c      	ldr	r2, [pc, #240]	; (80051e8 <HAL_DMA_IRQHandler+0xe20>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d03b      	beq.n	8005172 <HAL_DMA_IRQHandler+0xdaa>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a3b      	ldr	r2, [pc, #236]	; (80051ec <HAL_DMA_IRQHandler+0xe24>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d036      	beq.n	8005172 <HAL_DMA_IRQHandler+0xdaa>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a39      	ldr	r2, [pc, #228]	; (80051f0 <HAL_DMA_IRQHandler+0xe28>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d031      	beq.n	8005172 <HAL_DMA_IRQHandler+0xdaa>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a38      	ldr	r2, [pc, #224]	; (80051f4 <HAL_DMA_IRQHandler+0xe2c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d02c      	beq.n	8005172 <HAL_DMA_IRQHandler+0xdaa>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a36      	ldr	r2, [pc, #216]	; (80051f8 <HAL_DMA_IRQHandler+0xe30>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d027      	beq.n	8005172 <HAL_DMA_IRQHandler+0xdaa>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a35      	ldr	r2, [pc, #212]	; (80051fc <HAL_DMA_IRQHandler+0xe34>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d022      	beq.n	8005172 <HAL_DMA_IRQHandler+0xdaa>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a33      	ldr	r2, [pc, #204]	; (8005200 <HAL_DMA_IRQHandler+0xe38>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01d      	beq.n	8005172 <HAL_DMA_IRQHandler+0xdaa>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a32      	ldr	r2, [pc, #200]	; (8005204 <HAL_DMA_IRQHandler+0xe3c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d018      	beq.n	8005172 <HAL_DMA_IRQHandler+0xdaa>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a30      	ldr	r2, [pc, #192]	; (8005208 <HAL_DMA_IRQHandler+0xe40>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_DMA_IRQHandler+0xdaa>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2f      	ldr	r2, [pc, #188]	; (800520c <HAL_DMA_IRQHandler+0xe44>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00e      	beq.n	8005172 <HAL_DMA_IRQHandler+0xdaa>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2d      	ldr	r2, [pc, #180]	; (8005210 <HAL_DMA_IRQHandler+0xe48>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_DMA_IRQHandler+0xdaa>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2c      	ldr	r2, [pc, #176]	; (8005214 <HAL_DMA_IRQHandler+0xe4c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_DMA_IRQHandler+0xdaa>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a2a      	ldr	r2, [pc, #168]	; (8005218 <HAL_DMA_IRQHandler+0xe50>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d108      	bne.n	8005184 <HAL_DMA_IRQHandler+0xdbc>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 021c 	bic.w	r2, r2, #28
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	e007      	b.n	8005194 <HAL_DMA_IRQHandler+0xdcc>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 020e 	bic.w	r2, r2, #14
 8005192:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005198:	f003 031f 	and.w	r3, r3, #31
 800519c:	2201      	movs	r2, #1
 800519e:	409a      	lsls	r2, r3
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	4798      	blx	r3
 80051ca:	e004      	b.n	80051d6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80051cc:	bf00      	nop
 80051ce:	e002      	b.n	80051d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051d0:	bf00      	nop
 80051d2:	e000      	b.n	80051d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051d4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051d6:	3728      	adds	r7, #40	; 0x28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40020010 	.word	0x40020010
 80051e0:	40020028 	.word	0x40020028
 80051e4:	40020040 	.word	0x40020040
 80051e8:	40020058 	.word	0x40020058
 80051ec:	40020070 	.word	0x40020070
 80051f0:	40020088 	.word	0x40020088
 80051f4:	400200a0 	.word	0x400200a0
 80051f8:	400200b8 	.word	0x400200b8
 80051fc:	40020410 	.word	0x40020410
 8005200:	40020428 	.word	0x40020428
 8005204:	40020440 	.word	0x40020440
 8005208:	40020458 	.word	0x40020458
 800520c:	40020470 	.word	0x40020470
 8005210:	40020488 	.word	0x40020488
 8005214:	400204a0 	.word	0x400204a0
 8005218:	400204b8 	.word	0x400204b8

0800521c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005234:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a84      	ldr	r2, [pc, #528]	; (800544c <DMA_SetConfig+0x230>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d072      	beq.n	8005326 <DMA_SetConfig+0x10a>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a82      	ldr	r2, [pc, #520]	; (8005450 <DMA_SetConfig+0x234>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d06d      	beq.n	8005326 <DMA_SetConfig+0x10a>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a81      	ldr	r2, [pc, #516]	; (8005454 <DMA_SetConfig+0x238>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d068      	beq.n	8005326 <DMA_SetConfig+0x10a>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a7f      	ldr	r2, [pc, #508]	; (8005458 <DMA_SetConfig+0x23c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d063      	beq.n	8005326 <DMA_SetConfig+0x10a>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a7e      	ldr	r2, [pc, #504]	; (800545c <DMA_SetConfig+0x240>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d05e      	beq.n	8005326 <DMA_SetConfig+0x10a>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a7c      	ldr	r2, [pc, #496]	; (8005460 <DMA_SetConfig+0x244>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d059      	beq.n	8005326 <DMA_SetConfig+0x10a>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a7b      	ldr	r2, [pc, #492]	; (8005464 <DMA_SetConfig+0x248>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d054      	beq.n	8005326 <DMA_SetConfig+0x10a>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a79      	ldr	r2, [pc, #484]	; (8005468 <DMA_SetConfig+0x24c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d04f      	beq.n	8005326 <DMA_SetConfig+0x10a>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a78      	ldr	r2, [pc, #480]	; (800546c <DMA_SetConfig+0x250>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d04a      	beq.n	8005326 <DMA_SetConfig+0x10a>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a76      	ldr	r2, [pc, #472]	; (8005470 <DMA_SetConfig+0x254>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d045      	beq.n	8005326 <DMA_SetConfig+0x10a>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a75      	ldr	r2, [pc, #468]	; (8005474 <DMA_SetConfig+0x258>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d040      	beq.n	8005326 <DMA_SetConfig+0x10a>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a73      	ldr	r2, [pc, #460]	; (8005478 <DMA_SetConfig+0x25c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d03b      	beq.n	8005326 <DMA_SetConfig+0x10a>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a72      	ldr	r2, [pc, #456]	; (800547c <DMA_SetConfig+0x260>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d036      	beq.n	8005326 <DMA_SetConfig+0x10a>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a70      	ldr	r2, [pc, #448]	; (8005480 <DMA_SetConfig+0x264>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d031      	beq.n	8005326 <DMA_SetConfig+0x10a>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a6f      	ldr	r2, [pc, #444]	; (8005484 <DMA_SetConfig+0x268>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d02c      	beq.n	8005326 <DMA_SetConfig+0x10a>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a6d      	ldr	r2, [pc, #436]	; (8005488 <DMA_SetConfig+0x26c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d027      	beq.n	8005326 <DMA_SetConfig+0x10a>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a6c      	ldr	r2, [pc, #432]	; (800548c <DMA_SetConfig+0x270>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d022      	beq.n	8005326 <DMA_SetConfig+0x10a>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a6a      	ldr	r2, [pc, #424]	; (8005490 <DMA_SetConfig+0x274>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01d      	beq.n	8005326 <DMA_SetConfig+0x10a>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a69      	ldr	r2, [pc, #420]	; (8005494 <DMA_SetConfig+0x278>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d018      	beq.n	8005326 <DMA_SetConfig+0x10a>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a67      	ldr	r2, [pc, #412]	; (8005498 <DMA_SetConfig+0x27c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d013      	beq.n	8005326 <DMA_SetConfig+0x10a>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a66      	ldr	r2, [pc, #408]	; (800549c <DMA_SetConfig+0x280>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00e      	beq.n	8005326 <DMA_SetConfig+0x10a>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a64      	ldr	r2, [pc, #400]	; (80054a0 <DMA_SetConfig+0x284>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d009      	beq.n	8005326 <DMA_SetConfig+0x10a>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a63      	ldr	r2, [pc, #396]	; (80054a4 <DMA_SetConfig+0x288>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d004      	beq.n	8005326 <DMA_SetConfig+0x10a>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a61      	ldr	r2, [pc, #388]	; (80054a8 <DMA_SetConfig+0x28c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d101      	bne.n	800532a <DMA_SetConfig+0x10e>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <DMA_SetConfig+0x110>
 800532a:	2300      	movs	r3, #0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00d      	beq.n	800534c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005338:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800533e:	2b00      	cmp	r3, #0
 8005340:	d004      	beq.n	800534c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800534a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a3e      	ldr	r2, [pc, #248]	; (800544c <DMA_SetConfig+0x230>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d04a      	beq.n	80053ec <DMA_SetConfig+0x1d0>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a3d      	ldr	r2, [pc, #244]	; (8005450 <DMA_SetConfig+0x234>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d045      	beq.n	80053ec <DMA_SetConfig+0x1d0>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a3b      	ldr	r2, [pc, #236]	; (8005454 <DMA_SetConfig+0x238>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d040      	beq.n	80053ec <DMA_SetConfig+0x1d0>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a3a      	ldr	r2, [pc, #232]	; (8005458 <DMA_SetConfig+0x23c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d03b      	beq.n	80053ec <DMA_SetConfig+0x1d0>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a38      	ldr	r2, [pc, #224]	; (800545c <DMA_SetConfig+0x240>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d036      	beq.n	80053ec <DMA_SetConfig+0x1d0>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a37      	ldr	r2, [pc, #220]	; (8005460 <DMA_SetConfig+0x244>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d031      	beq.n	80053ec <DMA_SetConfig+0x1d0>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a35      	ldr	r2, [pc, #212]	; (8005464 <DMA_SetConfig+0x248>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d02c      	beq.n	80053ec <DMA_SetConfig+0x1d0>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a34      	ldr	r2, [pc, #208]	; (8005468 <DMA_SetConfig+0x24c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d027      	beq.n	80053ec <DMA_SetConfig+0x1d0>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a32      	ldr	r2, [pc, #200]	; (800546c <DMA_SetConfig+0x250>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d022      	beq.n	80053ec <DMA_SetConfig+0x1d0>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a31      	ldr	r2, [pc, #196]	; (8005470 <DMA_SetConfig+0x254>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d01d      	beq.n	80053ec <DMA_SetConfig+0x1d0>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a2f      	ldr	r2, [pc, #188]	; (8005474 <DMA_SetConfig+0x258>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d018      	beq.n	80053ec <DMA_SetConfig+0x1d0>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2e      	ldr	r2, [pc, #184]	; (8005478 <DMA_SetConfig+0x25c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d013      	beq.n	80053ec <DMA_SetConfig+0x1d0>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a2c      	ldr	r2, [pc, #176]	; (800547c <DMA_SetConfig+0x260>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00e      	beq.n	80053ec <DMA_SetConfig+0x1d0>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a2b      	ldr	r2, [pc, #172]	; (8005480 <DMA_SetConfig+0x264>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d009      	beq.n	80053ec <DMA_SetConfig+0x1d0>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a29      	ldr	r2, [pc, #164]	; (8005484 <DMA_SetConfig+0x268>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d004      	beq.n	80053ec <DMA_SetConfig+0x1d0>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a28      	ldr	r2, [pc, #160]	; (8005488 <DMA_SetConfig+0x26c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d101      	bne.n	80053f0 <DMA_SetConfig+0x1d4>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <DMA_SetConfig+0x1d6>
 80053f0:	2300      	movs	r3, #0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d05a      	beq.n	80054ac <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	223f      	movs	r2, #63	; 0x3f
 8005400:	409a      	lsls	r2, r3
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005414:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2b40      	cmp	r3, #64	; 0x40
 8005424:	d108      	bne.n	8005438 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005436:	e087      	b.n	8005548 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	60da      	str	r2, [r3, #12]
}
 8005448:	e07e      	b.n	8005548 <DMA_SetConfig+0x32c>
 800544a:	bf00      	nop
 800544c:	40020010 	.word	0x40020010
 8005450:	40020028 	.word	0x40020028
 8005454:	40020040 	.word	0x40020040
 8005458:	40020058 	.word	0x40020058
 800545c:	40020070 	.word	0x40020070
 8005460:	40020088 	.word	0x40020088
 8005464:	400200a0 	.word	0x400200a0
 8005468:	400200b8 	.word	0x400200b8
 800546c:	40020410 	.word	0x40020410
 8005470:	40020428 	.word	0x40020428
 8005474:	40020440 	.word	0x40020440
 8005478:	40020458 	.word	0x40020458
 800547c:	40020470 	.word	0x40020470
 8005480:	40020488 	.word	0x40020488
 8005484:	400204a0 	.word	0x400204a0
 8005488:	400204b8 	.word	0x400204b8
 800548c:	58025408 	.word	0x58025408
 8005490:	5802541c 	.word	0x5802541c
 8005494:	58025430 	.word	0x58025430
 8005498:	58025444 	.word	0x58025444
 800549c:	58025458 	.word	0x58025458
 80054a0:	5802546c 	.word	0x5802546c
 80054a4:	58025480 	.word	0x58025480
 80054a8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a28      	ldr	r2, [pc, #160]	; (8005554 <DMA_SetConfig+0x338>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d022      	beq.n	80054fc <DMA_SetConfig+0x2e0>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a27      	ldr	r2, [pc, #156]	; (8005558 <DMA_SetConfig+0x33c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d01d      	beq.n	80054fc <DMA_SetConfig+0x2e0>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a25      	ldr	r2, [pc, #148]	; (800555c <DMA_SetConfig+0x340>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d018      	beq.n	80054fc <DMA_SetConfig+0x2e0>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a24      	ldr	r2, [pc, #144]	; (8005560 <DMA_SetConfig+0x344>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d013      	beq.n	80054fc <DMA_SetConfig+0x2e0>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a22      	ldr	r2, [pc, #136]	; (8005564 <DMA_SetConfig+0x348>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00e      	beq.n	80054fc <DMA_SetConfig+0x2e0>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a21      	ldr	r2, [pc, #132]	; (8005568 <DMA_SetConfig+0x34c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d009      	beq.n	80054fc <DMA_SetConfig+0x2e0>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1f      	ldr	r2, [pc, #124]	; (800556c <DMA_SetConfig+0x350>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d004      	beq.n	80054fc <DMA_SetConfig+0x2e0>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a1e      	ldr	r2, [pc, #120]	; (8005570 <DMA_SetConfig+0x354>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d101      	bne.n	8005500 <DMA_SetConfig+0x2e4>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <DMA_SetConfig+0x2e6>
 8005500:	2300      	movs	r3, #0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d020      	beq.n	8005548 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800550a:	f003 031f 	and.w	r3, r3, #31
 800550e:	2201      	movs	r2, #1
 8005510:	409a      	lsls	r2, r3
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	2b40      	cmp	r3, #64	; 0x40
 8005524:	d108      	bne.n	8005538 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	60da      	str	r2, [r3, #12]
}
 8005536:	e007      	b.n	8005548 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	60da      	str	r2, [r3, #12]
}
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	58025408 	.word	0x58025408
 8005558:	5802541c 	.word	0x5802541c
 800555c:	58025430 	.word	0x58025430
 8005560:	58025444 	.word	0x58025444
 8005564:	58025458 	.word	0x58025458
 8005568:	5802546c 	.word	0x5802546c
 800556c:	58025480 	.word	0x58025480
 8005570:	58025494 	.word	0x58025494

08005574 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a42      	ldr	r2, [pc, #264]	; (800568c <DMA_CalcBaseAndBitshift+0x118>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d04a      	beq.n	800561c <DMA_CalcBaseAndBitshift+0xa8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a41      	ldr	r2, [pc, #260]	; (8005690 <DMA_CalcBaseAndBitshift+0x11c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d045      	beq.n	800561c <DMA_CalcBaseAndBitshift+0xa8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a3f      	ldr	r2, [pc, #252]	; (8005694 <DMA_CalcBaseAndBitshift+0x120>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d040      	beq.n	800561c <DMA_CalcBaseAndBitshift+0xa8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a3e      	ldr	r2, [pc, #248]	; (8005698 <DMA_CalcBaseAndBitshift+0x124>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d03b      	beq.n	800561c <DMA_CalcBaseAndBitshift+0xa8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a3c      	ldr	r2, [pc, #240]	; (800569c <DMA_CalcBaseAndBitshift+0x128>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d036      	beq.n	800561c <DMA_CalcBaseAndBitshift+0xa8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a3b      	ldr	r2, [pc, #236]	; (80056a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d031      	beq.n	800561c <DMA_CalcBaseAndBitshift+0xa8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a39      	ldr	r2, [pc, #228]	; (80056a4 <DMA_CalcBaseAndBitshift+0x130>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d02c      	beq.n	800561c <DMA_CalcBaseAndBitshift+0xa8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a38      	ldr	r2, [pc, #224]	; (80056a8 <DMA_CalcBaseAndBitshift+0x134>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d027      	beq.n	800561c <DMA_CalcBaseAndBitshift+0xa8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a36      	ldr	r2, [pc, #216]	; (80056ac <DMA_CalcBaseAndBitshift+0x138>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d022      	beq.n	800561c <DMA_CalcBaseAndBitshift+0xa8>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a35      	ldr	r2, [pc, #212]	; (80056b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d01d      	beq.n	800561c <DMA_CalcBaseAndBitshift+0xa8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a33      	ldr	r2, [pc, #204]	; (80056b4 <DMA_CalcBaseAndBitshift+0x140>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d018      	beq.n	800561c <DMA_CalcBaseAndBitshift+0xa8>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a32      	ldr	r2, [pc, #200]	; (80056b8 <DMA_CalcBaseAndBitshift+0x144>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d013      	beq.n	800561c <DMA_CalcBaseAndBitshift+0xa8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a30      	ldr	r2, [pc, #192]	; (80056bc <DMA_CalcBaseAndBitshift+0x148>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00e      	beq.n	800561c <DMA_CalcBaseAndBitshift+0xa8>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a2f      	ldr	r2, [pc, #188]	; (80056c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d009      	beq.n	800561c <DMA_CalcBaseAndBitshift+0xa8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a2d      	ldr	r2, [pc, #180]	; (80056c4 <DMA_CalcBaseAndBitshift+0x150>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d004      	beq.n	800561c <DMA_CalcBaseAndBitshift+0xa8>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a2c      	ldr	r2, [pc, #176]	; (80056c8 <DMA_CalcBaseAndBitshift+0x154>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d101      	bne.n	8005620 <DMA_CalcBaseAndBitshift+0xac>
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <DMA_CalcBaseAndBitshift+0xae>
 8005620:	2300      	movs	r3, #0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d024      	beq.n	8005670 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	3b10      	subs	r3, #16
 800562e:	4a27      	ldr	r2, [pc, #156]	; (80056cc <DMA_CalcBaseAndBitshift+0x158>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	091b      	lsrs	r3, r3, #4
 8005636:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	4a24      	ldr	r2, [pc, #144]	; (80056d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005640:	5cd3      	ldrb	r3, [r2, r3]
 8005642:	461a      	mov	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b03      	cmp	r3, #3
 800564c:	d908      	bls.n	8005660 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	4b1f      	ldr	r3, [pc, #124]	; (80056d4 <DMA_CalcBaseAndBitshift+0x160>)
 8005656:	4013      	ands	r3, r2
 8005658:	1d1a      	adds	r2, r3, #4
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	659a      	str	r2, [r3, #88]	; 0x58
 800565e:	e00d      	b.n	800567c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <DMA_CalcBaseAndBitshift+0x160>)
 8005668:	4013      	ands	r3, r2
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6593      	str	r3, [r2, #88]	; 0x58
 800566e:	e005      	b.n	800567c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	40020010 	.word	0x40020010
 8005690:	40020028 	.word	0x40020028
 8005694:	40020040 	.word	0x40020040
 8005698:	40020058 	.word	0x40020058
 800569c:	40020070 	.word	0x40020070
 80056a0:	40020088 	.word	0x40020088
 80056a4:	400200a0 	.word	0x400200a0
 80056a8:	400200b8 	.word	0x400200b8
 80056ac:	40020410 	.word	0x40020410
 80056b0:	40020428 	.word	0x40020428
 80056b4:	40020440 	.word	0x40020440
 80056b8:	40020458 	.word	0x40020458
 80056bc:	40020470 	.word	0x40020470
 80056c0:	40020488 	.word	0x40020488
 80056c4:	400204a0 	.word	0x400204a0
 80056c8:	400204b8 	.word	0x400204b8
 80056cc:	aaaaaaab 	.word	0xaaaaaaab
 80056d0:	08019ed0 	.word	0x08019ed0
 80056d4:	fffffc00 	.word	0xfffffc00

080056d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d120      	bne.n	800572e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d858      	bhi.n	80057a6 <DMA_CheckFifoParam+0xce>
 80056f4:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <DMA_CheckFifoParam+0x24>)
 80056f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fa:	bf00      	nop
 80056fc:	0800570d 	.word	0x0800570d
 8005700:	0800571f 	.word	0x0800571f
 8005704:	0800570d 	.word	0x0800570d
 8005708:	080057a7 	.word	0x080057a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d048      	beq.n	80057aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800571c:	e045      	b.n	80057aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005726:	d142      	bne.n	80057ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800572c:	e03f      	b.n	80057ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005736:	d123      	bne.n	8005780 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573c:	2b03      	cmp	r3, #3
 800573e:	d838      	bhi.n	80057b2 <DMA_CheckFifoParam+0xda>
 8005740:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <DMA_CheckFifoParam+0x70>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	08005759 	.word	0x08005759
 800574c:	0800575f 	.word	0x0800575f
 8005750:	08005759 	.word	0x08005759
 8005754:	08005771 	.word	0x08005771
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	73fb      	strb	r3, [r7, #15]
        break;
 800575c:	e030      	b.n	80057c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d025      	beq.n	80057b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800576e:	e022      	b.n	80057b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005778:	d11f      	bne.n	80057ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800577e:	e01c      	b.n	80057ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005784:	2b02      	cmp	r3, #2
 8005786:	d902      	bls.n	800578e <DMA_CheckFifoParam+0xb6>
 8005788:	2b03      	cmp	r3, #3
 800578a:	d003      	beq.n	8005794 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800578c:	e018      	b.n	80057c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	73fb      	strb	r3, [r7, #15]
        break;
 8005792:	e015      	b.n	80057c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00e      	beq.n	80057be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	73fb      	strb	r3, [r7, #15]
    break;
 80057a4:	e00b      	b.n	80057be <DMA_CheckFifoParam+0xe6>
        break;
 80057a6:	bf00      	nop
 80057a8:	e00a      	b.n	80057c0 <DMA_CheckFifoParam+0xe8>
        break;
 80057aa:	bf00      	nop
 80057ac:	e008      	b.n	80057c0 <DMA_CheckFifoParam+0xe8>
        break;
 80057ae:	bf00      	nop
 80057b0:	e006      	b.n	80057c0 <DMA_CheckFifoParam+0xe8>
        break;
 80057b2:	bf00      	nop
 80057b4:	e004      	b.n	80057c0 <DMA_CheckFifoParam+0xe8>
        break;
 80057b6:	bf00      	nop
 80057b8:	e002      	b.n	80057c0 <DMA_CheckFifoParam+0xe8>
        break;
 80057ba:	bf00      	nop
 80057bc:	e000      	b.n	80057c0 <DMA_CheckFifoParam+0xe8>
    break;
 80057be:	bf00      	nop
    }
  }

  return status;
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop

080057d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a38      	ldr	r2, [pc, #224]	; (80058c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d022      	beq.n	800582e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a36      	ldr	r2, [pc, #216]	; (80058c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d01d      	beq.n	800582e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a35      	ldr	r2, [pc, #212]	; (80058cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d018      	beq.n	800582e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a33      	ldr	r2, [pc, #204]	; (80058d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d013      	beq.n	800582e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a32      	ldr	r2, [pc, #200]	; (80058d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00e      	beq.n	800582e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a30      	ldr	r2, [pc, #192]	; (80058d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d009      	beq.n	800582e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a2f      	ldr	r2, [pc, #188]	; (80058dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d004      	beq.n	800582e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a2d      	ldr	r2, [pc, #180]	; (80058e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d101      	bne.n	8005832 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005832:	2300      	movs	r3, #0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01a      	beq.n	800586e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	3b08      	subs	r3, #8
 8005840:	4a28      	ldr	r2, [pc, #160]	; (80058e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4b26      	ldr	r3, [pc, #152]	; (80058e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	461a      	mov	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a24      	ldr	r2, [pc, #144]	; (80058ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800585c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	2201      	movs	r2, #1
 8005866:	409a      	lsls	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800586c:	e024      	b.n	80058b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	3b10      	subs	r3, #16
 8005876:	4a1e      	ldr	r2, [pc, #120]	; (80058f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005878:	fba2 2303 	umull	r2, r3, r2, r3
 800587c:	091b      	lsrs	r3, r3, #4
 800587e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4a1c      	ldr	r2, [pc, #112]	; (80058f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d806      	bhi.n	8005896 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4a1b      	ldr	r2, [pc, #108]	; (80058f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d902      	bls.n	8005896 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3308      	adds	r3, #8
 8005894:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4b18      	ldr	r3, [pc, #96]	; (80058fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800589a:	4413      	add	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	461a      	mov	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a16      	ldr	r2, [pc, #88]	; (8005900 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80058a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 031f 	and.w	r3, r3, #31
 80058b0:	2201      	movs	r2, #1
 80058b2:	409a      	lsls	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80058b8:	bf00      	nop
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	58025408 	.word	0x58025408
 80058c8:	5802541c 	.word	0x5802541c
 80058cc:	58025430 	.word	0x58025430
 80058d0:	58025444 	.word	0x58025444
 80058d4:	58025458 	.word	0x58025458
 80058d8:	5802546c 	.word	0x5802546c
 80058dc:	58025480 	.word	0x58025480
 80058e0:	58025494 	.word	0x58025494
 80058e4:	cccccccd 	.word	0xcccccccd
 80058e8:	16009600 	.word	0x16009600
 80058ec:	58025880 	.word	0x58025880
 80058f0:	aaaaaaab 	.word	0xaaaaaaab
 80058f4:	400204b8 	.word	0x400204b8
 80058f8:	4002040f 	.word	0x4002040f
 80058fc:	10008200 	.word	0x10008200
 8005900:	40020880 	.word	0x40020880

08005904 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	b2db      	uxtb	r3, r3
 8005912:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d04a      	beq.n	80059b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b08      	cmp	r3, #8
 800591e:	d847      	bhi.n	80059b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a25      	ldr	r2, [pc, #148]	; (80059bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d022      	beq.n	8005970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a24      	ldr	r2, [pc, #144]	; (80059c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d01d      	beq.n	8005970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a22      	ldr	r2, [pc, #136]	; (80059c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d018      	beq.n	8005970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a21      	ldr	r2, [pc, #132]	; (80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d013      	beq.n	8005970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1f      	ldr	r2, [pc, #124]	; (80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00e      	beq.n	8005970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a1e      	ldr	r2, [pc, #120]	; (80059d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d009      	beq.n	8005970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a1c      	ldr	r2, [pc, #112]	; (80059d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a1b      	ldr	r2, [pc, #108]	; (80059d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d101      	bne.n	8005974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005974:	2300      	movs	r3, #0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4b17      	ldr	r3, [pc, #92]	; (80059dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	461a      	mov	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800598c:	671a      	str	r2, [r3, #112]	; 0x70
 800598e:	e009      	b.n	80059a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4b14      	ldr	r3, [pc, #80]	; (80059e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	461a      	mov	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a11      	ldr	r2, [pc, #68]	; (80059e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80059a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	2201      	movs	r2, #1
 80059aa:	409a      	lsls	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80059b0:	bf00      	nop
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	58025408 	.word	0x58025408
 80059c0:	5802541c 	.word	0x5802541c
 80059c4:	58025430 	.word	0x58025430
 80059c8:	58025444 	.word	0x58025444
 80059cc:	58025458 	.word	0x58025458
 80059d0:	5802546c 	.word	0x5802546c
 80059d4:	58025480 	.word	0x58025480
 80059d8:	58025494 	.word	0x58025494
 80059dc:	1600963f 	.word	0x1600963f
 80059e0:	58025940 	.word	0x58025940
 80059e4:	1000823f 	.word	0x1000823f
 80059e8:	40020940 	.word	0x40020940

080059ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b098      	sub	sp, #96	; 0x60
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80059f4:	4a84      	ldr	r2, [pc, #528]	; (8005c08 <HAL_FDCAN_Init+0x21c>)
 80059f6:	f107 030c 	add.w	r3, r7, #12
 80059fa:	4611      	mov	r1, r2
 80059fc:	224c      	movs	r2, #76	; 0x4c
 80059fe:	4618      	mov	r0, r3
 8005a00:	f012 fd28 	bl	8018454 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e1ca      	b.n	8005da4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a7e      	ldr	r2, [pc, #504]	; (8005c0c <HAL_FDCAN_Init+0x220>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d106      	bne.n	8005a26 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005a20:	461a      	mov	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fd f94e 	bl	8002cdc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0210 	bic.w	r2, r2, #16
 8005a4e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a50:	f7fd fdaa 	bl	80035a8 <HAL_GetTick>
 8005a54:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a56:	e014      	b.n	8005a82 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005a58:	f7fd fda6 	bl	80035a8 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b0a      	cmp	r3, #10
 8005a64:	d90d      	bls.n	8005a82 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a6c:	f043 0201 	orr.w	r2, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2203      	movs	r2, #3
 8005a7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e190      	b.n	8005da4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d0e3      	beq.n	8005a58 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005aa0:	f7fd fd82 	bl	80035a8 <HAL_GetTick>
 8005aa4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005aa6:	e014      	b.n	8005ad2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005aa8:	f7fd fd7e 	bl	80035a8 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b0a      	cmp	r3, #10
 8005ab4:	d90d      	bls.n	8005ad2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005abc:	f043 0201 	orr.w	r2, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2203      	movs	r2, #3
 8005aca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e168      	b.n	8005da4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0e3      	beq.n	8005aa8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0202 	orr.w	r2, r2, #2
 8005aee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	7c1b      	ldrb	r3, [r3, #16]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d108      	bne.n	8005b0a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699a      	ldr	r2, [r3, #24]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b06:	619a      	str	r2, [r3, #24]
 8005b08:	e007      	b.n	8005b1a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699a      	ldr	r2, [r3, #24]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b18:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	7c5b      	ldrb	r3, [r3, #17]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d108      	bne.n	8005b34 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	699a      	ldr	r2, [r3, #24]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b30:	619a      	str	r2, [r3, #24]
 8005b32:	e007      	b.n	8005b44 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b42:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	7c9b      	ldrb	r3, [r3, #18]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d108      	bne.n	8005b5e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b5a:	619a      	str	r2, [r3, #24]
 8005b5c:	e007      	b.n	8005b6e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699a      	ldr	r2, [r3, #24]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b6c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005b92:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0210 	bic.w	r2, r2, #16
 8005ba2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d108      	bne.n	8005bbe <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0204 	orr.w	r2, r2, #4
 8005bba:	619a      	str	r2, [r3, #24]
 8005bbc:	e030      	b.n	8005c20 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d02c      	beq.n	8005c20 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d020      	beq.n	8005c10 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	699a      	ldr	r2, [r3, #24]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005bdc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0210 	orr.w	r2, r2, #16
 8005bec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d114      	bne.n	8005c20 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	699a      	ldr	r2, [r3, #24]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f042 0220 	orr.w	r2, r2, #32
 8005c04:	619a      	str	r2, [r3, #24]
 8005c06:	e00b      	b.n	8005c20 <HAL_FDCAN_Init+0x234>
 8005c08:	08019ddc 	.word	0x08019ddc
 8005c0c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0220 	orr.w	r2, r2, #32
 8005c1e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c30:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c38:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	3b01      	subs	r3, #1
 8005c42:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c48:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c4a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c54:	d115      	bne.n	8005c82 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	3b01      	subs	r3, #1
 8005c62:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c64:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005c6e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	3b01      	subs	r3, #1
 8005c78:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005c7e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c80:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca8:	4413      	add	r3, r2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d012      	beq.n	8005cd4 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005cb6:	f023 0107 	bic.w	r1, r3, #7
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d012      	beq.n	8005d02 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005ce4:	f023 0107 	bic.w	r1, r3, #7
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d013      	beq.n	8005d32 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005d12:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005d20:	4413      	add	r3, r2
 8005d22:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005d26:	011a      	lsls	r2, r3, #4
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d013      	beq.n	8005d62 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005d42:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005d50:	4413      	add	r3, r2
 8005d52:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005d56:	021a      	lsls	r2, r3, #8
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a11      	ldr	r2, [pc, #68]	; (8005dac <HAL_FDCAN_Init+0x3c0>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d107      	bne.n	8005d7c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f022 0203 	bic.w	r2, r2, #3
 8005d7a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fddf 	bl	8006958 <FDCAN_CalcultateRamBlockAddresses>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005da0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3760      	adds	r7, #96	; 0x60
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	4000a000 	.word	0x4000a000

08005db0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005dc0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d002      	beq.n	8005dce <HAL_FDCAN_ConfigFilter+0x1e>
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d157      	bne.n	8005e7e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d12b      	bne.n	8005e2e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2b07      	cmp	r3, #7
 8005ddc:	d10d      	bne.n	8005dfa <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8005dea:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005df0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005df2:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	e00e      	b.n	8005e18 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005e06:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005e0e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	e025      	b.n	8005e7a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	075a      	lsls	r2, r3, #29
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	2b07      	cmp	r3, #7
 8005e42:	d103      	bne.n	8005e4c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	613b      	str	r3, [r7, #16]
 8005e4a:	e006      	b.n	8005e5a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	079a      	lsls	r2, r3, #30
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	4413      	add	r3, r2
 8005e66:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	3304      	adds	r3, #4
 8005e72:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e008      	b.n	8005e90 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e84:	f043 0202 	orr.w	r2, r3, #2
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
  }
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d110      	bne.n	8005ed8 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005ebe:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005ec4:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e008      	b.n	8005eea <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ede:	f043 0204 	orr.w	r2, r3, #4
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
  }
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d109      	bne.n	8005f1e <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005f18:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e008      	b.n	8005f30 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f24:	f043 0204 	orr.w	r2, r3, #4
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
  }
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d111      	bne.n	8005f74 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e008      	b.n	8005f86 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f7a:	f043 0204 	orr.w	r2, r3, #4
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
  }
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
	...

08005f94 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b08b      	sub	sp, #44	; 0x2c
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005fac:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005fae:	7efb      	ldrb	r3, [r7, #27]
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	f040 813b 	bne.w	800622c <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b40      	cmp	r3, #64	; 0x40
 8005fba:	d145      	bne.n	8006048 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005fc4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d109      	bne.n	8005fe0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fd2:	f043 0220 	orr.w	r2, r3, #32
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e12e      	b.n	800623e <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d109      	bne.n	8006004 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ff6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e11c      	b.n	800623e <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800600c:	0e1b      	lsrs	r3, r3, #24
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b01      	cmp	r3, #1
 8006014:	d103      	bne.n	800601e <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006026:	0a1b      	lsrs	r3, r3, #8
 8006028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	4413      	add	r3, r2
 8006030:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603a:	69f9      	ldr	r1, [r7, #28]
 800603c:	fb01 f303 	mul.w	r3, r1, r3
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
 8006046:	e061      	b.n	800610c <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b41      	cmp	r3, #65	; 0x41
 800604c:	d145      	bne.n	80060da <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006056:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006064:	f043 0220 	orr.w	r2, r3, #32
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e0e5      	b.n	800623e <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800607a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006088:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e0d3      	b.n	800623e <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800609e:	0e1b      	lsrs	r3, r3, #24
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d103      	bne.n	80060b0 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060b8:	0a1b      	lsrs	r3, r3, #8
 80060ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060be:	69fa      	ldr	r2, [r7, #28]
 80060c0:	4413      	add	r3, r2
 80060c2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060cc:	69f9      	ldr	r1, [r7, #28]
 80060ce:	fb01 f303 	mul.w	r3, r1, r3
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
 80060d8:	e018      	b.n	800610c <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d309      	bcc.n	80060f8 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060ea:	f043 0220 	orr.w	r2, r3, #32
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e0a2      	b.n	800623e <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	fb01 f303 	mul.w	r3, r1, r3
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d107      	bne.n	8006130 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	0c9b      	lsrs	r3, r3, #18
 8006126:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	e005      	b.n	800613c <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	3304      	adds	r3, #4
 8006158:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	b29a      	uxth	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	0e1b      	lsrs	r3, r3, #24
 800618e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	0fda      	lsrs	r2, r3, #31
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	3304      	adds	r3, #4
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80061aa:	2300      	movs	r3, #0
 80061ac:	623b      	str	r3, [r7, #32]
 80061ae:	e00a      	b.n	80061c6 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	441a      	add	r2, r3
 80061b6:	6839      	ldr	r1, [r7, #0]
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	440b      	add	r3, r1
 80061bc:	7812      	ldrb	r2, [r2, #0]
 80061be:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	3301      	adds	r3, #1
 80061c4:	623b      	str	r3, [r7, #32]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	0c1b      	lsrs	r3, r3, #16
 80061cc:	4a1f      	ldr	r2, [pc, #124]	; (800624c <HAL_FDCAN_GetRxMessage+0x2b8>)
 80061ce:	5cd3      	ldrb	r3, [r2, r3]
 80061d0:	461a      	mov	r2, r3
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d3eb      	bcc.n	80061b0 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b40      	cmp	r3, #64	; 0x40
 80061dc:	d105      	bne.n	80061ea <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80061e8:	e01e      	b.n	8006228 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b41      	cmp	r3, #65	; 0x41
 80061ee:	d105      	bne.n	80061fc <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80061fa:	e015      	b.n	8006228 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b1f      	cmp	r3, #31
 8006200:	d808      	bhi.n	8006214 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2101      	movs	r1, #1
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	fa01 f202 	lsl.w	r2, r1, r2
 800620e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8006212:	e009      	b.n	8006228 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f003 021f 	and.w	r2, r3, #31
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2101      	movs	r1, #1
 8006220:	fa01 f202 	lsl.w	r2, r1, r2
 8006224:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e008      	b.n	800623e <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006232:	f043 0208 	orr.w	r2, r3, #8
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
  }
}
 800623e:	4618      	mov	r0, r3
 8006240:	372c      	adds	r7, #44	; 0x2c
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	08019ed8 	.word	0x08019ed8

08006250 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006262:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006264:	7dfb      	ldrb	r3, [r7, #23]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d002      	beq.n	8006270 <HAL_FDCAN_ActivateNotification+0x20>
 800626a:	7dfb      	ldrb	r3, [r7, #23]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d155      	bne.n	800631c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	4013      	ands	r3, r2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d108      	bne.n	8006290 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0201 	orr.w	r2, r2, #1
 800628c:	65da      	str	r2, [r3, #92]	; 0x5c
 800628e:	e014      	b.n	80062ba <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	4013      	ands	r3, r2
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	429a      	cmp	r2, r3
 800629e:	d108      	bne.n	80062b2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0202 	orr.w	r2, r2, #2
 80062ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80062b0:	e003      	b.n	80062ba <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2203      	movs	r2, #3
 80062b8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d009      	beq.n	80062d8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	4b0f      	ldr	r3, [pc, #60]	; (800633c <HAL_FDCAN_ActivateNotification+0xec>)
 8006300:	4013      	ands	r3, r2
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	430b      	orrs	r3, r1
 8006308:	6553      	str	r3, [r2, #84]	; 0x54
 800630a:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <HAL_FDCAN_ActivateNotification+0xf0>)
 800630c:	695a      	ldr	r2, [r3, #20]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	0f9b      	lsrs	r3, r3, #30
 8006312:	490b      	ldr	r1, [pc, #44]	; (8006340 <HAL_FDCAN_ActivateNotification+0xf0>)
 8006314:	4313      	orrs	r3, r2
 8006316:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	e008      	b.n	800632e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006322:	f043 0202 	orr.w	r2, r3, #2
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
  }
}
 800632e:	4618      	mov	r0, r3
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	3fcfffff 	.word	0x3fcfffff
 8006340:	4000a800 	.word	0x4000a800

08006344 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b092      	sub	sp, #72	; 0x48
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800634c:	4b90      	ldr	r3, [pc, #576]	; (8006590 <HAL_FDCAN_IRQHandler+0x24c>)
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	079b      	lsls	r3, r3, #30
 8006352:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8006354:	4b8e      	ldr	r3, [pc, #568]	; (8006590 <HAL_FDCAN_IRQHandler+0x24c>)
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	079b      	lsls	r3, r3, #30
 800635a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800635c:	4013      	ands	r3, r2
 800635e:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006366:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800636a:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006372:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006374:	4013      	ands	r3, r2
 8006376:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800638c:	4013      	ands	r3, r2
 800638e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800639a:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063a4:	4013      	ands	r3, r2
 80063a6:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ae:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80063b2:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063bc:	4013      	ands	r3, r2
 80063be:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80063ca:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063d4:	4013      	ands	r3, r2
 80063d6:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d011      	beq.n	800640a <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063fc:	651a      	str	r2, [r3, #80]	; 0x50
 80063fe:	4b64      	ldr	r3, [pc, #400]	; (8006590 <HAL_FDCAN_IRQHandler+0x24c>)
 8006400:	2200      	movs	r2, #0
 8006402:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fa5a 	bl	80068be <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01e      	beq.n	8006456 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006422:	2b00      	cmp	r3, #0
 8006424:	d017      	beq.n	8006456 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800643a:	4013      	ands	r3, r2
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006446:	651a      	str	r2, [r3, #80]	; 0x50
 8006448:	4b51      	ldr	r3, [pc, #324]	; (8006590 <HAL_FDCAN_IRQHandler+0x24c>)
 800644a:	2200      	movs	r2, #0
 800644c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800644e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fa0b 	bl	800686c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8006456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00d      	beq.n	8006478 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006462:	4b4c      	ldr	r3, [pc, #304]	; (8006594 <HAL_FDCAN_IRQHandler+0x250>)
 8006464:	400b      	ands	r3, r1
 8006466:	6513      	str	r3, [r2, #80]	; 0x50
 8006468:	4a49      	ldr	r2, [pc, #292]	; (8006590 <HAL_FDCAN_IRQHandler+0x24c>)
 800646a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800646c:	0f9b      	lsrs	r3, r3, #30
 800646e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006470:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f9c4 	bl	8006800 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00d      	beq.n	800649a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006484:	4b43      	ldr	r3, [pc, #268]	; (8006594 <HAL_FDCAN_IRQHandler+0x250>)
 8006486:	400b      	ands	r3, r1
 8006488:	6513      	str	r3, [r2, #80]	; 0x50
 800648a:	4a41      	ldr	r2, [pc, #260]	; (8006590 <HAL_FDCAN_IRQHandler+0x24c>)
 800648c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800648e:	0f9b      	lsrs	r3, r3, #30
 8006490:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f9be 	bl	8006816 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800649a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00d      	beq.n	80064bc <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064a6:	4b3b      	ldr	r3, [pc, #236]	; (8006594 <HAL_FDCAN_IRQHandler+0x250>)
 80064a8:	400b      	ands	r3, r1
 80064aa:	6513      	str	r3, [r2, #80]	; 0x50
 80064ac:	4a38      	ldr	r2, [pc, #224]	; (8006590 <HAL_FDCAN_IRQHandler+0x24c>)
 80064ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b0:	0f9b      	lsrs	r3, r3, #30
 80064b2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80064b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fa f928 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00d      	beq.n	80064de <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064c8:	4b32      	ldr	r3, [pc, #200]	; (8006594 <HAL_FDCAN_IRQHandler+0x250>)
 80064ca:	400b      	ands	r3, r1
 80064cc:	6513      	str	r3, [r2, #80]	; 0x50
 80064ce:	4a30      	ldr	r2, [pc, #192]	; (8006590 <HAL_FDCAN_IRQHandler+0x24c>)
 80064d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d2:	0f9b      	lsrs	r3, r3, #30
 80064d4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80064d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f9a7 	bl	800682c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d011      	beq.n	8006510 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006502:	651a      	str	r2, [r3, #80]	; 0x50
 8006504:	4b22      	ldr	r3, [pc, #136]	; (8006590 <HAL_FDCAN_IRQHandler+0x24c>)
 8006506:	2200      	movs	r2, #0
 8006508:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f999 	bl	8006842 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01e      	beq.n	800655c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006528:	2b00      	cmp	r3, #0
 800652a:	d017      	beq.n	800655c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006534:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800653e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006540:	4013      	ands	r3, r2
 8006542:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800654c:	651a      	str	r2, [r3, #80]	; 0x50
 800654e:	4b10      	ldr	r3, [pc, #64]	; (8006590 <HAL_FDCAN_IRQHandler+0x24c>)
 8006550:	2200      	movs	r2, #0
 8006552:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f97d 	bl	8006856 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006570:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00f      	beq.n	8006598 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006580:	651a      	str	r2, [r3, #80]	; 0x50
 8006582:	4b03      	ldr	r3, [pc, #12]	; (8006590 <HAL_FDCAN_IRQHandler+0x24c>)
 8006584:	2200      	movs	r2, #0
 8006586:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f97a 	bl	8006882 <HAL_FDCAN_RxBufferNewMessageCallback>
 800658e:	e003      	b.n	8006598 <HAL_FDCAN_IRQHandler+0x254>
 8006590:	4000a800 	.word	0x4000a800
 8006594:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d011      	beq.n	80065ca <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80065bc:	651a      	str	r2, [r3, #80]	; 0x50
 80065be:	4b8d      	ldr	r3, [pc, #564]	; (80067f4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f966 	bl	8006896 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d011      	beq.n	80065fc <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80065ee:	651a      	str	r2, [r3, #80]	; 0x50
 80065f0:	4b80      	ldr	r3, [pc, #512]	; (80067f4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f957 	bl	80068aa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d016      	beq.n	8006638 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00f      	beq.n	8006638 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006620:	651a      	str	r2, [r3, #80]	; 0x50
 8006622:	4b74      	ldr	r3, [pc, #464]	; (80067f4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006624:	2200      	movs	r2, #0
 8006626:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800662e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00d      	beq.n	800665a <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006644:	4b6c      	ldr	r3, [pc, #432]	; (80067f8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006646:	400b      	ands	r3, r1
 8006648:	6513      	str	r3, [r2, #80]	; 0x50
 800664a:	4a6a      	ldr	r2, [pc, #424]	; (80067f4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	0f9b      	lsrs	r3, r3, #30
 8006650:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f946 	bl	80068e6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800665a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665c:	2b00      	cmp	r3, #0
 800665e:	d011      	beq.n	8006684 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006666:	4b64      	ldr	r3, [pc, #400]	; (80067f8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006668:	400b      	ands	r3, r1
 800666a:	6513      	str	r3, [r2, #80]	; 0x50
 800666c:	4a61      	ldr	r2, [pc, #388]	; (80067f4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800666e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006670:	0f9b      	lsrs	r3, r3, #30
 8006672:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800667a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a5c      	ldr	r2, [pc, #368]	; (80067fc <HAL_FDCAN_IRQHandler+0x4b8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	f040 80a6 	bne.w	80067dc <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 809e 	beq.w	80067dc <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b4:	4013      	ands	r3, r2
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066c2:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	6a3a      	ldr	r2, [r7, #32]
 80066cc:	4013      	ands	r3, r2
 80066ce:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80066da:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	4013      	ands	r3, r2
 80066e6:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80066f2:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	4013      	ands	r3, r2
 80066fe:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800670a:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	4013      	ands	r3, r2
 8006716:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	2b00      	cmp	r3, #0
 800671c:	d007      	beq.n	800672e <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006724:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f8e7 	bl	80068fc <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	6a3a      	ldr	r2, [r7, #32]
 800673a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800673c:	6a39      	ldr	r1, [r7, #32]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f8e7 	bl	8006912 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01b      	beq.n	800678a <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675c:	2b00      	cmp	r3, #0
 800675e:	d014      	beq.n	800678a <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006766:	0c1b      	lsrs	r3, r3, #16
 8006768:	b29b      	uxth	r3, r3
 800676a:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006776:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2240      	movs	r2, #64	; 0x40
 800677e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	6939      	ldr	r1, [r7, #16]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f8cf 	bl	8006928 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006798:	69f9      	ldr	r1, [r7, #28]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f8d0 	bl	8006940 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00b      	beq.n	80067be <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f873 	bl	80068d2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80067ec:	bf00      	nop
 80067ee:	3748      	adds	r7, #72	; 0x48
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	4000a800 	.word	0x4000a800
 80067f8:	3fcfffff 	.word	0x3fcfffff
 80067fc:	4000a000 	.word	0x4000a000

08006800 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
	...

08006958 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006964:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800696e:	4ba7      	ldr	r3, [pc, #668]	; (8006c0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006970:	4013      	ands	r3, r2
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	0091      	lsls	r1, r2, #2
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6812      	ldr	r2, [r2, #0]
 800697a:	430b      	orrs	r3, r1
 800697c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006988:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006990:	041a      	lsls	r2, r3, #16
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	4413      	add	r3, r2
 80069a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069ae:	4b97      	ldr	r3, [pc, #604]	; (8006c0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80069b0:	4013      	ands	r3, r2
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	0091      	lsls	r1, r2, #2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6812      	ldr	r2, [r2, #0]
 80069ba:	430b      	orrs	r3, r1
 80069bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d0:	041a      	lsls	r2, r3, #16
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	4413      	add	r3, r2
 80069e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80069f0:	4b86      	ldr	r3, [pc, #536]	; (8006c0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80069f2:	4013      	ands	r3, r2
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	0091      	lsls	r1, r2, #2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	430b      	orrs	r3, r1
 80069fe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a0a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	041a      	lsls	r2, r3, #16
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a26:	fb02 f303 	mul.w	r3, r2, r3
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006a38:	4b74      	ldr	r3, [pc, #464]	; (8006c0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	0091      	lsls	r1, r2, #2
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6812      	ldr	r2, [r2, #0]
 8006a44:	430b      	orrs	r3, r1
 8006a46:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a52:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a5a:	041a      	lsls	r2, r3, #16
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006a6e:	fb02 f303 	mul.w	r3, r2, r3
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	4413      	add	r3, r2
 8006a76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006a80:	4b62      	ldr	r3, [pc, #392]	; (8006c0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	0091      	lsls	r1, r2, #2
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6812      	ldr	r2, [r2, #0]
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006a9a:	fb02 f303 	mul.w	r3, r2, r3
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006aac:	4b57      	ldr	r3, [pc, #348]	; (8006c0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006aae:	4013      	ands	r3, r2
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	0091      	lsls	r1, r2, #2
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6812      	ldr	r2, [r2, #0]
 8006ab8:	430b      	orrs	r3, r1
 8006aba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ac6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ace:	041a      	lsls	r2, r3, #16
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ade:	005b      	lsls	r3, r3, #1
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006aee:	4b47      	ldr	r3, [pc, #284]	; (8006c0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006af0:	4013      	ands	r3, r2
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	0091      	lsls	r1, r2, #2
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	6812      	ldr	r2, [r2, #0]
 8006afa:	430b      	orrs	r3, r1
 8006afc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006b08:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b10:	041a      	lsls	r2, r3, #16
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006b24:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b2c:	061a      	lsls	r2, r3, #24
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b3c:	4b34      	ldr	r3, [pc, #208]	; (8006c10 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006b3e:	4413      	add	r3, r2
 8006b40:	009a      	lsls	r2, r3, #2
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	441a      	add	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	441a      	add	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006b72:	fb01 f303 	mul.w	r3, r1, r3
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	441a      	add	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006b8a:	fb01 f303 	mul.w	r3, r1, r3
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	441a      	add	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006ba2:	fb01 f303 	mul.w	r3, r1, r3
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	441a      	add	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	441a      	add	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006bd2:	fb01 f303 	mul.w	r3, r1, r3
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	441a      	add	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006bee:	fb01 f303 	mul.w	r3, r1, r3
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	441a      	add	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c02:	4a04      	ldr	r2, [pc, #16]	; (8006c14 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d915      	bls.n	8006c34 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006c08:	e006      	b.n	8006c18 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006c0a:	bf00      	nop
 8006c0c:	ffff0003 	.word	0xffff0003
 8006c10:	10002b00 	.word	0x10002b00
 8006c14:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c1e:	f043 0220 	orr.w	r2, r3, #32
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2203      	movs	r2, #3
 8006c2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e010      	b.n	8006c56 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	e005      	b.n	8006c48 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3304      	adds	r3, #4
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d3f3      	bcc.n	8006c3c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop

08006c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b089      	sub	sp, #36	; 0x24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006c72:	4b89      	ldr	r3, [pc, #548]	; (8006e98 <HAL_GPIO_Init+0x234>)
 8006c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c76:	e194      	b.n	8006fa2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	fa01 f303 	lsl.w	r3, r1, r3
 8006c84:	4013      	ands	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 8186 	beq.w	8006f9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d00b      	beq.n	8006cb0 <HAL_GPIO_Init+0x4c>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d007      	beq.n	8006cb0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ca4:	2b11      	cmp	r3, #17
 8006ca6:	d003      	beq.n	8006cb0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2b12      	cmp	r3, #18
 8006cae:	d130      	bne.n	8006d12 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	2203      	movs	r2, #3
 8006cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	fa02 f303 	lsl.w	r3, r2, r3
 8006cee:	43db      	mvns	r3, r3
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	091b      	lsrs	r3, r3, #4
 8006cfc:	f003 0201 	and.w	r2, r3, #1
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	fa02 f303 	lsl.w	r3, r2, r3
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d22:	43db      	mvns	r3, r3
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	4013      	ands	r3, r2
 8006d28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	fa02 f303 	lsl.w	r3, r2, r3
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d003      	beq.n	8006d52 <HAL_GPIO_Init+0xee>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2b12      	cmp	r3, #18
 8006d50:	d123      	bne.n	8006d9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	08da      	lsrs	r2, r3, #3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3208      	adds	r2, #8
 8006d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	220f      	movs	r2, #15
 8006d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6e:	43db      	mvns	r3, r3
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	4013      	ands	r3, r2
 8006d74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	691a      	ldr	r2, [r3, #16]
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	08da      	lsrs	r2, r3, #3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3208      	adds	r2, #8
 8006d94:	69b9      	ldr	r1, [r7, #24]
 8006d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	2203      	movs	r2, #3
 8006da6:	fa02 f303 	lsl.w	r3, r2, r3
 8006daa:	43db      	mvns	r3, r3
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	4013      	ands	r3, r2
 8006db0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f003 0203 	and.w	r2, r3, #3
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 80e0 	beq.w	8006f9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ddc:	4b2f      	ldr	r3, [pc, #188]	; (8006e9c <HAL_GPIO_Init+0x238>)
 8006dde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006de2:	4a2e      	ldr	r2, [pc, #184]	; (8006e9c <HAL_GPIO_Init+0x238>)
 8006de4:	f043 0302 	orr.w	r3, r3, #2
 8006de8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006dec:	4b2b      	ldr	r3, [pc, #172]	; (8006e9c <HAL_GPIO_Init+0x238>)
 8006dee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006dfa:	4a29      	ldr	r2, [pc, #164]	; (8006ea0 <HAL_GPIO_Init+0x23c>)
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	089b      	lsrs	r3, r3, #2
 8006e00:	3302      	adds	r3, #2
 8006e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	f003 0303 	and.w	r3, r3, #3
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	220f      	movs	r2, #15
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	43db      	mvns	r3, r3
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a20      	ldr	r2, [pc, #128]	; (8006ea4 <HAL_GPIO_Init+0x240>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d052      	beq.n	8006ecc <HAL_GPIO_Init+0x268>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a1f      	ldr	r2, [pc, #124]	; (8006ea8 <HAL_GPIO_Init+0x244>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d031      	beq.n	8006e92 <HAL_GPIO_Init+0x22e>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a1e      	ldr	r2, [pc, #120]	; (8006eac <HAL_GPIO_Init+0x248>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d02b      	beq.n	8006e8e <HAL_GPIO_Init+0x22a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a1d      	ldr	r2, [pc, #116]	; (8006eb0 <HAL_GPIO_Init+0x24c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d025      	beq.n	8006e8a <HAL_GPIO_Init+0x226>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a1c      	ldr	r2, [pc, #112]	; (8006eb4 <HAL_GPIO_Init+0x250>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d01f      	beq.n	8006e86 <HAL_GPIO_Init+0x222>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a1b      	ldr	r2, [pc, #108]	; (8006eb8 <HAL_GPIO_Init+0x254>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d019      	beq.n	8006e82 <HAL_GPIO_Init+0x21e>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a1a      	ldr	r2, [pc, #104]	; (8006ebc <HAL_GPIO_Init+0x258>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d013      	beq.n	8006e7e <HAL_GPIO_Init+0x21a>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a19      	ldr	r2, [pc, #100]	; (8006ec0 <HAL_GPIO_Init+0x25c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d00d      	beq.n	8006e7a <HAL_GPIO_Init+0x216>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a18      	ldr	r2, [pc, #96]	; (8006ec4 <HAL_GPIO_Init+0x260>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d007      	beq.n	8006e76 <HAL_GPIO_Init+0x212>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <HAL_GPIO_Init+0x264>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d101      	bne.n	8006e72 <HAL_GPIO_Init+0x20e>
 8006e6e:	2309      	movs	r3, #9
 8006e70:	e02d      	b.n	8006ece <HAL_GPIO_Init+0x26a>
 8006e72:	230a      	movs	r3, #10
 8006e74:	e02b      	b.n	8006ece <HAL_GPIO_Init+0x26a>
 8006e76:	2308      	movs	r3, #8
 8006e78:	e029      	b.n	8006ece <HAL_GPIO_Init+0x26a>
 8006e7a:	2307      	movs	r3, #7
 8006e7c:	e027      	b.n	8006ece <HAL_GPIO_Init+0x26a>
 8006e7e:	2306      	movs	r3, #6
 8006e80:	e025      	b.n	8006ece <HAL_GPIO_Init+0x26a>
 8006e82:	2305      	movs	r3, #5
 8006e84:	e023      	b.n	8006ece <HAL_GPIO_Init+0x26a>
 8006e86:	2304      	movs	r3, #4
 8006e88:	e021      	b.n	8006ece <HAL_GPIO_Init+0x26a>
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e01f      	b.n	8006ece <HAL_GPIO_Init+0x26a>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e01d      	b.n	8006ece <HAL_GPIO_Init+0x26a>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e01b      	b.n	8006ece <HAL_GPIO_Init+0x26a>
 8006e96:	bf00      	nop
 8006e98:	58000080 	.word	0x58000080
 8006e9c:	58024400 	.word	0x58024400
 8006ea0:	58000400 	.word	0x58000400
 8006ea4:	58020000 	.word	0x58020000
 8006ea8:	58020400 	.word	0x58020400
 8006eac:	58020800 	.word	0x58020800
 8006eb0:	58020c00 	.word	0x58020c00
 8006eb4:	58021000 	.word	0x58021000
 8006eb8:	58021400 	.word	0x58021400
 8006ebc:	58021800 	.word	0x58021800
 8006ec0:	58021c00 	.word	0x58021c00
 8006ec4:	58022000 	.word	0x58022000
 8006ec8:	58022400 	.word	0x58022400
 8006ecc:	2300      	movs	r3, #0
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	f002 0203 	and.w	r2, r2, #3
 8006ed4:	0092      	lsls	r2, r2, #2
 8006ed6:	4093      	lsls	r3, r2
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ede:	4938      	ldr	r1, [pc, #224]	; (8006fc0 <HAL_GPIO_Init+0x35c>)
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	089b      	lsrs	r3, r3, #2
 8006ee4:	3302      	adds	r3, #2
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	43db      	mvns	r3, r3
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	4013      	ands	r3, r2
 8006f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	43db      	mvns	r3, r3
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	4013      	ands	r3, r2
 8006f50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d003      	beq.n	8006f94 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f47f ae63 	bne.w	8006c78 <HAL_GPIO_Init+0x14>
  }
}
 8006fb2:	bf00      	nop
 8006fb4:	3724      	adds	r7, #36	; 0x24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	58000400 	.word	0x58000400

08006fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691a      	ldr	r2, [r3, #16]
 8006fd4:	887b      	ldrh	r3, [r7, #2]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	73fb      	strb	r3, [r7, #15]
 8006fe0:	e001      	b.n	8006fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	807b      	strh	r3, [r7, #2]
 8007000:	4613      	mov	r3, r2
 8007002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007004:	787b      	ldrb	r3, [r7, #1]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800700a:	887a      	ldrh	r2, [r7, #2]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007010:	e003      	b.n	800701a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007012:	887b      	ldrh	r3, [r7, #2]
 8007014:	041a      	lsls	r2, r3, #16
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	619a      	str	r2, [r3, #24]
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	460b      	mov	r3, r1
 8007030:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	695a      	ldr	r2, [r3, #20]
 8007036:	887b      	ldrh	r3, [r7, #2]
 8007038:	401a      	ands	r2, r3
 800703a:	887b      	ldrh	r3, [r7, #2]
 800703c:	429a      	cmp	r2, r3
 800703e:	d104      	bne.n	800704a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007040:	887b      	ldrh	r3, [r7, #2]
 8007042:	041a      	lsls	r2, r3, #16
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8007048:	e002      	b.n	8007050 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800704a:	887a      	ldrh	r2, [r7, #2]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	619a      	str	r2, [r3, #24]
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800706a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800706e:	88fb      	ldrh	r3, [r7, #6]
 8007070:	4013      	ands	r3, r2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d008      	beq.n	8007088 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800707a:	88fb      	ldrh	r3, [r7, #6]
 800707c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007080:	88fb      	ldrh	r3, [r7, #6]
 8007082:	4618      	mov	r0, r3
 8007084:	f7fb fd8c 	bl	8002ba0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007088:	bf00      	nop
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007098:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800709a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800709e:	4a0c      	ldr	r2, [pc, #48]	; (80070d0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80070a0:	f043 0302 	orr.w	r3, r3, #2
 80070a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80070a8:	4b09      	ldr	r3, [pc, #36]	; (80070d0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80070aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80070b6:	4b07      	ldr	r3, [pc, #28]	; (80070d4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	4906      	ldr	r1, [pc, #24]	; (80070d4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4313      	orrs	r3, r2
 80070c0:	604b      	str	r3, [r1, #4]
}
 80070c2:	bf00      	nop
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	58024400 	.word	0x58024400
 80070d4:	58000400 	.word	0x58000400

080070d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80070d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070da:	b08f      	sub	sp, #60	; 0x3c
 80070dc:	af0a      	add	r7, sp, #40	; 0x28
 80070de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e116      	b.n	8007318 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d106      	bne.n	800710a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f010 fe4d 	bl	8017da4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2203      	movs	r2, #3
 800710e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711a:	2b00      	cmp	r3, #0
 800711c:	d102      	bne.n	8007124 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4618      	mov	r0, r3
 800712a:	f009 fe52 	bl	8010dd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	687e      	ldr	r6, [r7, #4]
 8007136:	466d      	mov	r5, sp
 8007138:	f106 0410 	add.w	r4, r6, #16
 800713c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800713e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007144:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007148:	e885 0003 	stmia.w	r5, {r0, r1}
 800714c:	1d33      	adds	r3, r6, #4
 800714e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007150:	6838      	ldr	r0, [r7, #0]
 8007152:	f009 fd29 	bl	8010ba8 <USB_CoreInit>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d005      	beq.n	8007168 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e0d7      	b.n	8007318 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2100      	movs	r1, #0
 800716e:	4618      	mov	r0, r3
 8007170:	f009 fe40 	bl	8010df4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]
 8007178:	e04a      	b.n	8007210 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800717a:	7bfa      	ldrb	r2, [r7, #15]
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	4613      	mov	r3, r2
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	1a9b      	subs	r3, r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	440b      	add	r3, r1
 8007188:	333d      	adds	r3, #61	; 0x3d
 800718a:	2201      	movs	r2, #1
 800718c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800718e:	7bfa      	ldrb	r2, [r7, #15]
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	4613      	mov	r3, r2
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	1a9b      	subs	r3, r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	333c      	adds	r3, #60	; 0x3c
 800719e:	7bfa      	ldrb	r2, [r7, #15]
 80071a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80071a2:	7bfa      	ldrb	r2, [r7, #15]
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	b298      	uxth	r0, r3
 80071a8:	6879      	ldr	r1, [r7, #4]
 80071aa:	4613      	mov	r3, r2
 80071ac:	00db      	lsls	r3, r3, #3
 80071ae:	1a9b      	subs	r3, r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	440b      	add	r3, r1
 80071b4:	3342      	adds	r3, #66	; 0x42
 80071b6:	4602      	mov	r2, r0
 80071b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80071ba:	7bfa      	ldrb	r2, [r7, #15]
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	4613      	mov	r3, r2
 80071c0:	00db      	lsls	r3, r3, #3
 80071c2:	1a9b      	subs	r3, r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	440b      	add	r3, r1
 80071c8:	333f      	adds	r3, #63	; 0x3f
 80071ca:	2200      	movs	r2, #0
 80071cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80071ce:	7bfa      	ldrb	r2, [r7, #15]
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	4613      	mov	r3, r2
 80071d4:	00db      	lsls	r3, r3, #3
 80071d6:	1a9b      	subs	r3, r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	440b      	add	r3, r1
 80071dc:	3344      	adds	r3, #68	; 0x44
 80071de:	2200      	movs	r2, #0
 80071e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80071e2:	7bfa      	ldrb	r2, [r7, #15]
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	4613      	mov	r3, r2
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	1a9b      	subs	r3, r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	440b      	add	r3, r1
 80071f0:	3348      	adds	r3, #72	; 0x48
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80071f6:	7bfa      	ldrb	r2, [r7, #15]
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	1a9b      	subs	r3, r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	3350      	adds	r3, #80	; 0x50
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	3301      	adds	r3, #1
 800720e:	73fb      	strb	r3, [r7, #15]
 8007210:	7bfa      	ldrb	r2, [r7, #15]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	429a      	cmp	r2, r3
 8007218:	d3af      	bcc.n	800717a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800721a:	2300      	movs	r3, #0
 800721c:	73fb      	strb	r3, [r7, #15]
 800721e:	e044      	b.n	80072aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007220:	7bfa      	ldrb	r2, [r7, #15]
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	4613      	mov	r3, r2
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	1a9b      	subs	r3, r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	440b      	add	r3, r1
 800722e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007232:	2200      	movs	r2, #0
 8007234:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007236:	7bfa      	ldrb	r2, [r7, #15]
 8007238:	6879      	ldr	r1, [r7, #4]
 800723a:	4613      	mov	r3, r2
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	1a9b      	subs	r3, r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	440b      	add	r3, r1
 8007244:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007248:	7bfa      	ldrb	r2, [r7, #15]
 800724a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800724c:	7bfa      	ldrb	r2, [r7, #15]
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	4613      	mov	r3, r2
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	1a9b      	subs	r3, r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	440b      	add	r3, r1
 800725a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007262:	7bfa      	ldrb	r2, [r7, #15]
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	1a9b      	subs	r3, r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007278:	7bfa      	ldrb	r2, [r7, #15]
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	4613      	mov	r3, r2
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	1a9b      	subs	r3, r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800728e:	7bfa      	ldrb	r2, [r7, #15]
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	00db      	lsls	r3, r3, #3
 8007296:	1a9b      	subs	r3, r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	440b      	add	r3, r1
 800729c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	3301      	adds	r3, #1
 80072a8:	73fb      	strb	r3, [r7, #15]
 80072aa:	7bfa      	ldrb	r2, [r7, #15]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d3b5      	bcc.n	8007220 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	603b      	str	r3, [r7, #0]
 80072ba:	687e      	ldr	r6, [r7, #4]
 80072bc:	466d      	mov	r5, sp
 80072be:	f106 0410 	add.w	r4, r6, #16
 80072c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80072ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80072d2:	1d33      	adds	r3, r6, #4
 80072d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072d6:	6838      	ldr	r0, [r7, #0]
 80072d8:	f009 fdb6 	bl	8010e48 <USB_DevInit>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d005      	beq.n	80072ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2202      	movs	r2, #2
 80072e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e014      	b.n	8007318 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007302:	2b01      	cmp	r3, #1
 8007304:	d102      	bne.n	800730c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 f8be 	bl	8008488 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4618      	mov	r0, r3
 8007312:	f00a fdf5 	bl	8011f00 <USB_DevDisconnect>

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007320 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_PCD_Start+0x1c>
 8007338:	2302      	movs	r3, #2
 800733a:	e020      	b.n	800737e <HAL_PCD_Start+0x5e>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007348:	2b01      	cmp	r3, #1
 800734a:	d109      	bne.n	8007360 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007350:	2b01      	cmp	r3, #1
 8007352:	d005      	beq.n	8007360 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007358:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4618      	mov	r0, r3
 8007366:	f00a fdb3 	bl	8011ed0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4618      	mov	r0, r3
 8007370:	f009 fd1e 	bl	8010db0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007386:	b590      	push	{r4, r7, lr}
 8007388:	b08d      	sub	sp, #52	; 0x34
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4618      	mov	r0, r3
 800739e:	f00a fe5a 	bl	8012056 <USB_GetMode>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f040 83ca 	bne.w	8007b3e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f00a fdbe 	bl	8011f30 <USB_ReadInterrupts>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 83c0 	beq.w	8007b3c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f00a fdb5 	bl	8011f30 <USB_ReadInterrupts>
 80073c6:	4603      	mov	r3, r0
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d107      	bne.n	80073e0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695a      	ldr	r2, [r3, #20]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f002 0202 	and.w	r2, r2, #2
 80073de:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f00a fda3 	bl	8011f30 <USB_ReadInterrupts>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f003 0310 	and.w	r3, r3, #16
 80073f0:	2b10      	cmp	r3, #16
 80073f2:	d161      	bne.n	80074b8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0210 	bic.w	r2, r2, #16
 8007402:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	f003 020f 	and.w	r2, r3, #15
 8007410:	4613      	mov	r3, r2
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	1a9b      	subs	r3, r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	4413      	add	r3, r2
 8007420:	3304      	adds	r3, #4
 8007422:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	0c5b      	lsrs	r3, r3, #17
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	2b02      	cmp	r3, #2
 800742e:	d124      	bne.n	800747a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007436:	4013      	ands	r3, r2
 8007438:	2b00      	cmp	r3, #0
 800743a:	d035      	beq.n	80074a8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	091b      	lsrs	r3, r3, #4
 8007444:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800744a:	b29b      	uxth	r3, r3
 800744c:	461a      	mov	r2, r3
 800744e:	6a38      	ldr	r0, [r7, #32]
 8007450:	f00a fc1b 	bl	8011c8a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	091b      	lsrs	r3, r3, #4
 800745c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007460:	441a      	add	r2, r3
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	699a      	ldr	r2, [r3, #24]
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	091b      	lsrs	r3, r3, #4
 800746e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007472:	441a      	add	r2, r3
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	619a      	str	r2, [r3, #24]
 8007478:	e016      	b.n	80074a8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	0c5b      	lsrs	r3, r3, #17
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	2b06      	cmp	r3, #6
 8007484:	d110      	bne.n	80074a8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800748c:	2208      	movs	r2, #8
 800748e:	4619      	mov	r1, r3
 8007490:	6a38      	ldr	r0, [r7, #32]
 8007492:	f00a fbfa 	bl	8011c8a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	699a      	ldr	r2, [r3, #24]
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	091b      	lsrs	r3, r3, #4
 800749e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074a2:	441a      	add	r2, r3
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	699a      	ldr	r2, [r3, #24]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0210 	orr.w	r2, r2, #16
 80074b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4618      	mov	r0, r3
 80074be:	f00a fd37 	bl	8011f30 <USB_ReadInterrupts>
 80074c2:	4603      	mov	r3, r0
 80074c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80074cc:	d16e      	bne.n	80075ac <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f00a fd3d 	bl	8011f56 <USB_ReadDevAllOutEpInterrupt>
 80074dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80074de:	e062      	b.n	80075a6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d057      	beq.n	800759a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f0:	b2d2      	uxtb	r2, r2
 80074f2:	4611      	mov	r1, r2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f00a fd62 	bl	8011fbe <USB_ReadDevOutEPInterrupt>
 80074fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00c      	beq.n	8007520 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007512:	461a      	mov	r2, r3
 8007514:	2301      	movs	r3, #1
 8007516:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fe0a 	bl	8008134 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	f003 0308 	and.w	r3, r3, #8
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00c      	beq.n	8007544 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007536:	461a      	mov	r2, r3
 8007538:	2308      	movs	r3, #8
 800753a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800753c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 ff04 	bl	800834c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	2b00      	cmp	r3, #0
 800754c:	d008      	beq.n	8007560 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755a:	461a      	mov	r2, r3
 800755c:	2310      	movs	r3, #16
 800755e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b00      	cmp	r3, #0
 8007568:	d008      	beq.n	800757c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007576:	461a      	mov	r2, r3
 8007578:	2320      	movs	r3, #32
 800757a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d009      	beq.n	800759a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007592:	461a      	mov	r2, r3
 8007594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007598:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	3301      	adds	r3, #1
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	085b      	lsrs	r3, r3, #1
 80075a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80075a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d199      	bne.n	80074e0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f00a fcbd 	bl	8011f30 <USB_ReadInterrupts>
 80075b6:	4603      	mov	r3, r0
 80075b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075c0:	f040 80c0 	bne.w	8007744 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f00a fcde 	bl	8011f8a <USB_ReadDevAllInEpInterrupt>
 80075ce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80075d4:	e0b2      	b.n	800773c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80075d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 80a7 	beq.w	8007730 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e8:	b2d2      	uxtb	r2, r2
 80075ea:	4611      	mov	r1, r2
 80075ec:	4618      	mov	r0, r3
 80075ee:	f00a fd04 	bl	8011ffa <USB_ReadDevInEPInterrupt>
 80075f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d057      	beq.n	80076ae <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	f003 030f 	and.w	r3, r3, #15
 8007604:	2201      	movs	r2, #1
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	43db      	mvns	r3, r3
 8007618:	69f9      	ldr	r1, [r7, #28]
 800761a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800761e:	4013      	ands	r3, r2
 8007620:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762e:	461a      	mov	r2, r3
 8007630:	2301      	movs	r3, #1
 8007632:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d132      	bne.n	80076a2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800763c:	6879      	ldr	r1, [r7, #4]
 800763e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007640:	4613      	mov	r3, r2
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	440b      	add	r3, r1
 800764a:	3348      	adds	r3, #72	; 0x48
 800764c:	6819      	ldr	r1, [r3, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007652:	4613      	mov	r3, r2
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	1a9b      	subs	r3, r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4403      	add	r3, r0
 800765c:	3344      	adds	r3, #68	; 0x44
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4419      	add	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007666:	4613      	mov	r3, r2
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	1a9b      	subs	r3, r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4403      	add	r3, r0
 8007670:	3348      	adds	r3, #72	; 0x48
 8007672:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	2b00      	cmp	r3, #0
 8007678:	d113      	bne.n	80076a2 <HAL_PCD_IRQHandler+0x31c>
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767e:	4613      	mov	r3, r2
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	1a9b      	subs	r3, r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	440b      	add	r3, r1
 8007688:	3350      	adds	r3, #80	; 0x50
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d108      	bne.n	80076a2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6818      	ldr	r0, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800769a:	461a      	mov	r2, r3
 800769c:	2101      	movs	r1, #1
 800769e:	f00a fd0d 	bl	80120bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f010 fbfa 	bl	8017ea2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f003 0308 	and.w	r3, r3, #8
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d008      	beq.n	80076ca <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c4:	461a      	mov	r2, r3
 80076c6:	2308      	movs	r3, #8
 80076c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	f003 0310 	and.w	r3, r3, #16
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d008      	beq.n	80076e6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e0:	461a      	mov	r2, r3
 80076e2:	2310      	movs	r3, #16
 80076e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d008      	beq.n	8007702 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fc:	461a      	mov	r2, r3
 80076fe:	2340      	movs	r3, #64	; 0x40
 8007700:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d008      	beq.n	800771e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007718:	461a      	mov	r2, r3
 800771a:	2302      	movs	r3, #2
 800771c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fc75 	bl	800801a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	3301      	adds	r3, #1
 8007734:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	085b      	lsrs	r3, r3, #1
 800773a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	2b00      	cmp	r3, #0
 8007740:	f47f af49 	bne.w	80075d6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4618      	mov	r0, r3
 800774a:	f00a fbf1 	bl	8011f30 <USB_ReadInterrupts>
 800774e:	4603      	mov	r3, r0
 8007750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007758:	d122      	bne.n	80077a0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007768:	f023 0301 	bic.w	r3, r3, #1
 800776c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007774:	2b01      	cmp	r3, #1
 8007776:	d108      	bne.n	800778a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007780:	2100      	movs	r1, #0
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fea4 	bl	80084d0 <HAL_PCDEx_LPM_Callback>
 8007788:	e002      	b.n	8007790 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f010 fc00 	bl	8017f90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	695a      	ldr	r2, [r3, #20]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800779e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f00a fbc3 	bl	8011f30 <USB_ReadInterrupts>
 80077aa:	4603      	mov	r3, r0
 80077ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b4:	d112      	bne.n	80077dc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d102      	bne.n	80077cc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f010 fbbc 	bl	8017f44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	695a      	ldr	r2, [r3, #20]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80077da:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f00a fba5 	bl	8011f30 <USB_ReadInterrupts>
 80077e6:	4603      	mov	r3, r0
 80077e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077f0:	d121      	bne.n	8007836 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695a      	ldr	r2, [r3, #20]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007800:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d111      	bne.n	8007830 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781a:	089b      	lsrs	r3, r3, #2
 800781c:	f003 020f 	and.w	r2, r3, #15
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007826:	2101      	movs	r1, #1
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fe51 	bl	80084d0 <HAL_PCDEx_LPM_Callback>
 800782e:	e002      	b.n	8007836 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f010 fb87 	bl	8017f44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4618      	mov	r0, r3
 800783c:	f00a fb78 	bl	8011f30 <USB_ReadInterrupts>
 8007840:	4603      	mov	r3, r0
 8007842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800784a:	f040 80c7 	bne.w	80079dc <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	69fa      	ldr	r2, [r7, #28]
 8007858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800785c:	f023 0301 	bic.w	r3, r3, #1
 8007860:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2110      	movs	r1, #16
 8007868:	4618      	mov	r0, r3
 800786a:	f009 fc4b 	bl	8011104 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800786e:	2300      	movs	r3, #0
 8007870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007872:	e056      	b.n	8007922 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007880:	461a      	mov	r2, r3
 8007882:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007886:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007898:	0151      	lsls	r1, r2, #5
 800789a:	69fa      	ldr	r2, [r7, #28]
 800789c:	440a      	add	r2, r1
 800789e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078a6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80078a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b8:	0151      	lsls	r1, r2, #5
 80078ba:	69fa      	ldr	r2, [r7, #28]
 80078bc:	440a      	add	r2, r1
 80078be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d4:	461a      	mov	r2, r3
 80078d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ec:	0151      	lsls	r1, r2, #5
 80078ee:	69fa      	ldr	r2, [r7, #28]
 80078f0:	440a      	add	r2, r1
 80078f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800790c:	0151      	lsls	r1, r2, #5
 800790e:	69fa      	ldr	r2, [r7, #28]
 8007910:	440a      	add	r2, r1
 8007912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007916:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800791a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791e:	3301      	adds	r3, #1
 8007920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007928:	429a      	cmp	r2, r3
 800792a:	d3a3      	bcc.n	8007874 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	69fa      	ldr	r2, [r7, #28]
 8007936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800793a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800793e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007944:	2b00      	cmp	r3, #0
 8007946:	d016      	beq.n	8007976 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800794e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007952:	69fa      	ldr	r2, [r7, #28]
 8007954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007958:	f043 030b 	orr.w	r3, r3, #11
 800795c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800796e:	f043 030b 	orr.w	r3, r3, #11
 8007972:	6453      	str	r3, [r2, #68]	; 0x44
 8007974:	e015      	b.n	80079a2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800797c:	695a      	ldr	r2, [r3, #20]
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007984:	4619      	mov	r1, r3
 8007986:	f242 032b 	movw	r3, #8235	; 0x202b
 800798a:	4313      	orrs	r3, r2
 800798c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	69fa      	ldr	r2, [r7, #28]
 8007998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800799c:	f043 030b 	orr.w	r3, r3, #11
 80079a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	69fa      	ldr	r2, [r7, #28]
 80079ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80079b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6818      	ldr	r0, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80079c6:	461a      	mov	r2, r3
 80079c8:	f00a fb78 	bl	80120bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	695a      	ldr	r2, [r3, #20]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80079da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f00a faa5 	bl	8011f30 <USB_ReadInterrupts>
 80079e6:	4603      	mov	r3, r0
 80079e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079f0:	d124      	bne.n	8007a3c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f00a fb3c 	bl	8012074 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f009 fbe0 	bl	80111c6 <USB_GetDevSpeed>
 8007a06:	4603      	mov	r3, r0
 8007a08:	461a      	mov	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681c      	ldr	r4, [r3, #0]
 8007a12:	f001 fdd9 	bl	80095c8 <HAL_RCC_GetHCLKFreq>
 8007a16:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	461a      	mov	r2, r3
 8007a20:	4620      	mov	r0, r4
 8007a22:	f009 f923 	bl	8010c6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f010 fa63 	bl	8017ef2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	695a      	ldr	r2, [r3, #20]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f00a fa75 	bl	8011f30 <USB_ReadInterrupts>
 8007a46:	4603      	mov	r3, r0
 8007a48:	f003 0308 	and.w	r3, r3, #8
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	d10a      	bne.n	8007a66 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f010 fa40 	bl	8017ed6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	695a      	ldr	r2, [r3, #20]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f002 0208 	and.w	r2, r2, #8
 8007a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f00a fa60 	bl	8011f30 <USB_ReadInterrupts>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a7a:	d10f      	bne.n	8007a9c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f010 faa2 	bl	8017fd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	695a      	ldr	r2, [r3, #20]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f00a fa45 	bl	8011f30 <USB_ReadInterrupts>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ab0:	d10f      	bne.n	8007ad2 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f010 fa75 	bl	8017fac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	695a      	ldr	r2, [r3, #20]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f00a fa2a 	bl	8011f30 <USB_ReadInterrupts>
 8007adc:	4603      	mov	r3, r0
 8007ade:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae6:	d10a      	bne.n	8007afe <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f010 fa83 	bl	8017ff4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	695a      	ldr	r2, [r3, #20]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f00a fa14 	bl	8011f30 <USB_ReadInterrupts>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d115      	bne.n	8007b3e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f010 fa73 	bl	8018010 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6859      	ldr	r1, [r3, #4]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
 8007b3a:	e000      	b.n	8007b3e <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007b3c:	bf00      	nop
    }
  }
}
 8007b3e:	3734      	adds	r7, #52	; 0x34
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd90      	pop	{r4, r7, pc}

08007b44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d101      	bne.n	8007b5e <HAL_PCD_SetAddress+0x1a>
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	e013      	b.n	8007b86 <HAL_PCD_SetAddress+0x42>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	78fa      	ldrb	r2, [r7, #3]
 8007b6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	78fa      	ldrb	r2, [r7, #3]
 8007b74:	4611      	mov	r1, r2
 8007b76:	4618      	mov	r0, r3
 8007b78:	f00a f984 	bl	8011e84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	4608      	mov	r0, r1
 8007b98:	4611      	mov	r1, r2
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	70fb      	strb	r3, [r7, #3]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	803b      	strh	r3, [r7, #0]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	da0f      	bge.n	8007bd4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	f003 020f 	and.w	r2, r3, #15
 8007bba:	4613      	mov	r3, r2
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	1a9b      	subs	r3, r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	3338      	adds	r3, #56	; 0x38
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	3304      	adds	r3, #4
 8007bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	705a      	strb	r2, [r3, #1]
 8007bd2:	e00f      	b.n	8007bf4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	f003 020f 	and.w	r2, r3, #15
 8007bda:	4613      	mov	r3, r2
 8007bdc:	00db      	lsls	r3, r3, #3
 8007bde:	1a9b      	subs	r3, r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	4413      	add	r3, r2
 8007bea:	3304      	adds	r3, #4
 8007bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	f003 030f 	and.w	r3, r3, #15
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007c00:	883a      	ldrh	r2, [r7, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	78ba      	ldrb	r2, [r7, #2]
 8007c0a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	785b      	ldrb	r3, [r3, #1]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d004      	beq.n	8007c1e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007c1e:	78bb      	ldrb	r3, [r7, #2]
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d102      	bne.n	8007c2a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d101      	bne.n	8007c38 <HAL_PCD_EP_Open+0xaa>
 8007c34:	2302      	movs	r3, #2
 8007c36:	e00e      	b.n	8007c56 <HAL_PCD_EP_Open+0xc8>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68f9      	ldr	r1, [r7, #12]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f009 fae2 	bl	8011210 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007c54:	7afb      	ldrb	r3, [r7, #11]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	460b      	mov	r3, r1
 8007c68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	da0f      	bge.n	8007c92 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c72:	78fb      	ldrb	r3, [r7, #3]
 8007c74:	f003 020f 	and.w	r2, r3, #15
 8007c78:	4613      	mov	r3, r2
 8007c7a:	00db      	lsls	r3, r3, #3
 8007c7c:	1a9b      	subs	r3, r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	3338      	adds	r3, #56	; 0x38
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	4413      	add	r3, r2
 8007c86:	3304      	adds	r3, #4
 8007c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	705a      	strb	r2, [r3, #1]
 8007c90:	e00f      	b.n	8007cb2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	f003 020f 	and.w	r2, r3, #15
 8007c98:	4613      	mov	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	1a9b      	subs	r3, r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	3304      	adds	r3, #4
 8007caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007cb2:	78fb      	ldrb	r3, [r7, #3]
 8007cb4:	f003 030f 	and.w	r3, r3, #15
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d101      	bne.n	8007ccc <HAL_PCD_EP_Close+0x6e>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	e00e      	b.n	8007cea <HAL_PCD_EP_Close+0x8c>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68f9      	ldr	r1, [r7, #12]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f009 fb20 	bl	8011320 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b086      	sub	sp, #24
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	603b      	str	r3, [r7, #0]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d02:	7afb      	ldrb	r3, [r7, #11]
 8007d04:	f003 020f 	and.w	r2, r3, #15
 8007d08:	4613      	mov	r3, r2
 8007d0a:	00db      	lsls	r3, r3, #3
 8007d0c:	1a9b      	subs	r3, r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4413      	add	r3, r2
 8007d18:	3304      	adds	r3, #4
 8007d1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2200      	movs	r2, #0
 8007d32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d34:	7afb      	ldrb	r3, [r7, #11]
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d102      	bne.n	8007d4e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d4e:	7afb      	ldrb	r3, [r7, #11]
 8007d50:	f003 030f 	and.w	r3, r3, #15
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d109      	bne.n	8007d6c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6818      	ldr	r0, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	461a      	mov	r2, r3
 8007d64:	6979      	ldr	r1, [r7, #20]
 8007d66:	f009 fe03 	bl	8011970 <USB_EP0StartXfer>
 8007d6a:	e008      	b.n	8007d7e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6818      	ldr	r0, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	461a      	mov	r2, r3
 8007d78:	6979      	ldr	r1, [r7, #20]
 8007d7a:	f009 fbad 	bl	80114d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007d94:	78fb      	ldrb	r3, [r7, #3]
 8007d96:	f003 020f 	and.w	r2, r3, #15
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	1a9b      	subs	r3, r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	440b      	add	r3, r1
 8007da6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007daa:	681b      	ldr	r3, [r3, #0]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	603b      	str	r3, [r7, #0]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dc8:	7afb      	ldrb	r3, [r7, #11]
 8007dca:	f003 020f 	and.w	r2, r3, #15
 8007dce:	4613      	mov	r3, r2
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	1a9b      	subs	r3, r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	3338      	adds	r3, #56	; 0x38
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4413      	add	r3, r2
 8007ddc:	3304      	adds	r3, #4
 8007dde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	2200      	movs	r2, #0
 8007df0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2201      	movs	r2, #1
 8007df6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007df8:	7afb      	ldrb	r3, [r7, #11]
 8007dfa:	f003 030f 	and.w	r3, r3, #15
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d102      	bne.n	8007e12 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e12:	7afb      	ldrb	r3, [r7, #11]
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d109      	bne.n	8007e30 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6818      	ldr	r0, [r3, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	461a      	mov	r2, r3
 8007e28:	6979      	ldr	r1, [r7, #20]
 8007e2a:	f009 fda1 	bl	8011970 <USB_EP0StartXfer>
 8007e2e:	e008      	b.n	8007e42 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6818      	ldr	r0, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	6979      	ldr	r1, [r7, #20]
 8007e3e:	f009 fb4b 	bl	80114d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007e58:	78fb      	ldrb	r3, [r7, #3]
 8007e5a:	f003 020f 	and.w	r2, r3, #15
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d901      	bls.n	8007e6a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e050      	b.n	8007f0c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	da0f      	bge.n	8007e92 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	f003 020f 	and.w	r2, r3, #15
 8007e78:	4613      	mov	r3, r2
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	1a9b      	subs	r3, r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	3338      	adds	r3, #56	; 0x38
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	4413      	add	r3, r2
 8007e86:	3304      	adds	r3, #4
 8007e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	705a      	strb	r2, [r3, #1]
 8007e90:	e00d      	b.n	8007eae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e92:	78fa      	ldrb	r2, [r7, #3]
 8007e94:	4613      	mov	r3, r2
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	1a9b      	subs	r3, r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	f003 030f 	and.w	r3, r3, #15
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d101      	bne.n	8007ece <HAL_PCD_EP_SetStall+0x82>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e01e      	b.n	8007f0c <HAL_PCD_EP_SetStall+0xc0>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68f9      	ldr	r1, [r7, #12]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f009 fefd 	bl	8011cdc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007ee2:	78fb      	ldrb	r3, [r7, #3]
 8007ee4:	f003 030f 	and.w	r3, r3, #15
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10a      	bne.n	8007f02 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6818      	ldr	r0, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	b2d9      	uxtb	r1, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007efc:	461a      	mov	r2, r3
 8007efe:	f00a f8dd 	bl	80120bc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	f003 020f 	and.w	r2, r3, #15
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d901      	bls.n	8007f32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e042      	b.n	8007fb8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	da0f      	bge.n	8007f5a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	f003 020f 	and.w	r2, r3, #15
 8007f40:	4613      	mov	r3, r2
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	1a9b      	subs	r3, r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	3338      	adds	r3, #56	; 0x38
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	3304      	adds	r3, #4
 8007f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2201      	movs	r2, #1
 8007f56:	705a      	strb	r2, [r3, #1]
 8007f58:	e00f      	b.n	8007f7a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	f003 020f 	and.w	r2, r3, #15
 8007f60:	4613      	mov	r3, r2
 8007f62:	00db      	lsls	r3, r3, #3
 8007f64:	1a9b      	subs	r3, r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	4413      	add	r3, r2
 8007f70:	3304      	adds	r3, #4
 8007f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d101      	bne.n	8007f9a <HAL_PCD_EP_ClrStall+0x86>
 8007f96:	2302      	movs	r3, #2
 8007f98:	e00e      	b.n	8007fb8 <HAL_PCD_EP_ClrStall+0xa4>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68f9      	ldr	r1, [r7, #12]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f009 ff05 	bl	8011db8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d101      	bne.n	8007fda <HAL_PCD_EP_Flush+0x1a>
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	e01b      	b.n	8008012 <HAL_PCD_EP_Flush+0x52>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8007fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	da09      	bge.n	8007ffe <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	f003 030f 	and.w	r3, r3, #15
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	f009 f884 	bl	8011104 <USB_FlushTxFifo>
 8007ffc:	e004      	b.n	8008008 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4618      	mov	r0, r3
 8008004:	f009 f8a4 	bl	8011150 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b08a      	sub	sp, #40	; 0x28
 800801e:	af02      	add	r7, sp, #8
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	4613      	mov	r3, r2
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	1a9b      	subs	r3, r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	3338      	adds	r3, #56	; 0x38
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	4413      	add	r3, r2
 800803e:	3304      	adds	r3, #4
 8008040:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	699a      	ldr	r2, [r3, #24]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	429a      	cmp	r2, r3
 800804c:	d901      	bls.n	8008052 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e06c      	b.n	800812c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	695a      	ldr	r2, [r3, #20]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	69fa      	ldr	r2, [r7, #28]
 8008064:	429a      	cmp	r2, r3
 8008066:	d902      	bls.n	800806e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	3303      	adds	r3, #3
 8008072:	089b      	lsrs	r3, r3, #2
 8008074:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008076:	e02b      	b.n	80080d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	695a      	ldr	r2, [r3, #20]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	69fa      	ldr	r2, [r7, #28]
 800808a:	429a      	cmp	r2, r3
 800808c:	d902      	bls.n	8008094 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	3303      	adds	r3, #3
 8008098:	089b      	lsrs	r3, r3, #2
 800809a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	68d9      	ldr	r1, [r3, #12]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	4603      	mov	r3, r0
 80080b2:	6978      	ldr	r0, [r7, #20]
 80080b4:	f009 fdb4 	bl	8011c20 <USB_WritePacket>

    ep->xfer_buff  += len;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	441a      	add	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	699a      	ldr	r2, [r3, #24]
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	441a      	add	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	b29b      	uxth	r3, r3
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d809      	bhi.n	80080fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	699a      	ldr	r2, [r3, #24]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d203      	bcs.n	80080fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1be      	bne.n	8008078 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	695a      	ldr	r2, [r3, #20]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	429a      	cmp	r2, r3
 8008104:	d811      	bhi.n	800812a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	2201      	movs	r2, #1
 800810e:	fa02 f303 	lsl.w	r3, r2, r3
 8008112:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800811a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	43db      	mvns	r3, r3
 8008120:	6939      	ldr	r1, [r7, #16]
 8008122:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008126:	4013      	ands	r3, r2
 8008128:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3720      	adds	r7, #32
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	333c      	adds	r3, #60	; 0x3c
 800814c:	3304      	adds	r3, #4
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	4413      	add	r3, r2
 800815a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	2b01      	cmp	r3, #1
 8008168:	f040 80a0 	bne.w	80082ac <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f003 0308 	and.w	r3, r3, #8
 8008172:	2b00      	cmp	r3, #0
 8008174:	d015      	beq.n	80081a2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4a72      	ldr	r2, [pc, #456]	; (8008344 <PCD_EP_OutXfrComplete_int+0x210>)
 800817a:	4293      	cmp	r3, r2
 800817c:	f240 80dd 	bls.w	800833a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 80d7 	beq.w	800833a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008198:	461a      	mov	r2, r3
 800819a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800819e:	6093      	str	r3, [r2, #8]
 80081a0:	e0cb      	b.n	800833a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	f003 0320 	and.w	r3, r3, #32
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d009      	beq.n	80081c0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b8:	461a      	mov	r2, r3
 80081ba:	2320      	movs	r3, #32
 80081bc:	6093      	str	r3, [r2, #8]
 80081be:	e0bc      	b.n	800833a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f040 80b7 	bne.w	800833a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4a5d      	ldr	r2, [pc, #372]	; (8008344 <PCD_EP_OutXfrComplete_int+0x210>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d90f      	bls.n	80081f4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ea:	461a      	mov	r2, r3
 80081ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081f0:	6093      	str	r3, [r2, #8]
 80081f2:	e0a2      	b.n	800833a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80081f4:	6879      	ldr	r1, [r7, #4]
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	1a9b      	subs	r3, r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	440b      	add	r3, r1
 8008202:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008206:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	0159      	lsls	r1, r3, #5
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	440b      	add	r3, r1
 8008210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800821a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	4613      	mov	r3, r2
 8008222:	00db      	lsls	r3, r3, #3
 8008224:	1a9b      	subs	r3, r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4403      	add	r3, r0
 800822a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800822e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	4613      	mov	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	440b      	add	r3, r1
 800823e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008242:	6819      	ldr	r1, [r3, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	4613      	mov	r3, r2
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4403      	add	r3, r0
 8008252:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4419      	add	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	4613      	mov	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	1a9b      	subs	r3, r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4403      	add	r3, r0
 8008268:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800826c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d114      	bne.n	800829e <PCD_EP_OutXfrComplete_int+0x16a>
 8008274:	6879      	ldr	r1, [r7, #4]
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	4613      	mov	r3, r2
 800827a:	00db      	lsls	r3, r3, #3
 800827c:	1a9b      	subs	r3, r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	440b      	add	r3, r1
 8008282:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d108      	bne.n	800829e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6818      	ldr	r0, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008296:	461a      	mov	r2, r3
 8008298:	2101      	movs	r1, #1
 800829a:	f009 ff0f 	bl	80120bc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f00f fde1 	bl	8017e6c <HAL_PCD_DataOutStageCallback>
 80082aa:	e046      	b.n	800833a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	4a26      	ldr	r2, [pc, #152]	; (8008348 <PCD_EP_OutXfrComplete_int+0x214>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d124      	bne.n	80082fe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00a      	beq.n	80082d4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ca:	461a      	mov	r2, r3
 80082cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082d0:	6093      	str	r3, [r2, #8]
 80082d2:	e032      	b.n	800833a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d008      	beq.n	80082f0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ea:	461a      	mov	r2, r3
 80082ec:	2320      	movs	r3, #32
 80082ee:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f00f fdb8 	bl	8017e6c <HAL_PCD_DataOutStageCallback>
 80082fc:	e01d      	b.n	800833a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d114      	bne.n	800832e <PCD_EP_OutXfrComplete_int+0x1fa>
 8008304:	6879      	ldr	r1, [r7, #4]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	4613      	mov	r3, r2
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	1a9b      	subs	r3, r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	440b      	add	r3, r1
 8008312:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d108      	bne.n	800832e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008326:	461a      	mov	r2, r3
 8008328:	2100      	movs	r1, #0
 800832a:	f009 fec7 	bl	80120bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	b2db      	uxtb	r3, r3
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f00f fd99 	bl	8017e6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3718      	adds	r7, #24
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	4f54300a 	.word	0x4f54300a
 8008348:	4f54310a 	.word	0x4f54310a

0800834c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	333c      	adds	r3, #60	; 0x3c
 8008364:	3304      	adds	r3, #4
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	015a      	lsls	r2, r3, #5
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	4413      	add	r3, r2
 8008372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4a15      	ldr	r2, [pc, #84]	; (80083d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d90e      	bls.n	80083a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008388:	2b00      	cmp	r3, #0
 800838a:	d009      	beq.n	80083a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008398:	461a      	mov	r2, r3
 800839a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800839e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f00f fd51 	bl	8017e48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4a0a      	ldr	r2, [pc, #40]	; (80083d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d90c      	bls.n	80083c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d108      	bne.n	80083c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80083c0:	461a      	mov	r2, r3
 80083c2:	2101      	movs	r1, #1
 80083c4:	f009 fe7a 	bl	80120bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3718      	adds	r7, #24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	4f54300a 	.word	0x4f54300a

080083d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	70fb      	strb	r3, [r7, #3]
 80083e4:	4613      	mov	r3, r2
 80083e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d107      	bne.n	8008406 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80083f6:	883b      	ldrh	r3, [r7, #0]
 80083f8:	0419      	lsls	r1, r3, #16
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	430a      	orrs	r2, r1
 8008402:	629a      	str	r2, [r3, #40]	; 0x28
 8008404:	e028      	b.n	8008458 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840c:	0c1b      	lsrs	r3, r3, #16
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	4413      	add	r3, r2
 8008412:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]
 8008418:	e00d      	b.n	8008436 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	3340      	adds	r3, #64	; 0x40
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	0c1b      	lsrs	r3, r3, #16
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	4413      	add	r3, r2
 800842e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	3301      	adds	r3, #1
 8008434:	73fb      	strb	r3, [r7, #15]
 8008436:	7bfa      	ldrb	r2, [r7, #15]
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	3b01      	subs	r3, #1
 800843c:	429a      	cmp	r2, r3
 800843e:	d3ec      	bcc.n	800841a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008440:	883b      	ldrh	r3, [r7, #0]
 8008442:	0418      	lsls	r0, r3, #16
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6819      	ldr	r1, [r3, #0]
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	3b01      	subs	r3, #1
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	4302      	orrs	r2, r0
 8008450:	3340      	adds	r3, #64	; 0x40
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	440b      	add	r3, r1
 8008456:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	460b      	mov	r3, r1
 8008470:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	887a      	ldrh	r2, [r7, #2]
 8008478:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084b6:	4b05      	ldr	r3, [pc, #20]	; (80084cc <HAL_PCDEx_ActivateLPM+0x44>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	10000003 	.word	0x10000003

080084d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80084ec:	4b05      	ldr	r3, [pc, #20]	; (8008504 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a04      	ldr	r2, [pc, #16]	; (8008504 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80084f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084f6:	6013      	str	r3, [r2, #0]
}
 80084f8:	bf00      	nop
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	58024800 	.word	0x58024800

08008508 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d069      	beq.n	80085ea <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 8008516:	4b38      	ldr	r3, [pc, #224]	; (80085f8 <HAL_PWR_ConfigPVD+0xf0>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4935      	ldr	r1, [pc, #212]	; (80085f8 <HAL_PWR_ConfigPVD+0xf0>)
 8008524:	4313      	orrs	r3, r2
 8008526:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 8008528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800852c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008538:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 800853c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008544:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800854c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 8008550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800855a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800855e:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 8008560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800856a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800856e:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d009      	beq.n	8008590 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 800857c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800858c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d009      	beq.n	80085b0 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 800859c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f003 0301 	and.w	r3, r3, #1
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d007      	beq.n	80085cc <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 80085bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ca:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d009      	beq.n	80085ec <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 80085d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085e6:	6053      	str	r3, [r2, #4]
 80085e8:	e000      	b.n	80085ec <HAL_PWR_ConfigPVD+0xe4>
    return;
 80085ea:	bf00      	nop
  }
}
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	58024800 	.word	0x58024800

080085fc <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 80085fc:	b480      	push	{r7}
 80085fe:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8008600:	4b05      	ldr	r3, [pc, #20]	; (8008618 <HAL_PWR_EnablePVD+0x1c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a04      	ldr	r2, [pc, #16]	; (8008618 <HAL_PWR_EnablePVD+0x1c>)
 8008606:	f043 0310 	orr.w	r3, r3, #16
 800860a:	6013      	str	r3, [r2, #0]
}
 800860c:	bf00      	nop
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	58024800 	.word	0x58024800

0800861c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008624:	4b19      	ldr	r3, [pc, #100]	; (800868c <HAL_PWREx_ConfigSupply+0x70>)
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f003 0304 	and.w	r3, r3, #4
 800862c:	2b04      	cmp	r3, #4
 800862e:	d00a      	beq.n	8008646 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008630:	4b16      	ldr	r3, [pc, #88]	; (800868c <HAL_PWREx_ConfigSupply+0x70>)
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f003 0307 	and.w	r3, r3, #7
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	429a      	cmp	r2, r3
 800863c:	d001      	beq.n	8008642 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e01f      	b.n	8008682 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	e01d      	b.n	8008682 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008646:	4b11      	ldr	r3, [pc, #68]	; (800868c <HAL_PWREx_ConfigSupply+0x70>)
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	f023 0207 	bic.w	r2, r3, #7
 800864e:	490f      	ldr	r1, [pc, #60]	; (800868c <HAL_PWREx_ConfigSupply+0x70>)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4313      	orrs	r3, r2
 8008654:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008656:	f7fa ffa7 	bl	80035a8 <HAL_GetTick>
 800865a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800865c:	e009      	b.n	8008672 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800865e:	f7fa ffa3 	bl	80035a8 <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800866c:	d901      	bls.n	8008672 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e007      	b.n	8008682 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008672:	4b06      	ldr	r3, [pc, #24]	; (800868c <HAL_PWREx_ConfigSupply+0x70>)
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800867a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800867e:	d1ee      	bne.n	800865e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	58024800 	.word	0x58024800

08008690 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008690:	b480      	push	{r7}
 8008692:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008694:	4b05      	ldr	r3, [pc, #20]	; (80086ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	4a04      	ldr	r2, [pc, #16]	; (80086ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800869a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800869e:	60d3      	str	r3, [r2, #12]
}
 80086a0:	bf00      	nop
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	58024800 	.word	0x58024800

080086b0 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 80086b4:	4b1b      	ldr	r3, [pc, #108]	; (8008724 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0310 	and.w	r3, r3, #16
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d014      	beq.n	80086ea <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 80086c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d0:	d10b      	bne.n	80086ea <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 80086d2:	f7fa fa75 	bl	8002bc0 <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 80086d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 80086ea:	4b0e      	ldr	r3, [pc, #56]	; (8008724 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d014      	beq.n	8008720 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 80086f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008706:	d10b      	bne.n	8008720 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8008708:	f000 f80e 	bl	8008728 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 800870c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800871c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 8008720:	bf00      	nop
 8008722:	bd80      	pop	{r7, pc}
 8008724:	58024800 	.word	0x58024800

08008728 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8008728:	b480      	push	{r7}
 800872a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 800872c:	bf00      	nop
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
	...

08008738 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b08c      	sub	sp, #48	; 0x30
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e3ff      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 8087 	beq.w	8008866 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008758:	4b99      	ldr	r3, [pc, #612]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008760:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008762:	4b97      	ldr	r3, [pc, #604]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008766:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876a:	2b10      	cmp	r3, #16
 800876c:	d007      	beq.n	800877e <HAL_RCC_OscConfig+0x46>
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	2b18      	cmp	r3, #24
 8008772:	d110      	bne.n	8008796 <HAL_RCC_OscConfig+0x5e>
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	2b02      	cmp	r3, #2
 800877c:	d10b      	bne.n	8008796 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800877e:	4b90      	ldr	r3, [pc, #576]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d06c      	beq.n	8008864 <HAL_RCC_OscConfig+0x12c>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d168      	bne.n	8008864 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e3d9      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800879e:	d106      	bne.n	80087ae <HAL_RCC_OscConfig+0x76>
 80087a0:	4b87      	ldr	r3, [pc, #540]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a86      	ldr	r2, [pc, #536]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	e02e      	b.n	800880c <HAL_RCC_OscConfig+0xd4>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10c      	bne.n	80087d0 <HAL_RCC_OscConfig+0x98>
 80087b6:	4b82      	ldr	r3, [pc, #520]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a81      	ldr	r2, [pc, #516]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	4b7f      	ldr	r3, [pc, #508]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a7e      	ldr	r2, [pc, #504]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	e01d      	b.n	800880c <HAL_RCC_OscConfig+0xd4>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087d8:	d10c      	bne.n	80087f4 <HAL_RCC_OscConfig+0xbc>
 80087da:	4b79      	ldr	r3, [pc, #484]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a78      	ldr	r2, [pc, #480]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087e4:	6013      	str	r3, [r2, #0]
 80087e6:	4b76      	ldr	r3, [pc, #472]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a75      	ldr	r2, [pc, #468]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	e00b      	b.n	800880c <HAL_RCC_OscConfig+0xd4>
 80087f4:	4b72      	ldr	r3, [pc, #456]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a71      	ldr	r2, [pc, #452]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80087fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	4b6f      	ldr	r3, [pc, #444]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a6e      	ldr	r2, [pc, #440]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800880a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d013      	beq.n	800883c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008814:	f7fa fec8 	bl	80035a8 <HAL_GetTick>
 8008818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800881a:	e008      	b.n	800882e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800881c:	f7fa fec4 	bl	80035a8 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b64      	cmp	r3, #100	; 0x64
 8008828:	d901      	bls.n	800882e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e38d      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800882e:	4b64      	ldr	r3, [pc, #400]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0f0      	beq.n	800881c <HAL_RCC_OscConfig+0xe4>
 800883a:	e014      	b.n	8008866 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883c:	f7fa feb4 	bl	80035a8 <HAL_GetTick>
 8008840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008842:	e008      	b.n	8008856 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008844:	f7fa feb0 	bl	80035a8 <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b64      	cmp	r3, #100	; 0x64
 8008850:	d901      	bls.n	8008856 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e379      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008856:	4b5a      	ldr	r3, [pc, #360]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1f0      	bne.n	8008844 <HAL_RCC_OscConfig+0x10c>
 8008862:	e000      	b.n	8008866 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 80ae 	beq.w	80089d0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008874:	4b52      	ldr	r3, [pc, #328]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800887c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800887e:	4b50      	ldr	r3, [pc, #320]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008882:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d007      	beq.n	800889a <HAL_RCC_OscConfig+0x162>
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	2b18      	cmp	r3, #24
 800888e:	d13a      	bne.n	8008906 <HAL_RCC_OscConfig+0x1ce>
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d135      	bne.n	8008906 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800889a:	4b49      	ldr	r3, [pc, #292]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0304 	and.w	r3, r3, #4
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d005      	beq.n	80088b2 <HAL_RCC_OscConfig+0x17a>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e34b      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088b2:	f7fa fea7 	bl	8003604 <HAL_GetREVID>
 80088b6:	4602      	mov	r2, r0
 80088b8:	f241 0303 	movw	r3, #4099	; 0x1003
 80088bc:	429a      	cmp	r2, r3
 80088be:	d817      	bhi.n	80088f0 <HAL_RCC_OscConfig+0x1b8>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	2b40      	cmp	r3, #64	; 0x40
 80088c6:	d108      	bne.n	80088da <HAL_RCC_OscConfig+0x1a2>
 80088c8:	4b3d      	ldr	r3, [pc, #244]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088d0:	4a3b      	ldr	r2, [pc, #236]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80088d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088d6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088d8:	e07a      	b.n	80089d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088da:	4b39      	ldr	r3, [pc, #228]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	031b      	lsls	r3, r3, #12
 80088e8:	4935      	ldr	r1, [pc, #212]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088ee:	e06f      	b.n	80089d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088f0:	4b33      	ldr	r3, [pc, #204]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	061b      	lsls	r3, r3, #24
 80088fe:	4930      	ldr	r1, [pc, #192]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008900:	4313      	orrs	r3, r2
 8008902:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008904:	e064      	b.n	80089d0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d045      	beq.n	800899a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800890e:	4b2c      	ldr	r3, [pc, #176]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f023 0219 	bic.w	r2, r3, #25
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	4929      	ldr	r1, [pc, #164]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 800891c:	4313      	orrs	r3, r2
 800891e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008920:	f7fa fe42 	bl	80035a8 <HAL_GetTick>
 8008924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008926:	e008      	b.n	800893a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008928:	f7fa fe3e 	bl	80035a8 <HAL_GetTick>
 800892c:	4602      	mov	r2, r0
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	2b02      	cmp	r3, #2
 8008934:	d901      	bls.n	800893a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e307      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800893a:	4b21      	ldr	r3, [pc, #132]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 0304 	and.w	r3, r3, #4
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0f0      	beq.n	8008928 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008946:	f7fa fe5d 	bl	8003604 <HAL_GetREVID>
 800894a:	4602      	mov	r2, r0
 800894c:	f241 0303 	movw	r3, #4099	; 0x1003
 8008950:	429a      	cmp	r2, r3
 8008952:	d817      	bhi.n	8008984 <HAL_RCC_OscConfig+0x24c>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	2b40      	cmp	r3, #64	; 0x40
 800895a:	d108      	bne.n	800896e <HAL_RCC_OscConfig+0x236>
 800895c:	4b18      	ldr	r3, [pc, #96]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008964:	4a16      	ldr	r2, [pc, #88]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800896a:	6053      	str	r3, [r2, #4]
 800896c:	e030      	b.n	80089d0 <HAL_RCC_OscConfig+0x298>
 800896e:	4b14      	ldr	r3, [pc, #80]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	031b      	lsls	r3, r3, #12
 800897c:	4910      	ldr	r1, [pc, #64]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 800897e:	4313      	orrs	r3, r2
 8008980:	604b      	str	r3, [r1, #4]
 8008982:	e025      	b.n	80089d0 <HAL_RCC_OscConfig+0x298>
 8008984:	4b0e      	ldr	r3, [pc, #56]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	061b      	lsls	r3, r3, #24
 8008992:	490b      	ldr	r1, [pc, #44]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 8008994:	4313      	orrs	r3, r2
 8008996:	604b      	str	r3, [r1, #4]
 8008998:	e01a      	b.n	80089d0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800899a:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a08      	ldr	r2, [pc, #32]	; (80089c0 <HAL_RCC_OscConfig+0x288>)
 80089a0:	f023 0301 	bic.w	r3, r3, #1
 80089a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a6:	f7fa fdff 	bl	80035a8 <HAL_GetTick>
 80089aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089ac:	e00a      	b.n	80089c4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089ae:	f7fa fdfb 	bl	80035a8 <HAL_GetTick>
 80089b2:	4602      	mov	r2, r0
 80089b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d903      	bls.n	80089c4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	e2c4      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
 80089c0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089c4:	4ba4      	ldr	r3, [pc, #656]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1ee      	bne.n	80089ae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0310 	and.w	r3, r3, #16
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 80a9 	beq.w	8008b30 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089de:	4b9e      	ldr	r3, [pc, #632]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089e8:	4b9b      	ldr	r3, [pc, #620]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 80089ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	2b08      	cmp	r3, #8
 80089f2:	d007      	beq.n	8008a04 <HAL_RCC_OscConfig+0x2cc>
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	2b18      	cmp	r3, #24
 80089f8:	d13a      	bne.n	8008a70 <HAL_RCC_OscConfig+0x338>
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f003 0303 	and.w	r3, r3, #3
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d135      	bne.n	8008a70 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a04:	4b94      	ldr	r3, [pc, #592]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d005      	beq.n	8008a1c <HAL_RCC_OscConfig+0x2e4>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	2b80      	cmp	r3, #128	; 0x80
 8008a16:	d001      	beq.n	8008a1c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e296      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a1c:	f7fa fdf2 	bl	8003604 <HAL_GetREVID>
 8008a20:	4602      	mov	r2, r0
 8008a22:	f241 0303 	movw	r3, #4099	; 0x1003
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d817      	bhi.n	8008a5a <HAL_RCC_OscConfig+0x322>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	2b20      	cmp	r3, #32
 8008a30:	d108      	bne.n	8008a44 <HAL_RCC_OscConfig+0x30c>
 8008a32:	4b89      	ldr	r3, [pc, #548]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a3a:	4a87      	ldr	r2, [pc, #540]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008a3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a42:	e075      	b.n	8008b30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a44:	4b84      	ldr	r3, [pc, #528]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a1b      	ldr	r3, [r3, #32]
 8008a50:	069b      	lsls	r3, r3, #26
 8008a52:	4981      	ldr	r1, [pc, #516]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a58:	e06a      	b.n	8008b30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a5a:	4b7f      	ldr	r3, [pc, #508]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	061b      	lsls	r3, r3, #24
 8008a68:	497b      	ldr	r1, [pc, #492]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a6e:	e05f      	b.n	8008b30 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	69db      	ldr	r3, [r3, #28]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d042      	beq.n	8008afe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008a78:	4b77      	ldr	r3, [pc, #476]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a76      	ldr	r2, [pc, #472]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a84:	f7fa fd90 	bl	80035a8 <HAL_GetTick>
 8008a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a8a:	e008      	b.n	8008a9e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008a8c:	f7fa fd8c 	bl	80035a8 <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d901      	bls.n	8008a9e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e255      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a9e:	4b6e      	ldr	r3, [pc, #440]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d0f0      	beq.n	8008a8c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008aaa:	f7fa fdab 	bl	8003604 <HAL_GetREVID>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	f241 0303 	movw	r3, #4099	; 0x1003
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d817      	bhi.n	8008ae8 <HAL_RCC_OscConfig+0x3b0>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a1b      	ldr	r3, [r3, #32]
 8008abc:	2b20      	cmp	r3, #32
 8008abe:	d108      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x39a>
 8008ac0:	4b65      	ldr	r3, [pc, #404]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008ac8:	4a63      	ldr	r2, [pc, #396]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008aca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ace:	6053      	str	r3, [r2, #4]
 8008ad0:	e02e      	b.n	8008b30 <HAL_RCC_OscConfig+0x3f8>
 8008ad2:	4b61      	ldr	r3, [pc, #388]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	069b      	lsls	r3, r3, #26
 8008ae0:	495d      	ldr	r1, [pc, #372]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	604b      	str	r3, [r1, #4]
 8008ae6:	e023      	b.n	8008b30 <HAL_RCC_OscConfig+0x3f8>
 8008ae8:	4b5b      	ldr	r3, [pc, #364]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a1b      	ldr	r3, [r3, #32]
 8008af4:	061b      	lsls	r3, r3, #24
 8008af6:	4958      	ldr	r1, [pc, #352]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	60cb      	str	r3, [r1, #12]
 8008afc:	e018      	b.n	8008b30 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008afe:	4b56      	ldr	r3, [pc, #344]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a55      	ldr	r2, [pc, #340]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b0a:	f7fa fd4d 	bl	80035a8 <HAL_GetTick>
 8008b0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b10:	e008      	b.n	8008b24 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008b12:	f7fa fd49 	bl	80035a8 <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d901      	bls.n	8008b24 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e212      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b24:	4b4c      	ldr	r3, [pc, #304]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1f0      	bne.n	8008b12 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0308 	and.w	r3, r3, #8
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d036      	beq.n	8008baa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d019      	beq.n	8008b78 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b44:	4b44      	ldr	r3, [pc, #272]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b48:	4a43      	ldr	r2, [pc, #268]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008b4a:	f043 0301 	orr.w	r3, r3, #1
 8008b4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b50:	f7fa fd2a 	bl	80035a8 <HAL_GetTick>
 8008b54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b56:	e008      	b.n	8008b6a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b58:	f7fa fd26 	bl	80035a8 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d901      	bls.n	8008b6a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e1ef      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b6a:	4b3b      	ldr	r3, [pc, #236]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b6e:	f003 0302 	and.w	r3, r3, #2
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0f0      	beq.n	8008b58 <HAL_RCC_OscConfig+0x420>
 8008b76:	e018      	b.n	8008baa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b78:	4b37      	ldr	r3, [pc, #220]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b7c:	4a36      	ldr	r2, [pc, #216]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008b7e:	f023 0301 	bic.w	r3, r3, #1
 8008b82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b84:	f7fa fd10 	bl	80035a8 <HAL_GetTick>
 8008b88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b8a:	e008      	b.n	8008b9e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b8c:	f7fa fd0c 	bl	80035a8 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d901      	bls.n	8008b9e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e1d5      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b9e:	4b2e      	ldr	r3, [pc, #184]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1f0      	bne.n	8008b8c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0320 	and.w	r3, r3, #32
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d036      	beq.n	8008c24 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d019      	beq.n	8008bf2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bbe:	4b26      	ldr	r3, [pc, #152]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a25      	ldr	r2, [pc, #148]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008bc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008bca:	f7fa fced 	bl	80035a8 <HAL_GetTick>
 8008bce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bd0:	e008      	b.n	8008be4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008bd2:	f7fa fce9 	bl	80035a8 <HAL_GetTick>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d901      	bls.n	8008be4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e1b2      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008be4:	4b1c      	ldr	r3, [pc, #112]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d0f0      	beq.n	8008bd2 <HAL_RCC_OscConfig+0x49a>
 8008bf0:	e018      	b.n	8008c24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008bf2:	4b19      	ldr	r3, [pc, #100]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a18      	ldr	r2, [pc, #96]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008bfe:	f7fa fcd3 	bl	80035a8 <HAL_GetTick>
 8008c02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c04:	e008      	b.n	8008c18 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c06:	f7fa fccf 	bl	80035a8 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d901      	bls.n	8008c18 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e198      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c18:	4b0f      	ldr	r3, [pc, #60]	; (8008c58 <HAL_RCC_OscConfig+0x520>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1f0      	bne.n	8008c06 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 8085 	beq.w	8008d3c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c32:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <HAL_RCC_OscConfig+0x524>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a09      	ldr	r2, [pc, #36]	; (8008c5c <HAL_RCC_OscConfig+0x524>)
 8008c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c3e:	f7fa fcb3 	bl	80035a8 <HAL_GetTick>
 8008c42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c44:	e00c      	b.n	8008c60 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008c46:	f7fa fcaf 	bl	80035a8 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	2b64      	cmp	r3, #100	; 0x64
 8008c52:	d905      	bls.n	8008c60 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e178      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
 8008c58:	58024400 	.word	0x58024400
 8008c5c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c60:	4b96      	ldr	r3, [pc, #600]	; (8008ebc <HAL_RCC_OscConfig+0x784>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d0ec      	beq.n	8008c46 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d106      	bne.n	8008c82 <HAL_RCC_OscConfig+0x54a>
 8008c74:	4b92      	ldr	r3, [pc, #584]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c78:	4a91      	ldr	r2, [pc, #580]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008c7a:	f043 0301 	orr.w	r3, r3, #1
 8008c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8008c80:	e02d      	b.n	8008cde <HAL_RCC_OscConfig+0x5a6>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10c      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x56c>
 8008c8a:	4b8d      	ldr	r3, [pc, #564]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8e:	4a8c      	ldr	r2, [pc, #560]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008c90:	f023 0301 	bic.w	r3, r3, #1
 8008c94:	6713      	str	r3, [r2, #112]	; 0x70
 8008c96:	4b8a      	ldr	r3, [pc, #552]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9a:	4a89      	ldr	r2, [pc, #548]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008c9c:	f023 0304 	bic.w	r3, r3, #4
 8008ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ca2:	e01c      	b.n	8008cde <HAL_RCC_OscConfig+0x5a6>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	2b05      	cmp	r3, #5
 8008caa:	d10c      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x58e>
 8008cac:	4b84      	ldr	r3, [pc, #528]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb0:	4a83      	ldr	r2, [pc, #524]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008cb2:	f043 0304 	orr.w	r3, r3, #4
 8008cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8008cb8:	4b81      	ldr	r3, [pc, #516]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cbc:	4a80      	ldr	r2, [pc, #512]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008cbe:	f043 0301 	orr.w	r3, r3, #1
 8008cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8008cc4:	e00b      	b.n	8008cde <HAL_RCC_OscConfig+0x5a6>
 8008cc6:	4b7e      	ldr	r3, [pc, #504]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cca:	4a7d      	ldr	r2, [pc, #500]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008ccc:	f023 0301 	bic.w	r3, r3, #1
 8008cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8008cd2:	4b7b      	ldr	r3, [pc, #492]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd6:	4a7a      	ldr	r2, [pc, #488]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008cd8:	f023 0304 	bic.w	r3, r3, #4
 8008cdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d015      	beq.n	8008d12 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ce6:	f7fa fc5f 	bl	80035a8 <HAL_GetTick>
 8008cea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cec:	e00a      	b.n	8008d04 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cee:	f7fa fc5b 	bl	80035a8 <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d901      	bls.n	8008d04 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e122      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d04:	4b6e      	ldr	r3, [pc, #440]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0ee      	beq.n	8008cee <HAL_RCC_OscConfig+0x5b6>
 8008d10:	e014      	b.n	8008d3c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d12:	f7fa fc49 	bl	80035a8 <HAL_GetTick>
 8008d16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d18:	e00a      	b.n	8008d30 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d1a:	f7fa fc45 	bl	80035a8 <HAL_GetTick>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d901      	bls.n	8008d30 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e10c      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d30:	4b63      	ldr	r3, [pc, #396]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1ee      	bne.n	8008d1a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 8101 	beq.w	8008f48 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d46:	4b5e      	ldr	r3, [pc, #376]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d4e:	2b18      	cmp	r3, #24
 8008d50:	f000 80bc 	beq.w	8008ecc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	f040 8095 	bne.w	8008e88 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d5e:	4b58      	ldr	r3, [pc, #352]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a57      	ldr	r2, [pc, #348]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d6a:	f7fa fc1d 	bl	80035a8 <HAL_GetTick>
 8008d6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d70:	e008      	b.n	8008d84 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d72:	f7fa fc19 	bl	80035a8 <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d901      	bls.n	8008d84 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e0e2      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d84:	4b4e      	ldr	r3, [pc, #312]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1f0      	bne.n	8008d72 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d90:	4b4b      	ldr	r3, [pc, #300]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d94:	4b4b      	ldr	r3, [pc, #300]	; (8008ec4 <HAL_RCC_OscConfig+0x78c>)
 8008d96:	4013      	ands	r3, r2
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008da0:	0112      	lsls	r2, r2, #4
 8008da2:	430a      	orrs	r2, r1
 8008da4:	4946      	ldr	r1, [pc, #280]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	628b      	str	r3, [r1, #40]	; 0x28
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dae:	3b01      	subs	r3, #1
 8008db0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db8:	3b01      	subs	r3, #1
 8008dba:	025b      	lsls	r3, r3, #9
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	431a      	orrs	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	041b      	lsls	r3, r3, #16
 8008dc8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008dcc:	431a      	orrs	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	061b      	lsls	r3, r3, #24
 8008dd6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008dda:	4939      	ldr	r1, [pc, #228]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008de0:	4b37      	ldr	r3, [pc, #220]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de4:	4a36      	ldr	r2, [pc, #216]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008de6:	f023 0301 	bic.w	r3, r3, #1
 8008dea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008dec:	4b34      	ldr	r3, [pc, #208]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008df0:	4b35      	ldr	r3, [pc, #212]	; (8008ec8 <HAL_RCC_OscConfig+0x790>)
 8008df2:	4013      	ands	r3, r2
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008df8:	00d2      	lsls	r2, r2, #3
 8008dfa:	4931      	ldr	r1, [pc, #196]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008e00:	4b2f      	ldr	r3, [pc, #188]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	f023 020c 	bic.w	r2, r3, #12
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0c:	492c      	ldr	r1, [pc, #176]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008e12:	4b2b      	ldr	r3, [pc, #172]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e16:	f023 0202 	bic.w	r2, r3, #2
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1e:	4928      	ldr	r1, [pc, #160]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e20:	4313      	orrs	r3, r2
 8008e22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e24:	4b26      	ldr	r3, [pc, #152]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e28:	4a25      	ldr	r2, [pc, #148]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e30:	4b23      	ldr	r3, [pc, #140]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e34:	4a22      	ldr	r2, [pc, #136]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e3c:	4b20      	ldr	r3, [pc, #128]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e40:	4a1f      	ldr	r2, [pc, #124]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008e48:	4b1d      	ldr	r3, [pc, #116]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	4a1c      	ldr	r2, [pc, #112]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e4e:	f043 0301 	orr.w	r3, r3, #1
 8008e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e54:	4b1a      	ldr	r3, [pc, #104]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a19      	ldr	r2, [pc, #100]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e60:	f7fa fba2 	bl	80035a8 <HAL_GetTick>
 8008e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e66:	e008      	b.n	8008e7a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e68:	f7fa fb9e 	bl	80035a8 <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d901      	bls.n	8008e7a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e067      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e7a:	4b11      	ldr	r3, [pc, #68]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d0f0      	beq.n	8008e68 <HAL_RCC_OscConfig+0x730>
 8008e86:	e05f      	b.n	8008f48 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e88:	4b0d      	ldr	r3, [pc, #52]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a0c      	ldr	r2, [pc, #48]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e94:	f7fa fb88 	bl	80035a8 <HAL_GetTick>
 8008e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e9a:	e008      	b.n	8008eae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e9c:	f7fa fb84 	bl	80035a8 <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d901      	bls.n	8008eae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e04d      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008eae:	4b04      	ldr	r3, [pc, #16]	; (8008ec0 <HAL_RCC_OscConfig+0x788>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1f0      	bne.n	8008e9c <HAL_RCC_OscConfig+0x764>
 8008eba:	e045      	b.n	8008f48 <HAL_RCC_OscConfig+0x810>
 8008ebc:	58024800 	.word	0x58024800
 8008ec0:	58024400 	.word	0x58024400
 8008ec4:	fffffc0c 	.word	0xfffffc0c
 8008ec8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008ecc:	4b21      	ldr	r3, [pc, #132]	; (8008f54 <HAL_RCC_OscConfig+0x81c>)
 8008ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ed2:	4b20      	ldr	r3, [pc, #128]	; (8008f54 <HAL_RCC_OscConfig+0x81c>)
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d031      	beq.n	8008f44 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	f003 0203 	and.w	r2, r3, #3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d12a      	bne.n	8008f44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	091b      	lsrs	r3, r3, #4
 8008ef2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d122      	bne.n	8008f44 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f08:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d11a      	bne.n	8008f44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	0a5b      	lsrs	r3, r3, #9
 8008f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f1a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d111      	bne.n	8008f44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	0c1b      	lsrs	r3, r3, #16
 8008f24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d108      	bne.n	8008f44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	0e1b      	lsrs	r3, r3, #24
 8008f36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f3e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d001      	beq.n	8008f48 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e000      	b.n	8008f4a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3730      	adds	r7, #48	; 0x30
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	58024400 	.word	0x58024400

08008f58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e19c      	b.n	80092a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f6c:	4b8a      	ldr	r3, [pc, #552]	; (8009198 <HAL_RCC_ClockConfig+0x240>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 030f 	and.w	r3, r3, #15
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d910      	bls.n	8008f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f7a:	4b87      	ldr	r3, [pc, #540]	; (8009198 <HAL_RCC_ClockConfig+0x240>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f023 020f 	bic.w	r2, r3, #15
 8008f82:	4985      	ldr	r1, [pc, #532]	; (8009198 <HAL_RCC_ClockConfig+0x240>)
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f8a:	4b83      	ldr	r3, [pc, #524]	; (8009198 <HAL_RCC_ClockConfig+0x240>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 030f 	and.w	r3, r3, #15
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d001      	beq.n	8008f9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e184      	b.n	80092a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d010      	beq.n	8008fca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	691a      	ldr	r2, [r3, #16]
 8008fac:	4b7b      	ldr	r3, [pc, #492]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d908      	bls.n	8008fca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008fb8:	4b78      	ldr	r3, [pc, #480]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	4975      	ldr	r1, [pc, #468]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 0308 	and.w	r3, r3, #8
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d010      	beq.n	8008ff8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	695a      	ldr	r2, [r3, #20]
 8008fda:	4b70      	ldr	r3, [pc, #448]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d908      	bls.n	8008ff8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008fe6:	4b6d      	ldr	r3, [pc, #436]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	496a      	ldr	r1, [pc, #424]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0310 	and.w	r3, r3, #16
 8009000:	2b00      	cmp	r3, #0
 8009002:	d010      	beq.n	8009026 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	699a      	ldr	r2, [r3, #24]
 8009008:	4b64      	ldr	r3, [pc, #400]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009010:	429a      	cmp	r2, r3
 8009012:	d908      	bls.n	8009026 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009014:	4b61      	ldr	r3, [pc, #388]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8009016:	69db      	ldr	r3, [r3, #28]
 8009018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	495e      	ldr	r1, [pc, #376]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8009022:	4313      	orrs	r3, r2
 8009024:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0320 	and.w	r3, r3, #32
 800902e:	2b00      	cmp	r3, #0
 8009030:	d010      	beq.n	8009054 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	69da      	ldr	r2, [r3, #28]
 8009036:	4b59      	ldr	r3, [pc, #356]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800903e:	429a      	cmp	r2, r3
 8009040:	d908      	bls.n	8009054 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009042:	4b56      	ldr	r3, [pc, #344]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	4953      	ldr	r1, [pc, #332]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8009050:	4313      	orrs	r3, r2
 8009052:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 0302 	and.w	r3, r3, #2
 800905c:	2b00      	cmp	r3, #0
 800905e:	d010      	beq.n	8009082 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	4b4d      	ldr	r3, [pc, #308]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	f003 030f 	and.w	r3, r3, #15
 800906c:	429a      	cmp	r2, r3
 800906e:	d908      	bls.n	8009082 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009070:	4b4a      	ldr	r3, [pc, #296]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	f023 020f 	bic.w	r2, r3, #15
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	4947      	ldr	r1, [pc, #284]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 800907e:	4313      	orrs	r3, r2
 8009080:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	2b00      	cmp	r3, #0
 800908c:	d055      	beq.n	800913a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800908e:	4b43      	ldr	r3, [pc, #268]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	4940      	ldr	r1, [pc, #256]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 800909c:	4313      	orrs	r3, r2
 800909e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d107      	bne.n	80090b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80090a8:	4b3c      	ldr	r3, [pc, #240]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d121      	bne.n	80090f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e0f6      	b.n	80092a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	2b03      	cmp	r3, #3
 80090be:	d107      	bne.n	80090d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80090c0:	4b36      	ldr	r3, [pc, #216]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d115      	bne.n	80090f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e0ea      	b.n	80092a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d107      	bne.n	80090e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090d8:	4b30      	ldr	r3, [pc, #192]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d109      	bne.n	80090f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e0de      	b.n	80092a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090e8:	4b2c      	ldr	r3, [pc, #176]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0304 	and.w	r3, r3, #4
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e0d6      	b.n	80092a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80090f8:	4b28      	ldr	r3, [pc, #160]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	f023 0207 	bic.w	r2, r3, #7
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	4925      	ldr	r1, [pc, #148]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8009106:	4313      	orrs	r3, r2
 8009108:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800910a:	f7fa fa4d 	bl	80035a8 <HAL_GetTick>
 800910e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009110:	e00a      	b.n	8009128 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009112:	f7fa fa49 	bl	80035a8 <HAL_GetTick>
 8009116:	4602      	mov	r2, r0
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009120:	4293      	cmp	r3, r2
 8009122:	d901      	bls.n	8009128 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e0be      	b.n	80092a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009128:	4b1c      	ldr	r3, [pc, #112]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	00db      	lsls	r3, r3, #3
 8009136:	429a      	cmp	r2, r3
 8009138:	d1eb      	bne.n	8009112 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 0302 	and.w	r3, r3, #2
 8009142:	2b00      	cmp	r3, #0
 8009144:	d010      	beq.n	8009168 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68da      	ldr	r2, [r3, #12]
 800914a:	4b14      	ldr	r3, [pc, #80]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	f003 030f 	and.w	r3, r3, #15
 8009152:	429a      	cmp	r2, r3
 8009154:	d208      	bcs.n	8009168 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009156:	4b11      	ldr	r3, [pc, #68]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	f023 020f 	bic.w	r2, r3, #15
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	490e      	ldr	r1, [pc, #56]	; (800919c <HAL_RCC_ClockConfig+0x244>)
 8009164:	4313      	orrs	r3, r2
 8009166:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009168:	4b0b      	ldr	r3, [pc, #44]	; (8009198 <HAL_RCC_ClockConfig+0x240>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 030f 	and.w	r3, r3, #15
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	429a      	cmp	r2, r3
 8009174:	d214      	bcs.n	80091a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009176:	4b08      	ldr	r3, [pc, #32]	; (8009198 <HAL_RCC_ClockConfig+0x240>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f023 020f 	bic.w	r2, r3, #15
 800917e:	4906      	ldr	r1, [pc, #24]	; (8009198 <HAL_RCC_ClockConfig+0x240>)
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	4313      	orrs	r3, r2
 8009184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009186:	4b04      	ldr	r3, [pc, #16]	; (8009198 <HAL_RCC_ClockConfig+0x240>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 030f 	and.w	r3, r3, #15
 800918e:	683a      	ldr	r2, [r7, #0]
 8009190:	429a      	cmp	r2, r3
 8009192:	d005      	beq.n	80091a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e086      	b.n	80092a6 <HAL_RCC_ClockConfig+0x34e>
 8009198:	52002000 	.word	0x52002000
 800919c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0304 	and.w	r3, r3, #4
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d010      	beq.n	80091ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	691a      	ldr	r2, [r3, #16]
 80091b0:	4b3f      	ldr	r3, [pc, #252]	; (80092b0 <HAL_RCC_ClockConfig+0x358>)
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d208      	bcs.n	80091ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80091bc:	4b3c      	ldr	r3, [pc, #240]	; (80092b0 <HAL_RCC_ClockConfig+0x358>)
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	4939      	ldr	r1, [pc, #228]	; (80092b0 <HAL_RCC_ClockConfig+0x358>)
 80091ca:	4313      	orrs	r3, r2
 80091cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0308 	and.w	r3, r3, #8
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d010      	beq.n	80091fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	695a      	ldr	r2, [r3, #20]
 80091de:	4b34      	ldr	r3, [pc, #208]	; (80092b0 <HAL_RCC_ClockConfig+0x358>)
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d208      	bcs.n	80091fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80091ea:	4b31      	ldr	r3, [pc, #196]	; (80092b0 <HAL_RCC_ClockConfig+0x358>)
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	492e      	ldr	r1, [pc, #184]	; (80092b0 <HAL_RCC_ClockConfig+0x358>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0310 	and.w	r3, r3, #16
 8009204:	2b00      	cmp	r3, #0
 8009206:	d010      	beq.n	800922a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	699a      	ldr	r2, [r3, #24]
 800920c:	4b28      	ldr	r3, [pc, #160]	; (80092b0 <HAL_RCC_ClockConfig+0x358>)
 800920e:	69db      	ldr	r3, [r3, #28]
 8009210:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009214:	429a      	cmp	r2, r3
 8009216:	d208      	bcs.n	800922a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009218:	4b25      	ldr	r3, [pc, #148]	; (80092b0 <HAL_RCC_ClockConfig+0x358>)
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	4922      	ldr	r1, [pc, #136]	; (80092b0 <HAL_RCC_ClockConfig+0x358>)
 8009226:	4313      	orrs	r3, r2
 8009228:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 0320 	and.w	r3, r3, #32
 8009232:	2b00      	cmp	r3, #0
 8009234:	d010      	beq.n	8009258 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	69da      	ldr	r2, [r3, #28]
 800923a:	4b1d      	ldr	r3, [pc, #116]	; (80092b0 <HAL_RCC_ClockConfig+0x358>)
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009242:	429a      	cmp	r2, r3
 8009244:	d208      	bcs.n	8009258 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009246:	4b1a      	ldr	r3, [pc, #104]	; (80092b0 <HAL_RCC_ClockConfig+0x358>)
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	69db      	ldr	r3, [r3, #28]
 8009252:	4917      	ldr	r1, [pc, #92]	; (80092b0 <HAL_RCC_ClockConfig+0x358>)
 8009254:	4313      	orrs	r3, r2
 8009256:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009258:	f000 f844 	bl	80092e4 <HAL_RCC_GetSysClockFreq>
 800925c:	4601      	mov	r1, r0
 800925e:	4b14      	ldr	r3, [pc, #80]	; (80092b0 <HAL_RCC_ClockConfig+0x358>)
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	0a1b      	lsrs	r3, r3, #8
 8009264:	f003 030f 	and.w	r3, r3, #15
 8009268:	4a12      	ldr	r2, [pc, #72]	; (80092b4 <HAL_RCC_ClockConfig+0x35c>)
 800926a:	5cd3      	ldrb	r3, [r2, r3]
 800926c:	f003 031f 	and.w	r3, r3, #31
 8009270:	fa21 f303 	lsr.w	r3, r1, r3
 8009274:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009276:	4b0e      	ldr	r3, [pc, #56]	; (80092b0 <HAL_RCC_ClockConfig+0x358>)
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	f003 030f 	and.w	r3, r3, #15
 800927e:	4a0d      	ldr	r2, [pc, #52]	; (80092b4 <HAL_RCC_ClockConfig+0x35c>)
 8009280:	5cd3      	ldrb	r3, [r2, r3]
 8009282:	f003 031f 	and.w	r3, r3, #31
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	fa22 f303 	lsr.w	r3, r2, r3
 800928c:	4a0a      	ldr	r2, [pc, #40]	; (80092b8 <HAL_RCC_ClockConfig+0x360>)
 800928e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009290:	4a0a      	ldr	r2, [pc, #40]	; (80092bc <HAL_RCC_ClockConfig+0x364>)
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009296:	4b0a      	ldr	r3, [pc, #40]	; (80092c0 <HAL_RCC_ClockConfig+0x368>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4618      	mov	r0, r3
 800929c:	f7fa f93a 	bl	8003514 <HAL_InitTick>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3718      	adds	r7, #24
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	58024400 	.word	0x58024400
 80092b4:	08019ec0 	.word	0x08019ec0
 80092b8:	24000010 	.word	0x24000010
 80092bc:	2400000c 	.word	0x2400000c
 80092c0:	24000014 	.word	0x24000014

080092c4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80092c4:	b480      	push	{r7}
 80092c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80092c8:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <HAL_RCC_EnableCSS+0x1c>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a04      	ldr	r2, [pc, #16]	; (80092e0 <HAL_RCC_EnableCSS+0x1c>)
 80092ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092d2:	6013      	str	r3, [r2, #0]
}
 80092d4:	bf00      	nop
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	58024400 	.word	0x58024400

080092e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b089      	sub	sp, #36	; 0x24
 80092e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092ea:	4baf      	ldr	r3, [pc, #700]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092f2:	2b18      	cmp	r3, #24
 80092f4:	f200 814e 	bhi.w	8009594 <HAL_RCC_GetSysClockFreq+0x2b0>
 80092f8:	a201      	add	r2, pc, #4	; (adr r2, 8009300 <HAL_RCC_GetSysClockFreq+0x1c>)
 80092fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092fe:	bf00      	nop
 8009300:	08009365 	.word	0x08009365
 8009304:	08009595 	.word	0x08009595
 8009308:	08009595 	.word	0x08009595
 800930c:	08009595 	.word	0x08009595
 8009310:	08009595 	.word	0x08009595
 8009314:	08009595 	.word	0x08009595
 8009318:	08009595 	.word	0x08009595
 800931c:	08009595 	.word	0x08009595
 8009320:	0800938b 	.word	0x0800938b
 8009324:	08009595 	.word	0x08009595
 8009328:	08009595 	.word	0x08009595
 800932c:	08009595 	.word	0x08009595
 8009330:	08009595 	.word	0x08009595
 8009334:	08009595 	.word	0x08009595
 8009338:	08009595 	.word	0x08009595
 800933c:	08009595 	.word	0x08009595
 8009340:	08009391 	.word	0x08009391
 8009344:	08009595 	.word	0x08009595
 8009348:	08009595 	.word	0x08009595
 800934c:	08009595 	.word	0x08009595
 8009350:	08009595 	.word	0x08009595
 8009354:	08009595 	.word	0x08009595
 8009358:	08009595 	.word	0x08009595
 800935c:	08009595 	.word	0x08009595
 8009360:	08009397 	.word	0x08009397
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009364:	4b90      	ldr	r3, [pc, #576]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0320 	and.w	r3, r3, #32
 800936c:	2b00      	cmp	r3, #0
 800936e:	d009      	beq.n	8009384 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009370:	4b8d      	ldr	r3, [pc, #564]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	08db      	lsrs	r3, r3, #3
 8009376:	f003 0303 	and.w	r3, r3, #3
 800937a:	4a8c      	ldr	r2, [pc, #560]	; (80095ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 800937c:	fa22 f303 	lsr.w	r3, r2, r3
 8009380:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009382:	e10a      	b.n	800959a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009384:	4b89      	ldr	r3, [pc, #548]	; (80095ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009386:	61bb      	str	r3, [r7, #24]
    break;
 8009388:	e107      	b.n	800959a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800938a:	4b89      	ldr	r3, [pc, #548]	; (80095b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800938c:	61bb      	str	r3, [r7, #24]
    break;
 800938e:	e104      	b.n	800959a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009390:	4b88      	ldr	r3, [pc, #544]	; (80095b4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8009392:	61bb      	str	r3, [r7, #24]
    break;
 8009394:	e101      	b.n	800959a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009396:	4b84      	ldr	r3, [pc, #528]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939a:	f003 0303 	and.w	r3, r3, #3
 800939e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80093a0:	4b81      	ldr	r3, [pc, #516]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80093a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a4:	091b      	lsrs	r3, r3, #4
 80093a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80093ac:	4b7e      	ldr	r3, [pc, #504]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80093b6:	4b7c      	ldr	r3, [pc, #496]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80093b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ba:	08db      	lsrs	r3, r3, #3
 80093bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	fb02 f303 	mul.w	r3, r2, r3
 80093c6:	ee07 3a90 	vmov	s15, r3
 80093ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 80da 	beq.w	800958e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d05a      	beq.n	8009496 <HAL_RCC_GetSysClockFreq+0x1b2>
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d302      	bcc.n	80093ea <HAL_RCC_GetSysClockFreq+0x106>
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d078      	beq.n	80094da <HAL_RCC_GetSysClockFreq+0x1f6>
 80093e8:	e099      	b.n	800951e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093ea:	4b6f      	ldr	r3, [pc, #444]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0320 	and.w	r3, r3, #32
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d02d      	beq.n	8009452 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093f6:	4b6c      	ldr	r3, [pc, #432]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	08db      	lsrs	r3, r3, #3
 80093fc:	f003 0303 	and.w	r3, r3, #3
 8009400:	4a6a      	ldr	r2, [pc, #424]	; (80095ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009402:	fa22 f303 	lsr.w	r3, r2, r3
 8009406:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	ee07 3a90 	vmov	s15, r3
 800940e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	ee07 3a90 	vmov	s15, r3
 8009418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009420:	4b61      	ldr	r3, [pc, #388]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009428:	ee07 3a90 	vmov	s15, r3
 800942c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009430:	ed97 6a02 	vldr	s12, [r7, #8]
 8009434:	eddf 5a60 	vldr	s11, [pc, #384]	; 80095b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800943c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009450:	e087      	b.n	8009562 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	ee07 3a90 	vmov	s15, r3
 8009458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80095bc <HAL_RCC_GetSysClockFreq+0x2d8>
 8009460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009464:	4b50      	ldr	r3, [pc, #320]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800946c:	ee07 3a90 	vmov	s15, r3
 8009470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009474:	ed97 6a02 	vldr	s12, [r7, #8]
 8009478:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80095b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800947c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800948c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009490:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009494:	e065      	b.n	8009562 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	ee07 3a90 	vmov	s15, r3
 800949c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80095c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80094a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094a8:	4b3f      	ldr	r3, [pc, #252]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80094aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b0:	ee07 3a90 	vmov	s15, r3
 80094b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80094bc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80095b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80094c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094d8:	e043      	b.n	8009562 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	ee07 3a90 	vmov	s15, r3
 80094e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80095c4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80094e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ec:	4b2e      	ldr	r3, [pc, #184]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80094ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f4:	ee07 3a90 	vmov	s15, r3
 80094f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8009500:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80095b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800950c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009518:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800951c:	e021      	b.n	8009562 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	ee07 3a90 	vmov	s15, r3
 8009524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009528:	eddf 6a25 	vldr	s13, [pc, #148]	; 80095c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800952c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009530:	4b1d      	ldr	r3, [pc, #116]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009538:	ee07 3a90 	vmov	s15, r3
 800953c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009540:	ed97 6a02 	vldr	s12, [r7, #8]
 8009544:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80095b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009548:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800954c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800955c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009560:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009562:	4b11      	ldr	r3, [pc, #68]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009566:	0a5b      	lsrs	r3, r3, #9
 8009568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800956c:	3301      	adds	r3, #1
 800956e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	ee07 3a90 	vmov	s15, r3
 8009576:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800957a:	edd7 6a07 	vldr	s13, [r7, #28]
 800957e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009586:	ee17 3a90 	vmov	r3, s15
 800958a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800958c:	e005      	b.n	800959a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800958e:	2300      	movs	r3, #0
 8009590:	61bb      	str	r3, [r7, #24]
    break;
 8009592:	e002      	b.n	800959a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8009594:	4b06      	ldr	r3, [pc, #24]	; (80095b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8009596:	61bb      	str	r3, [r7, #24]
    break;
 8009598:	bf00      	nop
  }

  return sysclockfreq;
 800959a:	69bb      	ldr	r3, [r7, #24]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3724      	adds	r7, #36	; 0x24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	58024400 	.word	0x58024400
 80095ac:	03d09000 	.word	0x03d09000
 80095b0:	003d0900 	.word	0x003d0900
 80095b4:	017d7840 	.word	0x017d7840
 80095b8:	46000000 	.word	0x46000000
 80095bc:	4c742400 	.word	0x4c742400
 80095c0:	4a742400 	.word	0x4a742400
 80095c4:	4bbebc20 	.word	0x4bbebc20

080095c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80095ce:	f7ff fe89 	bl	80092e4 <HAL_RCC_GetSysClockFreq>
 80095d2:	4601      	mov	r1, r0
 80095d4:	4b10      	ldr	r3, [pc, #64]	; (8009618 <HAL_RCC_GetHCLKFreq+0x50>)
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	0a1b      	lsrs	r3, r3, #8
 80095da:	f003 030f 	and.w	r3, r3, #15
 80095de:	4a0f      	ldr	r2, [pc, #60]	; (800961c <HAL_RCC_GetHCLKFreq+0x54>)
 80095e0:	5cd3      	ldrb	r3, [r2, r3]
 80095e2:	f003 031f 	and.w	r3, r3, #31
 80095e6:	fa21 f303 	lsr.w	r3, r1, r3
 80095ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80095ec:	4b0a      	ldr	r3, [pc, #40]	; (8009618 <HAL_RCC_GetHCLKFreq+0x50>)
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	f003 030f 	and.w	r3, r3, #15
 80095f4:	4a09      	ldr	r2, [pc, #36]	; (800961c <HAL_RCC_GetHCLKFreq+0x54>)
 80095f6:	5cd3      	ldrb	r3, [r2, r3]
 80095f8:	f003 031f 	and.w	r3, r3, #31
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009602:	4a07      	ldr	r2, [pc, #28]	; (8009620 <HAL_RCC_GetHCLKFreq+0x58>)
 8009604:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009606:	4a07      	ldr	r2, [pc, #28]	; (8009624 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800960c:	4b04      	ldr	r3, [pc, #16]	; (8009620 <HAL_RCC_GetHCLKFreq+0x58>)
 800960e:	681b      	ldr	r3, [r3, #0]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	58024400 	.word	0x58024400
 800961c:	08019ec0 	.word	0x08019ec0
 8009620:	24000010 	.word	0x24000010
 8009624:	2400000c 	.word	0x2400000c

08009628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800962c:	f7ff ffcc 	bl	80095c8 <HAL_RCC_GetHCLKFreq>
 8009630:	4601      	mov	r1, r0
 8009632:	4b06      	ldr	r3, [pc, #24]	; (800964c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	091b      	lsrs	r3, r3, #4
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	4a04      	ldr	r2, [pc, #16]	; (8009650 <HAL_RCC_GetPCLK1Freq+0x28>)
 800963e:	5cd3      	ldrb	r3, [r2, r3]
 8009640:	f003 031f 	and.w	r3, r3, #31
 8009644:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009648:	4618      	mov	r0, r3
 800964a:	bd80      	pop	{r7, pc}
 800964c:	58024400 	.word	0x58024400
 8009650:	08019ec0 	.word	0x08019ec0

08009654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009658:	f7ff ffb6 	bl	80095c8 <HAL_RCC_GetHCLKFreq>
 800965c:	4601      	mov	r1, r0
 800965e:	4b06      	ldr	r3, [pc, #24]	; (8009678 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009660:	69db      	ldr	r3, [r3, #28]
 8009662:	0a1b      	lsrs	r3, r3, #8
 8009664:	f003 0307 	and.w	r3, r3, #7
 8009668:	4a04      	ldr	r2, [pc, #16]	; (800967c <HAL_RCC_GetPCLK2Freq+0x28>)
 800966a:	5cd3      	ldrb	r3, [r2, r3]
 800966c:	f003 031f 	and.w	r3, r3, #31
 8009670:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009674:	4618      	mov	r0, r3
 8009676:	bd80      	pop	{r7, pc}
 8009678:	58024400 	.word	0x58024400
 800967c:	08019ec0 	.word	0x08019ec0

08009680 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009684:	4b07      	ldr	r3, [pc, #28]	; (80096a4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800968c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009690:	d105      	bne.n	800969e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8009692:	f000 f809 	bl	80096a8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009696:	4b03      	ldr	r3, [pc, #12]	; (80096a4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800969c:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800969e:	bf00      	nop
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	58024400 	.word	0x58024400

080096a8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 80096a8:	b480      	push	{r7}
 80096aa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 80096ac:	bf00      	nop
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
	...

080096b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096c0:	2300      	movs	r3, #0
 80096c2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096c4:	2300      	movs	r3, #0
 80096c6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d03d      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096dc:	d013      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80096de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096e2:	d802      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d007      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80096e8:	e01f      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80096ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096ee:	d013      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80096f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096f4:	d01c      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80096f6:	e018      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096f8:	4baf      	ldr	r3, [pc, #700]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80096fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fc:	4aae      	ldr	r2, [pc, #696]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80096fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009702:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009704:	e015      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3304      	adds	r3, #4
 800970a:	2102      	movs	r1, #2
 800970c:	4618      	mov	r0, r3
 800970e:	f001 fd33 	bl	800b178 <RCCEx_PLL2_Config>
 8009712:	4603      	mov	r3, r0
 8009714:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009716:	e00c      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	3324      	adds	r3, #36	; 0x24
 800971c:	2102      	movs	r1, #2
 800971e:	4618      	mov	r0, r3
 8009720:	f001 fddc 	bl	800b2dc <RCCEx_PLL3_Config>
 8009724:	4603      	mov	r3, r0
 8009726:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009728:	e003      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	75fb      	strb	r3, [r7, #23]
      break;
 800972e:	e000      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8009730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009732:	7dfb      	ldrb	r3, [r7, #23]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d109      	bne.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009738:	4b9f      	ldr	r3, [pc, #636]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800973a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800973c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009744:	499c      	ldr	r1, [pc, #624]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009746:	4313      	orrs	r3, r2
 8009748:	650b      	str	r3, [r1, #80]	; 0x50
 800974a:	e001      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800974c:	7dfb      	ldrb	r3, [r7, #23]
 800974e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009758:	2b00      	cmp	r3, #0
 800975a:	d03d      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009760:	2b04      	cmp	r3, #4
 8009762:	d826      	bhi.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8009764:	a201      	add	r2, pc, #4	; (adr r2, 800976c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8009766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976a:	bf00      	nop
 800976c:	08009781 	.word	0x08009781
 8009770:	0800978f 	.word	0x0800978f
 8009774:	080097a1 	.word	0x080097a1
 8009778:	080097b9 	.word	0x080097b9
 800977c:	080097b9 	.word	0x080097b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009780:	4b8d      	ldr	r3, [pc, #564]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009784:	4a8c      	ldr	r2, [pc, #560]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800978a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800978c:	e015      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	3304      	adds	r3, #4
 8009792:	2100      	movs	r1, #0
 8009794:	4618      	mov	r0, r3
 8009796:	f001 fcef 	bl	800b178 <RCCEx_PLL2_Config>
 800979a:	4603      	mov	r3, r0
 800979c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800979e:	e00c      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3324      	adds	r3, #36	; 0x24
 80097a4:	2100      	movs	r1, #0
 80097a6:	4618      	mov	r0, r3
 80097a8:	f001 fd98 	bl	800b2dc <RCCEx_PLL3_Config>
 80097ac:	4603      	mov	r3, r0
 80097ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097b0:	e003      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	75fb      	strb	r3, [r7, #23]
      break;
 80097b6:	e000      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80097b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097ba:	7dfb      	ldrb	r3, [r7, #23]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d109      	bne.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80097c0:	4b7d      	ldr	r3, [pc, #500]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80097c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c4:	f023 0207 	bic.w	r2, r3, #7
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097cc:	497a      	ldr	r1, [pc, #488]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	650b      	str	r3, [r1, #80]	; 0x50
 80097d2:	e001      	b.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
 80097d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d03e      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e8:	2b80      	cmp	r3, #128	; 0x80
 80097ea:	d01c      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80097ec:	2b80      	cmp	r3, #128	; 0x80
 80097ee:	d804      	bhi.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x142>
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d008      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80097f4:	2b40      	cmp	r3, #64	; 0x40
 80097f6:	d00d      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80097f8:	e01e      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80097fa:	2bc0      	cmp	r3, #192	; 0xc0
 80097fc:	d01f      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80097fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009802:	d01e      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009804:	e018      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009806:	4b6c      	ldr	r3, [pc, #432]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980a:	4a6b      	ldr	r2, [pc, #428]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800980c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009810:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009812:	e017      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	3304      	adds	r3, #4
 8009818:	2100      	movs	r1, #0
 800981a:	4618      	mov	r0, r3
 800981c:	f001 fcac 	bl	800b178 <RCCEx_PLL2_Config>
 8009820:	4603      	mov	r3, r0
 8009822:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009824:	e00e      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	3324      	adds	r3, #36	; 0x24
 800982a:	2100      	movs	r1, #0
 800982c:	4618      	mov	r0, r3
 800982e:	f001 fd55 	bl	800b2dc <RCCEx_PLL3_Config>
 8009832:	4603      	mov	r3, r0
 8009834:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009836:	e005      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	75fb      	strb	r3, [r7, #23]
      break;
 800983c:	e002      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800983e:	bf00      	nop
 8009840:	e000      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8009842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009844:	7dfb      	ldrb	r3, [r7, #23]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d109      	bne.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800984a:	4b5b      	ldr	r3, [pc, #364]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800984c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800984e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009856:	4958      	ldr	r1, [pc, #352]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009858:	4313      	orrs	r3, r2
 800985a:	650b      	str	r3, [r1, #80]	; 0x50
 800985c:	e001      	b.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985e:	7dfb      	ldrb	r3, [r7, #23]
 8009860:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800986a:	2b00      	cmp	r3, #0
 800986c:	d044      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009878:	d01f      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x202>
 800987a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800987e:	d805      	bhi.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00a      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009884:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009888:	d00e      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800988a:	e01f      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x214>
 800988c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009890:	d01f      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8009892:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009896:	d01e      	beq.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009898:	e018      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800989a:	4b47      	ldr	r3, [pc, #284]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800989c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989e:	4a46      	ldr	r2, [pc, #280]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80098a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098a6:	e017      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	3304      	adds	r3, #4
 80098ac:	2100      	movs	r1, #0
 80098ae:	4618      	mov	r0, r3
 80098b0:	f001 fc62 	bl	800b178 <RCCEx_PLL2_Config>
 80098b4:	4603      	mov	r3, r0
 80098b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80098b8:	e00e      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	3324      	adds	r3, #36	; 0x24
 80098be:	2100      	movs	r1, #0
 80098c0:	4618      	mov	r0, r3
 80098c2:	f001 fd0b 	bl	800b2dc <RCCEx_PLL3_Config>
 80098c6:	4603      	mov	r3, r0
 80098c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098ca:	e005      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	75fb      	strb	r3, [r7, #23]
      break;
 80098d0:	e002      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80098d2:	bf00      	nop
 80098d4:	e000      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80098d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098d8:	7dfb      	ldrb	r3, [r7, #23]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10a      	bne.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80098de:	4b36      	ldr	r3, [pc, #216]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80098e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098e2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80098ec:	4932      	ldr	r1, [pc, #200]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	658b      	str	r3, [r1, #88]	; 0x58
 80098f2:	e001      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
 80098f6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009900:	2b00      	cmp	r3, #0
 8009902:	d044      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800990a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800990e:	d01f      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009910:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009914:	d805      	bhi.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00a      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800991a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800991e:	d00e      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009920:	e01f      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8009922:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009926:	d01f      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009928:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800992c:	d01e      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800992e:	e018      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009930:	4b21      	ldr	r3, [pc, #132]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009934:	4a20      	ldr	r2, [pc, #128]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800993a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800993c:	e017      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	3304      	adds	r3, #4
 8009942:	2100      	movs	r1, #0
 8009944:	4618      	mov	r0, r3
 8009946:	f001 fc17 	bl	800b178 <RCCEx_PLL2_Config>
 800994a:	4603      	mov	r3, r0
 800994c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800994e:	e00e      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	3324      	adds	r3, #36	; 0x24
 8009954:	2100      	movs	r1, #0
 8009956:	4618      	mov	r0, r3
 8009958:	f001 fcc0 	bl	800b2dc <RCCEx_PLL3_Config>
 800995c:	4603      	mov	r3, r0
 800995e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009960:	e005      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	75fb      	strb	r3, [r7, #23]
      break;
 8009966:	e002      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009968:	bf00      	nop
 800996a:	e000      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800996c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800996e:	7dfb      	ldrb	r3, [r7, #23]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10a      	bne.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009974:	4b10      	ldr	r3, [pc, #64]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009978:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009982:	490d      	ldr	r1, [pc, #52]	; (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009984:	4313      	orrs	r3, r2
 8009986:	658b      	str	r3, [r1, #88]	; 0x58
 8009988:	e001      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800998a:	7dfb      	ldrb	r3, [r7, #23]
 800998c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d035      	beq.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800999e:	2b10      	cmp	r3, #16
 80099a0:	d00c      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x304>
 80099a2:	2b10      	cmp	r3, #16
 80099a4:	d802      	bhi.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d01b      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80099aa:	e017      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x324>
 80099ac:	2b20      	cmp	r3, #32
 80099ae:	d00c      	beq.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x312>
 80099b0:	2b30      	cmp	r3, #48	; 0x30
 80099b2:	d018      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80099b4:	e012      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x324>
 80099b6:	bf00      	nop
 80099b8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099bc:	4baf      	ldr	r3, [pc, #700]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80099be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c0:	4aae      	ldr	r2, [pc, #696]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80099c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099c8:	e00e      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	3304      	adds	r3, #4
 80099ce:	2102      	movs	r1, #2
 80099d0:	4618      	mov	r0, r3
 80099d2:	f001 fbd1 	bl	800b178 <RCCEx_PLL2_Config>
 80099d6:	4603      	mov	r3, r0
 80099d8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099da:	e005      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	75fb      	strb	r3, [r7, #23]
      break;
 80099e0:	e002      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80099e2:	bf00      	nop
 80099e4:	e000      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80099e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d109      	bne.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80099ee:	4ba3      	ldr	r3, [pc, #652]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80099f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099fa:	49a0      	ldr	r1, [pc, #640]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80099fc:	4313      	orrs	r3, r2
 80099fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009a00:	e001      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
 8009a04:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d042      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a1a:	d01f      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8009a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a20:	d805      	bhi.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00a      	beq.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8009a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a2a:	d00e      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8009a2c:	e01f      	b.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8009a2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a32:	d01f      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a38:	d01e      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8009a3a:	e018      	b.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a3c:	4b8f      	ldr	r3, [pc, #572]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a40:	4a8e      	ldr	r2, [pc, #568]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a48:	e017      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	2100      	movs	r1, #0
 8009a50:	4618      	mov	r0, r3
 8009a52:	f001 fb91 	bl	800b178 <RCCEx_PLL2_Config>
 8009a56:	4603      	mov	r3, r0
 8009a58:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a5a:	e00e      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	3324      	adds	r3, #36	; 0x24
 8009a60:	2100      	movs	r1, #0
 8009a62:	4618      	mov	r0, r3
 8009a64:	f001 fc3a 	bl	800b2dc <RCCEx_PLL3_Config>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a6c:	e005      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	75fb      	strb	r3, [r7, #23]
      break;
 8009a72:	e002      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009a74:	bf00      	nop
 8009a76:	e000      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a7a:	7dfb      	ldrb	r3, [r7, #23]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d109      	bne.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a80:	4b7e      	ldr	r3, [pc, #504]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a84:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a8c:	497b      	ldr	r1, [pc, #492]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	650b      	str	r3, [r1, #80]	; 0x50
 8009a92:	e001      	b.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a94:	7dfb      	ldrb	r3, [r7, #23]
 8009a96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d042      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aac:	d01b      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009aae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ab2:	d805      	bhi.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d022      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x446>
 8009ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009abc:	d00a      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009abe:	e01b      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8009ac0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ac4:	d01d      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8009ac6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aca:	d01c      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009acc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ad0:	d01b      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009ad2:	e011      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	2101      	movs	r1, #1
 8009ada:	4618      	mov	r0, r3
 8009adc:	f001 fb4c 	bl	800b178 <RCCEx_PLL2_Config>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009ae4:	e012      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	3324      	adds	r3, #36	; 0x24
 8009aea:	2101      	movs	r1, #1
 8009aec:	4618      	mov	r0, r3
 8009aee:	f001 fbf5 	bl	800b2dc <RCCEx_PLL3_Config>
 8009af2:	4603      	mov	r3, r0
 8009af4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009af6:	e009      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	75fb      	strb	r3, [r7, #23]
      break;
 8009afc:	e006      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009afe:	bf00      	nop
 8009b00:	e004      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009b02:	bf00      	nop
 8009b04:	e002      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009b06:	bf00      	nop
 8009b08:	e000      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b0c:	7dfb      	ldrb	r3, [r7, #23]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d109      	bne.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b12:	4b5a      	ldr	r3, [pc, #360]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b16:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b1e:	4957      	ldr	r1, [pc, #348]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b20:	4313      	orrs	r3, r2
 8009b22:	650b      	str	r3, [r1, #80]	; 0x50
 8009b24:	e001      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b26:	7dfb      	ldrb	r3, [r7, #23]
 8009b28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d044      	beq.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b40:	d01b      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8009b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b46:	d805      	bhi.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d022      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009b4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b50:	d00a      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8009b52:	e01b      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8009b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b58:	d01d      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b5e:	d01c      	beq.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8009b60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b64:	d01b      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009b66:	e011      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f001 fb02 	bl	800b178 <RCCEx_PLL2_Config>
 8009b74:	4603      	mov	r3, r0
 8009b76:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009b78:	e012      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	3324      	adds	r3, #36	; 0x24
 8009b7e:	2101      	movs	r1, #1
 8009b80:	4618      	mov	r0, r3
 8009b82:	f001 fbab 	bl	800b2dc <RCCEx_PLL3_Config>
 8009b86:	4603      	mov	r3, r0
 8009b88:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009b8a:	e009      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b90:	e006      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009b92:	bf00      	nop
 8009b94:	e004      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009b96:	bf00      	nop
 8009b98:	e002      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009b9a:	bf00      	nop
 8009b9c:	e000      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ba0:	7dfb      	ldrb	r3, [r7, #23]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10a      	bne.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009ba6:	4b35      	ldr	r3, [pc, #212]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009baa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009bb4:	4931      	ldr	r1, [pc, #196]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	658b      	str	r3, [r1, #88]	; 0x58
 8009bba:	e001      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bbc:	7dfb      	ldrb	r3, [r7, #23]
 8009bbe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d02d      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bd4:	d005      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bda:	d009      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d013      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009be0:	e00f      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009be2:	4b26      	ldr	r3, [pc, #152]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be6:	4a25      	ldr	r2, [pc, #148]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009bee:	e00c      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	2101      	movs	r1, #1
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f001 fabe 	bl	800b178 <RCCEx_PLL2_Config>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009c00:	e003      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	75fb      	strb	r3, [r7, #23]
      break;
 8009c06:	e000      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8009c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c0a:	7dfb      	ldrb	r3, [r7, #23]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d109      	bne.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c10:	4b1a      	ldr	r3, [pc, #104]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c1c:	4917      	ldr	r1, [pc, #92]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	650b      	str	r3, [r1, #80]	; 0x50
 8009c22:	e001      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c24:	7dfb      	ldrb	r3, [r7, #23]
 8009c26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d035      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d81b      	bhi.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009c3c:	a201      	add	r2, pc, #4	; (adr r2, 8009c44 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8009c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c42:	bf00      	nop
 8009c44:	08009c81 	.word	0x08009c81
 8009c48:	08009c55 	.word	0x08009c55
 8009c4c:	08009c63 	.word	0x08009c63
 8009c50:	08009c81 	.word	0x08009c81
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c54:	4b09      	ldr	r3, [pc, #36]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	4a08      	ldr	r2, [pc, #32]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c60:	e00f      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	3304      	adds	r3, #4
 8009c66:	2102      	movs	r1, #2
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f001 fa85 	bl	800b178 <RCCEx_PLL2_Config>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c72:	e006      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	75fb      	strb	r3, [r7, #23]
      break;
 8009c78:	e003      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8009c7a:	bf00      	nop
 8009c7c:	58024400 	.word	0x58024400
      break;
 8009c80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d109      	bne.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009c88:	4bba      	ldr	r3, [pc, #744]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c8c:	f023 0203 	bic.w	r2, r3, #3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c94:	49b7      	ldr	r1, [pc, #732]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009c96:	4313      	orrs	r3, r2
 8009c98:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009c9a:	e001      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
 8009c9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 8086 	beq.w	8009dba <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009cae:	4bb2      	ldr	r3, [pc, #712]	; (8009f78 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4ab1      	ldr	r2, [pc, #708]	; (8009f78 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009cba:	f7f9 fc75 	bl	80035a8 <HAL_GetTick>
 8009cbe:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cc0:	e009      	b.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cc2:	f7f9 fc71 	bl	80035a8 <HAL_GetTick>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	2b64      	cmp	r3, #100	; 0x64
 8009cce:	d902      	bls.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	75fb      	strb	r3, [r7, #23]
        break;
 8009cd4:	e005      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cd6:	4ba8      	ldr	r3, [pc, #672]	; (8009f78 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d0ef      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8009ce2:	7dfb      	ldrb	r3, [r7, #23]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d166      	bne.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009ce8:	4ba2      	ldr	r3, [pc, #648]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009cea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cf2:	4053      	eors	r3, r2
 8009cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d013      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009cfc:	4b9d      	ldr	r3, [pc, #628]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d04:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d06:	4b9b      	ldr	r3, [pc, #620]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d0a:	4a9a      	ldr	r2, [pc, #616]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d10:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d12:	4b98      	ldr	r3, [pc, #608]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d16:	4a97      	ldr	r2, [pc, #604]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d1c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d1e:	4a95      	ldr	r2, [pc, #596]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d2e:	d115      	bne.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d30:	f7f9 fc3a 	bl	80035a8 <HAL_GetTick>
 8009d34:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d36:	e00b      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d38:	f7f9 fc36 	bl	80035a8 <HAL_GetTick>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d902      	bls.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	75fb      	strb	r3, [r7, #23]
            break;
 8009d4e:	e005      	b.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d50:	4b88      	ldr	r3, [pc, #544]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d54:	f003 0302 	and.w	r3, r3, #2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d0ed      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d126      	bne.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d70:	d10d      	bne.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8009d72:	4b80      	ldr	r3, [pc, #512]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d80:	0919      	lsrs	r1, r3, #4
 8009d82:	4b7e      	ldr	r3, [pc, #504]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009d84:	400b      	ands	r3, r1
 8009d86:	497b      	ldr	r1, [pc, #492]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	610b      	str	r3, [r1, #16]
 8009d8c:	e005      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009d8e:	4b79      	ldr	r3, [pc, #484]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	4a78      	ldr	r2, [pc, #480]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009d98:	6113      	str	r3, [r2, #16]
 8009d9a:	4b76      	ldr	r3, [pc, #472]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009da8:	4972      	ldr	r1, [pc, #456]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009daa:	4313      	orrs	r3, r2
 8009dac:	670b      	str	r3, [r1, #112]	; 0x70
 8009dae:	e004      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009db0:	7dfb      	ldrb	r3, [r7, #23]
 8009db2:	75bb      	strb	r3, [r7, #22]
 8009db4:	e001      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db6:	7dfb      	ldrb	r3, [r7, #23]
 8009db8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 0301 	and.w	r3, r3, #1
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d07d      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dca:	2b28      	cmp	r3, #40	; 0x28
 8009dcc:	d866      	bhi.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8009dce:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd4:	08009ea3 	.word	0x08009ea3
 8009dd8:	08009e9d 	.word	0x08009e9d
 8009ddc:	08009e9d 	.word	0x08009e9d
 8009de0:	08009e9d 	.word	0x08009e9d
 8009de4:	08009e9d 	.word	0x08009e9d
 8009de8:	08009e9d 	.word	0x08009e9d
 8009dec:	08009e9d 	.word	0x08009e9d
 8009df0:	08009e9d 	.word	0x08009e9d
 8009df4:	08009e79 	.word	0x08009e79
 8009df8:	08009e9d 	.word	0x08009e9d
 8009dfc:	08009e9d 	.word	0x08009e9d
 8009e00:	08009e9d 	.word	0x08009e9d
 8009e04:	08009e9d 	.word	0x08009e9d
 8009e08:	08009e9d 	.word	0x08009e9d
 8009e0c:	08009e9d 	.word	0x08009e9d
 8009e10:	08009e9d 	.word	0x08009e9d
 8009e14:	08009e8b 	.word	0x08009e8b
 8009e18:	08009e9d 	.word	0x08009e9d
 8009e1c:	08009e9d 	.word	0x08009e9d
 8009e20:	08009e9d 	.word	0x08009e9d
 8009e24:	08009e9d 	.word	0x08009e9d
 8009e28:	08009e9d 	.word	0x08009e9d
 8009e2c:	08009e9d 	.word	0x08009e9d
 8009e30:	08009e9d 	.word	0x08009e9d
 8009e34:	08009ea3 	.word	0x08009ea3
 8009e38:	08009e9d 	.word	0x08009e9d
 8009e3c:	08009e9d 	.word	0x08009e9d
 8009e40:	08009e9d 	.word	0x08009e9d
 8009e44:	08009e9d 	.word	0x08009e9d
 8009e48:	08009e9d 	.word	0x08009e9d
 8009e4c:	08009e9d 	.word	0x08009e9d
 8009e50:	08009e9d 	.word	0x08009e9d
 8009e54:	08009ea3 	.word	0x08009ea3
 8009e58:	08009e9d 	.word	0x08009e9d
 8009e5c:	08009e9d 	.word	0x08009e9d
 8009e60:	08009e9d 	.word	0x08009e9d
 8009e64:	08009e9d 	.word	0x08009e9d
 8009e68:	08009e9d 	.word	0x08009e9d
 8009e6c:	08009e9d 	.word	0x08009e9d
 8009e70:	08009e9d 	.word	0x08009e9d
 8009e74:	08009ea3 	.word	0x08009ea3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f001 f97a 	bl	800b178 <RCCEx_PLL2_Config>
 8009e84:	4603      	mov	r3, r0
 8009e86:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009e88:	e00c      	b.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	3324      	adds	r3, #36	; 0x24
 8009e8e:	2101      	movs	r1, #1
 8009e90:	4618      	mov	r0, r3
 8009e92:	f001 fa23 	bl	800b2dc <RCCEx_PLL3_Config>
 8009e96:	4603      	mov	r3, r0
 8009e98:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009e9a:	e003      	b.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009ea0:	e000      	b.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8009ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ea4:	7dfb      	ldrb	r3, [r7, #23]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d109      	bne.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009eaa:	4b32      	ldr	r3, [pc, #200]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009eb6:	492f      	ldr	r1, [pc, #188]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	654b      	str	r3, [r1, #84]	; 0x54
 8009ebc:	e001      	b.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ebe:	7dfb      	ldrb	r3, [r7, #23]
 8009ec0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 0302 	and.w	r3, r3, #2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d037      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ed2:	2b05      	cmp	r3, #5
 8009ed4:	d820      	bhi.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8009ed6:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009edc:	08009f1f 	.word	0x08009f1f
 8009ee0:	08009ef5 	.word	0x08009ef5
 8009ee4:	08009f07 	.word	0x08009f07
 8009ee8:	08009f1f 	.word	0x08009f1f
 8009eec:	08009f1f 	.word	0x08009f1f
 8009ef0:	08009f1f 	.word	0x08009f1f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	2101      	movs	r1, #1
 8009efa:	4618      	mov	r0, r3
 8009efc:	f001 f93c 	bl	800b178 <RCCEx_PLL2_Config>
 8009f00:	4603      	mov	r3, r0
 8009f02:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f04:	e00c      	b.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	3324      	adds	r3, #36	; 0x24
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f001 f9e5 	bl	800b2dc <RCCEx_PLL3_Config>
 8009f12:	4603      	mov	r3, r0
 8009f14:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f16:	e003      	b.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f1c:	e000      	b.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8009f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f20:	7dfb      	ldrb	r3, [r7, #23]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d109      	bne.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f26:	4b13      	ldr	r3, [pc, #76]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f2a:	f023 0207 	bic.w	r2, r3, #7
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f32:	4910      	ldr	r1, [pc, #64]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009f34:	4313      	orrs	r3, r2
 8009f36:	654b      	str	r3, [r1, #84]	; 0x54
 8009f38:	e001      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f3a:	7dfb      	ldrb	r3, [r7, #23]
 8009f3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0304 	and.w	r3, r3, #4
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d040      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f50:	2b05      	cmp	r3, #5
 8009f52:	d827      	bhi.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009f54:	a201      	add	r2, pc, #4	; (adr r2, 8009f5c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8009f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5a:	bf00      	nop
 8009f5c:	08009fab 	.word	0x08009fab
 8009f60:	08009f81 	.word	0x08009f81
 8009f64:	08009f93 	.word	0x08009f93
 8009f68:	08009fab 	.word	0x08009fab
 8009f6c:	08009fab 	.word	0x08009fab
 8009f70:	08009fab 	.word	0x08009fab
 8009f74:	58024400 	.word	0x58024400
 8009f78:	58024800 	.word	0x58024800
 8009f7c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	3304      	adds	r3, #4
 8009f84:	2101      	movs	r1, #1
 8009f86:	4618      	mov	r0, r3
 8009f88:	f001 f8f6 	bl	800b178 <RCCEx_PLL2_Config>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009f90:	e00c      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	3324      	adds	r3, #36	; 0x24
 8009f96:	2101      	movs	r1, #1
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f001 f99f 	bl	800b2dc <RCCEx_PLL3_Config>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009fa2:	e003      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa8:	e000      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8009faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fac:	7dfb      	ldrb	r3, [r7, #23]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10a      	bne.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009fb2:	4bb2      	ldr	r3, [pc, #712]	; (800a27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb6:	f023 0207 	bic.w	r2, r3, #7
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fc0:	49ae      	ldr	r1, [pc, #696]	; (800a27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	658b      	str	r3, [r1, #88]	; 0x58
 8009fc6:	e001      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc8:	7dfb      	ldrb	r3, [r7, #23]
 8009fca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 0320 	and.w	r3, r3, #32
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d044      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fe2:	d01b      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8009fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fe8:	d805      	bhi.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d022      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8009fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ff2:	d00a      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009ff4:	e01b      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ffa:	d01d      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8009ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a000:	d01c      	beq.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x984>
 800a002:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a006:	d01b      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800a008:	e011      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	3304      	adds	r3, #4
 800a00e:	2100      	movs	r1, #0
 800a010:	4618      	mov	r0, r3
 800a012:	f001 f8b1 	bl	800b178 <RCCEx_PLL2_Config>
 800a016:	4603      	mov	r3, r0
 800a018:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a01a:	e012      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3324      	adds	r3, #36	; 0x24
 800a020:	2102      	movs	r1, #2
 800a022:	4618      	mov	r0, r3
 800a024:	f001 f95a 	bl	800b2dc <RCCEx_PLL3_Config>
 800a028:	4603      	mov	r3, r0
 800a02a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a02c:	e009      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	75fb      	strb	r3, [r7, #23]
      break;
 800a032:	e006      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a034:	bf00      	nop
 800a036:	e004      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a038:	bf00      	nop
 800a03a:	e002      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a03c:	bf00      	nop
 800a03e:	e000      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a040:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a042:	7dfb      	ldrb	r3, [r7, #23]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10a      	bne.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a048:	4b8c      	ldr	r3, [pc, #560]	; (800a27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a04c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a056:	4989      	ldr	r1, [pc, #548]	; (800a27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a058:	4313      	orrs	r3, r2
 800a05a:	654b      	str	r3, [r1, #84]	; 0x54
 800a05c:	e001      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a05e:	7dfb      	ldrb	r3, [r7, #23]
 800a060:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d044      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a078:	d01b      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800a07a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a07e:	d805      	bhi.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800a080:	2b00      	cmp	r3, #0
 800a082:	d022      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a088:	d00a      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800a08a:	e01b      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800a08c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a090:	d01d      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800a092:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a096:	d01c      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800a098:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a09c:	d01b      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800a09e:	e011      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f001 f866 	bl	800b178 <RCCEx_PLL2_Config>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a0b0:	e012      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3324      	adds	r3, #36	; 0x24
 800a0b6:	2102      	movs	r1, #2
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f001 f90f 	bl	800b2dc <RCCEx_PLL3_Config>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a0c2:	e009      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a0c8:	e006      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a0ca:	bf00      	nop
 800a0cc:	e004      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a0ce:	bf00      	nop
 800a0d0:	e002      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a0d2:	bf00      	nop
 800a0d4:	e000      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a0d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10a      	bne.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a0de:	4b67      	ldr	r3, [pc, #412]	; (800a27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a0e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0ec:	4963      	ldr	r1, [pc, #396]	; (800a27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	658b      	str	r3, [r1, #88]	; 0x58
 800a0f2:	e001      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
 800a0f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a100:	2b00      	cmp	r3, #0
 800a102:	d044      	beq.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a10a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a10e:	d01b      	beq.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800a110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a114:	d805      	bhi.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800a116:	2b00      	cmp	r3, #0
 800a118:	d022      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a11a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a11e:	d00a      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a120:	e01b      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800a122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a126:	d01d      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a128:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a12c:	d01c      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800a12e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a132:	d01b      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800a134:	e011      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	3304      	adds	r3, #4
 800a13a:	2100      	movs	r1, #0
 800a13c:	4618      	mov	r0, r3
 800a13e:	f001 f81b 	bl	800b178 <RCCEx_PLL2_Config>
 800a142:	4603      	mov	r3, r0
 800a144:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a146:	e012      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3324      	adds	r3, #36	; 0x24
 800a14c:	2102      	movs	r1, #2
 800a14e:	4618      	mov	r0, r3
 800a150:	f001 f8c4 	bl	800b2dc <RCCEx_PLL3_Config>
 800a154:	4603      	mov	r3, r0
 800a156:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a158:	e009      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	75fb      	strb	r3, [r7, #23]
      break;
 800a15e:	e006      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a160:	bf00      	nop
 800a162:	e004      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a164:	bf00      	nop
 800a166:	e002      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a168:	bf00      	nop
 800a16a:	e000      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a16c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10a      	bne.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a174:	4b41      	ldr	r3, [pc, #260]	; (800a27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a178:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a182:	493e      	ldr	r1, [pc, #248]	; (800a27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a184:	4313      	orrs	r3, r2
 800a186:	658b      	str	r3, [r1, #88]	; 0x58
 800a188:	e001      	b.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
 800a18c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0308 	and.w	r3, r3, #8
 800a196:	2b00      	cmp	r3, #0
 800a198:	d01a      	beq.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1a4:	d10a      	bne.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	3324      	adds	r3, #36	; 0x24
 800a1aa:	2102      	movs	r1, #2
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f001 f895 	bl	800b2dc <RCCEx_PLL3_Config>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a1bc:	4b2f      	ldr	r3, [pc, #188]	; (800a27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a1be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1ca:	492c      	ldr	r1, [pc, #176]	; (800a27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0310 	and.w	r3, r3, #16
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d01a      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1e6:	d10a      	bne.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	3324      	adds	r3, #36	; 0x24
 800a1ec:	2102      	movs	r1, #2
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f001 f874 	bl	800b2dc <RCCEx_PLL3_Config>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a1fe:	4b1f      	ldr	r3, [pc, #124]	; (800a27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a202:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a20c:	491b      	ldr	r1, [pc, #108]	; (800a27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a20e:	4313      	orrs	r3, r2
 800a210:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d032      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a228:	d00d      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800a22a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a22e:	d016      	beq.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800a230:	2b00      	cmp	r3, #0
 800a232:	d111      	bne.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	3304      	adds	r3, #4
 800a238:	2100      	movs	r1, #0
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 ff9c 	bl	800b178 <RCCEx_PLL2_Config>
 800a240:	4603      	mov	r3, r0
 800a242:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a244:	e00c      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	3324      	adds	r3, #36	; 0x24
 800a24a:	2102      	movs	r1, #2
 800a24c:	4618      	mov	r0, r3
 800a24e:	f001 f845 	bl	800b2dc <RCCEx_PLL3_Config>
 800a252:	4603      	mov	r3, r0
 800a254:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a256:	e003      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a258:	2301      	movs	r3, #1
 800a25a:	75fb      	strb	r3, [r7, #23]
      break;
 800a25c:	e000      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800a25e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a260:	7dfb      	ldrb	r3, [r7, #23]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10c      	bne.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a266:	4b05      	ldr	r3, [pc, #20]	; (800a27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a26a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a274:	4901      	ldr	r1, [pc, #4]	; (800a27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a276:	4313      	orrs	r3, r2
 800a278:	658b      	str	r3, [r1, #88]	; 0x58
 800a27a:	e003      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800a27c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a280:	7dfb      	ldrb	r3, [r7, #23]
 800a282:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d02f      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a296:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a29a:	d00c      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a29c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2a0:	d015      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800a2a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2a6:	d10f      	bne.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2a8:	4b79      	ldr	r3, [pc, #484]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	4a78      	ldr	r2, [pc, #480]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a2ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a2b4:	e00c      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	3324      	adds	r3, #36	; 0x24
 800a2ba:	2101      	movs	r1, #1
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f001 f80d 	bl	800b2dc <RCCEx_PLL3_Config>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a2c6:	e003      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a2cc:	e000      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800a2ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2d0:	7dfb      	ldrb	r3, [r7, #23]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10a      	bne.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a2d6:	4b6e      	ldr	r3, [pc, #440]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2e4:	496a      	ldr	r1, [pc, #424]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	654b      	str	r3, [r1, #84]	; 0x54
 800a2ea:	e001      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ec:	7dfb      	ldrb	r3, [r7, #23]
 800a2ee:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d029      	beq.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a300:	2b00      	cmp	r3, #0
 800a302:	d003      	beq.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800a304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a308:	d007      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a30a:	e00f      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a30c:	4b60      	ldr	r3, [pc, #384]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a310:	4a5f      	ldr	r2, [pc, #380]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a316:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a318:	e00b      	b.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	3304      	adds	r3, #4
 800a31e:	2102      	movs	r1, #2
 800a320:	4618      	mov	r0, r3
 800a322:	f000 ff29 	bl	800b178 <RCCEx_PLL2_Config>
 800a326:	4603      	mov	r3, r0
 800a328:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a32a:	e002      	b.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	75fb      	strb	r3, [r7, #23]
      break;
 800a330:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a332:	7dfb      	ldrb	r3, [r7, #23]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d109      	bne.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a338:	4b55      	ldr	r3, [pc, #340]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a33a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a33c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a344:	4952      	ldr	r1, [pc, #328]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a346:	4313      	orrs	r3, r2
 800a348:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a34a:	e001      	b.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a34c:	7dfb      	ldrb	r3, [r7, #23]
 800a34e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00a      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	3324      	adds	r3, #36	; 0x24
 800a360:	2102      	movs	r1, #2
 800a362:	4618      	mov	r0, r3
 800a364:	f000 ffba 	bl	800b2dc <RCCEx_PLL3_Config>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d02f      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a386:	d00c      	beq.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a38c:	d802      	bhi.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d011      	beq.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800a392:	e00d      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800a394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a398:	d00f      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800a39a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a39e:	d00e      	beq.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800a3a0:	e006      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3a2:	4b3b      	ldr	r3, [pc, #236]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a6:	4a3a      	ldr	r2, [pc, #232]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a3ae:	e007      	b.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a3b4:	e004      	b.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a3b6:	bf00      	nop
 800a3b8:	e002      	b.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a3ba:	bf00      	nop
 800a3bc:	e000      	b.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a3be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3c0:	7dfb      	ldrb	r3, [r7, #23]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d109      	bne.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a3c6:	4b32      	ldr	r3, [pc, #200]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3d2:	492f      	ldr	r1, [pc, #188]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	654b      	str	r3, [r1, #84]	; 0x54
 800a3d8:	e001      	b.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
 800a3dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d008      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a3ea:	4b29      	ldr	r3, [pc, #164]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f6:	4926      	ldr	r1, [pc, #152]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d009      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a408:	4b21      	ldr	r3, [pc, #132]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a416:	491e      	ldr	r1, [pc, #120]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a418:	4313      	orrs	r3, r2
 800a41a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d008      	beq.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a428:	4b19      	ldr	r3, [pc, #100]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a42c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a434:	4916      	ldr	r1, [pc, #88]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a436:	4313      	orrs	r3, r2
 800a438:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00d      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a446:	4b12      	ldr	r3, [pc, #72]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	4a11      	ldr	r2, [pc, #68]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a44c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a450:	6113      	str	r3, [r2, #16]
 800a452:	4b0f      	ldr	r3, [pc, #60]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a454:	691a      	ldr	r2, [r3, #16]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a45c:	490c      	ldr	r1, [pc, #48]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	da08      	bge.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a46a:	4b09      	ldr	r3, [pc, #36]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a46c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a46e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a476:	4906      	ldr	r1, [pc, #24]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a478:	4313      	orrs	r3, r2
 800a47a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800a47c:	7dbb      	ldrb	r3, [r7, #22]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800a482:	2300      	movs	r3, #0
 800a484:	e000      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3718      	adds	r7, #24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	58024400 	.word	0x58024400

0800a494 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b090      	sub	sp, #64	; 0x40
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4a2:	d150      	bne.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a4a4:	4ba1      	ldr	r3, [pc, #644]	; (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a4a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a8:	f003 0307 	and.w	r3, r3, #7
 800a4ac:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	2b04      	cmp	r3, #4
 800a4b2:	d844      	bhi.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800a4b4:	a201      	add	r2, pc, #4	; (adr r2, 800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800a4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ba:	bf00      	nop
 800a4bc:	0800a4d1 	.word	0x0800a4d1
 800a4c0:	0800a4e1 	.word	0x0800a4e1
 800a4c4:	0800a4f1 	.word	0x0800a4f1
 800a4c8:	0800a539 	.word	0x0800a539
 800a4cc:	0800a501 	.word	0x0800a501
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 fd03 	bl	800aee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4de:	e241      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4e0:	f107 0318 	add.w	r3, r7, #24
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f000 fa63 	bl	800a9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4ee:	e239      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4f0:	f107 030c 	add.w	r3, r7, #12
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f000 fba7 	bl	800ac48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4fe:	e231      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a500:	4b8a      	ldr	r3, [pc, #552]	; (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a504:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a508:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d102      	bne.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a510:	4b87      	ldr	r3, [pc, #540]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a512:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a514:	e226      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a51c:	d102      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800a51e:	4b85      	ldr	r3, [pc, #532]	; (800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a522:	e21f      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a52a:	d102      	bne.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800a52c:	4b82      	ldr	r3, [pc, #520]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a52e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a530:	e218      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a536:	e215      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a538:	4b80      	ldr	r3, [pc, #512]	; (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a53a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a53c:	e212      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a542:	bf00      	nop
 800a544:	e20e      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a54c:	d14f      	bne.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a54e:	4b77      	ldr	r3, [pc, #476]	; (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a552:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a556:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55a:	2b80      	cmp	r3, #128	; 0x80
 800a55c:	d01c      	beq.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a55e:	2b80      	cmp	r3, #128	; 0x80
 800a560:	d804      	bhi.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800a562:	2b00      	cmp	r3, #0
 800a564:	d008      	beq.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800a566:	2b40      	cmp	r3, #64	; 0x40
 800a568:	d00e      	beq.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a56a:	e03c      	b.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800a56c:	2bc0      	cmp	r3, #192	; 0xc0
 800a56e:	d037      	beq.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800a570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a574:	d018      	beq.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800a576:	e036      	b.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a57c:	4618      	mov	r0, r3
 800a57e:	f000 fcaf 	bl	800aee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a584:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a586:	e1ed      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a588:	f107 0318 	add.w	r3, r7, #24
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 fa0f 	bl	800a9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a596:	e1e5      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a598:	f107 030c 	add.w	r3, r7, #12
 800a59c:	4618      	mov	r0, r3
 800a59e:	f000 fb53 	bl	800ac48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5a6:	e1dd      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a5a8:	4b60      	ldr	r3, [pc, #384]	; (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a5aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5b0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d102      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a5b8:	4b5d      	ldr	r3, [pc, #372]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a5bc:	e1d2      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5c4:	d102      	bne.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800a5c6:	4b5b      	ldr	r3, [pc, #364]	; (800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5ca:	e1cb      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5d2:	d102      	bne.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800a5d4:	4b58      	ldr	r3, [pc, #352]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5d8:	e1c4      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5de:	e1c1      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a5e0:	4b56      	ldr	r3, [pc, #344]	; (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5e4:	e1be      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5ea:	bf00      	nop
 800a5ec:	e1ba      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5f4:	d153      	bne.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a5f6:	4b4d      	ldr	r3, [pc, #308]	; (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a5f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5fa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a5fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a606:	d01f      	beq.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a60c:	d805      	bhi.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00a      	beq.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800a612:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a616:	d00f      	beq.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800a618:	e03d      	b.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800a61a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a61e:	d037      	beq.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a620:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a624:	d018      	beq.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800a626:	e036      	b.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 fc57 	bl	800aee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a636:	e195      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a638:	f107 0318 	add.w	r3, r7, #24
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 f9b7 	bl	800a9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a646:	e18d      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a648:	f107 030c 	add.w	r3, r7, #12
 800a64c:	4618      	mov	r0, r3
 800a64e:	f000 fafb 	bl	800ac48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a656:	e185      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a658:	4b34      	ldr	r3, [pc, #208]	; (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a65a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a65c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a660:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a664:	2b00      	cmp	r3, #0
 800a666:	d102      	bne.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a668:	4b31      	ldr	r3, [pc, #196]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a66a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a66c:	e17a      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a674:	d102      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800a676:	4b2f      	ldr	r3, [pc, #188]	; (800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a67a:	e173      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a67e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a682:	d102      	bne.n	800a68a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800a684:	4b2c      	ldr	r3, [pc, #176]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a688:	e16c      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a68e:	e169      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a690:	4b2a      	ldr	r3, [pc, #168]	; (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a694:	e166      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a69a:	bf00      	nop
 800a69c:	e162      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6a4:	d15d      	bne.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a6a6:	4b21      	ldr	r3, [pc, #132]	; (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a6a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6aa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a6ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6b6:	d01f      	beq.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a6b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6bc:	d805      	bhi.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00a      	beq.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a6c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a6c6:	d00f      	beq.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800a6c8:	e047      	b.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800a6ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a6ce:	d041      	beq.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800a6d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a6d4:	d018      	beq.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800a6d6:	e040      	b.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f000 fbff 	bl	800aee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6e6:	e13d      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6e8:	f107 0318 	add.w	r3, r7, #24
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 f95f 	bl	800a9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6f6:	e135      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6f8:	f107 030c 	add.w	r3, r7, #12
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f000 faa3 	bl	800ac48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a706:	e12d      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a708:	4b08      	ldr	r3, [pc, #32]	; (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a70a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a70c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a710:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a714:	2b00      	cmp	r3, #0
 800a716:	d102      	bne.n	800a71e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a718:	4b05      	ldr	r3, [pc, #20]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a71a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a71c:	e122      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a720:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a724:	d10c      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800a726:	4b03      	ldr	r3, [pc, #12]	; (800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a728:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a72a:	e11b      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a72c:	58024400 	.word	0x58024400
 800a730:	03d09000 	.word	0x03d09000
 800a734:	003d0900 	.word	0x003d0900
 800a738:	017d7840 	.word	0x017d7840
 800a73c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a746:	d102      	bne.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800a748:	4b89      	ldr	r3, [pc, #548]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a74a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a74c:	e10a      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a74e:	2300      	movs	r3, #0
 800a750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a752:	e107      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a754:	4b87      	ldr	r3, [pc, #540]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a756:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a758:	e104      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a75e:	bf00      	nop
 800a760:	e100      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a768:	d153      	bne.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a76a:	4b83      	ldr	r3, [pc, #524]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a76c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a76e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a772:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a77a:	d01f      	beq.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a77c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a780:	d805      	bhi.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00a      	beq.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800a786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a78a:	d00f      	beq.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800a78c:	e03d      	b.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800a78e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a792:	d037      	beq.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800a794:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a798:	d018      	beq.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a79a:	e036      	b.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a79c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 fb9d 	bl	800aee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7aa:	e0db      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7ac:	f107 0318 	add.w	r3, r7, #24
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f000 f8fd 	bl	800a9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ba:	e0d3      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7bc:	f107 030c 	add.w	r3, r7, #12
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 fa41 	bl	800ac48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ca:	e0cb      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a7cc:	4b6a      	ldr	r3, [pc, #424]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a7ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7d4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d102      	bne.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a7dc:	4b67      	ldr	r3, [pc, #412]	; (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a7de:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a7e0:	e0c0      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7e8:	d102      	bne.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800a7ea:	4b65      	ldr	r3, [pc, #404]	; (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ee:	e0b9      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7f6:	d102      	bne.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800a7f8:	4b5d      	ldr	r3, [pc, #372]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7fc:	e0b2      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a802:	e0af      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a804:	4b5b      	ldr	r3, [pc, #364]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a806:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a808:	e0ac      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a80e:	bf00      	nop
 800a810:	e0a8      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a818:	d13d      	bne.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a81a:	4b57      	ldr	r3, [pc, #348]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a81c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a81e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a822:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a82a:	d00c      	beq.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a82c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a830:	d011      	beq.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a832:	2b00      	cmp	r3, #0
 800a834:	d12b      	bne.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a836:	f107 0318 	add.w	r3, r7, #24
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 f8b8 	bl	800a9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a844:	e08e      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a846:	f107 030c 	add.w	r3, r7, #12
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 f9fc 	bl	800ac48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a854:	e086      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a856:	4b48      	ldr	r3, [pc, #288]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a85a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a85e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a862:	2b00      	cmp	r3, #0
 800a864:	d102      	bne.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a866:	4b45      	ldr	r3, [pc, #276]	; (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a868:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a86a:	e07b      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a86e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a872:	d102      	bne.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800a874:	4b42      	ldr	r3, [pc, #264]	; (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a878:	e074      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a880:	d102      	bne.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800a882:	4b3b      	ldr	r3, [pc, #236]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a884:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a886:	e06d      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a888:	2300      	movs	r3, #0
 800a88a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a88c:	e06a      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a892:	bf00      	nop
 800a894:	e066      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a89c:	d11f      	bne.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a89e:	4b36      	ldr	r3, [pc, #216]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8a6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d003      	beq.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a8ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8b2:	d008      	beq.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800a8b4:	e00f      	b.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 fb10 	bl	800aee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8c4:	e04e      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8c6:	f107 0318 	add.w	r3, r7, #24
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 f870 	bl	800a9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a8d0:	6a3b      	ldr	r3, [r7, #32]
 800a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8d4:	e046      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8da:	bf00      	nop
 800a8dc:	e042      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8e4:	d13c      	bne.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a8e6:	4b24      	ldr	r3, [pc, #144]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a8e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ea:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a8ee:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8f6:	d01e      	beq.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800a8f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8fc:	d805      	bhi.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00d      	beq.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a906:	d00e      	beq.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800a908:	e026      	b.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800a90a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a90e:	d01d      	beq.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800a910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a914:	d01d      	beq.n	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a916:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a91a:	d014      	beq.n	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a91c:	e01c      	b.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a91e:	f000 f831 	bl	800a984 <HAL_RCCEx_GetD3PCLK1Freq>
 800a922:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a924:	e01e      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a926:	f107 0318 	add.w	r3, r7, #24
 800a92a:	4618      	mov	r0, r3
 800a92c:	f000 f840 	bl	800a9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a934:	e016      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a936:	f107 030c 	add.w	r3, r7, #12
 800a93a:	4618      	mov	r0, r3
 800a93c:	f000 f984 	bl	800ac48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a944:	e00e      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800a946:	4b0d      	ldr	r3, [pc, #52]	; (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a948:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a94a:	e00b      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800a94c:	4b0c      	ldr	r3, [pc, #48]	; (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a94e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a950:	e008      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800a952:	4b07      	ldr	r3, [pc, #28]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a956:	e005      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a958:	2300      	movs	r3, #0
 800a95a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a95c:	bf00      	nop
 800a95e:	e001      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800a960:	2300      	movs	r3, #0
 800a962:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a966:	4618      	mov	r0, r3
 800a968:	3740      	adds	r7, #64	; 0x40
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	017d7840 	.word	0x017d7840
 800a974:	00bb8000 	.word	0x00bb8000
 800a978:	58024400 	.word	0x58024400
 800a97c:	03d09000 	.word	0x03d09000
 800a980:	003d0900 	.word	0x003d0900

0800a984 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a988:	f7fe fe1e 	bl	80095c8 <HAL_RCC_GetHCLKFreq>
 800a98c:	4601      	mov	r1, r0
 800a98e:	4b06      	ldr	r3, [pc, #24]	; (800a9a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	091b      	lsrs	r3, r3, #4
 800a994:	f003 0307 	and.w	r3, r3, #7
 800a998:	4a04      	ldr	r2, [pc, #16]	; (800a9ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a99a:	5cd3      	ldrb	r3, [r2, r3]
 800a99c:	f003 031f 	and.w	r3, r3, #31
 800a9a0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	58024400 	.word	0x58024400
 800a9ac:	08019ec0 	.word	0x08019ec0

0800a9b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b089      	sub	sp, #36	; 0x24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9b8:	4b9d      	ldr	r3, [pc, #628]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9bc:	f003 0303 	and.w	r3, r3, #3
 800a9c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a9c2:	4b9b      	ldr	r3, [pc, #620]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c6:	0b1b      	lsrs	r3, r3, #12
 800a9c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a9ce:	4b98      	ldr	r3, [pc, #608]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d2:	091b      	lsrs	r3, r3, #4
 800a9d4:	f003 0301 	and.w	r3, r3, #1
 800a9d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a9da:	4b95      	ldr	r3, [pc, #596]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9de:	08db      	lsrs	r3, r3, #3
 800a9e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	fb02 f303 	mul.w	r3, r2, r3
 800a9ea:	ee07 3a90 	vmov	s15, r3
 800a9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f000 810a 	beq.w	800ac12 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800a9fe:	69bb      	ldr	r3, [r7, #24]
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d05a      	beq.n	800aaba <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d302      	bcc.n	800aa0e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d078      	beq.n	800aafe <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800aa0c:	e099      	b.n	800ab42 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa0e:	4b88      	ldr	r3, [pc, #544]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f003 0320 	and.w	r3, r3, #32
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d02d      	beq.n	800aa76 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa1a:	4b85      	ldr	r3, [pc, #532]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	08db      	lsrs	r3, r3, #3
 800aa20:	f003 0303 	and.w	r3, r3, #3
 800aa24:	4a83      	ldr	r2, [pc, #524]	; (800ac34 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800aa26:	fa22 f303 	lsr.w	r3, r2, r3
 800aa2a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	ee07 3a90 	vmov	s15, r3
 800aa3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa44:	4b7a      	ldr	r3, [pc, #488]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa4c:	ee07 3a90 	vmov	s15, r3
 800aa50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa54:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa58:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ac38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800aa5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa70:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aa74:	e087      	b.n	800ab86 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	ee07 3a90 	vmov	s15, r3
 800aa7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa80:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800aa84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa88:	4b69      	ldr	r3, [pc, #420]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aa8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa90:	ee07 3a90 	vmov	s15, r3
 800aa94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa98:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa9c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ac38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800aaa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aab4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aab8:	e065      	b.n	800ab86 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	ee07 3a90 	vmov	s15, r3
 800aac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ac40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800aac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aacc:	4b58      	ldr	r3, [pc, #352]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad4:	ee07 3a90 	vmov	s15, r3
 800aad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aadc:	ed97 6a03 	vldr	s12, [r7, #12]
 800aae0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ac38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800aae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aafc:	e043      	b.n	800ab86 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	ee07 3a90 	vmov	s15, r3
 800ab04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab08:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ac44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800ab0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab10:	4b47      	ldr	r3, [pc, #284]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab18:	ee07 3a90 	vmov	s15, r3
 800ab1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab20:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab24:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ac38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ab28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab40:	e021      	b.n	800ab86 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	ee07 3a90 	vmov	s15, r3
 800ab48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab4c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800ac40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800ab50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab54:	4b36      	ldr	r3, [pc, #216]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab5c:	ee07 3a90 	vmov	s15, r3
 800ab60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab64:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab68:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ac38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ab6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab84:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ab86:	4b2a      	ldr	r3, [pc, #168]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8a:	0a5b      	lsrs	r3, r3, #9
 800ab8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab90:	ee07 3a90 	vmov	s15, r3
 800ab94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aba0:	edd7 6a07 	vldr	s13, [r7, #28]
 800aba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abac:	ee17 2a90 	vmov	r2, s15
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800abb4:	4b1e      	ldr	r3, [pc, #120]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800abb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb8:	0c1b      	lsrs	r3, r3, #16
 800abba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abbe:	ee07 3a90 	vmov	s15, r3
 800abc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abce:	edd7 6a07 	vldr	s13, [r7, #28]
 800abd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abda:	ee17 2a90 	vmov	r2, s15
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800abe2:	4b13      	ldr	r3, [pc, #76]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800abe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe6:	0e1b      	lsrs	r3, r3, #24
 800abe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abec:	ee07 3a90 	vmov	s15, r3
 800abf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abfc:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac08:	ee17 2a90 	vmov	r2, s15
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac10:	e008      	b.n	800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	609a      	str	r2, [r3, #8]
}
 800ac24:	bf00      	nop
 800ac26:	3724      	adds	r7, #36	; 0x24
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	58024400 	.word	0x58024400
 800ac34:	03d09000 	.word	0x03d09000
 800ac38:	46000000 	.word	0x46000000
 800ac3c:	4c742400 	.word	0x4c742400
 800ac40:	4a742400 	.word	0x4a742400
 800ac44:	4bbebc20 	.word	0x4bbebc20

0800ac48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b089      	sub	sp, #36	; 0x24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac50:	4b9d      	ldr	r3, [pc, #628]	; (800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ac52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac54:	f003 0303 	and.w	r3, r3, #3
 800ac58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ac5a:	4b9b      	ldr	r3, [pc, #620]	; (800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5e:	0d1b      	lsrs	r3, r3, #20
 800ac60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac66:	4b98      	ldr	r3, [pc, #608]	; (800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ac68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6a:	0a1b      	lsrs	r3, r3, #8
 800ac6c:	f003 0301 	and.w	r3, r3, #1
 800ac70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ac72:	4b95      	ldr	r3, [pc, #596]	; (800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ac74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac76:	08db      	lsrs	r3, r3, #3
 800ac78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac7c:	693a      	ldr	r2, [r7, #16]
 800ac7e:	fb02 f303 	mul.w	r3, r2, r3
 800ac82:	ee07 3a90 	vmov	s15, r3
 800ac86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 810a 	beq.w	800aeaa <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d05a      	beq.n	800ad52 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d302      	bcc.n	800aca6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d078      	beq.n	800ad96 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800aca4:	e099      	b.n	800adda <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aca6:	4b88      	ldr	r3, [pc, #544]	; (800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 0320 	and.w	r3, r3, #32
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d02d      	beq.n	800ad0e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800acb2:	4b85      	ldr	r3, [pc, #532]	; (800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	08db      	lsrs	r3, r3, #3
 800acb8:	f003 0303 	and.w	r3, r3, #3
 800acbc:	4a83      	ldr	r2, [pc, #524]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800acbe:	fa22 f303 	lsr.w	r3, r2, r3
 800acc2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	ee07 3a90 	vmov	s15, r3
 800acca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	ee07 3a90 	vmov	s15, r3
 800acd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acdc:	4b7a      	ldr	r3, [pc, #488]	; (800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800acde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ace4:	ee07 3a90 	vmov	s15, r3
 800ace8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acec:	ed97 6a03 	vldr	s12, [r7, #12]
 800acf0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800aed0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800acf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad08:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ad0c:	e087      	b.n	800ae1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	ee07 3a90 	vmov	s15, r3
 800ad14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad18:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800aed4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800ad1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad20:	4b69      	ldr	r3, [pc, #420]	; (800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ad22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad28:	ee07 3a90 	vmov	s15, r3
 800ad2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad30:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad34:	eddf 5a66 	vldr	s11, [pc, #408]	; 800aed0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800ad38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad50:	e065      	b.n	800ae1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	ee07 3a90 	vmov	s15, r3
 800ad58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800ad60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad64:	4b58      	ldr	r3, [pc, #352]	; (800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ad66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad6c:	ee07 3a90 	vmov	s15, r3
 800ad70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad74:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad78:	eddf 5a55 	vldr	s11, [pc, #340]	; 800aed0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800ad7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad94:	e043      	b.n	800ae1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	ee07 3a90 	vmov	s15, r3
 800ad9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800aedc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800ada4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ada8:	4b47      	ldr	r3, [pc, #284]	; (800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800adaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adb0:	ee07 3a90 	vmov	s15, r3
 800adb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adb8:	ed97 6a03 	vldr	s12, [r7, #12]
 800adbc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800aed0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800adc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800add0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800add4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800add8:	e021      	b.n	800ae1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	ee07 3a90 	vmov	s15, r3
 800ade0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800ade8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adec:	4b36      	ldr	r3, [pc, #216]	; (800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800adee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adf4:	ee07 3a90 	vmov	s15, r3
 800adf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adfc:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae00:	eddf 5a33 	vldr	s11, [pc, #204]	; 800aed0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800ae04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae1c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ae1e:	4b2a      	ldr	r3, [pc, #168]	; (800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae22:	0a5b      	lsrs	r3, r3, #9
 800ae24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae28:	ee07 3a90 	vmov	s15, r3
 800ae2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae38:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae44:	ee17 2a90 	vmov	r2, s15
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ae4c:	4b1e      	ldr	r3, [pc, #120]	; (800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae50:	0c1b      	lsrs	r3, r3, #16
 800ae52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae66:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae72:	ee17 2a90 	vmov	r2, s15
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ae7a:	4b13      	ldr	r3, [pc, #76]	; (800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae7e:	0e1b      	lsrs	r3, r3, #24
 800ae80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae84:	ee07 3a90 	vmov	s15, r3
 800ae88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae90:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae94:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aea0:	ee17 2a90 	vmov	r2, s15
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aea8:	e008      	b.n	800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	609a      	str	r2, [r3, #8]
}
 800aebc:	bf00      	nop
 800aebe:	3724      	adds	r7, #36	; 0x24
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr
 800aec8:	58024400 	.word	0x58024400
 800aecc:	03d09000 	.word	0x03d09000
 800aed0:	46000000 	.word	0x46000000
 800aed4:	4c742400 	.word	0x4c742400
 800aed8:	4a742400 	.word	0x4a742400
 800aedc:	4bbebc20 	.word	0x4bbebc20

0800aee0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b089      	sub	sp, #36	; 0x24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aee8:	4b9d      	ldr	r3, [pc, #628]	; (800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aeea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeec:	f003 0303 	and.w	r3, r3, #3
 800aef0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800aef2:	4b9b      	ldr	r3, [pc, #620]	; (800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef6:	091b      	lsrs	r3, r3, #4
 800aef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aefc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aefe:	4b98      	ldr	r3, [pc, #608]	; (800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800af00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800af08:	4b95      	ldr	r3, [pc, #596]	; (800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800af0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af0c:	08db      	lsrs	r3, r3, #3
 800af0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	fb02 f303 	mul.w	r3, r2, r3
 800af18:	ee07 3a90 	vmov	s15, r3
 800af1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af20:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	2b00      	cmp	r3, #0
 800af28:	f000 810a 	beq.w	800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d05a      	beq.n	800afe8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800af32:	2b01      	cmp	r3, #1
 800af34:	d302      	bcc.n	800af3c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800af36:	2b02      	cmp	r3, #2
 800af38:	d078      	beq.n	800b02c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800af3a:	e099      	b.n	800b070 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af3c:	4b88      	ldr	r3, [pc, #544]	; (800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0320 	and.w	r3, r3, #32
 800af44:	2b00      	cmp	r3, #0
 800af46:	d02d      	beq.n	800afa4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af48:	4b85      	ldr	r3, [pc, #532]	; (800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	08db      	lsrs	r3, r3, #3
 800af4e:	f003 0303 	and.w	r3, r3, #3
 800af52:	4a84      	ldr	r2, [pc, #528]	; (800b164 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800af54:	fa22 f303 	lsr.w	r3, r2, r3
 800af58:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	ee07 3a90 	vmov	s15, r3
 800af60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	ee07 3a90 	vmov	s15, r3
 800af6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af72:	4b7b      	ldr	r3, [pc, #492]	; (800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800af74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af7a:	ee07 3a90 	vmov	s15, r3
 800af7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af82:	ed97 6a03 	vldr	s12, [r7, #12]
 800af86:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b168 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800af8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800afa2:	e087      	b.n	800b0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b16c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800afb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afb6:	4b6a      	ldr	r3, [pc, #424]	; (800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800afb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afbe:	ee07 3a90 	vmov	s15, r3
 800afc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afca:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b168 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800afce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afe6:	e065      	b.n	800b0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	ee07 3a90 	vmov	s15, r3
 800afee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800aff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800affa:	4b59      	ldr	r3, [pc, #356]	; (800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800affc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b00a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b00e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b168 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b02a:	e043      	b.n	800b0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	ee07 3a90 	vmov	s15, r3
 800b032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b036:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b174 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b03e:	4b48      	ldr	r3, [pc, #288]	; (800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b04e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b052:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b168 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b05e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b06a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b06e:	e021      	b.n	800b0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	ee07 3a90 	vmov	s15, r3
 800b076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b07a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b170 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800b07e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b082:	4b37      	ldr	r3, [pc, #220]	; (800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b08a:	ee07 3a90 	vmov	s15, r3
 800b08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b092:	ed97 6a03 	vldr	s12, [r7, #12]
 800b096:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b168 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b09a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b09e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0b2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b0b4:	4b2a      	ldr	r3, [pc, #168]	; (800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b8:	0a5b      	lsrs	r3, r3, #9
 800b0ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0be:	ee07 3a90 	vmov	s15, r3
 800b0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0da:	ee17 2a90 	vmov	r2, s15
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b0e2:	4b1f      	ldr	r3, [pc, #124]	; (800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e6:	0c1b      	lsrs	r3, r3, #16
 800b0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ec:	ee07 3a90 	vmov	s15, r3
 800b0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b108:	ee17 2a90 	vmov	r2, s15
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b110:	4b13      	ldr	r3, [pc, #76]	; (800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b114:	0e1b      	lsrs	r3, r3, #24
 800b116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b11a:	ee07 3a90 	vmov	s15, r3
 800b11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b12a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b12e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b136:	ee17 2a90 	vmov	r2, s15
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b13e:	e008      	b.n	800b152 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	609a      	str	r2, [r3, #8]
}
 800b152:	bf00      	nop
 800b154:	3724      	adds	r7, #36	; 0x24
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	58024400 	.word	0x58024400
 800b164:	03d09000 	.word	0x03d09000
 800b168:	46000000 	.word	0x46000000
 800b16c:	4c742400 	.word	0x4c742400
 800b170:	4a742400 	.word	0x4a742400
 800b174:	4bbebc20 	.word	0x4bbebc20

0800b178 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b186:	4b53      	ldr	r3, [pc, #332]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18a:	f003 0303 	and.w	r3, r3, #3
 800b18e:	2b03      	cmp	r3, #3
 800b190:	d101      	bne.n	800b196 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	e099      	b.n	800b2ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b196:	4b4f      	ldr	r3, [pc, #316]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a4e      	ldr	r2, [pc, #312]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b19c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b1a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1a2:	f7f8 fa01 	bl	80035a8 <HAL_GetTick>
 800b1a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1a8:	e008      	b.n	800b1bc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b1aa:	f7f8 f9fd 	bl	80035a8 <HAL_GetTick>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d901      	bls.n	800b1bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	e086      	b.n	800b2ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1bc:	4b45      	ldr	r3, [pc, #276]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1f0      	bne.n	800b1aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b1c8:	4b42      	ldr	r3, [pc, #264]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	031b      	lsls	r3, r3, #12
 800b1d6:	493f      	ldr	r1, [pc, #252]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	628b      	str	r3, [r1, #40]	; 0x28
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	025b      	lsls	r3, r3, #9
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	431a      	orrs	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	041b      	lsls	r3, r3, #16
 800b1fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1fe:	431a      	orrs	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	3b01      	subs	r3, #1
 800b206:	061b      	lsls	r3, r3, #24
 800b208:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b20c:	4931      	ldr	r1, [pc, #196]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b212:	4b30      	ldr	r3, [pc, #192]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b216:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	492d      	ldr	r1, [pc, #180]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b220:	4313      	orrs	r3, r2
 800b222:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b224:	4b2b      	ldr	r3, [pc, #172]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b228:	f023 0220 	bic.w	r2, r3, #32
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	4928      	ldr	r1, [pc, #160]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b232:	4313      	orrs	r3, r2
 800b234:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b236:	4b27      	ldr	r3, [pc, #156]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23a:	4a26      	ldr	r2, [pc, #152]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b23c:	f023 0310 	bic.w	r3, r3, #16
 800b240:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b242:	4b24      	ldr	r3, [pc, #144]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b246:	4b24      	ldr	r3, [pc, #144]	; (800b2d8 <RCCEx_PLL2_Config+0x160>)
 800b248:	4013      	ands	r3, r2
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	69d2      	ldr	r2, [r2, #28]
 800b24e:	00d2      	lsls	r2, r2, #3
 800b250:	4920      	ldr	r1, [pc, #128]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b252:	4313      	orrs	r3, r2
 800b254:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b256:	4b1f      	ldr	r3, [pc, #124]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25a:	4a1e      	ldr	r2, [pc, #120]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b25c:	f043 0310 	orr.w	r3, r3, #16
 800b260:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d106      	bne.n	800b276 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b268:	4b1a      	ldr	r3, [pc, #104]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26c:	4a19      	ldr	r2, [pc, #100]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b26e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b272:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b274:	e00f      	b.n	800b296 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d106      	bne.n	800b28a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b27c:	4b15      	ldr	r3, [pc, #84]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b280:	4a14      	ldr	r2, [pc, #80]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b286:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b288:	e005      	b.n	800b296 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b28a:	4b12      	ldr	r3, [pc, #72]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28e:	4a11      	ldr	r2, [pc, #68]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b290:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b294:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b296:	4b0f      	ldr	r3, [pc, #60]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a0e      	ldr	r2, [pc, #56]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b29c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b2a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2a2:	f7f8 f981 	bl	80035a8 <HAL_GetTick>
 800b2a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2a8:	e008      	b.n	800b2bc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b2aa:	f7f8 f97d 	bl	80035a8 <HAL_GetTick>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	d901      	bls.n	800b2bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	e006      	b.n	800b2ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2bc:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <RCCEx_PLL2_Config+0x15c>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d0f0      	beq.n	800b2aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	58024400 	.word	0x58024400
 800b2d8:	ffff0007 	.word	0xffff0007

0800b2dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2ea:	4b53      	ldr	r3, [pc, #332]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ee:	f003 0303 	and.w	r3, r3, #3
 800b2f2:	2b03      	cmp	r3, #3
 800b2f4:	d101      	bne.n	800b2fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e099      	b.n	800b42e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b2fa:	4b4f      	ldr	r3, [pc, #316]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a4e      	ldr	r2, [pc, #312]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b306:	f7f8 f94f 	bl	80035a8 <HAL_GetTick>
 800b30a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b30c:	e008      	b.n	800b320 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b30e:	f7f8 f94b 	bl	80035a8 <HAL_GetTick>
 800b312:	4602      	mov	r2, r0
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d901      	bls.n	800b320 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e086      	b.n	800b42e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b320:	4b45      	ldr	r3, [pc, #276]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1f0      	bne.n	800b30e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b32c:	4b42      	ldr	r3, [pc, #264]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b330:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	051b      	lsls	r3, r3, #20
 800b33a:	493f      	ldr	r1, [pc, #252]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b33c:	4313      	orrs	r3, r2
 800b33e:	628b      	str	r3, [r1, #40]	; 0x28
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	3b01      	subs	r3, #1
 800b346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	3b01      	subs	r3, #1
 800b350:	025b      	lsls	r3, r3, #9
 800b352:	b29b      	uxth	r3, r3
 800b354:	431a      	orrs	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	041b      	lsls	r3, r3, #16
 800b35e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b362:	431a      	orrs	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	3b01      	subs	r3, #1
 800b36a:	061b      	lsls	r3, r3, #24
 800b36c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b370:	4931      	ldr	r1, [pc, #196]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b372:	4313      	orrs	r3, r2
 800b374:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b376:	4b30      	ldr	r3, [pc, #192]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	695b      	ldr	r3, [r3, #20]
 800b382:	492d      	ldr	r1, [pc, #180]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b384:	4313      	orrs	r3, r2
 800b386:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b388:	4b2b      	ldr	r3, [pc, #172]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	699b      	ldr	r3, [r3, #24]
 800b394:	4928      	ldr	r1, [pc, #160]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b396:	4313      	orrs	r3, r2
 800b398:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b39a:	4b27      	ldr	r3, [pc, #156]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39e:	4a26      	ldr	r2, [pc, #152]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b3a6:	4b24      	ldr	r3, [pc, #144]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3aa:	4b24      	ldr	r3, [pc, #144]	; (800b43c <RCCEx_PLL3_Config+0x160>)
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	69d2      	ldr	r2, [r2, #28]
 800b3b2:	00d2      	lsls	r2, r2, #3
 800b3b4:	4920      	ldr	r1, [pc, #128]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b3ba:	4b1f      	ldr	r3, [pc, #124]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3be:	4a1e      	ldr	r2, [pc, #120]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d106      	bne.n	800b3da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b3cc:	4b1a      	ldr	r3, [pc, #104]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d0:	4a19      	ldr	r2, [pc, #100]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b3d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b3d8:	e00f      	b.n	800b3fa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d106      	bne.n	800b3ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b3e0:	4b15      	ldr	r3, [pc, #84]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e4:	4a14      	ldr	r2, [pc, #80]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b3ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b3ec:	e005      	b.n	800b3fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b3ee:	4b12      	ldr	r3, [pc, #72]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f2:	4a11      	ldr	r2, [pc, #68]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b3fa:	4b0f      	ldr	r3, [pc, #60]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a0e      	ldr	r2, [pc, #56]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b406:	f7f8 f8cf 	bl	80035a8 <HAL_GetTick>
 800b40a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b40c:	e008      	b.n	800b420 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b40e:	f7f8 f8cb 	bl	80035a8 <HAL_GetTick>
 800b412:	4602      	mov	r2, r0
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	1ad3      	subs	r3, r2, r3
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d901      	bls.n	800b420 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b41c:	2303      	movs	r3, #3
 800b41e:	e006      	b.n	800b42e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b420:	4b05      	ldr	r3, [pc, #20]	; (800b438 <RCCEx_PLL3_Config+0x15c>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d0f0      	beq.n	800b40e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	58024400 	.word	0x58024400
 800b43c:	ffff0007 	.word	0xffff0007

0800b440 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d067      	beq.n	800b522 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d106      	bne.n	800b46c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7f7 fce2 	bl	8002e30 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2202      	movs	r2, #2
 800b470:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	22ca      	movs	r2, #202	; 0xca
 800b47a:	625a      	str	r2, [r3, #36]	; 0x24
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2253      	movs	r2, #83	; 0x53
 800b482:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 fa49 	bl	800b91c <RTC_EnterInitMode>
 800b48a:	4603      	mov	r3, r0
 800b48c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800b48e:	7bfb      	ldrb	r3, [r7, #15]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d13b      	bne.n	800b50c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	6899      	ldr	r1, [r3, #8]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	4b23      	ldr	r3, [pc, #140]	; (800b52c <HAL_RTC_Init+0xec>)
 800b4a0:	400b      	ands	r3, r1
 800b4a2:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	6899      	ldr	r1, [r3, #8]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	431a      	orrs	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	431a      	orrs	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	0419      	lsls	r1, r3, #16
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68da      	ldr	r2, [r3, #12]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 fa51 	bl	800b97c <RTC_ExitInitMode>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800b4de:	7bfb      	ldrb	r3, [r7, #15]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d113      	bne.n	800b50c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f022 0203 	bic.w	r2, r2, #3
 800b4f2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	69da      	ldr	r2, [r3, #28]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	431a      	orrs	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	430a      	orrs	r2, r1
 800b50a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	22ff      	movs	r2, #255	; 0xff
 800b512:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800b514:	7bfb      	ldrb	r3, [r7, #15]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d103      	bne.n	800b522 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2201      	movs	r2, #1
 800b51e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800b522:	7bfb      	ldrb	r3, [r7, #15]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	ff8fffbf 	.word	0xff8fffbf

0800b530 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b530:	b590      	push	{r4, r7, lr}
 800b532:	b087      	sub	sp, #28
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b542:	2b01      	cmp	r3, #1
 800b544:	d101      	bne.n	800b54a <HAL_RTC_SetTime+0x1a>
 800b546:	2302      	movs	r3, #2
 800b548:	e089      	b.n	800b65e <HAL_RTC_SetTime+0x12e>
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2201      	movs	r2, #1
 800b54e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2202      	movs	r2, #2
 800b556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	22ca      	movs	r2, #202	; 0xca
 800b560:	625a      	str	r2, [r3, #36]	; 0x24
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2253      	movs	r2, #83	; 0x53
 800b568:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f000 f9d6 	bl	800b91c <RTC_EnterInitMode>
 800b570:	4603      	mov	r3, r0
 800b572:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b574:	7cfb      	ldrb	r3, [r7, #19]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d161      	bne.n	800b63e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d126      	bne.n	800b5ce <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d102      	bne.n	800b594 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2200      	movs	r2, #0
 800b592:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 fa2d 	bl	800b9f8 <RTC_ByteToBcd2>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	785b      	ldrb	r3, [r3, #1]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 fa26 	bl	800b9f8 <RTC_ByteToBcd2>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b5b0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	789b      	ldrb	r3, [r3, #2]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f000 fa1e 	bl	800b9f8 <RTC_ByteToBcd2>
 800b5bc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b5be:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	78db      	ldrb	r3, [r3, #3]
 800b5c6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	617b      	str	r3, [r7, #20]
 800b5cc:	e018      	b.n	800b600 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d102      	bne.n	800b5e2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	785b      	ldrb	r3, [r3, #1]
 800b5ec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b5ee:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b5f0:	68ba      	ldr	r2, [r7, #8]
 800b5f2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b5f4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	78db      	ldrb	r3, [r3, #3]
 800b5fa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	6979      	ldr	r1, [r7, #20]
 800b606:	4b18      	ldr	r3, [pc, #96]	; (800b668 <HAL_RTC_SetTime+0x138>)
 800b608:	400b      	ands	r3, r1
 800b60a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	689a      	ldr	r2, [r3, #8]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b61a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	6899      	ldr	r1, [r3, #8]
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	68da      	ldr	r2, [r3, #12]
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	691b      	ldr	r3, [r3, #16]
 800b62a:	431a      	orrs	r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	430a      	orrs	r2, r1
 800b632:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f000 f9a1 	bl	800b97c <RTC_ExitInitMode>
 800b63a:	4603      	mov	r3, r0
 800b63c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	22ff      	movs	r2, #255	; 0xff
 800b644:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b646:	7cfb      	ldrb	r3, [r7, #19]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d103      	bne.n	800b654 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b65c:	7cfb      	ldrb	r3, [r7, #19]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	371c      	adds	r7, #28
 800b662:	46bd      	mov	sp, r7
 800b664:	bd90      	pop	{r4, r7, pc}
 800b666:	bf00      	nop
 800b668:	007f7f7f 	.word	0x007f7f7f

0800b66c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b086      	sub	sp, #24
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	4b22      	ldr	r3, [pc, #136]	; (800b720 <HAL_RTC_GetTime+0xb4>)
 800b698:	4013      	ands	r3, r2
 800b69a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	0c1b      	lsrs	r3, r3, #16
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	0a1b      	lsrs	r3, r3, #8
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6c4:	b2da      	uxtb	r2, r3
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	0d9b      	lsrs	r3, r3, #22
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	f003 0301 	and.w	r3, r3, #1
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d11a      	bne.n	800b716 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f000 f9a7 	bl	800ba38 <RTC_Bcd2ToByte>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	785b      	ldrb	r3, [r3, #1]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 f99e 	bl	800ba38 <RTC_Bcd2ToByte>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	461a      	mov	r2, r3
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	789b      	ldrb	r3, [r3, #2]
 800b708:	4618      	mov	r0, r3
 800b70a:	f000 f995 	bl	800ba38 <RTC_Bcd2ToByte>
 800b70e:	4603      	mov	r3, r0
 800b710:	461a      	mov	r2, r3
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b716:	2300      	movs	r3, #0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	007f7f7f 	.word	0x007f7f7f

0800b724 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b724:	b590      	push	{r4, r7, lr}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b736:	2b01      	cmp	r3, #1
 800b738:	d101      	bne.n	800b73e <HAL_RTC_SetDate+0x1a>
 800b73a:	2302      	movs	r3, #2
 800b73c:	e073      	b.n	800b826 <HAL_RTC_SetDate+0x102>
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2201      	movs	r2, #1
 800b742:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2202      	movs	r2, #2
 800b74a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10e      	bne.n	800b772 <HAL_RTC_SetDate+0x4e>
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	785b      	ldrb	r3, [r3, #1]
 800b758:	f003 0310 	and.w	r3, r3, #16
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d008      	beq.n	800b772 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	785b      	ldrb	r3, [r3, #1]
 800b764:	f023 0310 	bic.w	r3, r3, #16
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	330a      	adds	r3, #10
 800b76c:	b2da      	uxtb	r2, r3
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d11c      	bne.n	800b7b2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	78db      	ldrb	r3, [r3, #3]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f000 f93b 	bl	800b9f8 <RTC_ByteToBcd2>
 800b782:	4603      	mov	r3, r0
 800b784:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	785b      	ldrb	r3, [r3, #1]
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 f934 	bl	800b9f8 <RTC_ByteToBcd2>
 800b790:	4603      	mov	r3, r0
 800b792:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b794:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	789b      	ldrb	r3, [r3, #2]
 800b79a:	4618      	mov	r0, r3
 800b79c:	f000 f92c 	bl	800b9f8 <RTC_ByteToBcd2>
 800b7a0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b7a2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	617b      	str	r3, [r7, #20]
 800b7b0:	e00e      	b.n	800b7d0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	78db      	ldrb	r3, [r3, #3]
 800b7b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	785b      	ldrb	r3, [r3, #1]
 800b7bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b7be:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800b7c0:	68ba      	ldr	r2, [r7, #8]
 800b7c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b7c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	22ca      	movs	r2, #202	; 0xca
 800b7d6:	625a      	str	r2, [r3, #36]	; 0x24
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2253      	movs	r2, #83	; 0x53
 800b7de:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 f89b 	bl	800b91c <RTC_EnterInitMode>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b7ea:	7cfb      	ldrb	r3, [r7, #19]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10a      	bne.n	800b806 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	6979      	ldr	r1, [r7, #20]
 800b7f6:	4b0e      	ldr	r3, [pc, #56]	; (800b830 <HAL_RTC_SetDate+0x10c>)
 800b7f8:	400b      	ands	r3, r1
 800b7fa:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f000 f8bd 	bl	800b97c <RTC_ExitInitMode>
 800b802:	4603      	mov	r3, r0
 800b804:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	22ff      	movs	r2, #255	; 0xff
 800b80c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b80e:	7cfb      	ldrb	r3, [r7, #19]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d103      	bne.n	800b81c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2200      	movs	r2, #0
 800b820:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b824:	7cfb      	ldrb	r3, [r7, #19]


}
 800b826:	4618      	mov	r0, r3
 800b828:	371c      	adds	r7, #28
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd90      	pop	{r4, r7, pc}
 800b82e:	bf00      	nop
 800b830:	00ffff3f 	.word	0x00ffff3f

0800b834 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	685a      	ldr	r2, [r3, #4]
 800b846:	4b21      	ldr	r3, [pc, #132]	; (800b8cc <HAL_RTC_GetDate+0x98>)
 800b848:	4013      	ands	r3, r2
 800b84a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	0c1b      	lsrs	r3, r3, #16
 800b850:	b2da      	uxtb	r2, r3
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	0a1b      	lsrs	r3, r3, #8
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	f003 031f 	and.w	r3, r3, #31
 800b860:	b2da      	uxtb	r2, r3
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b86e:	b2da      	uxtb	r2, r3
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	0b5b      	lsrs	r3, r3, #13
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	f003 0307 	and.w	r3, r3, #7
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d11a      	bne.n	800b8c0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	78db      	ldrb	r3, [r3, #3]
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 f8d2 	bl	800ba38 <RTC_Bcd2ToByte>
 800b894:	4603      	mov	r3, r0
 800b896:	461a      	mov	r2, r3
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	785b      	ldrb	r3, [r3, #1]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f000 f8c9 	bl	800ba38 <RTC_Bcd2ToByte>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	789b      	ldrb	r3, [r3, #2]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 f8c0 	bl	800ba38 <RTC_Bcd2ToByte>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b8c0:	2300      	movs	r3, #0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3718      	adds	r7, #24
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	00ffff3f 	.word	0x00ffff3f

0800b8d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68da      	ldr	r2, [r3, #12]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b8e6:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800b8e8:	f7f7 fe5e 	bl	80035a8 <HAL_GetTick>
 800b8ec:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b8ee:	e009      	b.n	800b904 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b8f0:	f7f7 fe5a 	bl	80035a8 <HAL_GetTick>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b8fe:	d901      	bls.n	800b904 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800b900:	2303      	movs	r3, #3
 800b902:	e007      	b.n	800b914 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	f003 0320 	and.w	r3, r3, #32
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d0ee      	beq.n	800b8f0 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b924:	2300      	movs	r3, #0
 800b926:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b932:	2b00      	cmp	r3, #0
 800b934:	d11d      	bne.n	800b972 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f04f 32ff 	mov.w	r2, #4294967295
 800b93e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b940:	f7f7 fe32 	bl	80035a8 <HAL_GetTick>
 800b944:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b946:	e00d      	b.n	800b964 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b948:	f7f7 fe2e 	bl	80035a8 <HAL_GetTick>
 800b94c:	4602      	mov	r2, r0
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b956:	d905      	bls.n	800b964 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b958:	2303      	movs	r3, #3
 800b95a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2203      	movs	r2, #3
 800b960:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d0ea      	beq.n	800b948 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800b972:	7bfb      	ldrb	r3, [r7, #15]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b984:	2300      	movs	r3, #0
 800b986:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800b988:	4b1a      	ldr	r3, [pc, #104]	; (800b9f4 <RTC_ExitInitMode+0x78>)
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	4a19      	ldr	r2, [pc, #100]	; (800b9f4 <RTC_ExitInitMode+0x78>)
 800b98e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b992:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b994:	4b17      	ldr	r3, [pc, #92]	; (800b9f4 <RTC_ExitInitMode+0x78>)
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	f003 0320 	and.w	r3, r3, #32
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d10c      	bne.n	800b9ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f7ff ff95 	bl	800b8d0 <HAL_RTC_WaitForSynchro>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d01e      	beq.n	800b9ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2203      	movs	r2, #3
 800b9b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	73fb      	strb	r3, [r7, #15]
 800b9b8:	e017      	b.n	800b9ea <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b9ba:	4b0e      	ldr	r3, [pc, #56]	; (800b9f4 <RTC_ExitInitMode+0x78>)
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	4a0d      	ldr	r2, [pc, #52]	; (800b9f4 <RTC_ExitInitMode+0x78>)
 800b9c0:	f023 0320 	bic.w	r3, r3, #32
 800b9c4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7ff ff82 	bl	800b8d0 <HAL_RTC_WaitForSynchro>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d005      	beq.n	800b9de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2203      	movs	r2, #3
 800b9d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b9de:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <RTC_ExitInitMode+0x78>)
 800b9e0:	689b      	ldr	r3, [r3, #8]
 800b9e2:	4a04      	ldr	r2, [pc, #16]	; (800b9f4 <RTC_ExitInitMode+0x78>)
 800b9e4:	f043 0320 	orr.w	r3, r3, #32
 800b9e8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	58004000 	.word	0x58004000

0800b9f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	4603      	mov	r3, r0
 800ba00:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ba02:	2300      	movs	r3, #0
 800ba04:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800ba06:	79fb      	ldrb	r3, [r7, #7]
 800ba08:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800ba0a:	e005      	b.n	800ba18 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800ba12:	7afb      	ldrb	r3, [r7, #11]
 800ba14:	3b0a      	subs	r3, #10
 800ba16:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800ba18:	7afb      	ldrb	r3, [r7, #11]
 800ba1a:	2b09      	cmp	r3, #9
 800ba1c:	d8f6      	bhi.n	800ba0c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	011b      	lsls	r3, r3, #4
 800ba24:	b2da      	uxtb	r2, r3
 800ba26:	7afb      	ldrb	r3, [r7, #11]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	b2db      	uxtb	r3, r3
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800ba42:	79fb      	ldrb	r3, [r7, #7]
 800ba44:	091b      	lsrs	r3, r3, #4
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	461a      	mov	r2, r3
 800ba4a:	0092      	lsls	r2, r2, #2
 800ba4c:	4413      	add	r3, r2
 800ba4e:	005b      	lsls	r3, r3, #1
 800ba50:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800ba52:	79fb      	ldrb	r3, [r7, #7]
 800ba54:	f003 030f 	and.w	r3, r3, #15
 800ba58:	b2da      	uxtb	r2, r3
 800ba5a:	7bfb      	ldrb	r3, [r7, #15]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	b2db      	uxtb	r3, r3
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3714      	adds	r7, #20
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b08a      	sub	sp, #40	; 0x28
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d101      	bne.n	800ba7e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e07c      	b.n	800bb78 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10c      	bne.n	800baa4 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	699b      	ldr	r3, [r3, #24]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d102      	bne.n	800ba9e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2202      	movs	r2, #2
 800ba9c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7f7 f9e0 	bl	8002e64 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2203      	movs	r2, #3
 800baa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 f867 	bl	800bb80 <HAL_SD_InitCard>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	e05d      	b.n	800bb78 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800babc:	f107 0308 	add.w	r3, r7, #8
 800bac0:	4619      	mov	r1, r3
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f001 f8ce 	bl	800cc64 <HAL_SD_GetCardStatus>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d001      	beq.n	800bad2 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	e052      	b.n	800bb78 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800bad2:	7e3b      	ldrb	r3, [r7, #24]
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bad8:	7e7b      	ldrb	r3, [r7, #25]
 800bada:	b2db      	uxtb	r3, r3
 800badc:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d10a      	bne.n	800bafc <HAL_SD_Init+0x90>
 800bae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d102      	bne.n	800baf2 <HAL_SD_Init+0x86>
 800baec:	6a3b      	ldr	r3, [r7, #32]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d004      	beq.n	800bafc <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baf8:	65da      	str	r2, [r3, #92]	; 0x5c
 800bafa:	e00b      	b.n	800bb14 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d104      	bne.n	800bb0e <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb0a:	65da      	str	r2, [r3, #92]	; 0x5c
 800bb0c:	e002      	b.n	800bb14 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	4619      	mov	r1, r3
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f001 f984 	bl	800ce28 <HAL_SD_ConfigWideBusOperation>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	e026      	b.n	800bb78 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800bb2a:	f7f7 fd3d 	bl	80035a8 <HAL_GetTick>
 800bb2e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bb30:	e011      	b.n	800bb56 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800bb32:	f7f7 fd39 	bl	80035a8 <HAL_GetTick>
 800bb36:	4602      	mov	r2, r0
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb40:	d109      	bne.n	800bb56 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800bb52:	2303      	movs	r3, #3
 800bb54:	e010      	b.n	800bb78 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f001 fa10 	bl	800cf7c <HAL_SD_GetCardState>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b04      	cmp	r3, #4
 800bb60:	d1e7      	bne.n	800bb32 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2201      	movs	r2, #1
 800bb72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3728      	adds	r7, #40	; 0x28
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bb80:	b5b0      	push	{r4, r5, r7, lr}
 800bb82:	b08e      	sub	sp, #56	; 0x38
 800bb84:	af04      	add	r7, sp, #16
 800bb86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bb90:	2300      	movs	r3, #0
 800bb92:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bb94:	2300      	movs	r3, #0
 800bb96:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bb98:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bb9c:	f7fe fc7a 	bl	800a494 <HAL_RCCEx_GetPeriphCLKFreq>
 800bba0:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800bba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba4:	0a1b      	lsrs	r3, r3, #8
 800bba6:	4a40      	ldr	r2, [pc, #256]	; (800bca8 <HAL_SD_InitCard+0x128>)
 800bba8:	fba2 2303 	umull	r2, r3, r2, r3
 800bbac:	091b      	lsrs	r3, r3, #4
 800bbae:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	699b      	ldr	r3, [r3, #24]
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d107      	bne.n	800bbc8 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f042 0210 	orr.w	r2, r2, #16
 800bbc6:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681d      	ldr	r5, [r3, #0]
 800bbcc:	466c      	mov	r4, sp
 800bbce:	f107 0314 	add.w	r3, r7, #20
 800bbd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bbd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bbda:	f107 0308 	add.w	r3, r7, #8
 800bbde:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	f004 f9f5 	bl	800ffd0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f004 fa38 	bl	8010060 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	005b      	lsls	r3, r3, #1
 800bbf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbfa:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800bbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d008      	beq.n	800bc14 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800bc02:	4a2a      	ldr	r2, [pc, #168]	; (800bcac <HAL_SD_InitCard+0x12c>)
 800bc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc06:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7f7 fcd7 	bl	80035c0 <HAL_Delay>
 800bc12:	e002      	b.n	800bc1a <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800bc14:	2002      	movs	r0, #2
 800bc16:	f7f7 fcd3 	bl	80035c0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f001 fa8c 	bl	800d138 <SD_PowerON>
 800bc20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc22:	6a3b      	ldr	r3, [r7, #32]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d00b      	beq.n	800bc40 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc34:	6a3b      	ldr	r3, [r7, #32]
 800bc36:	431a      	orrs	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e02e      	b.n	800bc9e <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f001 f9bb 	bl	800cfbc <SD_InitCard>
 800bc46:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc48:	6a3b      	ldr	r3, [r7, #32]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00b      	beq.n	800bc66 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2201      	movs	r2, #1
 800bc52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	431a      	orrs	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e01b      	b.n	800bc9e <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f004 fa8c 	bl	801018c <SDMMC_CmdBlockLength>
 800bc74:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc76:	6a3b      	ldr	r3, [r7, #32]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00f      	beq.n	800bc9c <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a0b      	ldr	r2, [pc, #44]	; (800bcb0 <HAL_SD_InitCard+0x130>)
 800bc82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc88:	6a3b      	ldr	r3, [r7, #32]
 800bc8a:	431a      	orrs	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2201      	movs	r2, #1
 800bc94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	e000      	b.n	800bc9e <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3728      	adds	r7, #40	; 0x28
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bdb0      	pop	{r4, r5, r7, pc}
 800bca6:	bf00      	nop
 800bca8:	014f8b59 	.word	0x014f8b59
 800bcac:	00012110 	.word	0x00012110
 800bcb0:	1fe00fff 	.word	0x1fe00fff

0800bcb4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b092      	sub	sp, #72	; 0x48
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
 800bcc0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bcc2:	f7f7 fc71 	bl	80035a8 <HAL_GetTick>
 800bcc6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d107      	bne.n	800bce6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	e167      	b.n	800bfb6 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	f040 815a 	bne.w	800bfa8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bcfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	441a      	add	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d907      	bls.n	800bd18 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bd14:	2301      	movs	r3, #1
 800bd16:	e14e      	b.n	800bfb6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2203      	movs	r2, #3
 800bd1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2200      	movs	r2, #0
 800bd26:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d002      	beq.n	800bd36 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800bd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd32:	025b      	lsls	r3, r3, #9
 800bd34:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bd36:	f04f 33ff 	mov.w	r3, #4294967295
 800bd3a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	025b      	lsls	r3, r3, #9
 800bd40:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bd42:	2390      	movs	r3, #144	; 0x90
 800bd44:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bd46:	2302      	movs	r3, #2
 800bd48:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f107 0214 	add.w	r2, r7, #20
 800bd5a:	4611      	mov	r1, r2
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f004 f9e9 	bl	8010134 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68da      	ldr	r2, [r3, #12]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd70:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d90a      	bls.n	800bd8e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2202      	movs	r2, #2
 800bd7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd84:	4618      	mov	r0, r3
 800bd86:	f004 fa47 	bl	8010218 <SDMMC_CmdReadMultiBlock>
 800bd8a:	6478      	str	r0, [r7, #68]	; 0x44
 800bd8c:	e009      	b.n	800bda2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2201      	movs	r2, #1
 800bd92:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f004 fa19 	bl	80101d2 <SDMMC_CmdReadSingleBlock>
 800bda0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bda2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d012      	beq.n	800bdce <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a84      	ldr	r2, [pc, #528]	; (800bfc0 <HAL_SD_ReadBlocks+0x30c>)
 800bdae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdb6:	431a      	orrs	r2, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e0f3      	b.n	800bfb6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bdd2:	e058      	b.n	800be86 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d033      	beq.n	800be4a <HAL_SD_ReadBlocks+0x196>
 800bde2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde4:	2b1f      	cmp	r3, #31
 800bde6:	d930      	bls.n	800be4a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800bde8:	2300      	movs	r3, #0
 800bdea:	643b      	str	r3, [r7, #64]	; 0x40
 800bdec:	e027      	b.n	800be3e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f004 f916 	bl	8010024 <SDMMC_ReadFIFO>
 800bdf8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be00:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800be02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be04:	3301      	adds	r3, #1
 800be06:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800be08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0a:	0a1b      	lsrs	r3, r3, #8
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800be12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be14:	3301      	adds	r3, #1
 800be16:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800be18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1a:	0c1b      	lsrs	r3, r3, #16
 800be1c:	b2da      	uxtb	r2, r3
 800be1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be20:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800be22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be24:	3301      	adds	r3, #1
 800be26:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800be28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2a:	0e1b      	lsrs	r3, r3, #24
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be30:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800be32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be34:	3301      	adds	r3, #1
 800be36:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800be38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be3a:	3301      	adds	r3, #1
 800be3c:	643b      	str	r3, [r7, #64]	; 0x40
 800be3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be40:	2b07      	cmp	r3, #7
 800be42:	d9d4      	bls.n	800bdee <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800be44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be46:	3b20      	subs	r3, #32
 800be48:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800be4a:	f7f7 fbad 	bl	80035a8 <HAL_GetTick>
 800be4e:	4602      	mov	r2, r0
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	1ad3      	subs	r3, r2, r3
 800be54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be56:	429a      	cmp	r2, r3
 800be58:	d902      	bls.n	800be60 <HAL_SD_ReadBlocks+0x1ac>
 800be5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d112      	bne.n	800be86 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a56      	ldr	r2, [pc, #344]	; (800bfc0 <HAL_SD_ReadBlocks+0x30c>)
 800be66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2201      	movs	r2, #1
 800be78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2200      	movs	r2, #0
 800be80:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800be82:	2303      	movs	r3, #3
 800be84:	e097      	b.n	800bfb6 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be8c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800be90:	2b00      	cmp	r3, #0
 800be92:	d09f      	beq.n	800bdd4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	68da      	ldr	r2, [r3, #12]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bea2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d022      	beq.n	800bef8 <HAL_SD_ReadBlocks+0x244>
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d91f      	bls.n	800bef8 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bebc:	2b03      	cmp	r3, #3
 800bebe:	d01b      	beq.n	800bef8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f004 fa11 	bl	80102ec <SDMMC_CmdStopTransfer>
 800beca:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800becc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d012      	beq.n	800bef8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4a3a      	ldr	r2, [pc, #232]	; (800bfc0 <HAL_SD_ReadBlocks+0x30c>)
 800bed8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bee0:	431a      	orrs	r2, r3
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2201      	movs	r2, #1
 800beea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2200      	movs	r2, #0
 800bef2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800bef4:	2301      	movs	r3, #1
 800bef6:	e05e      	b.n	800bfb6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800befe:	f003 0308 	and.w	r3, r3, #8
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d012      	beq.n	800bf2c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4a2d      	ldr	r2, [pc, #180]	; (800bfc0 <HAL_SD_ReadBlocks+0x30c>)
 800bf0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf12:	f043 0208 	orr.w	r2, r3, #8
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2200      	movs	r2, #0
 800bf26:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e044      	b.n	800bfb6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf32:	f003 0302 	and.w	r3, r3, #2
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d012      	beq.n	800bf60 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a20      	ldr	r2, [pc, #128]	; (800bfc0 <HAL_SD_ReadBlocks+0x30c>)
 800bf40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf46:	f043 0202 	orr.w	r2, r3, #2
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	e02a      	b.n	800bfb6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf66:	f003 0320 	and.w	r3, r3, #32
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d012      	beq.n	800bf94 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a13      	ldr	r2, [pc, #76]	; (800bfc0 <HAL_SD_ReadBlocks+0x30c>)
 800bf74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf7a:	f043 0220 	orr.w	r2, r3, #32
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2201      	movs	r2, #1
 800bf86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	e010      	b.n	800bfb6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a0a      	ldr	r2, [pc, #40]	; (800bfc4 <HAL_SD_ReadBlocks+0x310>)
 800bf9a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	e006      	b.n	800bfb6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bfb4:	2301      	movs	r3, #1
  }
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3748      	adds	r7, #72	; 0x48
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	1fe00fff 	.word	0x1fe00fff
 800bfc4:	18000f3a 	.word	0x18000f3a

0800bfc8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b092      	sub	sp, #72	; 0x48
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
 800bfd4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bfd6:	f7f7 fae7 	bl	80035a8 <HAL_GetTick>
 800bfda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d107      	bne.n	800bffa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	e16b      	b.n	800c2d2 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c000:	b2db      	uxtb	r3, r3
 800c002:	2b01      	cmp	r3, #1
 800c004:	f040 815e 	bne.w	800c2c4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2200      	movs	r2, #0
 800c00c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c00e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	441a      	add	r2, r3
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c018:	429a      	cmp	r2, r3
 800c01a:	d907      	bls.n	800c02c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c020:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c028:	2301      	movs	r3, #1
 800c02a:	e152      	b.n	800c2d2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2203      	movs	r2, #3
 800c030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2200      	movs	r2, #0
 800c03a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c040:	2b01      	cmp	r3, #1
 800c042:	d002      	beq.n	800c04a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800c044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c046:	025b      	lsls	r3, r3, #9
 800c048:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c04a:	f04f 33ff 	mov.w	r3, #4294967295
 800c04e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	025b      	lsls	r3, r3, #9
 800c054:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c056:	2390      	movs	r3, #144	; 0x90
 800c058:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c05a:	2300      	movs	r3, #0
 800c05c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c05e:	2300      	movs	r3, #0
 800c060:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c062:	2300      	movs	r3, #0
 800c064:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f107 0218 	add.w	r2, r7, #24
 800c06e:	4611      	mov	r1, r2
 800c070:	4618      	mov	r0, r3
 800c072:	f004 f85f 	bl	8010134 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68da      	ldr	r2, [r3, #12]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c084:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d90a      	bls.n	800c0a2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2220      	movs	r2, #32
 800c090:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c098:	4618      	mov	r0, r3
 800c09a:	f004 f903 	bl	80102a4 <SDMMC_CmdWriteMultiBlock>
 800c09e:	6478      	str	r0, [r7, #68]	; 0x44
 800c0a0:	e009      	b.n	800c0b6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2210      	movs	r2, #16
 800c0a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f004 f8d5 	bl	801025e <SDMMC_CmdWriteSingleBlock>
 800c0b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d012      	beq.n	800c0e2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a86      	ldr	r2, [pc, #536]	; (800c2dc <HAL_SD_WriteBlocks+0x314>)
 800c0c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ca:	431a      	orrs	r2, r3
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	e0f7      	b.n	800c2d2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800c0e2:	69fb      	ldr	r3, [r7, #28]
 800c0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c0e6:	e05c      	b.n	800c1a2 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d037      	beq.n	800c166 <HAL_SD_WriteBlocks+0x19e>
 800c0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f8:	2b1f      	cmp	r3, #31
 800c0fa:	d934      	bls.n	800c166 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	643b      	str	r3, [r7, #64]	; 0x40
 800c100:	e02b      	b.n	800c15a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800c102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10a:	3301      	adds	r3, #1
 800c10c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800c10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	021a      	lsls	r2, r3, #8
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	4313      	orrs	r3, r2
 800c118:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c11c:	3301      	adds	r3, #1
 800c11e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800c120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	041a      	lsls	r2, r3, #16
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	4313      	orrs	r3, r2
 800c12a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c12e:	3301      	adds	r3, #1
 800c130:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	061a      	lsls	r2, r3, #24
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c140:	3301      	adds	r3, #1
 800c142:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f107 0214 	add.w	r2, r7, #20
 800c14c:	4611      	mov	r1, r2
 800c14e:	4618      	mov	r0, r3
 800c150:	f003 ff75 	bl	801003e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800c154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c156:	3301      	adds	r3, #1
 800c158:	643b      	str	r3, [r7, #64]	; 0x40
 800c15a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c15c:	2b07      	cmp	r3, #7
 800c15e:	d9d0      	bls.n	800c102 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800c160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c162:	3b20      	subs	r3, #32
 800c164:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c166:	f7f7 fa1f 	bl	80035a8 <HAL_GetTick>
 800c16a:	4602      	mov	r2, r0
 800c16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16e:	1ad3      	subs	r3, r2, r3
 800c170:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c172:	429a      	cmp	r2, r3
 800c174:	d902      	bls.n	800c17c <HAL_SD_WriteBlocks+0x1b4>
 800c176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d112      	bne.n	800c1a2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a56      	ldr	r2, [pc, #344]	; (800c2dc <HAL_SD_WriteBlocks+0x314>)
 800c182:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c18a:	431a      	orrs	r2, r3
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800c19e:	2303      	movs	r3, #3
 800c1a0:	e097      	b.n	800c2d2 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1a8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d09b      	beq.n	800c0e8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68da      	ldr	r2, [r3, #12]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1be:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d022      	beq.n	800c214 <HAL_SD_WriteBlocks+0x24c>
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d91f      	bls.n	800c214 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1d8:	2b03      	cmp	r3, #3
 800c1da:	d01b      	beq.n	800c214 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f004 f883 	bl	80102ec <SDMMC_CmdStopTransfer>
 800c1e6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c1e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d012      	beq.n	800c214 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a3a      	ldr	r2, [pc, #232]	; (800c2dc <HAL_SD_WriteBlocks+0x314>)
 800c1f4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1fc:	431a      	orrs	r2, r3
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800c210:	2301      	movs	r3, #1
 800c212:	e05e      	b.n	800c2d2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c21a:	f003 0308 	and.w	r3, r3, #8
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d012      	beq.n	800c248 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a2d      	ldr	r2, [pc, #180]	; (800c2dc <HAL_SD_WriteBlocks+0x314>)
 800c228:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c22e:	f043 0208 	orr.w	r2, r3, #8
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2201      	movs	r2, #1
 800c23a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2200      	movs	r2, #0
 800c242:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c244:	2301      	movs	r3, #1
 800c246:	e044      	b.n	800c2d2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c24e:	f003 0302 	and.w	r3, r3, #2
 800c252:	2b00      	cmp	r3, #0
 800c254:	d012      	beq.n	800c27c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a20      	ldr	r2, [pc, #128]	; (800c2dc <HAL_SD_WriteBlocks+0x314>)
 800c25c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c262:	f043 0202 	orr.w	r2, r3, #2
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2201      	movs	r2, #1
 800c26e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2200      	movs	r2, #0
 800c276:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c278:	2301      	movs	r3, #1
 800c27a:	e02a      	b.n	800c2d2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c282:	f003 0310 	and.w	r3, r3, #16
 800c286:	2b00      	cmp	r3, #0
 800c288:	d012      	beq.n	800c2b0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4a13      	ldr	r2, [pc, #76]	; (800c2dc <HAL_SD_WriteBlocks+0x314>)
 800c290:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c296:	f043 0210 	orr.w	r2, r3, #16
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e010      	b.n	800c2d2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a0a      	ldr	r2, [pc, #40]	; (800c2e0 <HAL_SD_WriteBlocks+0x318>)
 800c2b6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	e006      	b.n	800c2d2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
  }
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3748      	adds	r7, #72	; 0x48
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	1fe00fff 	.word	0x1fe00fff
 800c2e0:	18000f3a 	.word	0x18000f3a

0800c2e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b08c      	sub	sp, #48	; 0x30
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	607a      	str	r2, [r7, #4]
 800c2f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d107      	bne.n	800c30c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c300:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	e08d      	b.n	800c428 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c312:	b2db      	uxtb	r3, r3
 800c314:	2b01      	cmp	r3, #1
 800c316:	f040 8086 	bne.w	800c426 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2200      	movs	r2, #0
 800c31e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	441a      	add	r2, r3
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d907      	bls.n	800c33e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c332:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	e074      	b.n	800c428 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2203      	movs	r2, #3
 800c342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2200      	movs	r2, #0
 800c34c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	025a      	lsls	r2, r3, #9
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c360:	2b01      	cmp	r3, #1
 800c362:	d002      	beq.n	800c36a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c366:	025b      	lsls	r3, r3, #9
 800c368:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c36a:	f04f 33ff 	mov.w	r3, #4294967295
 800c36e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	025b      	lsls	r3, r3, #9
 800c374:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c376:	2390      	movs	r3, #144	; 0x90
 800c378:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c37a:	2302      	movs	r3, #2
 800c37c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c37e:	2300      	movs	r3, #0
 800c380:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c382:	2300      	movs	r3, #0
 800c384:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f107 0210 	add.w	r2, r7, #16
 800c38e:	4611      	mov	r1, r2
 800c390:	4618      	mov	r0, r3
 800c392:	f003 fecf 	bl	8010134 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68da      	ldr	r2, [r3, #12]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3a4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d90a      	bls.n	800c3d2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2282      	movs	r2, #130	; 0x82
 800c3c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f003 ff25 	bl	8010218 <SDMMC_CmdReadMultiBlock>
 800c3ce:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c3d0:	e009      	b.n	800c3e6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2281      	movs	r2, #129	; 0x81
 800c3d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f003 fef7 	bl	80101d2 <SDMMC_CmdReadSingleBlock>
 800c3e4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d012      	beq.n	800c412 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a0f      	ldr	r2, [pc, #60]	; (800c430 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c3f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fa:	431a      	orrs	r2, r3
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2201      	movs	r2, #1
 800c404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2200      	movs	r2, #0
 800c40c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c40e:	2301      	movs	r3, #1
 800c410:	e00a      	b.n	800c428 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c420:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800c422:	2300      	movs	r3, #0
 800c424:	e000      	b.n	800c428 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c426:	2302      	movs	r3, #2
  }
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3730      	adds	r7, #48	; 0x30
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	1fe00fff 	.word	0x1fe00fff

0800c434 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b08c      	sub	sp, #48	; 0x30
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d107      	bne.n	800c45c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c450:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	e08d      	b.n	800c578 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c462:	b2db      	uxtb	r3, r3
 800c464:	2b01      	cmp	r3, #1
 800c466:	f040 8086 	bne.w	800c576 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2200      	movs	r2, #0
 800c46e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	441a      	add	r2, r3
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d907      	bls.n	800c48e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c482:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e074      	b.n	800c578 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2203      	movs	r2, #3
 800c492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2200      	movs	r2, #0
 800c49c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	68ba      	ldr	r2, [r7, #8]
 800c4a2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	025a      	lsls	r2, r3, #9
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d002      	beq.n	800c4ba <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b6:	025b      	lsls	r3, r3, #9
 800c4b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c4be:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	025b      	lsls	r3, r3, #9
 800c4c4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c4c6:	2390      	movs	r3, #144	; 0x90
 800c4c8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f107 0210 	add.w	r2, r7, #16
 800c4de:	4611      	mov	r1, r2
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f003 fe27 	bl	8010134 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68da      	ldr	r2, [r3, #12]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4f4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2201      	movs	r2, #1
 800c504:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d90a      	bls.n	800c522 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	22a0      	movs	r2, #160	; 0xa0
 800c510:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c518:	4618      	mov	r0, r3
 800c51a:	f003 fec3 	bl	80102a4 <SDMMC_CmdWriteMultiBlock>
 800c51e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c520:	e009      	b.n	800c536 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2290      	movs	r2, #144	; 0x90
 800c526:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c52e:	4618      	mov	r0, r3
 800c530:	f003 fe95 	bl	801025e <SDMMC_CmdWriteSingleBlock>
 800c534:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d012      	beq.n	800c562 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a0f      	ldr	r2, [pc, #60]	; (800c580 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c542:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54a:	431a      	orrs	r2, r3
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2201      	movs	r2, #1
 800c554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2200      	movs	r2, #0
 800c55c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	e00a      	b.n	800c578 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800c570:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	e000      	b.n	800c578 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c576:	2302      	movs	r3, #2
  }
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3730      	adds	r7, #48	; 0x30
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	1fe00fff 	.word	0x1fe00fff

0800c584 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c590:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d008      	beq.n	800c5b2 <HAL_SD_IRQHandler+0x2e>
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f003 0308 	and.w	r3, r3, #8
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d003      	beq.n	800c5b2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f001 f92a 	bl	800d804 <SD_Read_IT>
 800c5b0:	e19a      	b.n	800c8e8 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	f000 80ac 	beq.w	800c71a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5ca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	4b9d      	ldr	r3, [pc, #628]	; (800c84c <HAL_SD_IRQHandler+0x2c8>)
 800c5d8:	400b      	ands	r3, r1
 800c5da:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c5ea:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	68da      	ldr	r2, [r3, #12]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5fa:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f003 0308 	and.w	r3, r3, #8
 800c602:	2b00      	cmp	r3, #0
 800c604:	d038      	beq.n	800c678 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f003 0302 	and.w	r3, r3, #2
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d104      	bne.n	800c61a <HAL_SD_IRQHandler+0x96>
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f003 0320 	and.w	r3, r3, #32
 800c616:	2b00      	cmp	r3, #0
 800c618:	d011      	beq.n	800c63e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4618      	mov	r0, r3
 800c620:	f003 fe64 	bl	80102ec <SDMMC_CmdStopTransfer>
 800c624:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d008      	beq.n	800c63e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	431a      	orrs	r2, r3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 f959 	bl	800c8f0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a83      	ldr	r2, [pc, #524]	; (800c850 <HAL_SD_IRQHandler+0x2cc>)
 800c644:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2201      	movs	r2, #1
 800c64a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f003 0301 	and.w	r3, r3, #1
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d104      	bne.n	800c668 <HAL_SD_IRQHandler+0xe4>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f003 0302 	and.w	r3, r3, #2
 800c664:	2b00      	cmp	r3, #0
 800c666:	d003      	beq.n	800c670 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f005 fe55 	bl	8012318 <HAL_SD_RxCpltCallback>
 800c66e:	e13b      	b.n	800c8e8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f005 fe47 	bl	8012304 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c676:	e137      	b.n	800c8e8 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c67e:	2b00      	cmp	r3, #0
 800c680:	f000 8132 	beq.w	800c8e8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2200      	movs	r2, #0
 800c68a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2200      	movs	r2, #0
 800c692:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2200      	movs	r2, #0
 800c69a:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f003 0302 	and.w	r3, r3, #2
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d104      	bne.n	800c6b0 <HAL_SD_IRQHandler+0x12c>
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f003 0320 	and.w	r3, r3, #32
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d011      	beq.n	800c6d4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f003 fe19 	bl	80102ec <SDMMC_CmdStopTransfer>
 800c6ba:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d008      	beq.n	800c6d4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	431a      	orrs	r2, r3
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f90e 	bl	800c8f0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f003 0310 	and.w	r3, r3, #16
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d104      	bne.n	800c6f6 <HAL_SD_IRQHandler+0x172>
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f003 0320 	and.w	r3, r3, #32
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d002      	beq.n	800c6fc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f005 fe04 	bl	8012304 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f003 0301 	and.w	r3, r3, #1
 800c702:	2b00      	cmp	r3, #0
 800c704:	d105      	bne.n	800c712 <HAL_SD_IRQHandler+0x18e>
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f003 0302 	and.w	r3, r3, #2
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f000 80eb 	beq.w	800c8e8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f005 fe00 	bl	8012318 <HAL_SD_RxCpltCallback>
}
 800c718:	e0e6      	b.n	800c8e8 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c724:	2b00      	cmp	r3, #0
 800c726:	d008      	beq.n	800c73a <HAL_SD_IRQHandler+0x1b6>
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f003 0308 	and.w	r3, r3, #8
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d003      	beq.n	800c73a <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f001 f8ac 	bl	800d890 <SD_Write_IT>
 800c738:	e0d6      	b.n	800c8e8 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c740:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c744:	2b00      	cmp	r3, #0
 800c746:	f000 80a2 	beq.w	800c88e <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c750:	f003 0302 	and.w	r3, r3, #2
 800c754:	2b00      	cmp	r3, #0
 800c756:	d005      	beq.n	800c764 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c75c:	f043 0202 	orr.w	r2, r3, #2
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c76a:	f003 0308 	and.w	r3, r3, #8
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d005      	beq.n	800c77e <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c776:	f043 0208 	orr.w	r2, r3, #8
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c784:	f003 0320 	and.w	r3, r3, #32
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d005      	beq.n	800c798 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c790:	f043 0220 	orr.w	r2, r3, #32
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c79e:	f003 0310 	and.w	r3, r3, #16
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d005      	beq.n	800c7b2 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7aa:	f043 0210 	orr.w	r2, r3, #16
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a26      	ldr	r2, [pc, #152]	; (800c850 <HAL_SD_IRQHandler+0x2cc>)
 800c7b8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c7c8:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	68da      	ldr	r2, [r3, #12]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7d8:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c7e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	68da      	ldr	r2, [r3, #12]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c7f8:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4618      	mov	r0, r3
 800c800:	f003 fd74 	bl	80102ec <SDMMC_CmdStopTransfer>
 800c804:	4602      	mov	r2, r0
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80a:	431a      	orrs	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68da      	ldr	r2, [r3, #12]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c81e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c828:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f003 0308 	and.w	r3, r3, #8
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00f      	beq.n	800c854 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2201      	movs	r2, #1
 800c838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f854 	bl	800c8f0 <HAL_SD_ErrorCallback>
}
 800c848:	e04e      	b.n	800c8e8 <HAL_SD_IRQHandler+0x364>
 800c84a:	bf00      	nop
 800c84c:	ffff3ec5 	.word	0xffff3ec5
 800c850:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d044      	beq.n	800c8e8 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c862:	2b00      	cmp	r3, #0
 800c864:	d040      	beq.n	800c8e8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c874:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2200      	movs	r2, #0
 800c87c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2201      	movs	r2, #1
 800c882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 f832 	bl	800c8f0 <HAL_SD_ErrorCallback>
}
 800c88c:	e02c      	b.n	800c8e8 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d025      	beq.n	800c8e8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8a4:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8ac:	f003 0304 	and.w	r3, r3, #4
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d10c      	bne.n	800c8ce <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f003 0320 	and.w	r3, r3, #32
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d003      	beq.n	800c8c6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f001 f84e 	bl	800d960 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c8c4:	e010      	b.n	800c8e8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f001 f836 	bl	800d938 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c8cc:	e00c      	b.n	800c8e8 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f003 0320 	and.w	r3, r3, #32
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d003      	beq.n	800c8e0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f001 f837 	bl	800d94c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c8de:	e003      	b.n	800c8e8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f001 f81f 	bl	800d924 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c8e6:	e7ff      	b.n	800c8e8 <HAL_SD_IRQHandler+0x364>
 800c8e8:	bf00      	nop
 800c8ea:	3710      	adds	r7, #16
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	4603      	mov	r3, r0
 800c90c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800c90e:	bf00      	nop
 800c910:	370c      	adds	r7, #12
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
	...

0800c91c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c92a:	0f9b      	lsrs	r3, r3, #30
 800c92c:	b2da      	uxtb	r2, r3
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c936:	0e9b      	lsrs	r3, r3, #26
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	f003 030f 	and.w	r3, r3, #15
 800c93e:	b2da      	uxtb	r2, r3
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c948:	0e1b      	lsrs	r3, r3, #24
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	f003 0303 	and.w	r3, r3, #3
 800c950:	b2da      	uxtb	r2, r3
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c95a:	0c1b      	lsrs	r3, r3, #16
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c966:	0a1b      	lsrs	r3, r3, #8
 800c968:	b2da      	uxtb	r2, r3
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c972:	b2da      	uxtb	r2, r3
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c97c:	0d1b      	lsrs	r3, r3, #20
 800c97e:	b29a      	uxth	r2, r3
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c988:	0c1b      	lsrs	r3, r3, #16
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	f003 030f 	and.w	r3, r3, #15
 800c990:	b2da      	uxtb	r2, r3
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c99a:	0bdb      	lsrs	r3, r3, #15
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	f003 0301 	and.w	r3, r3, #1
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9ac:	0b9b      	lsrs	r3, r3, #14
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	f003 0301 	and.w	r3, r3, #1
 800c9b4:	b2da      	uxtb	r2, r3
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9be:	0b5b      	lsrs	r3, r3, #13
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	f003 0301 	and.w	r3, r3, #1
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9d0:	0b1b      	lsrs	r3, r3, #12
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	f003 0301 	and.w	r3, r3, #1
 800c9d8:	b2da      	uxtb	r2, r3
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d163      	bne.n	800cab4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9f0:	009a      	lsls	r2, r3, #2
 800c9f2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c9f6:	4013      	ands	r3, r2
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c9fc:	0f92      	lsrs	r2, r2, #30
 800c9fe:	431a      	orrs	r2, r3
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca08:	0edb      	lsrs	r3, r3, #27
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	f003 0307 	and.w	r3, r3, #7
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca1a:	0e1b      	lsrs	r3, r3, #24
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	f003 0307 	and.w	r3, r3, #7
 800ca22:	b2da      	uxtb	r2, r3
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca2c:	0d5b      	lsrs	r3, r3, #21
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	f003 0307 	and.w	r3, r3, #7
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca3e:	0c9b      	lsrs	r3, r3, #18
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	f003 0307 	and.w	r3, r3, #7
 800ca46:	b2da      	uxtb	r2, r3
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca50:	0bdb      	lsrs	r3, r3, #15
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	f003 0307 	and.w	r3, r3, #7
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	691b      	ldr	r3, [r3, #16]
 800ca62:	1c5a      	adds	r2, r3, #1
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	7e1b      	ldrb	r3, [r3, #24]
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	f003 0307 	and.w	r3, r3, #7
 800ca72:	3302      	adds	r3, #2
 800ca74:	2201      	movs	r2, #1
 800ca76:	fa02 f303 	lsl.w	r3, r2, r3
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ca7e:	fb02 f203 	mul.w	r2, r2, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	7a1b      	ldrb	r3, [r3, #8]
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	f003 030f 	and.w	r3, r3, #15
 800ca90:	2201      	movs	r2, #1
 800ca92:	409a      	lsls	r2, r3
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800caa0:	0a52      	lsrs	r2, r2, #9
 800caa2:	fb02 f203 	mul.w	r2, r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cab0:	659a      	str	r2, [r3, #88]	; 0x58
 800cab2:	e031      	b.n	800cb18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d11d      	bne.n	800caf8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cac0:	041b      	lsls	r3, r3, #16
 800cac2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800caca:	0c1b      	lsrs	r3, r3, #16
 800cacc:	431a      	orrs	r2, r3
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	691b      	ldr	r3, [r3, #16]
 800cad6:	3301      	adds	r3, #1
 800cad8:	029a      	lsls	r2, r3, #10
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800caec:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	659a      	str	r2, [r3, #88]	; 0x58
 800caf6:	e00f      	b.n	800cb18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a58      	ldr	r2, [pc, #352]	; (800cc60 <HAL_SD_GetCardCSD+0x344>)
 800cafe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cb14:	2301      	movs	r3, #1
 800cb16:	e09d      	b.n	800cc54 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb1c:	0b9b      	lsrs	r3, r3, #14
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	f003 0301 	and.w	r3, r3, #1
 800cb24:	b2da      	uxtb	r2, r3
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb2e:	09db      	lsrs	r3, r3, #7
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb36:	b2da      	uxtb	r2, r3
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb46:	b2da      	uxtb	r2, r3
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb50:	0fdb      	lsrs	r3, r3, #31
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb5c:	0f5b      	lsrs	r3, r3, #29
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	f003 0303 	and.w	r3, r3, #3
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb6e:	0e9b      	lsrs	r3, r3, #26
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	f003 0307 	and.w	r3, r3, #7
 800cb76:	b2da      	uxtb	r2, r3
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb80:	0d9b      	lsrs	r3, r3, #22
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	f003 030f 	and.w	r3, r3, #15
 800cb88:	b2da      	uxtb	r2, r3
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb92:	0d5b      	lsrs	r3, r3, #21
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	f003 0301 	and.w	r3, r3, #1
 800cb9a:	b2da      	uxtb	r2, r3
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2200      	movs	r2, #0
 800cba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbae:	0c1b      	lsrs	r3, r3, #16
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	f003 0301 	and.w	r3, r3, #1
 800cbb6:	b2da      	uxtb	r2, r3
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbc2:	0bdb      	lsrs	r3, r3, #15
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	f003 0301 	and.w	r3, r3, #1
 800cbca:	b2da      	uxtb	r2, r3
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbd6:	0b9b      	lsrs	r3, r3, #14
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	f003 0301 	and.w	r3, r3, #1
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbea:	0b5b      	lsrs	r3, r3, #13
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	f003 0301 	and.w	r3, r3, #1
 800cbf2:	b2da      	uxtb	r2, r3
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbfe:	0b1b      	lsrs	r3, r3, #12
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	f003 0301 	and.w	r3, r3, #1
 800cc06:	b2da      	uxtb	r2, r3
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc12:	0a9b      	lsrs	r3, r3, #10
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	f003 0303 	and.w	r3, r3, #3
 800cc1a:	b2da      	uxtb	r2, r3
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc26:	0a1b      	lsrs	r3, r3, #8
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	f003 0303 	and.w	r3, r3, #3
 800cc2e:	b2da      	uxtb	r2, r3
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc3a:	085b      	lsrs	r3, r3, #1
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc42:	b2da      	uxtb	r2, r3
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cc52:	2300      	movs	r3, #0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	370c      	adds	r7, #12
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr
 800cc60:	1fe00fff 	.word	0x1fe00fff

0800cc64 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b094      	sub	sp, #80	; 0x50
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800cc74:	f107 0308 	add.w	r3, r7, #8
 800cc78:	4619      	mov	r1, r3
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fb64 	bl	800d348 <SD_SendSDStatus>
 800cc80:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d011      	beq.n	800ccac <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a4f      	ldr	r2, [pc, #316]	; (800cdcc <HAL_SD_GetCardStatus+0x168>)
 800cc8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc96:	431a      	orrs	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cca4:	2301      	movs	r3, #1
 800cca6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ccaa:	e070      	b.n	800cd8e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	099b      	lsrs	r3, r3, #6
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	f003 0303 	and.w	r3, r3, #3
 800ccb6:	b2da      	uxtb	r2, r3
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	095b      	lsrs	r3, r3, #5
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	f003 0301 	and.w	r3, r3, #1
 800ccc6:	b2da      	uxtb	r2, r3
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	0a1b      	lsrs	r3, r3, #8
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	0e1b      	lsrs	r3, r3, #24
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	4313      	orrs	r3, r2
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	061a      	lsls	r2, r3, #24
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	021b      	lsls	r3, r3, #8
 800ccee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ccf2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	0a1b      	lsrs	r3, r3, #8
 800ccf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ccfc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	0e1b      	lsrs	r3, r3, #24
 800cd02:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	b2da      	uxtb	r2, r3
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	0a1b      	lsrs	r3, r3, #8
 800cd14:	b2da      	uxtb	r2, r3
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	0d1b      	lsrs	r3, r3, #20
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	f003 030f 	and.w	r3, r3, #15
 800cd24:	b2da      	uxtb	r2, r3
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	0c1b      	lsrs	r3, r3, #16
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	0a9b      	lsrs	r3, r3, #10
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	0a1b      	lsrs	r3, r3, #8
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	f003 0303 	and.w	r3, r3, #3
 800cd60:	b2da      	uxtb	r2, r3
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	091b      	lsrs	r3, r3, #4
 800cd6a:	b2db      	uxtb	r3, r3
 800cd6c:	f003 030f 	and.w	r3, r3, #15
 800cd70:	b2da      	uxtb	r2, r3
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	f003 030f 	and.w	r3, r3, #15
 800cd7e:	b2da      	uxtb	r2, r3
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cd84:	69bb      	ldr	r3, [r7, #24]
 800cd86:	0e1b      	lsrs	r3, r3, #24
 800cd88:	b2da      	uxtb	r2, r3
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd96:	4618      	mov	r0, r3
 800cd98:	f003 f9f8 	bl	801018c <SDMMC_CmdBlockLength>
 800cd9c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00d      	beq.n	800cdc0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a08      	ldr	r2, [pc, #32]	; (800cdcc <HAL_SD_GetCardStatus+0x168>)
 800cdaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdb0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800cdc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3750      	adds	r7, #80	; 0x50
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	1fe00fff 	.word	0x1fe00fff

0800cdd0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	370c      	adds	r7, #12
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ce28:	b5b0      	push	{r4, r5, r7, lr}
 800ce2a:	b08e      	sub	sp, #56	; 0x38
 800ce2c:	af04      	add	r7, sp, #16
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ce32:	2300      	movs	r3, #0
 800ce34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2203      	movs	r2, #3
 800ce3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce44:	2b03      	cmp	r3, #3
 800ce46:	d02e      	beq.n	800cea6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce4e:	d106      	bne.n	800ce5e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	639a      	str	r2, [r3, #56]	; 0x38
 800ce5c:	e029      	b.n	800ceb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce64:	d10a      	bne.n	800ce7c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 fb66 	bl	800d538 <SD_WideBus_Enable>
 800ce6c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce72:	6a3b      	ldr	r3, [r7, #32]
 800ce74:	431a      	orrs	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	639a      	str	r2, [r3, #56]	; 0x38
 800ce7a:	e01a      	b.n	800ceb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d10a      	bne.n	800ce98 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 fba3 	bl	800d5ce <SD_WideBus_Disable>
 800ce88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce8e:	6a3b      	ldr	r3, [r7, #32]
 800ce90:	431a      	orrs	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	639a      	str	r2, [r3, #56]	; 0x38
 800ce96:	e00c      	b.n	800ceb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce9c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	639a      	str	r2, [r3, #56]	; 0x38
 800cea4:	e005      	b.n	800ceb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceaa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d007      	beq.n	800ceca <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a2e      	ldr	r2, [pc, #184]	; (800cf78 <HAL_SD_ConfigWideBusOperation+0x150>)
 800cec0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cec8:	e034      	b.n	800cf34 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	691b      	ldr	r3, [r3, #16]
 800cede:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	695b      	ldr	r3, [r3, #20]
 800cee4:	2b03      	cmp	r3, #3
 800cee6:	d903      	bls.n	800cef0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	695b      	ldr	r3, [r3, #20]
 800ceec:	61bb      	str	r3, [r7, #24]
 800ceee:	e012      	b.n	800cf16 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cef8:	d103      	bne.n	800cf02 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	61bb      	str	r3, [r7, #24]
 800cf00:	e009      	b.n	800cf16 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf0a:	d102      	bne.n	800cf12 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800cf0c:	2302      	movs	r3, #2
 800cf0e:	61bb      	str	r3, [r7, #24]
 800cf10:	e001      	b.n	800cf16 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800cf12:	2304      	movs	r3, #4
 800cf14:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681d      	ldr	r5, [r3, #0]
 800cf1a:	466c      	mov	r4, sp
 800cf1c:	f107 0314 	add.w	r3, r7, #20
 800cf20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf28:	f107 0308 	add.w	r3, r7, #8
 800cf2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf2e:	4628      	mov	r0, r5
 800cf30:	f003 f84e 	bl	800ffd0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f003 f925 	bl	801018c <SDMMC_CmdBlockLength>
 800cf42:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf44:	6a3b      	ldr	r3, [r7, #32]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d00c      	beq.n	800cf64 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a0a      	ldr	r2, [pc, #40]	; (800cf78 <HAL_SD_ConfigWideBusOperation+0x150>)
 800cf50:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf56:	6a3b      	ldr	r3, [r7, #32]
 800cf58:	431a      	orrs	r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2201      	movs	r2, #1
 800cf68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800cf6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3728      	adds	r7, #40	; 0x28
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bdb0      	pop	{r4, r5, r7, pc}
 800cf78:	1fe00fff 	.word	0x1fe00fff

0800cf7c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b086      	sub	sp, #24
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cf84:	2300      	movs	r3, #0
 800cf86:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cf88:	f107 030c 	add.w	r3, r7, #12
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 faaa 	bl	800d4e8 <SD_SendStatus>
 800cf94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d005      	beq.n	800cfa8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	431a      	orrs	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	0a5b      	lsrs	r3, r3, #9
 800cfac:	f003 030f 	and.w	r3, r3, #15
 800cfb0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cfb2:	693b      	ldr	r3, [r7, #16]
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3718      	adds	r7, #24
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cfbc:	b590      	push	{r4, r7, lr}
 800cfbe:	b091      	sub	sp, #68	; 0x44
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f003 f858 	bl	8010082 <SDMMC_GetPowerState>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d102      	bne.n	800cfde <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cfd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cfdc:	e0a8      	b.n	800d130 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfe2:	2b03      	cmp	r3, #3
 800cfe4:	d02e      	beq.n	800d044 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f003 faa4 	bl	8010538 <SDMMC_CmdSendCID>
 800cff0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d001      	beq.n	800cffc <SD_InitCard+0x40>
    {
      return errorstate;
 800cff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cffa:	e099      	b.n	800d130 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2100      	movs	r1, #0
 800d002:	4618      	mov	r0, r3
 800d004:	f003 f883 	bl	801010e <SDMMC_GetResponse>
 800d008:	4602      	mov	r2, r0
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2104      	movs	r1, #4
 800d014:	4618      	mov	r0, r3
 800d016:	f003 f87a 	bl	801010e <SDMMC_GetResponse>
 800d01a:	4602      	mov	r2, r0
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2108      	movs	r1, #8
 800d026:	4618      	mov	r0, r3
 800d028:	f003 f871 	bl	801010e <SDMMC_GetResponse>
 800d02c:	4602      	mov	r2, r0
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	210c      	movs	r1, #12
 800d038:	4618      	mov	r0, r3
 800d03a:	f003 f868 	bl	801010e <SDMMC_GetResponse>
 800d03e:	4602      	mov	r2, r0
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d048:	2b03      	cmp	r3, #3
 800d04a:	d00d      	beq.n	800d068 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f107 020e 	add.w	r2, r7, #14
 800d054:	4611      	mov	r1, r2
 800d056:	4618      	mov	r0, r3
 800d058:	f003 faad 	bl	80105b6 <SDMMC_CmdSetRelAdd>
 800d05c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d060:	2b00      	cmp	r3, #0
 800d062:	d001      	beq.n	800d068 <SD_InitCard+0xac>
    {
      return errorstate;
 800d064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d066:	e063      	b.n	800d130 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d06c:	2b03      	cmp	r3, #3
 800d06e:	d036      	beq.n	800d0de <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d070:	89fb      	ldrh	r3, [r7, #14]
 800d072:	461a      	mov	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d080:	041b      	lsls	r3, r3, #16
 800d082:	4619      	mov	r1, r3
 800d084:	4610      	mov	r0, r2
 800d086:	f003 fa76 	bl	8010576 <SDMMC_CmdSendCSD>
 800d08a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d001      	beq.n	800d096 <SD_InitCard+0xda>
    {
      return errorstate;
 800d092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d094:	e04c      	b.n	800d130 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2100      	movs	r1, #0
 800d09c:	4618      	mov	r0, r3
 800d09e:	f003 f836 	bl	801010e <SDMMC_GetResponse>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2104      	movs	r1, #4
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f003 f82d 	bl	801010e <SDMMC_GetResponse>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2108      	movs	r1, #8
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f003 f824 	bl	801010e <SDMMC_GetResponse>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	210c      	movs	r1, #12
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f003 f81b 	bl	801010e <SDMMC_GetResponse>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2104      	movs	r1, #4
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f003 f812 	bl	801010e <SDMMC_GetResponse>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	0d1a      	lsrs	r2, r3, #20
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d0f2:	f107 0310 	add.w	r3, r7, #16
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f7ff fc0f 	bl	800c91c <HAL_SD_GetCardCSD>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d104:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d108:	e012      	b.n	800d130 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6819      	ldr	r1, [r3, #0]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d112:	041b      	lsls	r3, r3, #16
 800d114:	f04f 0400 	mov.w	r4, #0
 800d118:	461a      	mov	r2, r3
 800d11a:	4623      	mov	r3, r4
 800d11c:	4608      	mov	r0, r1
 800d11e:	f003 f921 	bl	8010364 <SDMMC_CmdSelDesel>
 800d122:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <SD_InitCard+0x172>
  {
    return errorstate;
 800d12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d12c:	e000      	b.n	800d130 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3744      	adds	r7, #68	; 0x44
 800d134:	46bd      	mov	sp, r7
 800d136:	bd90      	pop	{r4, r7, pc}

0800d138 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b088      	sub	sp, #32
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d140:	2300      	movs	r3, #0
 800d142:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800d144:	2300      	movs	r3, #0
 800d146:	61fb      	str	r3, [r7, #28]
 800d148:	2300      	movs	r3, #0
 800d14a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800d14c:	f7f6 fa2c 	bl	80035a8 <HAL_GetTick>
 800d150:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4618      	mov	r0, r3
 800d158:	f003 f928 	bl	80103ac <SDMMC_CmdGoIdleState>
 800d15c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d001      	beq.n	800d168 <SD_PowerON+0x30>
  {
    return errorstate;
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	e0e9      	b.n	800d33c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f003 f93b 	bl	80103e8 <SDMMC_CmdOperCond>
 800d172:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00d      	beq.n	800d196 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2200      	movs	r2, #0
 800d17e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4618      	mov	r0, r3
 800d186:	f003 f911 	bl	80103ac <SDMMC_CmdGoIdleState>
 800d18a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d004      	beq.n	800d19c <SD_PowerON+0x64>
    {
      return errorstate;
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	e0d2      	b.n	800d33c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2201      	movs	r2, #1
 800d19a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d137      	bne.n	800d214 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f003 f93c 	bl	8010428 <SDMMC_CmdAppCommand>
 800d1b0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d02d      	beq.n	800d214 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d1bc:	e0be      	b.n	800d33c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2100      	movs	r1, #0
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f003 f92f 	bl	8010428 <SDMMC_CmdAppCommand>
 800d1ca:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d001      	beq.n	800d1d6 <SD_PowerON+0x9e>
    {
      return errorstate;
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	e0b2      	b.n	800d33c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	495a      	ldr	r1, [pc, #360]	; (800d344 <SD_PowerON+0x20c>)
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f003 f946 	bl	801046e <SDMMC_CmdAppOperCommand>
 800d1e2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d002      	beq.n	800d1f0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d1ee:	e0a5      	b.n	800d33c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f002 ff89 	bl	801010e <SDMMC_GetResponse>
 800d1fc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	0fdb      	lsrs	r3, r3, #31
 800d202:	2b01      	cmp	r3, #1
 800d204:	d101      	bne.n	800d20a <SD_PowerON+0xd2>
 800d206:	2301      	movs	r3, #1
 800d208:	e000      	b.n	800d20c <SD_PowerON+0xd4>
 800d20a:	2300      	movs	r3, #0
 800d20c:	61bb      	str	r3, [r7, #24]

    count++;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	3301      	adds	r3, #1
 800d212:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d802      	bhi.n	800d224 <SD_PowerON+0xec>
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d0cc      	beq.n	800d1be <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d902      	bls.n	800d234 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d22e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d232:	e083      	b.n	800d33c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d07d      	beq.n	800d33a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2201      	movs	r2, #1
 800d242:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	699b      	ldr	r3, [r3, #24]
 800d248:	2b02      	cmp	r3, #2
 800d24a:	d176      	bne.n	800d33a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d252:	2b00      	cmp	r3, #0
 800d254:	d071      	beq.n	800d33a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d25c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f042 0208 	orr.w	r2, r2, #8
 800d26c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4618      	mov	r0, r3
 800d274:	f003 fa06 	bl	8010684 <SDMMC_CmdVoltageSwitch>
 800d278:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d00c      	beq.n	800d29a <SD_PowerON+0x162>
        {
          return errorstate;
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	e05b      	b.n	800d33c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d284:	f7f6 f990 	bl	80035a8 <HAL_GetTick>
 800d288:	4602      	mov	r2, r0
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	1ad3      	subs	r3, r2, r3
 800d28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d292:	d102      	bne.n	800d29a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800d294:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d298:	e050      	b.n	800d33c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d2a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d2a8:	d1ec      	bne.n	800d284 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800d2b2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2c2:	d002      	beq.n	800d2ca <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800d2c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d2c8:	e038      	b.n	800d33c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800d2ca:	2001      	movs	r0, #1
 800d2cc:	f7ff fb1a 	bl	800c904 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f042 0204 	orr.w	r2, r2, #4
 800d2de:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d2e0:	e00a      	b.n	800d2f8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d2e2:	f7f6 f961 	bl	80035a8 <HAL_GetTick>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	1ad3      	subs	r3, r2, r3
 800d2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f0:	d102      	bne.n	800d2f8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800d2f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2f6:	e021      	b.n	800d33c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d306:	d1ec      	bne.n	800d2e2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d310:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d31c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d320:	d102      	bne.n	800d328 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d322:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d326:	e009      	b.n	800d33c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2213      	movs	r2, #19
 800d32e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f04f 32ff 	mov.w	r2, #4294967295
 800d338:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d33a:	2300      	movs	r3, #0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3720      	adds	r7, #32
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	c1100000 	.word	0xc1100000

0800d348 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b08c      	sub	sp, #48	; 0x30
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d352:	f7f6 f929 	bl	80035a8 <HAL_GetTick>
 800d356:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2100      	movs	r1, #0
 800d362:	4618      	mov	r0, r3
 800d364:	f002 fed3 	bl	801010e <SDMMC_GetResponse>
 800d368:	4603      	mov	r3, r0
 800d36a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d36e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d372:	d102      	bne.n	800d37a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d374:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d378:	e0b0      	b.n	800d4dc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2140      	movs	r1, #64	; 0x40
 800d380:	4618      	mov	r0, r3
 800d382:	f002 ff03 	bl	801018c <SDMMC_CmdBlockLength>
 800d386:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d388:	6a3b      	ldr	r3, [r7, #32]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d005      	beq.n	800d39a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d396:	6a3b      	ldr	r3, [r7, #32]
 800d398:	e0a0      	b.n	800d4dc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3a2:	041b      	lsls	r3, r3, #16
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	4610      	mov	r0, r2
 800d3a8:	f003 f83e 	bl	8010428 <SDMMC_CmdAppCommand>
 800d3ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d3ae:	6a3b      	ldr	r3, [r7, #32]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d005      	beq.n	800d3c0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d3bc:	6a3b      	ldr	r3, [r7, #32]
 800d3be:	e08d      	b.n	800d4dc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d3c4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d3c6:	2340      	movs	r3, #64	; 0x40
 800d3c8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d3ca:	2360      	movs	r3, #96	; 0x60
 800d3cc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d3ce:	2302      	movs	r3, #2
 800d3d0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f107 0208 	add.w	r2, r7, #8
 800d3e2:	4611      	mov	r1, r2
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f002 fea5 	bl	8010134 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f003 f926 	bl	8010640 <SDMMC_CmdStatusRegister>
 800d3f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d3f6:	6a3b      	ldr	r3, [r7, #32]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d02b      	beq.n	800d454 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d404:	6a3b      	ldr	r3, [r7, #32]
 800d406:	e069      	b.n	800d4dc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d40e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d412:	2b00      	cmp	r3, #0
 800d414:	d013      	beq.n	800d43e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800d416:	2300      	movs	r3, #0
 800d418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d41a:	e00d      	b.n	800d438 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4618      	mov	r0, r3
 800d422:	f002 fdff 	bl	8010024 <SDMMC_ReadFIFO>
 800d426:	4602      	mov	r2, r0
 800d428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42a:	601a      	str	r2, [r3, #0]
        pData++;
 800d42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42e:	3304      	adds	r3, #4
 800d430:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800d432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d434:	3301      	adds	r3, #1
 800d436:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43a:	2b07      	cmp	r3, #7
 800d43c:	d9ee      	bls.n	800d41c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d43e:	f7f6 f8b3 	bl	80035a8 <HAL_GetTick>
 800d442:	4602      	mov	r2, r0
 800d444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44c:	d102      	bne.n	800d454 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d44e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d452:	e043      	b.n	800d4dc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d45a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d0d2      	beq.n	800d408 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d468:	f003 0308 	and.w	r3, r3, #8
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d001      	beq.n	800d474 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d470:	2308      	movs	r3, #8
 800d472:	e033      	b.n	800d4dc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d47a:	f003 0302 	and.w	r3, r3, #2
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d001      	beq.n	800d486 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d482:	2302      	movs	r3, #2
 800d484:	e02a      	b.n	800d4dc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d48c:	f003 0320 	and.w	r3, r3, #32
 800d490:	2b00      	cmp	r3, #0
 800d492:	d017      	beq.n	800d4c4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d494:	2320      	movs	r3, #32
 800d496:	e021      	b.n	800d4dc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f002 fdc1 	bl	8010024 <SDMMC_ReadFIFO>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a6:	601a      	str	r2, [r3, #0]
    pData++;
 800d4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4aa:	3304      	adds	r3, #4
 800d4ac:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d4ae:	f7f6 f87b 	bl	80035a8 <HAL_GetTick>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b6:	1ad3      	subs	r3, r2, r3
 800d4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4bc:	d102      	bne.n	800d4c4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d4be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d4c2:	e00b      	b.n	800d4dc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d1e2      	bne.n	800d498 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	4a03      	ldr	r2, [pc, #12]	; (800d4e4 <SD_SendSDStatus+0x19c>)
 800d4d8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3730      	adds	r7, #48	; 0x30
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	18000f3a 	.word	0x18000f3a

0800d4e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d102      	bne.n	800d4fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d4f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d4fc:	e018      	b.n	800d530 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d506:	041b      	lsls	r3, r3, #16
 800d508:	4619      	mov	r1, r3
 800d50a:	4610      	mov	r0, r2
 800d50c:	f003 f875 	bl	80105fa <SDMMC_CmdSendStatus>
 800d510:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d001      	beq.n	800d51c <SD_SendStatus+0x34>
  {
    return errorstate;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	e009      	b.n	800d530 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2100      	movs	r1, #0
 800d522:	4618      	mov	r0, r3
 800d524:	f002 fdf3 	bl	801010e <SDMMC_GetResponse>
 800d528:	4602      	mov	r2, r0
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b086      	sub	sp, #24
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d540:	2300      	movs	r3, #0
 800d542:	60fb      	str	r3, [r7, #12]
 800d544:	2300      	movs	r3, #0
 800d546:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2100      	movs	r1, #0
 800d54e:	4618      	mov	r0, r3
 800d550:	f002 fddd 	bl	801010e <SDMMC_GetResponse>
 800d554:	4603      	mov	r3, r0
 800d556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d55a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d55e:	d102      	bne.n	800d566 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d564:	e02f      	b.n	800d5c6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d566:	f107 030c 	add.w	r3, r7, #12
 800d56a:	4619      	mov	r1, r3
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 f879 	bl	800d664 <SD_FindSCR>
 800d572:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d001      	beq.n	800d57e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	e023      	b.n	800d5c6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d584:	2b00      	cmp	r3, #0
 800d586:	d01c      	beq.n	800d5c2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d590:	041b      	lsls	r3, r3, #16
 800d592:	4619      	mov	r1, r3
 800d594:	4610      	mov	r0, r2
 800d596:	f002 ff47 	bl	8010428 <SDMMC_CmdAppCommand>
 800d59a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d001      	beq.n	800d5a6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	e00f      	b.n	800d5c6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2102      	movs	r1, #2
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f002 ff7e 	bl	80104ae <SDMMC_CmdBusWidth>
 800d5b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d001      	beq.n	800d5be <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	e003      	b.n	800d5c6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	e001      	b.n	800d5c6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d5c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3718      	adds	r7, #24
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b086      	sub	sp, #24
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	60fb      	str	r3, [r7, #12]
 800d5da:	2300      	movs	r3, #0
 800d5dc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f002 fd92 	bl	801010e <SDMMC_GetResponse>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d5f4:	d102      	bne.n	800d5fc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d5f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d5fa:	e02f      	b.n	800d65c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d5fc:	f107 030c 	add.w	r3, r7, #12
 800d600:	4619      	mov	r1, r3
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 f82e 	bl	800d664 <SD_FindSCR>
 800d608:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d001      	beq.n	800d614 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	e023      	b.n	800d65c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d01c      	beq.n	800d658 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d626:	041b      	lsls	r3, r3, #16
 800d628:	4619      	mov	r1, r3
 800d62a:	4610      	mov	r0, r2
 800d62c:	f002 fefc 	bl	8010428 <SDMMC_CmdAppCommand>
 800d630:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d001      	beq.n	800d63c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	e00f      	b.n	800d65c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2100      	movs	r1, #0
 800d642:	4618      	mov	r0, r3
 800d644:	f002 ff33 	bl	80104ae <SDMMC_CmdBusWidth>
 800d648:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d001      	beq.n	800d654 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	e003      	b.n	800d65c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d654:	2300      	movs	r3, #0
 800d656:	e001      	b.n	800d65c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d658:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3718      	adds	r7, #24
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b08e      	sub	sp, #56	; 0x38
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d66e:	f7f5 ff9b 	bl	80035a8 <HAL_GetTick>
 800d672:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d674:	2300      	movs	r3, #0
 800d676:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d678:	2300      	movs	r3, #0
 800d67a:	60bb      	str	r3, [r7, #8]
 800d67c:	2300      	movs	r3, #0
 800d67e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2108      	movs	r1, #8
 800d68a:	4618      	mov	r0, r3
 800d68c:	f002 fd7e 	bl	801018c <SDMMC_CmdBlockLength>
 800d690:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d694:	2b00      	cmp	r3, #0
 800d696:	d001      	beq.n	800d69c <SD_FindSCR+0x38>
  {
    return errorstate;
 800d698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69a:	e0ad      	b.n	800d7f8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6a4:	041b      	lsls	r3, r3, #16
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	f002 febd 	bl	8010428 <SDMMC_CmdAppCommand>
 800d6ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d001      	beq.n	800d6ba <SD_FindSCR+0x56>
  {
    return errorstate;
 800d6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b8:	e09e      	b.n	800d7f8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d6ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d6be:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d6c0:	2308      	movs	r3, #8
 800d6c2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d6c4:	2330      	movs	r3, #48	; 0x30
 800d6c6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d6c8:	2302      	movs	r3, #2
 800d6ca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f107 0210 	add.w	r2, r7, #16
 800d6dc:	4611      	mov	r1, r2
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f002 fd28 	bl	8010134 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f002 ff03 	bl	80104f4 <SDMMC_CmdSendSCR>
 800d6ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d027      	beq.n	800d746 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f8:	e07e      	b.n	800d7f8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d700:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d704:	2b00      	cmp	r3, #0
 800d706:	d113      	bne.n	800d730 <SD_FindSCR+0xcc>
 800d708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d110      	bne.n	800d730 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4618      	mov	r0, r3
 800d714:	f002 fc86 	bl	8010024 <SDMMC_ReadFIFO>
 800d718:	4603      	mov	r3, r0
 800d71a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4618      	mov	r0, r3
 800d722:	f002 fc7f 	bl	8010024 <SDMMC_ReadFIFO>
 800d726:	4603      	mov	r3, r0
 800d728:	60fb      	str	r3, [r7, #12]
      index++;
 800d72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d72c:	3301      	adds	r3, #1
 800d72e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d730:	f7f5 ff3a 	bl	80035a8 <HAL_GetTick>
 800d734:	4602      	mov	r2, r0
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73e:	d102      	bne.n	800d746 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d740:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d744:	e058      	b.n	800d7f8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d74c:	f240 532a 	movw	r3, #1322	; 0x52a
 800d750:	4013      	ands	r3, r2
 800d752:	2b00      	cmp	r3, #0
 800d754:	d0d1      	beq.n	800d6fa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d75c:	f003 0308 	and.w	r3, r3, #8
 800d760:	2b00      	cmp	r3, #0
 800d762:	d005      	beq.n	800d770 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	2208      	movs	r2, #8
 800d76a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d76c:	2308      	movs	r3, #8
 800d76e:	e043      	b.n	800d7f8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d776:	f003 0302 	and.w	r3, r3, #2
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d005      	beq.n	800d78a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2202      	movs	r2, #2
 800d784:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d786:	2302      	movs	r3, #2
 800d788:	e036      	b.n	800d7f8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d790:	f003 0320 	and.w	r3, r3, #32
 800d794:	2b00      	cmp	r3, #0
 800d796:	d005      	beq.n	800d7a4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	2220      	movs	r2, #32
 800d79e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d7a0:	2320      	movs	r3, #32
 800d7a2:	e029      	b.n	800d7f8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a15      	ldr	r2, [pc, #84]	; (800d800 <SD_FindSCR+0x19c>)
 800d7aa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	061a      	lsls	r2, r3, #24
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	021b      	lsls	r3, r3, #8
 800d7b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d7b8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	0a1b      	lsrs	r3, r3, #8
 800d7be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d7c2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	0e1b      	lsrs	r3, r3, #24
 800d7c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7cc:	601a      	str	r2, [r3, #0]
    scr++;
 800d7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d0:	3304      	adds	r3, #4
 800d7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	061a      	lsls	r2, r3, #24
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	021b      	lsls	r3, r3, #8
 800d7dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d7e0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	0a1b      	lsrs	r3, r3, #8
 800d7e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d7ea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	0e1b      	lsrs	r3, r3, #24
 800d7f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d7f6:	2300      	movs	r3, #0
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3738      	adds	r7, #56	; 0x38
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	18000f3a 	.word	0x18000f3a

0800d804 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b086      	sub	sp, #24
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d810:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d816:	2b1f      	cmp	r3, #31
 800d818:	d936      	bls.n	800d888 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d81a:	2300      	movs	r3, #0
 800d81c:	617b      	str	r3, [r7, #20]
 800d81e:	e027      	b.n	800d870 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4618      	mov	r0, r3
 800d826:	f002 fbfd 	bl	8010024 <SDMMC_ReadFIFO>
 800d82a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	b2da      	uxtb	r2, r3
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	3301      	adds	r3, #1
 800d838:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	0a1b      	lsrs	r3, r3, #8
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	3301      	adds	r3, #1
 800d848:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	0c1b      	lsrs	r3, r3, #16
 800d84e:	b2da      	uxtb	r2, r3
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	3301      	adds	r3, #1
 800d858:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	0e1b      	lsrs	r3, r3, #24
 800d85e:	b2da      	uxtb	r2, r3
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	3301      	adds	r3, #1
 800d868:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	3301      	adds	r3, #1
 800d86e:	617b      	str	r3, [r7, #20]
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2b07      	cmp	r3, #7
 800d874:	d9d4      	bls.n	800d820 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	693a      	ldr	r2, [r7, #16]
 800d87a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d880:	f1a3 0220 	sub.w	r2, r3, #32
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d888:	bf00      	nop
 800d88a:	3718      	adds	r7, #24
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6a1b      	ldr	r3, [r3, #32]
 800d89c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a2:	2b1f      	cmp	r3, #31
 800d8a4:	d93a      	bls.n	800d91c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	617b      	str	r3, [r7, #20]
 800d8aa:	e02b      	b.n	800d904 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	021a      	lsls	r2, r3, #8
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	041a      	lsls	r2, r3, #16
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	3301      	adds	r3, #1
 800d8da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	061a      	lsls	r2, r3, #24
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f107 020c 	add.w	r2, r7, #12
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f002 fba0 	bl	801003e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	3301      	adds	r3, #1
 800d902:	617b      	str	r3, [r7, #20]
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	2b07      	cmp	r3, #7
 800d908:	d9d0      	bls.n	800d8ac <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	693a      	ldr	r2, [r7, #16]
 800d90e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d914:	f1a3 0220 	sub.w	r2, r3, #32
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d91c:	bf00      	nop
 800d91e:	3718      	adds	r7, #24
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d92c:	bf00      	nop
 800d92e:	370c      	adds	r7, #12
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d940:	bf00      	nop
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d954:	bf00      	nop
 800d956:	370c      	adds	r7, #12
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr

0800d960 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d968:	bf00      	nop
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800d97c:	2300      	movs	r3, #0
 800d97e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d101      	bne.n	800d98a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800d986:	2301      	movs	r3, #1
 800d988:	e0e2      	b.n	800db50 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2200      	movs	r2, #0
 800d98e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a70      	ldr	r2, [pc, #448]	; (800db58 <HAL_SPI_Init+0x1e4>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d00f      	beq.n	800d9ba <HAL_SPI_Init+0x46>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a6f      	ldr	r2, [pc, #444]	; (800db5c <HAL_SPI_Init+0x1e8>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d00a      	beq.n	800d9ba <HAL_SPI_Init+0x46>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a6d      	ldr	r2, [pc, #436]	; (800db60 <HAL_SPI_Init+0x1ec>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d005      	beq.n	800d9ba <HAL_SPI_Init+0x46>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	68db      	ldr	r3, [r3, #12]
 800d9b2:	2b0f      	cmp	r3, #15
 800d9b4:	d901      	bls.n	800d9ba <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e0ca      	b.n	800db50 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f001 f870 	bl	800eaa0 <SPI_GetPacketSize>
 800d9c0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a64      	ldr	r2, [pc, #400]	; (800db58 <HAL_SPI_Init+0x1e4>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d00c      	beq.n	800d9e6 <HAL_SPI_Init+0x72>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a62      	ldr	r2, [pc, #392]	; (800db5c <HAL_SPI_Init+0x1e8>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d007      	beq.n	800d9e6 <HAL_SPI_Init+0x72>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4a61      	ldr	r2, [pc, #388]	; (800db60 <HAL_SPI_Init+0x1ec>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d002      	beq.n	800d9e6 <HAL_SPI_Init+0x72>
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	2b08      	cmp	r3, #8
 800d9e4:	d811      	bhi.n	800da0a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d9ea:	4a5b      	ldr	r2, [pc, #364]	; (800db58 <HAL_SPI_Init+0x1e4>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d009      	beq.n	800da04 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4a59      	ldr	r2, [pc, #356]	; (800db5c <HAL_SPI_Init+0x1e8>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d004      	beq.n	800da04 <HAL_SPI_Init+0x90>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	4a58      	ldr	r2, [pc, #352]	; (800db60 <HAL_SPI_Init+0x1ec>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d104      	bne.n	800da0e <HAL_SPI_Init+0x9a>
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	2b10      	cmp	r3, #16
 800da08:	d901      	bls.n	800da0e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800da0a:	2301      	movs	r3, #1
 800da0c:	e0a0      	b.n	800db50 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da14:	b2db      	uxtb	r3, r3
 800da16:	2b00      	cmp	r3, #0
 800da18:	d106      	bne.n	800da28 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f7f5 fa92 	bl	8002f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2202      	movs	r2, #2
 800da2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f022 0201 	bic.w	r2, r2, #1
 800da3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	699b      	ldr	r3, [r3, #24]
 800da44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800da48:	d110      	bne.n	800da6c <HAL_SPI_Init+0xf8>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da52:	d10b      	bne.n	800da6c <HAL_SPI_Init+0xf8>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d107      	bne.n	800da6c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800da6a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	69da      	ldr	r2, [r3, #28]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da74:	431a      	orrs	r2, r3
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	431a      	orrs	r2, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da7e:	ea42 0103 	orr.w	r1, r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	68da      	ldr	r2, [r3, #12]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	430a      	orrs	r2, r1
 800da8c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da96:	431a      	orrs	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da9c:	431a      	orrs	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	431a      	orrs	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	691b      	ldr	r3, [r3, #16]
 800daa8:	431a      	orrs	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	695b      	ldr	r3, [r3, #20]
 800daae:	431a      	orrs	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6a1b      	ldr	r3, [r3, #32]
 800dab4:	431a      	orrs	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	431a      	orrs	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dac0:	431a      	orrs	r2, r3
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	689b      	ldr	r3, [r3, #8]
 800dac6:	431a      	orrs	r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dacc:	ea42 0103 	orr.w	r1, r2, r3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	430a      	orrs	r2, r1
 800dada:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d113      	bne.n	800db0c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	689b      	ldr	r3, [r3, #8]
 800daea:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800daf6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	689b      	ldr	r3, [r3, #8]
 800dafe:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800db0a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f022 0201 	bic.w	r2, r2, #1
 800db1a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db24:	2b00      	cmp	r3, #0
 800db26:	d00a      	beq.n	800db3e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	430a      	orrs	r2, r1
 800db3c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2201      	movs	r2, #1
 800db4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800db4e:	2300      	movs	r3, #0
}
 800db50:	4618      	mov	r0, r3
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	40013000 	.word	0x40013000
 800db5c:	40003800 	.word	0x40003800
 800db60:	40003c00 	.word	0x40003c00

0800db64 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b08a      	sub	sp, #40	; 0x28
 800db68:	af02      	add	r7, sp, #8
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	603b      	str	r3, [r7, #0]
 800db70:	4613      	mov	r3, r2
 800db72:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	3320      	adds	r3, #32
 800db7a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800db7c:	2300      	movs	r3, #0
 800db7e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db86:	2b01      	cmp	r3, #1
 800db88:	d101      	bne.n	800db8e <HAL_SPI_Transmit+0x2a>
 800db8a:	2302      	movs	r3, #2
 800db8c:	e1d7      	b.n	800df3e <HAL_SPI_Transmit+0x3da>
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2201      	movs	r2, #1
 800db92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db96:	f7f5 fd07 	bl	80035a8 <HAL_GetTick>
 800db9a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d007      	beq.n	800dbb8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800dba8:	2302      	movs	r3, #2
 800dbaa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dbb4:	7efb      	ldrb	r3, [r7, #27]
 800dbb6:	e1c2      	b.n	800df3e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d002      	beq.n	800dbc4 <HAL_SPI_Transmit+0x60>
 800dbbe:	88fb      	ldrh	r3, [r7, #6]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d107      	bne.n	800dbd4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dbd0:	7efb      	ldrb	r3, [r7, #27]
 800dbd2:	e1b4      	b.n	800df3e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2203      	movs	r2, #3
 800dbd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	68ba      	ldr	r2, [r7, #8]
 800dbe8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	88fa      	ldrh	r2, [r7, #6]
 800dbee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	88fa      	ldrh	r2, [r7, #6]
 800dbf6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2200      	movs	r2, #0
 800dc14:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dc24:	d107      	bne.n	800dc36 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc34:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	685a      	ldr	r2, [r3, #4]
 800dc3c:	4b96      	ldr	r3, [pc, #600]	; (800de98 <HAL_SPI_Transmit+0x334>)
 800dc3e:	4013      	ands	r3, r2
 800dc40:	88f9      	ldrh	r1, [r7, #6]
 800dc42:	68fa      	ldr	r2, [r7, #12]
 800dc44:	6812      	ldr	r2, [r2, #0]
 800dc46:	430b      	orrs	r3, r1
 800dc48:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f042 0201 	orr.w	r2, r2, #1
 800dc58:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc62:	d107      	bne.n	800dc74 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	681a      	ldr	r2, [r3, #0]
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	68db      	ldr	r3, [r3, #12]
 800dc78:	2b0f      	cmp	r3, #15
 800dc7a:	d947      	bls.n	800dd0c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dc7c:	e03f      	b.n	800dcfe <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	695b      	ldr	r3, [r3, #20]
 800dc84:	f003 0302 	and.w	r3, r3, #2
 800dc88:	2b02      	cmp	r3, #2
 800dc8a:	d114      	bne.n	800dcb6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	6812      	ldr	r2, [r2, #0]
 800dc96:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc9c:	1d1a      	adds	r2, r3, #4
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	b29a      	uxth	r2, r3
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dcb4:	e023      	b.n	800dcfe <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dcb6:	f7f5 fc77 	bl	80035a8 <HAL_GetTick>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	1ad3      	subs	r3, r2, r3
 800dcc0:	683a      	ldr	r2, [r7, #0]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d803      	bhi.n	800dcce <HAL_SPI_Transmit+0x16a>
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dccc:	d102      	bne.n	800dcd4 <HAL_SPI_Transmit+0x170>
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d114      	bne.n	800dcfe <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dcd4:	68f8      	ldr	r0, [r7, #12]
 800dcd6:	f000 fe15 	bl	800e904 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dce8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e11f      	b.n	800df3e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d1b9      	bne.n	800dc7e <HAL_SPI_Transmit+0x11a>
 800dd0a:	e0f2      	b.n	800def2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	2b07      	cmp	r3, #7
 800dd12:	f240 80e7 	bls.w	800dee4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dd16:	e05d      	b.n	800ddd4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	695b      	ldr	r3, [r3, #20]
 800dd1e:	f003 0302 	and.w	r3, r3, #2
 800dd22:	2b02      	cmp	r3, #2
 800dd24:	d132      	bne.n	800dd8c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d918      	bls.n	800dd64 <HAL_SPI_Transmit+0x200>
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d014      	beq.n	800dd64 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	6812      	ldr	r2, [r2, #0]
 800dd44:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd4a:	1d1a      	adds	r2, r3, #4
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	3b02      	subs	r3, #2
 800dd5a:	b29a      	uxth	r2, r3
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dd62:	e037      	b.n	800ddd4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd68:	881a      	ldrh	r2, [r3, #0]
 800dd6a:	69fb      	ldr	r3, [r7, #28]
 800dd6c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd72:	1c9a      	adds	r2, r3, #2
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	3b01      	subs	r3, #1
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dd8a:	e023      	b.n	800ddd4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd8c:	f7f5 fc0c 	bl	80035a8 <HAL_GetTick>
 800dd90:	4602      	mov	r2, r0
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	1ad3      	subs	r3, r2, r3
 800dd96:	683a      	ldr	r2, [r7, #0]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d803      	bhi.n	800dda4 <HAL_SPI_Transmit+0x240>
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda2:	d102      	bne.n	800ddaa <HAL_SPI_Transmit+0x246>
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d114      	bne.n	800ddd4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f000 fdaa 	bl	800e904 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	e0b4      	b.n	800df3e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d19b      	bne.n	800dd18 <HAL_SPI_Transmit+0x1b4>
 800dde0:	e087      	b.n	800def2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	695b      	ldr	r3, [r3, #20]
 800dde8:	f003 0302 	and.w	r3, r3, #2
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	d155      	bne.n	800de9c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	2b03      	cmp	r3, #3
 800ddfa:	d918      	bls.n	800de2e <HAL_SPI_Transmit+0x2ca>
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de00:	2b40      	cmp	r3, #64	; 0x40
 800de02:	d914      	bls.n	800de2e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	6812      	ldr	r2, [r2, #0]
 800de0e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de14:	1d1a      	adds	r2, r3, #4
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de20:	b29b      	uxth	r3, r3
 800de22:	3b04      	subs	r3, #4
 800de24:	b29a      	uxth	r2, r3
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de2c:	e05a      	b.n	800dee4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de34:	b29b      	uxth	r3, r3
 800de36:	2b01      	cmp	r3, #1
 800de38:	d917      	bls.n	800de6a <HAL_SPI_Transmit+0x306>
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d013      	beq.n	800de6a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de46:	881a      	ldrh	r2, [r3, #0]
 800de48:	69fb      	ldr	r3, [r7, #28]
 800de4a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de50:	1c9a      	adds	r2, r3, #2
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	3b02      	subs	r3, #2
 800de60:	b29a      	uxth	r2, r3
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de68:	e03c      	b.n	800dee4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	3320      	adds	r3, #32
 800de74:	7812      	ldrb	r2, [r2, #0]
 800de76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de7c:	1c5a      	adds	r2, r3, #1
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de88:	b29b      	uxth	r3, r3
 800de8a:	3b01      	subs	r3, #1
 800de8c:	b29a      	uxth	r2, r3
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de94:	e026      	b.n	800dee4 <HAL_SPI_Transmit+0x380>
 800de96:	bf00      	nop
 800de98:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de9c:	f7f5 fb84 	bl	80035a8 <HAL_GetTick>
 800dea0:	4602      	mov	r2, r0
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	1ad3      	subs	r3, r2, r3
 800dea6:	683a      	ldr	r2, [r7, #0]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d803      	bhi.n	800deb4 <HAL_SPI_Transmit+0x350>
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb2:	d102      	bne.n	800deba <HAL_SPI_Transmit+0x356>
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d114      	bne.n	800dee4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	f000 fd22 	bl	800e904 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2200      	movs	r2, #0
 800dec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dece:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2201      	movs	r2, #1
 800dedc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800dee0:	2301      	movs	r3, #1
 800dee2:	e02c      	b.n	800df3e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800deea:	b29b      	uxth	r3, r3
 800deec:	2b00      	cmp	r3, #0
 800deee:	f47f af78 	bne.w	800dde2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	2200      	movs	r2, #0
 800defa:	2108      	movs	r1, #8
 800defc:	68f8      	ldr	r0, [r7, #12]
 800defe:	f000 fda1 	bl	800ea44 <SPI_WaitOnFlagUntilTimeout>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d007      	beq.n	800df18 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df0e:	f043 0220 	orr.w	r2, r3, #32
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f000 fcf3 	bl	800e904 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2200      	movs	r2, #0
 800df22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2201      	movs	r2, #1
 800df2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800df38:	2301      	movs	r3, #1
 800df3a:	e000      	b.n	800df3e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800df3c:	7efb      	ldrb	r3, [r7, #27]
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3720      	adds	r7, #32
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop

0800df48 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b08a      	sub	sp, #40	; 0x28
 800df4c:	af02      	add	r7, sp, #8
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	603b      	str	r3, [r7, #0]
 800df54:	4613      	mov	r3, r2
 800df56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800df58:	2300      	movs	r3, #0
 800df5a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	3330      	adds	r3, #48	; 0x30
 800df62:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df6c:	d112      	bne.n	800df94 <HAL_SPI_Receive+0x4c>
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d10e      	bne.n	800df94 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2204      	movs	r2, #4
 800df7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800df7e:	88fa      	ldrh	r2, [r7, #6]
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	9300      	str	r3, [sp, #0]
 800df84:	4613      	mov	r3, r2
 800df86:	68ba      	ldr	r2, [r7, #8]
 800df88:	68b9      	ldr	r1, [r7, #8]
 800df8a:	68f8      	ldr	r0, [r7, #12]
 800df8c:	f000 f9ce 	bl	800e32c <HAL_SPI_TransmitReceive>
 800df90:	4603      	mov	r3, r0
 800df92:	e1c7      	b.n	800e324 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d101      	bne.n	800dfa2 <HAL_SPI_Receive+0x5a>
 800df9e:	2302      	movs	r3, #2
 800dfa0:	e1c0      	b.n	800e324 <HAL_SPI_Receive+0x3dc>
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dfaa:	f7f5 fafd 	bl	80035a8 <HAL_GetTick>
 800dfae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d007      	beq.n	800dfcc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800dfbc:	2302      	movs	r3, #2
 800dfbe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dfc8:	7ffb      	ldrb	r3, [r7, #31]
 800dfca:	e1ab      	b.n	800e324 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d002      	beq.n	800dfd8 <HAL_SPI_Receive+0x90>
 800dfd2:	88fb      	ldrh	r3, [r7, #6]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d107      	bne.n	800dfe8 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dfe4:	7ffb      	ldrb	r3, [r7, #31]
 800dfe6:	e19d      	b.n	800e324 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2204      	movs	r2, #4
 800dfec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2200      	movs	r2, #0
 800dff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	88fa      	ldrh	r2, [r7, #6]
 800e002:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	88fa      	ldrh	r2, [r7, #6]
 800e00a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	2200      	movs	r2, #0
 800e012:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	2200      	movs	r2, #0
 800e018:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2200      	movs	r2, #0
 800e020:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	2200      	movs	r2, #0
 800e028:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	2200      	movs	r2, #0
 800e02e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e038:	d107      	bne.n	800e04a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e048:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	685a      	ldr	r2, [r3, #4]
 800e050:	4b94      	ldr	r3, [pc, #592]	; (800e2a4 <HAL_SPI_Receive+0x35c>)
 800e052:	4013      	ands	r3, r2
 800e054:	88f9      	ldrh	r1, [r7, #6]
 800e056:	68fa      	ldr	r2, [r7, #12]
 800e058:	6812      	ldr	r2, [r2, #0]
 800e05a:	430b      	orrs	r3, r1
 800e05c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f042 0201 	orr.w	r2, r2, #1
 800e06c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e076:	d107      	bne.n	800e088 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e086:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	2b0f      	cmp	r3, #15
 800e08e:	d948      	bls.n	800e122 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e090:	e040      	b.n	800e114 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	695a      	ldr	r2, [r3, #20]
 800e098:	f248 0308 	movw	r3, #32776	; 0x8008
 800e09c:	4013      	ands	r3, r2
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d014      	beq.n	800e0cc <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e0ac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0b2:	1d1a      	adds	r2, r3, #4
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	b29a      	uxth	r2, r3
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e0ca:	e023      	b.n	800e114 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0cc:	f7f5 fa6c 	bl	80035a8 <HAL_GetTick>
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	1ad3      	subs	r3, r2, r3
 800e0d6:	683a      	ldr	r2, [r7, #0]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d803      	bhi.n	800e0e4 <HAL_SPI_Receive+0x19c>
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0e2:	d102      	bne.n	800e0ea <HAL_SPI_Receive+0x1a2>
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d114      	bne.n	800e114 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f000 fc0a 	bl	800e904 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2201      	movs	r2, #1
 800e10c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e110:	2301      	movs	r3, #1
 800e112:	e107      	b.n	800e324 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d1b8      	bne.n	800e092 <HAL_SPI_Receive+0x14a>
 800e120:	e0ed      	b.n	800e2fe <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	2b07      	cmp	r3, #7
 800e128:	f240 80e2 	bls.w	800e2f0 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e12c:	e05b      	b.n	800e1e6 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	695b      	ldr	r3, [r3, #20]
 800e134:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d030      	beq.n	800e19e <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	695b      	ldr	r3, [r3, #20]
 800e142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e146:	2b00      	cmp	r3, #0
 800e148:	d014      	beq.n	800e174 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e152:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e154:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e15a:	1d1a      	adds	r2, r3, #4
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e166:	b29b      	uxth	r3, r3
 800e168:	3b02      	subs	r3, #2
 800e16a:	b29a      	uxth	r2, r3
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e172:	e038      	b.n	800e1e6 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e178:	69ba      	ldr	r2, [r7, #24]
 800e17a:	8812      	ldrh	r2, [r2, #0]
 800e17c:	b292      	uxth	r2, r2
 800e17e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e184:	1c9a      	adds	r2, r3, #2
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e190:	b29b      	uxth	r3, r3
 800e192:	3b01      	subs	r3, #1
 800e194:	b29a      	uxth	r2, r3
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e19c:	e023      	b.n	800e1e6 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e19e:	f7f5 fa03 	bl	80035a8 <HAL_GetTick>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	1ad3      	subs	r3, r2, r3
 800e1a8:	683a      	ldr	r2, [r7, #0]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d803      	bhi.n	800e1b6 <HAL_SPI_Receive+0x26e>
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1b4:	d102      	bne.n	800e1bc <HAL_SPI_Receive+0x274>
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d114      	bne.n	800e1e6 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e1bc:	68f8      	ldr	r0, [r7, #12]
 800e1be:	f000 fba1 	bl	800e904 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2201      	movs	r2, #1
 800e1de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	e09e      	b.n	800e324 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d19d      	bne.n	800e12e <HAL_SPI_Receive+0x1e6>
 800e1f2:	e084      	b.n	800e2fe <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	695b      	ldr	r3, [r3, #20]
 800e1fa:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d052      	beq.n	800e2a8 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	695b      	ldr	r3, [r3, #20]
 800e208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d014      	beq.n	800e23a <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e218:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e21a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e220:	1d1a      	adds	r2, r3, #4
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	3b04      	subs	r3, #4
 800e230:	b29a      	uxth	r2, r3
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e238:	e05a      	b.n	800e2f0 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	695b      	ldr	r3, [r3, #20]
 800e240:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e248:	d914      	bls.n	800e274 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e24e:	69ba      	ldr	r2, [r7, #24]
 800e250:	8812      	ldrh	r2, [r2, #0]
 800e252:	b292      	uxth	r2, r2
 800e254:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e25a:	1c9a      	adds	r2, r3, #2
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e266:	b29b      	uxth	r3, r3
 800e268:	3b02      	subs	r3, #2
 800e26a:	b29a      	uxth	r2, r3
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e272:	e03d      	b.n	800e2f0 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e280:	7812      	ldrb	r2, [r2, #0]
 800e282:	b2d2      	uxtb	r2, r2
 800e284:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e28a:	1c5a      	adds	r2, r3, #1
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e296:	b29b      	uxth	r3, r3
 800e298:	3b01      	subs	r3, #1
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2a2:	e025      	b.n	800e2f0 <HAL_SPI_Receive+0x3a8>
 800e2a4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2a8:	f7f5 f97e 	bl	80035a8 <HAL_GetTick>
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	1ad3      	subs	r3, r2, r3
 800e2b2:	683a      	ldr	r2, [r7, #0]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d803      	bhi.n	800e2c0 <HAL_SPI_Receive+0x378>
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2be:	d102      	bne.n	800e2c6 <HAL_SPI_Receive+0x37e>
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d114      	bne.n	800e2f0 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	f000 fb1c 	bl	800e904 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	e019      	b.n	800e324 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	f47f af7b 	bne.w	800e1f4 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e2fe:	68f8      	ldr	r0, [r7, #12]
 800e300:	f000 fb00 	bl	800e904 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2200      	movs	r2, #0
 800e308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2201      	movs	r2, #1
 800e310:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d001      	beq.n	800e322 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800e31e:	2301      	movs	r3, #1
 800e320:	e000      	b.n	800e324 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800e322:	7ffb      	ldrb	r3, [r7, #31]
}
 800e324:	4618      	mov	r0, r3
 800e326:	3720      	adds	r7, #32
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b08e      	sub	sp, #56	; 0x38
 800e330:	af02      	add	r7, sp, #8
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	607a      	str	r2, [r7, #4]
 800e338:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e33a:	2300      	movs	r3, #0
 800e33c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	3320      	adds	r3, #32
 800e346:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	3330      	adds	r3, #48	; 0x30
 800e34e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e356:	2b01      	cmp	r3, #1
 800e358:	d101      	bne.n	800e35e <HAL_SPI_TransmitReceive+0x32>
 800e35a:	2302      	movs	r3, #2
 800e35c:	e2ce      	b.n	800e8fc <HAL_SPI_TransmitReceive+0x5d0>
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2201      	movs	r2, #1
 800e362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e366:	f7f5 f91f 	bl	80035a8 <HAL_GetTick>
 800e36a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800e36c:	887b      	ldrh	r3, [r7, #2]
 800e36e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800e370:	887b      	ldrh	r3, [r7, #2]
 800e372:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e37a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e382:	7efb      	ldrb	r3, [r7, #27]
 800e384:	2b01      	cmp	r3, #1
 800e386:	d014      	beq.n	800e3b2 <HAL_SPI_TransmitReceive+0x86>
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e38e:	d106      	bne.n	800e39e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	689b      	ldr	r3, [r3, #8]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d102      	bne.n	800e39e <HAL_SPI_TransmitReceive+0x72>
 800e398:	7efb      	ldrb	r3, [r7, #27]
 800e39a:	2b04      	cmp	r3, #4
 800e39c:	d009      	beq.n	800e3b2 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800e39e:	2302      	movs	r3, #2
 800e3a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e3ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e3b0:	e2a4      	b.n	800e8fc <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d005      	beq.n	800e3c4 <HAL_SPI_TransmitReceive+0x98>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d002      	beq.n	800e3c4 <HAL_SPI_TransmitReceive+0x98>
 800e3be:	887b      	ldrh	r3, [r7, #2]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d109      	bne.n	800e3d8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e3d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e3d6:	e291      	b.n	800e8fc <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	2b04      	cmp	r3, #4
 800e3e2:	d003      	beq.n	800e3ec <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2205      	movs	r2, #5
 800e3e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	687a      	ldr	r2, [r7, #4]
 800e3f8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	887a      	ldrh	r2, [r7, #2]
 800e3fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	887a      	ldrh	r2, [r7, #2]
 800e406:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	68ba      	ldr	r2, [r7, #8]
 800e40e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	887a      	ldrh	r2, [r7, #2]
 800e414:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	887a      	ldrh	r2, [r7, #2]
 800e41c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2200      	movs	r2, #0
 800e424:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2200      	movs	r2, #0
 800e42a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	685a      	ldr	r2, [r3, #4]
 800e432:	4b9f      	ldr	r3, [pc, #636]	; (800e6b0 <HAL_SPI_TransmitReceive+0x384>)
 800e434:	4013      	ands	r3, r2
 800e436:	8879      	ldrh	r1, [r7, #2]
 800e438:	68fa      	ldr	r2, [r7, #12]
 800e43a:	6812      	ldr	r2, [r2, #0]
 800e43c:	430b      	orrs	r3, r1
 800e43e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f042 0201 	orr.w	r2, r2, #1
 800e44e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e458:	d107      	bne.n	800e46a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e468:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	68db      	ldr	r3, [r3, #12]
 800e46e:	2b0f      	cmp	r3, #15
 800e470:	d970      	bls.n	800e554 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e472:	e068      	b.n	800e546 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	695b      	ldr	r3, [r3, #20]
 800e47a:	f003 0302 	and.w	r3, r3, #2
 800e47e:	2b02      	cmp	r3, #2
 800e480:	d11a      	bne.n	800e4b8 <HAL_SPI_TransmitReceive+0x18c>
 800e482:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e484:	2b00      	cmp	r3, #0
 800e486:	d017      	beq.n	800e4b8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	6812      	ldr	r2, [r2, #0]
 800e492:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e498:	1d1a      	adds	r2, r3, #4
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	695a      	ldr	r2, [r3, #20]
 800e4be:	f248 0308 	movw	r3, #32776	; 0x8008
 800e4c2:	4013      	ands	r3, r2
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d01a      	beq.n	800e4fe <HAL_SPI_TransmitReceive+0x1d2>
 800e4c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d017      	beq.n	800e4fe <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681a      	ldr	r2, [r3, #0]
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e4d8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4de:	1d1a      	adds	r2, r3, #4
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	b29a      	uxth	r2, r3
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4fe:	f7f5 f853 	bl	80035a8 <HAL_GetTick>
 800e502:	4602      	mov	r2, r0
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	1ad3      	subs	r3, r2, r3
 800e508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d803      	bhi.n	800e516 <HAL_SPI_TransmitReceive+0x1ea>
 800e50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e514:	d102      	bne.n	800e51c <HAL_SPI_TransmitReceive+0x1f0>
 800e516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d114      	bne.n	800e546 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e51c:	68f8      	ldr	r0, [r7, #12]
 800e51e:	f000 f9f1 	bl	800e904 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2200      	movs	r2, #0
 800e526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e530:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2201      	movs	r2, #1
 800e53e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e542:	2301      	movs	r3, #1
 800e544:	e1da      	b.n	800e8fc <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e546:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d193      	bne.n	800e474 <HAL_SPI_TransmitReceive+0x148>
 800e54c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d190      	bne.n	800e474 <HAL_SPI_TransmitReceive+0x148>
 800e552:	e1ac      	b.n	800e8ae <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	68db      	ldr	r3, [r3, #12]
 800e558:	2b07      	cmp	r3, #7
 800e55a:	f240 81a0 	bls.w	800e89e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e55e:	e0a9      	b.n	800e6b4 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	695b      	ldr	r3, [r3, #20]
 800e566:	f003 0302 	and.w	r3, r3, #2
 800e56a:	2b02      	cmp	r3, #2
 800e56c:	d139      	bne.n	800e5e2 <HAL_SPI_TransmitReceive+0x2b6>
 800e56e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e570:	2b00      	cmp	r3, #0
 800e572:	d036      	beq.n	800e5e2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e574:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e576:	2b01      	cmp	r3, #1
 800e578:	d91c      	bls.n	800e5b4 <HAL_SPI_TransmitReceive+0x288>
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d018      	beq.n	800e5b4 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	6812      	ldr	r2, [r2, #0]
 800e58c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e592:	1d1a      	adds	r2, r3, #4
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	3b02      	subs	r3, #2
 800e5a2:	b29a      	uxth	r2, r3
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e5b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e5b2:	e016      	b.n	800e5e2 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5b8:	881a      	ldrh	r2, [r3, #0]
 800e5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5bc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5c2:	1c9a      	adds	r2, r3, #2
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	b29a      	uxth	r2, r3
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e5e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	695b      	ldr	r3, [r3, #20]
 800e5e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d03a      	beq.n	800e666 <HAL_SPI_TransmitReceive+0x33a>
 800e5f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d037      	beq.n	800e666 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	695b      	ldr	r3, [r3, #20]
 800e5fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e600:	2b00      	cmp	r3, #0
 800e602:	d018      	beq.n	800e636 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e60c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e60e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e614:	1d1a      	adds	r2, r3, #4
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e620:	b29b      	uxth	r3, r3
 800e622:	3b02      	subs	r3, #2
 800e624:	b29a      	uxth	r2, r3
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e632:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e634:	e017      	b.n	800e666 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e63a:	6a3a      	ldr	r2, [r7, #32]
 800e63c:	8812      	ldrh	r2, [r2, #0]
 800e63e:	b292      	uxth	r2, r2
 800e640:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e646:	1c9a      	adds	r2, r3, #2
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e652:	b29b      	uxth	r3, r3
 800e654:	3b01      	subs	r3, #1
 800e656:	b29a      	uxth	r2, r3
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e664:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e666:	f7f4 ff9f 	bl	80035a8 <HAL_GetTick>
 800e66a:	4602      	mov	r2, r0
 800e66c:	69fb      	ldr	r3, [r7, #28]
 800e66e:	1ad3      	subs	r3, r2, r3
 800e670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e672:	429a      	cmp	r2, r3
 800e674:	d803      	bhi.n	800e67e <HAL_SPI_TransmitReceive+0x352>
 800e676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e67c:	d102      	bne.n	800e684 <HAL_SPI_TransmitReceive+0x358>
 800e67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e680:	2b00      	cmp	r3, #0
 800e682:	d117      	bne.n	800e6b4 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	f000 f93d 	bl	800e904 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2200      	movs	r2, #0
 800e68e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e698:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e126      	b.n	800e8fc <HAL_SPI_TransmitReceive+0x5d0>
 800e6ae:	bf00      	nop
 800e6b0:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e6b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	f47f af52 	bne.w	800e560 <HAL_SPI_TransmitReceive+0x234>
 800e6bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	f47f af4e 	bne.w	800e560 <HAL_SPI_TransmitReceive+0x234>
 800e6c4:	e0f3      	b.n	800e8ae <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	695b      	ldr	r3, [r3, #20]
 800e6cc:	f003 0302 	and.w	r3, r3, #2
 800e6d0:	2b02      	cmp	r3, #2
 800e6d2:	d15a      	bne.n	800e78a <HAL_SPI_TransmitReceive+0x45e>
 800e6d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d057      	beq.n	800e78a <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e6da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6dc:	2b03      	cmp	r3, #3
 800e6de:	d91c      	bls.n	800e71a <HAL_SPI_TransmitReceive+0x3ee>
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6e4:	2b40      	cmp	r3, #64	; 0x40
 800e6e6:	d918      	bls.n	800e71a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	6812      	ldr	r2, [r2, #0]
 800e6f2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6f8:	1d1a      	adds	r2, r3, #4
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e704:	b29b      	uxth	r3, r3
 800e706:	3b04      	subs	r3, #4
 800e708:	b29a      	uxth	r2, r3
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e716:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e718:	e037      	b.n	800e78a <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e71a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d91b      	bls.n	800e758 <HAL_SPI_TransmitReceive+0x42c>
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e724:	2b00      	cmp	r3, #0
 800e726:	d017      	beq.n	800e758 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e72c:	881a      	ldrh	r2, [r3, #0]
 800e72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e730:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e736:	1c9a      	adds	r2, r3, #2
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e742:	b29b      	uxth	r3, r3
 800e744:	3b02      	subs	r3, #2
 800e746:	b29a      	uxth	r2, r3
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e754:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e756:	e018      	b.n	800e78a <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	3320      	adds	r3, #32
 800e762:	7812      	ldrb	r2, [r2, #0]
 800e764:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e76a:	1c5a      	adds	r2, r3, #1
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e776:	b29b      	uxth	r3, r3
 800e778:	3b01      	subs	r3, #1
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e788:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	695b      	ldr	r3, [r3, #20]
 800e790:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e794:	2b00      	cmp	r3, #0
 800e796:	d05e      	beq.n	800e856 <HAL_SPI_TransmitReceive+0x52a>
 800e798:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d05b      	beq.n	800e856 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	695b      	ldr	r3, [r3, #20]
 800e7a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d018      	beq.n	800e7de <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e7b6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7bc:	1d1a      	adds	r2, r3, #4
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	3b04      	subs	r3, #4
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e7dc:	e03b      	b.n	800e856 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	695b      	ldr	r3, [r3, #20]
 800e7e4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e7e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7ec:	d918      	bls.n	800e820 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7f2:	6a3a      	ldr	r2, [r7, #32]
 800e7f4:	8812      	ldrh	r2, [r2, #0]
 800e7f6:	b292      	uxth	r2, r2
 800e7f8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7fe:	1c9a      	adds	r2, r3, #2
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	3b02      	subs	r3, #2
 800e80e:	b29a      	uxth	r2, r3
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e81c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e81e:	e01a      	b.n	800e856 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e82c:	7812      	ldrb	r2, [r2, #0]
 800e82e:	b2d2      	uxtb	r2, r2
 800e830:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e836:	1c5a      	adds	r2, r3, #1
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e842:	b29b      	uxth	r3, r3
 800e844:	3b01      	subs	r3, #1
 800e846:	b29a      	uxth	r2, r3
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e854:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e856:	f7f4 fea7 	bl	80035a8 <HAL_GetTick>
 800e85a:	4602      	mov	r2, r0
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	1ad3      	subs	r3, r2, r3
 800e860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e862:	429a      	cmp	r2, r3
 800e864:	d803      	bhi.n	800e86e <HAL_SPI_TransmitReceive+0x542>
 800e866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e86c:	d102      	bne.n	800e874 <HAL_SPI_TransmitReceive+0x548>
 800e86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e870:	2b00      	cmp	r3, #0
 800e872:	d114      	bne.n	800e89e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f000 f845 	bl	800e904 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2200      	movs	r2, #0
 800e87e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e888:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2201      	movs	r2, #1
 800e896:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e89a:	2301      	movs	r3, #1
 800e89c:	e02e      	b.n	800e8fc <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e89e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f47f af10 	bne.w	800e6c6 <HAL_SPI_TransmitReceive+0x39a>
 800e8a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	f47f af0c 	bne.w	800e6c6 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b0:	9300      	str	r3, [sp, #0]
 800e8b2:	69fb      	ldr	r3, [r7, #28]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	2108      	movs	r1, #8
 800e8b8:	68f8      	ldr	r0, [r7, #12]
 800e8ba:	f000 f8c3 	bl	800ea44 <SPI_WaitOnFlagUntilTimeout>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d007      	beq.n	800e8d4 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8ca:	f043 0220 	orr.w	r2, r3, #32
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	f000 f815 	bl	800e904 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d001      	beq.n	800e8f8 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	e001      	b.n	800e8fc <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800e8f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3730      	adds	r7, #48	; 0x30
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e904:	b480      	push	{r7}
 800e906:	b085      	sub	sp, #20
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	695b      	ldr	r3, [r3, #20]
 800e912:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	699a      	ldr	r2, [r3, #24]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f042 0208 	orr.w	r2, r2, #8
 800e922:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	699a      	ldr	r2, [r3, #24]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f042 0210 	orr.w	r2, r2, #16
 800e932:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f022 0201 	bic.w	r2, r2, #1
 800e942:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	6919      	ldr	r1, [r3, #16]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	4b3c      	ldr	r3, [pc, #240]	; (800ea40 <SPI_CloseTransfer+0x13c>)
 800e950:	400b      	ands	r3, r1
 800e952:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	689a      	ldr	r2, [r3, #8]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e962:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	2b04      	cmp	r3, #4
 800e96e:	d014      	beq.n	800e99a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f003 0320 	and.w	r3, r3, #32
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00f      	beq.n	800e99a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e980:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	699a      	ldr	r2, [r3, #24]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f042 0220 	orr.w	r2, r2, #32
 800e998:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	2b03      	cmp	r3, #3
 800e9a4:	d014      	beq.n	800e9d0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d00f      	beq.n	800e9d0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9b6:	f043 0204 	orr.w	r2, r3, #4
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	699a      	ldr	r2, [r3, #24]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e9ce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d00f      	beq.n	800e9fa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9e0:	f043 0201 	orr.w	r2, r3, #1
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	699a      	ldr	r2, [r3, #24]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e9f8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d00f      	beq.n	800ea24 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea0a:	f043 0208 	orr.w	r2, r3, #8
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	699a      	ldr	r2, [r3, #24]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ea22:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2200      	movs	r2, #0
 800ea28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ea34:	bf00      	nop
 800ea36:	3714      	adds	r7, #20
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr
 800ea40:	fffffc90 	.word	0xfffffc90

0800ea44 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	60b9      	str	r1, [r7, #8]
 800ea4e:	603b      	str	r3, [r7, #0]
 800ea50:	4613      	mov	r3, r2
 800ea52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ea54:	e010      	b.n	800ea78 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea56:	f7f4 fda7 	bl	80035a8 <HAL_GetTick>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	1ad3      	subs	r3, r2, r3
 800ea60:	69ba      	ldr	r2, [r7, #24]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d803      	bhi.n	800ea6e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea6c:	d102      	bne.n	800ea74 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d101      	bne.n	800ea78 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ea74:	2303      	movs	r3, #3
 800ea76:	e00f      	b.n	800ea98 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	695a      	ldr	r2, [r3, #20]
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	4013      	ands	r3, r2
 800ea82:	68ba      	ldr	r2, [r7, #8]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	bf0c      	ite	eq
 800ea88:	2301      	moveq	r3, #1
 800ea8a:	2300      	movne	r3, #0
 800ea8c:	b2db      	uxtb	r3, r3
 800ea8e:	461a      	mov	r2, r3
 800ea90:	79fb      	ldrb	r3, [r7, #7]
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d0df      	beq.n	800ea56 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ea96:	2300      	movs	r3, #0
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3710      	adds	r7, #16
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b085      	sub	sp, #20
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaac:	095b      	lsrs	r3, r3, #5
 800eaae:	3301      	adds	r3, #1
 800eab0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	68db      	ldr	r3, [r3, #12]
 800eab6:	3301      	adds	r3, #1
 800eab8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	3307      	adds	r3, #7
 800eabe:	08db      	lsrs	r3, r3, #3
 800eac0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	68fa      	ldr	r2, [r7, #12]
 800eac6:	fb02 f303 	mul.w	r3, r2, r3
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3714      	adds	r7, #20
 800eace:	46bd      	mov	sp, r7
 800ead0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead4:	4770      	bx	lr

0800ead6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ead6:	b580      	push	{r7, lr}
 800ead8:	b082      	sub	sp, #8
 800eada:	af00      	add	r7, sp, #0
 800eadc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d101      	bne.n	800eae8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eae4:	2301      	movs	r3, #1
 800eae6:	e042      	b.n	800eb6e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d106      	bne.n	800eb00 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f7f4 fa70 	bl	8002fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2224      	movs	r2, #36	; 0x24
 800eb04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	681a      	ldr	r2, [r3, #0]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f022 0201 	bic.w	r2, r2, #1
 800eb16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f000 f95f 	bl	800eddc <UART_SetConfig>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d101      	bne.n	800eb28 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800eb24:	2301      	movs	r3, #1
 800eb26:	e022      	b.n	800eb6e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d002      	beq.n	800eb36 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 ff03 	bl	800f93c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	685a      	ldr	r2, [r3, #4]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eb44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	689a      	ldr	r2, [r3, #8]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eb54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f042 0201 	orr.w	r2, r2, #1
 800eb64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 ff8a 	bl	800fa80 <UART_CheckIdleState>
 800eb6c:	4603      	mov	r3, r0
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3708      	adds	r7, #8
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb76:	b580      	push	{r7, lr}
 800eb78:	b08a      	sub	sp, #40	; 0x28
 800eb7a:	af02      	add	r7, sp, #8
 800eb7c:	60f8      	str	r0, [r7, #12]
 800eb7e:	60b9      	str	r1, [r7, #8]
 800eb80:	603b      	str	r3, [r7, #0]
 800eb82:	4613      	mov	r3, r2
 800eb84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb8c:	2b20      	cmp	r3, #32
 800eb8e:	f040 8083 	bne.w	800ec98 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d002      	beq.n	800eb9e <HAL_UART_Transmit+0x28>
 800eb98:	88fb      	ldrh	r3, [r7, #6]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d101      	bne.n	800eba2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	e07b      	b.n	800ec9a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d101      	bne.n	800ebb0 <HAL_UART_Transmit+0x3a>
 800ebac:	2302      	movs	r3, #2
 800ebae:	e074      	b.n	800ec9a <HAL_UART_Transmit+0x124>
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2221      	movs	r2, #33	; 0x21
 800ebc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800ebc8:	f7f4 fcee 	bl	80035a8 <HAL_GetTick>
 800ebcc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	88fa      	ldrh	r2, [r7, #6]
 800ebd2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	88fa      	ldrh	r2, [r7, #6]
 800ebda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	689b      	ldr	r3, [r3, #8]
 800ebe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebe6:	d108      	bne.n	800ebfa <HAL_UART_Transmit+0x84>
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	691b      	ldr	r3, [r3, #16]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d104      	bne.n	800ebfa <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	61bb      	str	r3, [r7, #24]
 800ebf8:	e003      	b.n	800ec02 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2200      	movs	r2, #0
 800ec06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800ec0a:	e02c      	b.n	800ec66 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	9300      	str	r3, [sp, #0]
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	2200      	movs	r2, #0
 800ec14:	2180      	movs	r1, #128	; 0x80
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f000 ff7a 	bl	800fb10 <UART_WaitOnFlagUntilTimeout>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d001      	beq.n	800ec26 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ec22:	2303      	movs	r3, #3
 800ec24:	e039      	b.n	800ec9a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ec26:	69fb      	ldr	r3, [r7, #28]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d10b      	bne.n	800ec44 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	881b      	ldrh	r3, [r3, #0]
 800ec30:	461a      	mov	r2, r3
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ec3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	3302      	adds	r3, #2
 800ec40:	61bb      	str	r3, [r7, #24]
 800ec42:	e007      	b.n	800ec54 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	781a      	ldrb	r2, [r3, #0]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	3301      	adds	r3, #1
 800ec52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	3b01      	subs	r3, #1
 800ec5e:	b29a      	uxth	r2, r3
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1cc      	bne.n	800ec0c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	9300      	str	r3, [sp, #0]
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	2140      	movs	r1, #64	; 0x40
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f000 ff47 	bl	800fb10 <UART_WaitOnFlagUntilTimeout>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d001      	beq.n	800ec8c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ec88:	2303      	movs	r3, #3
 800ec8a:	e006      	b.n	800ec9a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2220      	movs	r2, #32
 800ec90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800ec94:	2300      	movs	r3, #0
 800ec96:	e000      	b.n	800ec9a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ec98:	2302      	movs	r3, #2
  }
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3720      	adds	r7, #32
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
	...

0800eca4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	4613      	mov	r3, r2
 800ecb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecb8:	2b20      	cmp	r3, #32
 800ecba:	d170      	bne.n	800ed9e <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d002      	beq.n	800ecc8 <HAL_UART_Receive_DMA+0x24>
 800ecc2:	88fb      	ldrh	r3, [r7, #6]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d101      	bne.n	800eccc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ecc8:	2301      	movs	r3, #1
 800ecca:	e069      	b.n	800eda0 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ecd2:	2b01      	cmp	r3, #1
 800ecd4:	d101      	bne.n	800ecda <HAL_UART_Receive_DMA+0x36>
 800ecd6:	2302      	movs	r3, #2
 800ecd8:	e062      	b.n	800eda0 <HAL_UART_Receive_DMA+0xfc>
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2201      	movs	r2, #1
 800ecde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	68ba      	ldr	r2, [r7, #8]
 800ece6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	88fa      	ldrh	r2, [r7, #6]
 800ecec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2222      	movs	r2, #34	; 0x22
 800ecfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d02c      	beq.n	800ed62 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed0c:	4a26      	ldr	r2, [pc, #152]	; (800eda8 <HAL_UART_Receive_DMA+0x104>)
 800ed0e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed14:	4a25      	ldr	r2, [pc, #148]	; (800edac <HAL_UART_Receive_DMA+0x108>)
 800ed16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed1c:	4a24      	ldr	r2, [pc, #144]	; (800edb0 <HAL_UART_Receive_DMA+0x10c>)
 800ed1e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed24:	2200      	movs	r2, #0
 800ed26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	3324      	adds	r3, #36	; 0x24
 800ed32:	4619      	mov	r1, r3
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed38:	461a      	mov	r2, r3
 800ed3a:	88fb      	ldrh	r3, [r7, #6]
 800ed3c:	f7f5 f8da 	bl	8003ef4 <HAL_DMA_Start_IT>
 800ed40:	4603      	mov	r3, r0
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d00d      	beq.n	800ed62 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2210      	movs	r2, #16
 800ed4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2200      	movs	r2, #0
 800ed52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2220      	movs	r2, #32
 800ed5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e01e      	b.n	800eda0 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2200      	movs	r2, #0
 800ed66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ed78:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	689a      	ldr	r2, [r3, #8]
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f042 0201 	orr.w	r2, r2, #1
 800ed88:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	689a      	ldr	r2, [r3, #8]
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed98:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	e000      	b.n	800eda0 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800ed9e:	2302      	movs	r3, #2
  }
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3710      	adds	r7, #16
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	0800fc95 	.word	0x0800fc95
 800edac:	0800fcfb 	.word	0x0800fcfb
 800edb0:	0800fd17 	.word	0x0800fd17

0800edb4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b083      	sub	sp, #12
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800edbc:	bf00      	nop
 800edbe:	370c      	adds	r7, #12
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr

0800edc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800edd0:	bf00      	nop
 800edd2:	370c      	adds	r7, #12
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr

0800eddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eddc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800ede0:	b08e      	sub	sp, #56	; 0x38
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ede6:	2300      	movs	r3, #0
 800ede8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	689a      	ldr	r2, [r3, #8]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	691b      	ldr	r3, [r3, #16]
 800edf4:	431a      	orrs	r2, r3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	695b      	ldr	r3, [r3, #20]
 800edfa:	431a      	orrs	r2, r3
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	69db      	ldr	r3, [r3, #28]
 800ee00:	4313      	orrs	r3, r2
 800ee02:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee0a:	4313      	orrs	r3, r2
 800ee0c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	4bc1      	ldr	r3, [pc, #772]	; (800f11c <UART_SetConfig+0x340>)
 800ee16:	4013      	ands	r3, r2
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	6812      	ldr	r2, [r2, #0]
 800ee1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ee1e:	430b      	orrs	r3, r1
 800ee20:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	68da      	ldr	r2, [r3, #12]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	430a      	orrs	r2, r1
 800ee36:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	699b      	ldr	r3, [r3, #24]
 800ee3c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	4ab7      	ldr	r2, [pc, #732]	; (800f120 <UART_SetConfig+0x344>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d004      	beq.n	800ee52 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6a1b      	ldr	r3, [r3, #32]
 800ee4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee4e:	4313      	orrs	r3, r2
 800ee50:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	689a      	ldr	r2, [r3, #8]
 800ee58:	4bb2      	ldr	r3, [pc, #712]	; (800f124 <UART_SetConfig+0x348>)
 800ee5a:	4013      	ands	r3, r2
 800ee5c:	687a      	ldr	r2, [r7, #4]
 800ee5e:	6812      	ldr	r2, [r2, #0]
 800ee60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ee62:	430b      	orrs	r3, r1
 800ee64:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee6c:	f023 010f 	bic.w	r1, r3, #15
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	430a      	orrs	r2, r1
 800ee7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4aa9      	ldr	r2, [pc, #676]	; (800f128 <UART_SetConfig+0x34c>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d177      	bne.n	800ef76 <UART_SetConfig+0x19a>
 800ee86:	4ba9      	ldr	r3, [pc, #676]	; (800f12c <UART_SetConfig+0x350>)
 800ee88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee8e:	2b28      	cmp	r3, #40	; 0x28
 800ee90:	d86c      	bhi.n	800ef6c <UART_SetConfig+0x190>
 800ee92:	a201      	add	r2, pc, #4	; (adr r2, 800ee98 <UART_SetConfig+0xbc>)
 800ee94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee98:	0800ef3d 	.word	0x0800ef3d
 800ee9c:	0800ef6d 	.word	0x0800ef6d
 800eea0:	0800ef6d 	.word	0x0800ef6d
 800eea4:	0800ef6d 	.word	0x0800ef6d
 800eea8:	0800ef6d 	.word	0x0800ef6d
 800eeac:	0800ef6d 	.word	0x0800ef6d
 800eeb0:	0800ef6d 	.word	0x0800ef6d
 800eeb4:	0800ef6d 	.word	0x0800ef6d
 800eeb8:	0800ef45 	.word	0x0800ef45
 800eebc:	0800ef6d 	.word	0x0800ef6d
 800eec0:	0800ef6d 	.word	0x0800ef6d
 800eec4:	0800ef6d 	.word	0x0800ef6d
 800eec8:	0800ef6d 	.word	0x0800ef6d
 800eecc:	0800ef6d 	.word	0x0800ef6d
 800eed0:	0800ef6d 	.word	0x0800ef6d
 800eed4:	0800ef6d 	.word	0x0800ef6d
 800eed8:	0800ef4d 	.word	0x0800ef4d
 800eedc:	0800ef6d 	.word	0x0800ef6d
 800eee0:	0800ef6d 	.word	0x0800ef6d
 800eee4:	0800ef6d 	.word	0x0800ef6d
 800eee8:	0800ef6d 	.word	0x0800ef6d
 800eeec:	0800ef6d 	.word	0x0800ef6d
 800eef0:	0800ef6d 	.word	0x0800ef6d
 800eef4:	0800ef6d 	.word	0x0800ef6d
 800eef8:	0800ef55 	.word	0x0800ef55
 800eefc:	0800ef6d 	.word	0x0800ef6d
 800ef00:	0800ef6d 	.word	0x0800ef6d
 800ef04:	0800ef6d 	.word	0x0800ef6d
 800ef08:	0800ef6d 	.word	0x0800ef6d
 800ef0c:	0800ef6d 	.word	0x0800ef6d
 800ef10:	0800ef6d 	.word	0x0800ef6d
 800ef14:	0800ef6d 	.word	0x0800ef6d
 800ef18:	0800ef5d 	.word	0x0800ef5d
 800ef1c:	0800ef6d 	.word	0x0800ef6d
 800ef20:	0800ef6d 	.word	0x0800ef6d
 800ef24:	0800ef6d 	.word	0x0800ef6d
 800ef28:	0800ef6d 	.word	0x0800ef6d
 800ef2c:	0800ef6d 	.word	0x0800ef6d
 800ef30:	0800ef6d 	.word	0x0800ef6d
 800ef34:	0800ef6d 	.word	0x0800ef6d
 800ef38:	0800ef65 	.word	0x0800ef65
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef42:	e233      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800ef44:	2304      	movs	r3, #4
 800ef46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef4a:	e22f      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800ef4c:	2308      	movs	r3, #8
 800ef4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef52:	e22b      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800ef54:	2310      	movs	r3, #16
 800ef56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef5a:	e227      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800ef5c:	2320      	movs	r3, #32
 800ef5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef62:	e223      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800ef64:	2340      	movs	r3, #64	; 0x40
 800ef66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef6a:	e21f      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800ef6c:	2380      	movs	r3, #128	; 0x80
 800ef6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef72:	bf00      	nop
 800ef74:	e21a      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4a6d      	ldr	r2, [pc, #436]	; (800f130 <UART_SetConfig+0x354>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d132      	bne.n	800efe6 <UART_SetConfig+0x20a>
 800ef80:	4b6a      	ldr	r3, [pc, #424]	; (800f12c <UART_SetConfig+0x350>)
 800ef82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef84:	f003 0307 	and.w	r3, r3, #7
 800ef88:	2b05      	cmp	r3, #5
 800ef8a:	d827      	bhi.n	800efdc <UART_SetConfig+0x200>
 800ef8c:	a201      	add	r2, pc, #4	; (adr r2, 800ef94 <UART_SetConfig+0x1b8>)
 800ef8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef92:	bf00      	nop
 800ef94:	0800efad 	.word	0x0800efad
 800ef98:	0800efb5 	.word	0x0800efb5
 800ef9c:	0800efbd 	.word	0x0800efbd
 800efa0:	0800efc5 	.word	0x0800efc5
 800efa4:	0800efcd 	.word	0x0800efcd
 800efa8:	0800efd5 	.word	0x0800efd5
 800efac:	2300      	movs	r3, #0
 800efae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efb2:	e1fb      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800efb4:	2304      	movs	r3, #4
 800efb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efba:	e1f7      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800efbc:	2308      	movs	r3, #8
 800efbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efc2:	e1f3      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800efc4:	2310      	movs	r3, #16
 800efc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efca:	e1ef      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800efcc:	2320      	movs	r3, #32
 800efce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efd2:	e1eb      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800efd4:	2340      	movs	r3, #64	; 0x40
 800efd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efda:	e1e7      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800efdc:	2380      	movs	r3, #128	; 0x80
 800efde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efe2:	bf00      	nop
 800efe4:	e1e2      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	4a52      	ldr	r2, [pc, #328]	; (800f134 <UART_SetConfig+0x358>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d132      	bne.n	800f056 <UART_SetConfig+0x27a>
 800eff0:	4b4e      	ldr	r3, [pc, #312]	; (800f12c <UART_SetConfig+0x350>)
 800eff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eff4:	f003 0307 	and.w	r3, r3, #7
 800eff8:	2b05      	cmp	r3, #5
 800effa:	d827      	bhi.n	800f04c <UART_SetConfig+0x270>
 800effc:	a201      	add	r2, pc, #4	; (adr r2, 800f004 <UART_SetConfig+0x228>)
 800effe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f002:	bf00      	nop
 800f004:	0800f01d 	.word	0x0800f01d
 800f008:	0800f025 	.word	0x0800f025
 800f00c:	0800f02d 	.word	0x0800f02d
 800f010:	0800f035 	.word	0x0800f035
 800f014:	0800f03d 	.word	0x0800f03d
 800f018:	0800f045 	.word	0x0800f045
 800f01c:	2300      	movs	r3, #0
 800f01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f022:	e1c3      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f024:	2304      	movs	r3, #4
 800f026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f02a:	e1bf      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f02c:	2308      	movs	r3, #8
 800f02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f032:	e1bb      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f034:	2310      	movs	r3, #16
 800f036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f03a:	e1b7      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f03c:	2320      	movs	r3, #32
 800f03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f042:	e1b3      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f044:	2340      	movs	r3, #64	; 0x40
 800f046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f04a:	e1af      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f04c:	2380      	movs	r3, #128	; 0x80
 800f04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f052:	bf00      	nop
 800f054:	e1aa      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4a37      	ldr	r2, [pc, #220]	; (800f138 <UART_SetConfig+0x35c>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d132      	bne.n	800f0c6 <UART_SetConfig+0x2ea>
 800f060:	4b32      	ldr	r3, [pc, #200]	; (800f12c <UART_SetConfig+0x350>)
 800f062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f064:	f003 0307 	and.w	r3, r3, #7
 800f068:	2b05      	cmp	r3, #5
 800f06a:	d827      	bhi.n	800f0bc <UART_SetConfig+0x2e0>
 800f06c:	a201      	add	r2, pc, #4	; (adr r2, 800f074 <UART_SetConfig+0x298>)
 800f06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f072:	bf00      	nop
 800f074:	0800f08d 	.word	0x0800f08d
 800f078:	0800f095 	.word	0x0800f095
 800f07c:	0800f09d 	.word	0x0800f09d
 800f080:	0800f0a5 	.word	0x0800f0a5
 800f084:	0800f0ad 	.word	0x0800f0ad
 800f088:	0800f0b5 	.word	0x0800f0b5
 800f08c:	2300      	movs	r3, #0
 800f08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f092:	e18b      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f094:	2304      	movs	r3, #4
 800f096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f09a:	e187      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f09c:	2308      	movs	r3, #8
 800f09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0a2:	e183      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f0a4:	2310      	movs	r3, #16
 800f0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0aa:	e17f      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f0ac:	2320      	movs	r3, #32
 800f0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0b2:	e17b      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f0b4:	2340      	movs	r3, #64	; 0x40
 800f0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0ba:	e177      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f0bc:	2380      	movs	r3, #128	; 0x80
 800f0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0c2:	bf00      	nop
 800f0c4:	e172      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4a1c      	ldr	r2, [pc, #112]	; (800f13c <UART_SetConfig+0x360>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d144      	bne.n	800f15a <UART_SetConfig+0x37e>
 800f0d0:	4b16      	ldr	r3, [pc, #88]	; (800f12c <UART_SetConfig+0x350>)
 800f0d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0d4:	f003 0307 	and.w	r3, r3, #7
 800f0d8:	2b05      	cmp	r3, #5
 800f0da:	d839      	bhi.n	800f150 <UART_SetConfig+0x374>
 800f0dc:	a201      	add	r2, pc, #4	; (adr r2, 800f0e4 <UART_SetConfig+0x308>)
 800f0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e2:	bf00      	nop
 800f0e4:	0800f0fd 	.word	0x0800f0fd
 800f0e8:	0800f105 	.word	0x0800f105
 800f0ec:	0800f10d 	.word	0x0800f10d
 800f0f0:	0800f115 	.word	0x0800f115
 800f0f4:	0800f141 	.word	0x0800f141
 800f0f8:	0800f149 	.word	0x0800f149
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f102:	e153      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f104:	2304      	movs	r3, #4
 800f106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f10a:	e14f      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f10c:	2308      	movs	r3, #8
 800f10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f112:	e14b      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f114:	2310      	movs	r3, #16
 800f116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f11a:	e147      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f11c:	cfff69f3 	.word	0xcfff69f3
 800f120:	58000c00 	.word	0x58000c00
 800f124:	11fff4ff 	.word	0x11fff4ff
 800f128:	40011000 	.word	0x40011000
 800f12c:	58024400 	.word	0x58024400
 800f130:	40004400 	.word	0x40004400
 800f134:	40004800 	.word	0x40004800
 800f138:	40004c00 	.word	0x40004c00
 800f13c:	40005000 	.word	0x40005000
 800f140:	2320      	movs	r3, #32
 800f142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f146:	e131      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f148:	2340      	movs	r3, #64	; 0x40
 800f14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f14e:	e12d      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f150:	2380      	movs	r3, #128	; 0x80
 800f152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f156:	bf00      	nop
 800f158:	e128      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	4ab6      	ldr	r2, [pc, #728]	; (800f438 <UART_SetConfig+0x65c>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d178      	bne.n	800f256 <UART_SetConfig+0x47a>
 800f164:	4bb5      	ldr	r3, [pc, #724]	; (800f43c <UART_SetConfig+0x660>)
 800f166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f168:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f16c:	2b28      	cmp	r3, #40	; 0x28
 800f16e:	d86d      	bhi.n	800f24c <UART_SetConfig+0x470>
 800f170:	a201      	add	r2, pc, #4	; (adr r2, 800f178 <UART_SetConfig+0x39c>)
 800f172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f176:	bf00      	nop
 800f178:	0800f21d 	.word	0x0800f21d
 800f17c:	0800f24d 	.word	0x0800f24d
 800f180:	0800f24d 	.word	0x0800f24d
 800f184:	0800f24d 	.word	0x0800f24d
 800f188:	0800f24d 	.word	0x0800f24d
 800f18c:	0800f24d 	.word	0x0800f24d
 800f190:	0800f24d 	.word	0x0800f24d
 800f194:	0800f24d 	.word	0x0800f24d
 800f198:	0800f225 	.word	0x0800f225
 800f19c:	0800f24d 	.word	0x0800f24d
 800f1a0:	0800f24d 	.word	0x0800f24d
 800f1a4:	0800f24d 	.word	0x0800f24d
 800f1a8:	0800f24d 	.word	0x0800f24d
 800f1ac:	0800f24d 	.word	0x0800f24d
 800f1b0:	0800f24d 	.word	0x0800f24d
 800f1b4:	0800f24d 	.word	0x0800f24d
 800f1b8:	0800f22d 	.word	0x0800f22d
 800f1bc:	0800f24d 	.word	0x0800f24d
 800f1c0:	0800f24d 	.word	0x0800f24d
 800f1c4:	0800f24d 	.word	0x0800f24d
 800f1c8:	0800f24d 	.word	0x0800f24d
 800f1cc:	0800f24d 	.word	0x0800f24d
 800f1d0:	0800f24d 	.word	0x0800f24d
 800f1d4:	0800f24d 	.word	0x0800f24d
 800f1d8:	0800f235 	.word	0x0800f235
 800f1dc:	0800f24d 	.word	0x0800f24d
 800f1e0:	0800f24d 	.word	0x0800f24d
 800f1e4:	0800f24d 	.word	0x0800f24d
 800f1e8:	0800f24d 	.word	0x0800f24d
 800f1ec:	0800f24d 	.word	0x0800f24d
 800f1f0:	0800f24d 	.word	0x0800f24d
 800f1f4:	0800f24d 	.word	0x0800f24d
 800f1f8:	0800f23d 	.word	0x0800f23d
 800f1fc:	0800f24d 	.word	0x0800f24d
 800f200:	0800f24d 	.word	0x0800f24d
 800f204:	0800f24d 	.word	0x0800f24d
 800f208:	0800f24d 	.word	0x0800f24d
 800f20c:	0800f24d 	.word	0x0800f24d
 800f210:	0800f24d 	.word	0x0800f24d
 800f214:	0800f24d 	.word	0x0800f24d
 800f218:	0800f245 	.word	0x0800f245
 800f21c:	2301      	movs	r3, #1
 800f21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f222:	e0c3      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f224:	2304      	movs	r3, #4
 800f226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f22a:	e0bf      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f22c:	2308      	movs	r3, #8
 800f22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f232:	e0bb      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f234:	2310      	movs	r3, #16
 800f236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f23a:	e0b7      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f23c:	2320      	movs	r3, #32
 800f23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f242:	e0b3      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f244:	2340      	movs	r3, #64	; 0x40
 800f246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f24a:	e0af      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f24c:	2380      	movs	r3, #128	; 0x80
 800f24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f252:	bf00      	nop
 800f254:	e0aa      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4a79      	ldr	r2, [pc, #484]	; (800f440 <UART_SetConfig+0x664>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d132      	bne.n	800f2c6 <UART_SetConfig+0x4ea>
 800f260:	4b76      	ldr	r3, [pc, #472]	; (800f43c <UART_SetConfig+0x660>)
 800f262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f264:	f003 0307 	and.w	r3, r3, #7
 800f268:	2b05      	cmp	r3, #5
 800f26a:	d827      	bhi.n	800f2bc <UART_SetConfig+0x4e0>
 800f26c:	a201      	add	r2, pc, #4	; (adr r2, 800f274 <UART_SetConfig+0x498>)
 800f26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f272:	bf00      	nop
 800f274:	0800f28d 	.word	0x0800f28d
 800f278:	0800f295 	.word	0x0800f295
 800f27c:	0800f29d 	.word	0x0800f29d
 800f280:	0800f2a5 	.word	0x0800f2a5
 800f284:	0800f2ad 	.word	0x0800f2ad
 800f288:	0800f2b5 	.word	0x0800f2b5
 800f28c:	2300      	movs	r3, #0
 800f28e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f292:	e08b      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f294:	2304      	movs	r3, #4
 800f296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f29a:	e087      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f29c:	2308      	movs	r3, #8
 800f29e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2a2:	e083      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f2a4:	2310      	movs	r3, #16
 800f2a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2aa:	e07f      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f2ac:	2320      	movs	r3, #32
 800f2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2b2:	e07b      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f2b4:	2340      	movs	r3, #64	; 0x40
 800f2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2ba:	e077      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f2bc:	2380      	movs	r3, #128	; 0x80
 800f2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2c2:	bf00      	nop
 800f2c4:	e072      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	4a5e      	ldr	r2, [pc, #376]	; (800f444 <UART_SetConfig+0x668>)
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d132      	bne.n	800f336 <UART_SetConfig+0x55a>
 800f2d0:	4b5a      	ldr	r3, [pc, #360]	; (800f43c <UART_SetConfig+0x660>)
 800f2d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2d4:	f003 0307 	and.w	r3, r3, #7
 800f2d8:	2b05      	cmp	r3, #5
 800f2da:	d827      	bhi.n	800f32c <UART_SetConfig+0x550>
 800f2dc:	a201      	add	r2, pc, #4	; (adr r2, 800f2e4 <UART_SetConfig+0x508>)
 800f2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2e2:	bf00      	nop
 800f2e4:	0800f2fd 	.word	0x0800f2fd
 800f2e8:	0800f305 	.word	0x0800f305
 800f2ec:	0800f30d 	.word	0x0800f30d
 800f2f0:	0800f315 	.word	0x0800f315
 800f2f4:	0800f31d 	.word	0x0800f31d
 800f2f8:	0800f325 	.word	0x0800f325
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f302:	e053      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f304:	2304      	movs	r3, #4
 800f306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f30a:	e04f      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f30c:	2308      	movs	r3, #8
 800f30e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f312:	e04b      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f314:	2310      	movs	r3, #16
 800f316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f31a:	e047      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f31c:	2320      	movs	r3, #32
 800f31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f322:	e043      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f324:	2340      	movs	r3, #64	; 0x40
 800f326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f32a:	e03f      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f32c:	2380      	movs	r3, #128	; 0x80
 800f32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f332:	bf00      	nop
 800f334:	e03a      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	4a43      	ldr	r2, [pc, #268]	; (800f448 <UART_SetConfig+0x66c>)
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d132      	bne.n	800f3a6 <UART_SetConfig+0x5ca>
 800f340:	4b3e      	ldr	r3, [pc, #248]	; (800f43c <UART_SetConfig+0x660>)
 800f342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f344:	f003 0307 	and.w	r3, r3, #7
 800f348:	2b05      	cmp	r3, #5
 800f34a:	d827      	bhi.n	800f39c <UART_SetConfig+0x5c0>
 800f34c:	a201      	add	r2, pc, #4	; (adr r2, 800f354 <UART_SetConfig+0x578>)
 800f34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f352:	bf00      	nop
 800f354:	0800f36d 	.word	0x0800f36d
 800f358:	0800f375 	.word	0x0800f375
 800f35c:	0800f37d 	.word	0x0800f37d
 800f360:	0800f385 	.word	0x0800f385
 800f364:	0800f38d 	.word	0x0800f38d
 800f368:	0800f395 	.word	0x0800f395
 800f36c:	2302      	movs	r3, #2
 800f36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f372:	e01b      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f374:	2304      	movs	r3, #4
 800f376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f37a:	e017      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f37c:	2308      	movs	r3, #8
 800f37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f382:	e013      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f384:	2310      	movs	r3, #16
 800f386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f38a:	e00f      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f38c:	2320      	movs	r3, #32
 800f38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f392:	e00b      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f394:	2340      	movs	r3, #64	; 0x40
 800f396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f39a:	e007      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f39c:	2380      	movs	r3, #128	; 0x80
 800f39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3a2:	bf00      	nop
 800f3a4:	e002      	b.n	800f3ac <UART_SetConfig+0x5d0>
 800f3a6:	2380      	movs	r3, #128	; 0x80
 800f3a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a25      	ldr	r2, [pc, #148]	; (800f448 <UART_SetConfig+0x66c>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	f040 80b8 	bne.w	800f528 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f3b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f3bc:	2b08      	cmp	r3, #8
 800f3be:	d019      	beq.n	800f3f4 <UART_SetConfig+0x618>
 800f3c0:	2b08      	cmp	r3, #8
 800f3c2:	dc04      	bgt.n	800f3ce <UART_SetConfig+0x5f2>
 800f3c4:	2b02      	cmp	r3, #2
 800f3c6:	d009      	beq.n	800f3dc <UART_SetConfig+0x600>
 800f3c8:	2b04      	cmp	r3, #4
 800f3ca:	d00b      	beq.n	800f3e4 <UART_SetConfig+0x608>
 800f3cc:	e042      	b.n	800f454 <UART_SetConfig+0x678>
 800f3ce:	2b20      	cmp	r3, #32
 800f3d0:	d02b      	beq.n	800f42a <UART_SetConfig+0x64e>
 800f3d2:	2b40      	cmp	r3, #64	; 0x40
 800f3d4:	d02c      	beq.n	800f430 <UART_SetConfig+0x654>
 800f3d6:	2b10      	cmp	r3, #16
 800f3d8:	d014      	beq.n	800f404 <UART_SetConfig+0x628>
 800f3da:	e03b      	b.n	800f454 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f3dc:	f7fb fad2 	bl	800a984 <HAL_RCCEx_GetD3PCLK1Freq>
 800f3e0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f3e2:	e03d      	b.n	800f460 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3e4:	f107 0314 	add.w	r3, r7, #20
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7fb fae1 	bl	800a9b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f3f2:	e035      	b.n	800f460 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3f4:	f107 0308 	add.w	r3, r7, #8
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7fb fc25 	bl	800ac48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f402:	e02d      	b.n	800f460 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f404:	4b0d      	ldr	r3, [pc, #52]	; (800f43c <UART_SetConfig+0x660>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f003 0320 	and.w	r3, r3, #32
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d009      	beq.n	800f424 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f410:	4b0a      	ldr	r3, [pc, #40]	; (800f43c <UART_SetConfig+0x660>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	08db      	lsrs	r3, r3, #3
 800f416:	f003 0303 	and.w	r3, r3, #3
 800f41a:	4a0c      	ldr	r2, [pc, #48]	; (800f44c <UART_SetConfig+0x670>)
 800f41c:	fa22 f303 	lsr.w	r3, r2, r3
 800f420:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f422:	e01d      	b.n	800f460 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800f424:	4b09      	ldr	r3, [pc, #36]	; (800f44c <UART_SetConfig+0x670>)
 800f426:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f428:	e01a      	b.n	800f460 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f42a:	4b09      	ldr	r3, [pc, #36]	; (800f450 <UART_SetConfig+0x674>)
 800f42c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f42e:	e017      	b.n	800f460 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f434:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f436:	e013      	b.n	800f460 <UART_SetConfig+0x684>
 800f438:	40011400 	.word	0x40011400
 800f43c:	58024400 	.word	0x58024400
 800f440:	40007800 	.word	0x40007800
 800f444:	40007c00 	.word	0x40007c00
 800f448:	58000c00 	.word	0x58000c00
 800f44c:	03d09000 	.word	0x03d09000
 800f450:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800f454:	2300      	movs	r3, #0
 800f456:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f458:	2301      	movs	r3, #1
 800f45a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f45e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f462:	2b00      	cmp	r3, #0
 800f464:	f000 824d 	beq.w	800f902 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f46c:	4aad      	ldr	r2, [pc, #692]	; (800f724 <UART_SetConfig+0x948>)
 800f46e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f472:	461a      	mov	r2, r3
 800f474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f476:	fbb3 f3f2 	udiv	r3, r3, r2
 800f47a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	685a      	ldr	r2, [r3, #4]
 800f480:	4613      	mov	r3, r2
 800f482:	005b      	lsls	r3, r3, #1
 800f484:	4413      	add	r3, r2
 800f486:	6a3a      	ldr	r2, [r7, #32]
 800f488:	429a      	cmp	r2, r3
 800f48a:	d305      	bcc.n	800f498 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f492:	6a3a      	ldr	r2, [r7, #32]
 800f494:	429a      	cmp	r2, r3
 800f496:	d903      	bls.n	800f4a0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800f498:	2301      	movs	r3, #1
 800f49a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f49e:	e230      	b.n	800f902 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f04f 0100 	mov.w	r1, #0
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ac:	4a9d      	ldr	r2, [pc, #628]	; (800f724 <UART_SetConfig+0x948>)
 800f4ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	f04f 0400 	mov.w	r4, #0
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	4623      	mov	r3, r4
 800f4bc:	f7f0 ff68 	bl	8000390 <__aeabi_uldivmod>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	460c      	mov	r4, r1
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	4622      	mov	r2, r4
 800f4c8:	f04f 0300 	mov.w	r3, #0
 800f4cc:	f04f 0400 	mov.w	r4, #0
 800f4d0:	0214      	lsls	r4, r2, #8
 800f4d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800f4d6:	020b      	lsls	r3, r1, #8
 800f4d8:	687a      	ldr	r2, [r7, #4]
 800f4da:	6852      	ldr	r2, [r2, #4]
 800f4dc:	0852      	lsrs	r2, r2, #1
 800f4de:	4611      	mov	r1, r2
 800f4e0:	f04f 0200 	mov.w	r2, #0
 800f4e4:	eb13 0b01 	adds.w	fp, r3, r1
 800f4e8:	eb44 0c02 	adc.w	ip, r4, r2
 800f4ec:	4658      	mov	r0, fp
 800f4ee:	4661      	mov	r1, ip
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	f04f 0400 	mov.w	r4, #0
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	4623      	mov	r3, r4
 800f4fc:	f7f0 ff48 	bl	8000390 <__aeabi_uldivmod>
 800f500:	4603      	mov	r3, r0
 800f502:	460c      	mov	r4, r1
 800f504:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f508:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f50c:	d308      	bcc.n	800f520 <UART_SetConfig+0x744>
 800f50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f514:	d204      	bcs.n	800f520 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f51c:	60da      	str	r2, [r3, #12]
 800f51e:	e1f0      	b.n	800f902 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800f520:	2301      	movs	r3, #1
 800f522:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f526:	e1ec      	b.n	800f902 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	69db      	ldr	r3, [r3, #28]
 800f52c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f530:	f040 8100 	bne.w	800f734 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800f534:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f538:	2b40      	cmp	r3, #64	; 0x40
 800f53a:	f200 80b7 	bhi.w	800f6ac <UART_SetConfig+0x8d0>
 800f53e:	a201      	add	r2, pc, #4	; (adr r2, 800f544 <UART_SetConfig+0x768>)
 800f540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f544:	0800f649 	.word	0x0800f649
 800f548:	0800f651 	.word	0x0800f651
 800f54c:	0800f6ad 	.word	0x0800f6ad
 800f550:	0800f6ad 	.word	0x0800f6ad
 800f554:	0800f659 	.word	0x0800f659
 800f558:	0800f6ad 	.word	0x0800f6ad
 800f55c:	0800f6ad 	.word	0x0800f6ad
 800f560:	0800f6ad 	.word	0x0800f6ad
 800f564:	0800f669 	.word	0x0800f669
 800f568:	0800f6ad 	.word	0x0800f6ad
 800f56c:	0800f6ad 	.word	0x0800f6ad
 800f570:	0800f6ad 	.word	0x0800f6ad
 800f574:	0800f6ad 	.word	0x0800f6ad
 800f578:	0800f6ad 	.word	0x0800f6ad
 800f57c:	0800f6ad 	.word	0x0800f6ad
 800f580:	0800f6ad 	.word	0x0800f6ad
 800f584:	0800f679 	.word	0x0800f679
 800f588:	0800f6ad 	.word	0x0800f6ad
 800f58c:	0800f6ad 	.word	0x0800f6ad
 800f590:	0800f6ad 	.word	0x0800f6ad
 800f594:	0800f6ad 	.word	0x0800f6ad
 800f598:	0800f6ad 	.word	0x0800f6ad
 800f59c:	0800f6ad 	.word	0x0800f6ad
 800f5a0:	0800f6ad 	.word	0x0800f6ad
 800f5a4:	0800f6ad 	.word	0x0800f6ad
 800f5a8:	0800f6ad 	.word	0x0800f6ad
 800f5ac:	0800f6ad 	.word	0x0800f6ad
 800f5b0:	0800f6ad 	.word	0x0800f6ad
 800f5b4:	0800f6ad 	.word	0x0800f6ad
 800f5b8:	0800f6ad 	.word	0x0800f6ad
 800f5bc:	0800f6ad 	.word	0x0800f6ad
 800f5c0:	0800f6ad 	.word	0x0800f6ad
 800f5c4:	0800f69f 	.word	0x0800f69f
 800f5c8:	0800f6ad 	.word	0x0800f6ad
 800f5cc:	0800f6ad 	.word	0x0800f6ad
 800f5d0:	0800f6ad 	.word	0x0800f6ad
 800f5d4:	0800f6ad 	.word	0x0800f6ad
 800f5d8:	0800f6ad 	.word	0x0800f6ad
 800f5dc:	0800f6ad 	.word	0x0800f6ad
 800f5e0:	0800f6ad 	.word	0x0800f6ad
 800f5e4:	0800f6ad 	.word	0x0800f6ad
 800f5e8:	0800f6ad 	.word	0x0800f6ad
 800f5ec:	0800f6ad 	.word	0x0800f6ad
 800f5f0:	0800f6ad 	.word	0x0800f6ad
 800f5f4:	0800f6ad 	.word	0x0800f6ad
 800f5f8:	0800f6ad 	.word	0x0800f6ad
 800f5fc:	0800f6ad 	.word	0x0800f6ad
 800f600:	0800f6ad 	.word	0x0800f6ad
 800f604:	0800f6ad 	.word	0x0800f6ad
 800f608:	0800f6ad 	.word	0x0800f6ad
 800f60c:	0800f6ad 	.word	0x0800f6ad
 800f610:	0800f6ad 	.word	0x0800f6ad
 800f614:	0800f6ad 	.word	0x0800f6ad
 800f618:	0800f6ad 	.word	0x0800f6ad
 800f61c:	0800f6ad 	.word	0x0800f6ad
 800f620:	0800f6ad 	.word	0x0800f6ad
 800f624:	0800f6ad 	.word	0x0800f6ad
 800f628:	0800f6ad 	.word	0x0800f6ad
 800f62c:	0800f6ad 	.word	0x0800f6ad
 800f630:	0800f6ad 	.word	0x0800f6ad
 800f634:	0800f6ad 	.word	0x0800f6ad
 800f638:	0800f6ad 	.word	0x0800f6ad
 800f63c:	0800f6ad 	.word	0x0800f6ad
 800f640:	0800f6ad 	.word	0x0800f6ad
 800f644:	0800f6a5 	.word	0x0800f6a5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f648:	f7f9 ffee 	bl	8009628 <HAL_RCC_GetPCLK1Freq>
 800f64c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f64e:	e033      	b.n	800f6b8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f650:	f7fa f800 	bl	8009654 <HAL_RCC_GetPCLK2Freq>
 800f654:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f656:	e02f      	b.n	800f6b8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f658:	f107 0314 	add.w	r3, r7, #20
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7fb f9a7 	bl	800a9b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f666:	e027      	b.n	800f6b8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f668:	f107 0308 	add.w	r3, r7, #8
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7fb faeb 	bl	800ac48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f676:	e01f      	b.n	800f6b8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f678:	4b2b      	ldr	r3, [pc, #172]	; (800f728 <UART_SetConfig+0x94c>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	f003 0320 	and.w	r3, r3, #32
 800f680:	2b00      	cmp	r3, #0
 800f682:	d009      	beq.n	800f698 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f684:	4b28      	ldr	r3, [pc, #160]	; (800f728 <UART_SetConfig+0x94c>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	08db      	lsrs	r3, r3, #3
 800f68a:	f003 0303 	and.w	r3, r3, #3
 800f68e:	4a27      	ldr	r2, [pc, #156]	; (800f72c <UART_SetConfig+0x950>)
 800f690:	fa22 f303 	lsr.w	r3, r2, r3
 800f694:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f696:	e00f      	b.n	800f6b8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800f698:	4b24      	ldr	r3, [pc, #144]	; (800f72c <UART_SetConfig+0x950>)
 800f69a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f69c:	e00c      	b.n	800f6b8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f69e:	4b24      	ldr	r3, [pc, #144]	; (800f730 <UART_SetConfig+0x954>)
 800f6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f6a2:	e009      	b.n	800f6b8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f6a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f6aa:	e005      	b.n	800f6b8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f6b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	f000 8121 	beq.w	800f902 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c4:	4a17      	ldr	r2, [pc, #92]	; (800f724 <UART_SetConfig+0x948>)
 800f6c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6d2:	005a      	lsls	r2, r3, #1
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	085b      	lsrs	r3, r3, #1
 800f6da:	441a      	add	r2, r3
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ea:	2b0f      	cmp	r3, #15
 800f6ec:	d916      	bls.n	800f71c <UART_SetConfig+0x940>
 800f6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6f4:	d212      	bcs.n	800f71c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	f023 030f 	bic.w	r3, r3, #15
 800f6fe:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f702:	085b      	lsrs	r3, r3, #1
 800f704:	b29b      	uxth	r3, r3
 800f706:	f003 0307 	and.w	r3, r3, #7
 800f70a:	b29a      	uxth	r2, r3
 800f70c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f70e:	4313      	orrs	r3, r2
 800f710:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f718:	60da      	str	r2, [r3, #12]
 800f71a:	e0f2      	b.n	800f902 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800f71c:	2301      	movs	r3, #1
 800f71e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f722:	e0ee      	b.n	800f902 <UART_SetConfig+0xb26>
 800f724:	08019ee8 	.word	0x08019ee8
 800f728:	58024400 	.word	0x58024400
 800f72c:	03d09000 	.word	0x03d09000
 800f730:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800f734:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f738:	2b40      	cmp	r3, #64	; 0x40
 800f73a:	f200 80b7 	bhi.w	800f8ac <UART_SetConfig+0xad0>
 800f73e:	a201      	add	r2, pc, #4	; (adr r2, 800f744 <UART_SetConfig+0x968>)
 800f740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f744:	0800f849 	.word	0x0800f849
 800f748:	0800f851 	.word	0x0800f851
 800f74c:	0800f8ad 	.word	0x0800f8ad
 800f750:	0800f8ad 	.word	0x0800f8ad
 800f754:	0800f859 	.word	0x0800f859
 800f758:	0800f8ad 	.word	0x0800f8ad
 800f75c:	0800f8ad 	.word	0x0800f8ad
 800f760:	0800f8ad 	.word	0x0800f8ad
 800f764:	0800f869 	.word	0x0800f869
 800f768:	0800f8ad 	.word	0x0800f8ad
 800f76c:	0800f8ad 	.word	0x0800f8ad
 800f770:	0800f8ad 	.word	0x0800f8ad
 800f774:	0800f8ad 	.word	0x0800f8ad
 800f778:	0800f8ad 	.word	0x0800f8ad
 800f77c:	0800f8ad 	.word	0x0800f8ad
 800f780:	0800f8ad 	.word	0x0800f8ad
 800f784:	0800f879 	.word	0x0800f879
 800f788:	0800f8ad 	.word	0x0800f8ad
 800f78c:	0800f8ad 	.word	0x0800f8ad
 800f790:	0800f8ad 	.word	0x0800f8ad
 800f794:	0800f8ad 	.word	0x0800f8ad
 800f798:	0800f8ad 	.word	0x0800f8ad
 800f79c:	0800f8ad 	.word	0x0800f8ad
 800f7a0:	0800f8ad 	.word	0x0800f8ad
 800f7a4:	0800f8ad 	.word	0x0800f8ad
 800f7a8:	0800f8ad 	.word	0x0800f8ad
 800f7ac:	0800f8ad 	.word	0x0800f8ad
 800f7b0:	0800f8ad 	.word	0x0800f8ad
 800f7b4:	0800f8ad 	.word	0x0800f8ad
 800f7b8:	0800f8ad 	.word	0x0800f8ad
 800f7bc:	0800f8ad 	.word	0x0800f8ad
 800f7c0:	0800f8ad 	.word	0x0800f8ad
 800f7c4:	0800f89f 	.word	0x0800f89f
 800f7c8:	0800f8ad 	.word	0x0800f8ad
 800f7cc:	0800f8ad 	.word	0x0800f8ad
 800f7d0:	0800f8ad 	.word	0x0800f8ad
 800f7d4:	0800f8ad 	.word	0x0800f8ad
 800f7d8:	0800f8ad 	.word	0x0800f8ad
 800f7dc:	0800f8ad 	.word	0x0800f8ad
 800f7e0:	0800f8ad 	.word	0x0800f8ad
 800f7e4:	0800f8ad 	.word	0x0800f8ad
 800f7e8:	0800f8ad 	.word	0x0800f8ad
 800f7ec:	0800f8ad 	.word	0x0800f8ad
 800f7f0:	0800f8ad 	.word	0x0800f8ad
 800f7f4:	0800f8ad 	.word	0x0800f8ad
 800f7f8:	0800f8ad 	.word	0x0800f8ad
 800f7fc:	0800f8ad 	.word	0x0800f8ad
 800f800:	0800f8ad 	.word	0x0800f8ad
 800f804:	0800f8ad 	.word	0x0800f8ad
 800f808:	0800f8ad 	.word	0x0800f8ad
 800f80c:	0800f8ad 	.word	0x0800f8ad
 800f810:	0800f8ad 	.word	0x0800f8ad
 800f814:	0800f8ad 	.word	0x0800f8ad
 800f818:	0800f8ad 	.word	0x0800f8ad
 800f81c:	0800f8ad 	.word	0x0800f8ad
 800f820:	0800f8ad 	.word	0x0800f8ad
 800f824:	0800f8ad 	.word	0x0800f8ad
 800f828:	0800f8ad 	.word	0x0800f8ad
 800f82c:	0800f8ad 	.word	0x0800f8ad
 800f830:	0800f8ad 	.word	0x0800f8ad
 800f834:	0800f8ad 	.word	0x0800f8ad
 800f838:	0800f8ad 	.word	0x0800f8ad
 800f83c:	0800f8ad 	.word	0x0800f8ad
 800f840:	0800f8ad 	.word	0x0800f8ad
 800f844:	0800f8a5 	.word	0x0800f8a5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f848:	f7f9 feee 	bl	8009628 <HAL_RCC_GetPCLK1Freq>
 800f84c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f84e:	e033      	b.n	800f8b8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f850:	f7f9 ff00 	bl	8009654 <HAL_RCC_GetPCLK2Freq>
 800f854:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f856:	e02f      	b.n	800f8b8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f858:	f107 0314 	add.w	r3, r7, #20
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fb f8a7 	bl	800a9b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f862:	69bb      	ldr	r3, [r7, #24]
 800f864:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f866:	e027      	b.n	800f8b8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f868:	f107 0308 	add.w	r3, r7, #8
 800f86c:	4618      	mov	r0, r3
 800f86e:	f7fb f9eb 	bl	800ac48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f876:	e01f      	b.n	800f8b8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f878:	4b2c      	ldr	r3, [pc, #176]	; (800f92c <UART_SetConfig+0xb50>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	f003 0320 	and.w	r3, r3, #32
 800f880:	2b00      	cmp	r3, #0
 800f882:	d009      	beq.n	800f898 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f884:	4b29      	ldr	r3, [pc, #164]	; (800f92c <UART_SetConfig+0xb50>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	08db      	lsrs	r3, r3, #3
 800f88a:	f003 0303 	and.w	r3, r3, #3
 800f88e:	4a28      	ldr	r2, [pc, #160]	; (800f930 <UART_SetConfig+0xb54>)
 800f890:	fa22 f303 	lsr.w	r3, r2, r3
 800f894:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f896:	e00f      	b.n	800f8b8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800f898:	4b25      	ldr	r3, [pc, #148]	; (800f930 <UART_SetConfig+0xb54>)
 800f89a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f89c:	e00c      	b.n	800f8b8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f89e:	4b25      	ldr	r3, [pc, #148]	; (800f934 <UART_SetConfig+0xb58>)
 800f8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f8a2:	e009      	b.n	800f8b8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f8a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f8aa:	e005      	b.n	800f8b8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f8b6:	bf00      	nop
    }

    if (pclk != 0U)
 800f8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d021      	beq.n	800f902 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c2:	4a1d      	ldr	r2, [pc, #116]	; (800f938 <UART_SetConfig+0xb5c>)
 800f8c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8c8:	461a      	mov	r2, r3
 800f8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8cc:	fbb3 f2f2 	udiv	r2, r3, r2
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	685b      	ldr	r3, [r3, #4]
 800f8d4:	085b      	lsrs	r3, r3, #1
 800f8d6:	441a      	add	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8e0:	b29b      	uxth	r3, r3
 800f8e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e6:	2b0f      	cmp	r3, #15
 800f8e8:	d908      	bls.n	800f8fc <UART_SetConfig+0xb20>
 800f8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8f0:	d204      	bcs.n	800f8fc <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8f8:	60da      	str	r2, [r3, #12]
 800f8fa:	e002      	b.n	800f902 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2201      	movs	r2, #1
 800f906:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2201      	movs	r2, #1
 800f90e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2200      	movs	r2, #0
 800f91c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800f91e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f922:	4618      	mov	r0, r3
 800f924:	3738      	adds	r7, #56	; 0x38
 800f926:	46bd      	mov	sp, r7
 800f928:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800f92c:	58024400 	.word	0x58024400
 800f930:	03d09000 	.word	0x03d09000
 800f934:	003d0900 	.word	0x003d0900
 800f938:	08019ee8 	.word	0x08019ee8

0800f93c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f948:	f003 0301 	and.w	r3, r3, #1
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d00a      	beq.n	800f966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	430a      	orrs	r2, r1
 800f964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f96a:	f003 0302 	and.w	r3, r3, #2
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d00a      	beq.n	800f988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	430a      	orrs	r2, r1
 800f986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f98c:	f003 0304 	and.w	r3, r3, #4
 800f990:	2b00      	cmp	r3, #0
 800f992:	d00a      	beq.n	800f9aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	430a      	orrs	r2, r1
 800f9a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ae:	f003 0308 	and.w	r3, r3, #8
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d00a      	beq.n	800f9cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	685b      	ldr	r3, [r3, #4]
 800f9bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	430a      	orrs	r2, r1
 800f9ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d0:	f003 0310 	and.w	r3, r3, #16
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00a      	beq.n	800f9ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	689b      	ldr	r3, [r3, #8]
 800f9de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	430a      	orrs	r2, r1
 800f9ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f2:	f003 0320 	and.w	r3, r3, #32
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d00a      	beq.n	800fa10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	430a      	orrs	r2, r1
 800fa0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d01a      	beq.n	800fa52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	430a      	orrs	r2, r1
 800fa30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fa3a:	d10a      	bne.n	800fa52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	430a      	orrs	r2, r1
 800fa50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d00a      	beq.n	800fa74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	430a      	orrs	r2, r1
 800fa72:	605a      	str	r2, [r3, #4]
  }
}
 800fa74:	bf00      	nop
 800fa76:	370c      	adds	r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b086      	sub	sp, #24
 800fa84:	af02      	add	r7, sp, #8
 800fa86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800fa90:	f7f3 fd8a 	bl	80035a8 <HAL_GetTick>
 800fa94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f003 0308 	and.w	r3, r3, #8
 800faa0:	2b08      	cmp	r3, #8
 800faa2:	d10e      	bne.n	800fac2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800faa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800faa8:	9300      	str	r3, [sp, #0]
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2200      	movs	r2, #0
 800faae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f000 f82c 	bl	800fb10 <UART_WaitOnFlagUntilTimeout>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d001      	beq.n	800fac2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fabe:	2303      	movs	r3, #3
 800fac0:	e022      	b.n	800fb08 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f003 0304 	and.w	r3, r3, #4
 800facc:	2b04      	cmp	r3, #4
 800face:	d10e      	bne.n	800faee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fad0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fad4:	9300      	str	r3, [sp, #0]
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	2200      	movs	r2, #0
 800fada:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f000 f816 	bl	800fb10 <UART_WaitOnFlagUntilTimeout>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d001      	beq.n	800faee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800faea:	2303      	movs	r3, #3
 800faec:	e00c      	b.n	800fb08 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2220      	movs	r2, #32
 800faf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2220      	movs	r2, #32
 800fafa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2200      	movs	r2, #0
 800fb02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fb06:	2300      	movs	r3, #0
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3710      	adds	r7, #16
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	60b9      	str	r1, [r7, #8]
 800fb1a:	603b      	str	r3, [r7, #0]
 800fb1c:	4613      	mov	r3, r2
 800fb1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb20:	e062      	b.n	800fbe8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb22:	69bb      	ldr	r3, [r7, #24]
 800fb24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb28:	d05e      	beq.n	800fbe8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fb2a:	f7f3 fd3d 	bl	80035a8 <HAL_GetTick>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	1ad3      	subs	r3, r2, r3
 800fb34:	69ba      	ldr	r2, [r7, #24]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d302      	bcc.n	800fb40 <UART_WaitOnFlagUntilTimeout+0x30>
 800fb3a:	69bb      	ldr	r3, [r7, #24]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d11d      	bne.n	800fb7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fb4e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	689a      	ldr	r2, [r3, #8]
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f022 0201 	bic.w	r2, r2, #1
 800fb5e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2220      	movs	r2, #32
 800fb64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2220      	movs	r2, #32
 800fb6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2200      	movs	r2, #0
 800fb74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800fb78:	2303      	movs	r3, #3
 800fb7a:	e045      	b.n	800fc08 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f003 0304 	and.w	r3, r3, #4
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d02e      	beq.n	800fbe8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	69db      	ldr	r3, [r3, #28]
 800fb90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb98:	d126      	bne.n	800fbe8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fba2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	681a      	ldr	r2, [r3, #0]
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fbb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	689a      	ldr	r2, [r3, #8]
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f022 0201 	bic.w	r2, r2, #1
 800fbc2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2220      	movs	r2, #32
 800fbc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2220      	movs	r2, #32
 800fbd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	2220      	movs	r2, #32
 800fbd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800fbe4:	2303      	movs	r3, #3
 800fbe6:	e00f      	b.n	800fc08 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	69da      	ldr	r2, [r3, #28]
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	4013      	ands	r3, r2
 800fbf2:	68ba      	ldr	r2, [r7, #8]
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	bf0c      	ite	eq
 800fbf8:	2301      	moveq	r3, #1
 800fbfa:	2300      	movne	r3, #0
 800fbfc:	b2db      	uxtb	r3, r3
 800fbfe:	461a      	mov	r2, r3
 800fc00:	79fb      	ldrb	r3, [r7, #7]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d08d      	beq.n	800fb22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fc06:	2300      	movs	r3, #0
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3710      	adds	r7, #16
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	681a      	ldr	r2, [r3, #0]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800fc26:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	689a      	ldr	r2, [r3, #8]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800fc36:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2220      	movs	r2, #32
 800fc3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800fc40:	bf00      	nop
 800fc42:	370c      	adds	r7, #12
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr

0800fc4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b083      	sub	sp, #12
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fc62:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	6899      	ldr	r1, [r3, #8]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	4b08      	ldr	r3, [pc, #32]	; (800fc90 <UART_EndRxTransfer+0x44>)
 800fc70:	400b      	ands	r3, r1
 800fc72:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2220      	movs	r2, #32
 800fc78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800fc82:	bf00      	nop
 800fc84:	370c      	adds	r7, #12
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr
 800fc8e:	bf00      	nop
 800fc90:	effffffe 	.word	0xeffffffe

0800fc94 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b084      	sub	sp, #16
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fca0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	69db      	ldr	r3, [r3, #28]
 800fca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcaa:	d01f      	beq.n	800fcec <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fcc2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	689a      	ldr	r2, [r3, #8]
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f022 0201 	bic.w	r2, r2, #1
 800fcd2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	689a      	ldr	r2, [r3, #8]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fce2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	2220      	movs	r2, #32
 800fce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800fcec:	68f8      	ldr	r0, [r7, #12]
 800fcee:	f7ff f861 	bl	800edb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcf2:	bf00      	nop
 800fcf4:	3710      	adds	r7, #16
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}

0800fcfa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fcfa:	b580      	push	{r7, lr}
 800fcfc:	b084      	sub	sp, #16
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800fd08:	68f8      	ldr	r0, [r7, #12]
 800fd0a:	f7f0 fe4f 	bl	80009ac <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd0e:	bf00      	nop
 800fd10:	3710      	adds	r7, #16
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}

0800fd16 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b086      	sub	sp, #24
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd22:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd2a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd32:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	689b      	ldr	r3, [r3, #8]
 800fd3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd3e:	2b80      	cmp	r3, #128	; 0x80
 800fd40:	d109      	bne.n	800fd56 <UART_DMAError+0x40>
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	2b21      	cmp	r3, #33	; 0x21
 800fd46:	d106      	bne.n	800fd56 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fd50:	6978      	ldr	r0, [r7, #20]
 800fd52:	f7ff ff5d 	bl	800fc10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	689b      	ldr	r3, [r3, #8]
 800fd5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd60:	2b40      	cmp	r3, #64	; 0x40
 800fd62:	d109      	bne.n	800fd78 <UART_DMAError+0x62>
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2b22      	cmp	r3, #34	; 0x22
 800fd68:	d106      	bne.n	800fd78 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fd72:	6978      	ldr	r0, [r7, #20]
 800fd74:	f7ff ff6a 	bl	800fc4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd7e:	f043 0210 	orr.w	r2, r3, #16
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fd88:	6978      	ldr	r0, [r7, #20]
 800fd8a:	f7ff f81d 	bl	800edc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd8e:	bf00      	nop
 800fd90:	3718      	adds	r7, #24
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}

0800fd96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fd96:	b480      	push	{r7}
 800fd98:	b085      	sub	sp, #20
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d101      	bne.n	800fdac <HAL_UARTEx_DisableFifoMode+0x16>
 800fda8:	2302      	movs	r3, #2
 800fdaa:	e027      	b.n	800fdfc <HAL_UARTEx_DisableFifoMode+0x66>
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2201      	movs	r2, #1
 800fdb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2224      	movs	r2, #36	; 0x24
 800fdb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	681a      	ldr	r2, [r3, #0]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f022 0201 	bic.w	r2, r2, #1
 800fdd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fdda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2200      	movs	r2, #0
 800fde0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	68fa      	ldr	r2, [r7, #12]
 800fde8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2220      	movs	r2, #32
 800fdee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fdfa:	2300      	movs	r3, #0
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3714      	adds	r7, #20
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr

0800fe08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b084      	sub	sp, #16
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fe18:	2b01      	cmp	r3, #1
 800fe1a:	d101      	bne.n	800fe20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fe1c:	2302      	movs	r3, #2
 800fe1e:	e02d      	b.n	800fe7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2201      	movs	r2, #1
 800fe24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2224      	movs	r2, #36	; 0x24
 800fe2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	681a      	ldr	r2, [r3, #0]
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	f022 0201 	bic.w	r2, r2, #1
 800fe46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	689b      	ldr	r3, [r3, #8]
 800fe4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	683a      	ldr	r2, [r7, #0]
 800fe58:	430a      	orrs	r2, r1
 800fe5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 f84f 	bl	800ff00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	68fa      	ldr	r2, [r7, #12]
 800fe68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2220      	movs	r2, #32
 800fe6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2200      	movs	r2, #0
 800fe76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fe7a:	2300      	movs	r3, #0
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3710      	adds	r7, #16
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d101      	bne.n	800fe9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fe98:	2302      	movs	r3, #2
 800fe9a:	e02d      	b.n	800fef8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2201      	movs	r2, #1
 800fea0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2224      	movs	r2, #36	; 0x24
 800fea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	681a      	ldr	r2, [r3, #0]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	f022 0201 	bic.w	r2, r2, #1
 800fec2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	689b      	ldr	r3, [r3, #8]
 800feca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	683a      	ldr	r2, [r7, #0]
 800fed4:	430a      	orrs	r2, r1
 800fed6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f000 f811 	bl	800ff00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	68fa      	ldr	r2, [r7, #12]
 800fee4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2220      	movs	r2, #32
 800feea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2200      	movs	r2, #0
 800fef2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fef6:	2300      	movs	r3, #0
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3710      	adds	r7, #16
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b089      	sub	sp, #36	; 0x24
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ff08:	4a2f      	ldr	r2, [pc, #188]	; (800ffc8 <UARTEx_SetNbDataToProcess+0xc8>)
 800ff0a:	f107 0314 	add.w	r3, r7, #20
 800ff0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff12:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ff16:	4a2d      	ldr	r2, [pc, #180]	; (800ffcc <UARTEx_SetNbDataToProcess+0xcc>)
 800ff18:	f107 030c 	add.w	r3, r7, #12
 800ff1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff20:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d108      	bne.n	800ff3e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2201      	movs	r2, #1
 800ff30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2201      	movs	r2, #1
 800ff38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ff3c:	e03d      	b.n	800ffba <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ff3e:	2310      	movs	r3, #16
 800ff40:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ff42:	2310      	movs	r3, #16
 800ff44:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	689b      	ldr	r3, [r3, #8]
 800ff4c:	0e5b      	lsrs	r3, r3, #25
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	f003 0307 	and.w	r3, r3, #7
 800ff54:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	689b      	ldr	r3, [r3, #8]
 800ff5c:	0f5b      	lsrs	r3, r3, #29
 800ff5e:	b2db      	uxtb	r3, r3
 800ff60:	f003 0307 	and.w	r3, r3, #7
 800ff64:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ff66:	7fbb      	ldrb	r3, [r7, #30]
 800ff68:	7f3a      	ldrb	r2, [r7, #28]
 800ff6a:	f107 0120 	add.w	r1, r7, #32
 800ff6e:	440a      	add	r2, r1
 800ff70:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ff74:	fb02 f303 	mul.w	r3, r2, r3
 800ff78:	7f3a      	ldrb	r2, [r7, #28]
 800ff7a:	f107 0120 	add.w	r1, r7, #32
 800ff7e:	440a      	add	r2, r1
 800ff80:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ff84:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff88:	b29a      	uxth	r2, r3
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ff90:	7ffb      	ldrb	r3, [r7, #31]
 800ff92:	7f7a      	ldrb	r2, [r7, #29]
 800ff94:	f107 0120 	add.w	r1, r7, #32
 800ff98:	440a      	add	r2, r1
 800ff9a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ff9e:	fb02 f303 	mul.w	r3, r2, r3
 800ffa2:	7f7a      	ldrb	r2, [r7, #29]
 800ffa4:	f107 0120 	add.w	r1, r7, #32
 800ffa8:	440a      	add	r2, r1
 800ffaa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ffae:	fb93 f3f2 	sdiv	r3, r3, r2
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ffba:	bf00      	nop
 800ffbc:	3724      	adds	r7, #36	; 0x24
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc4:	4770      	bx	lr
 800ffc6:	bf00      	nop
 800ffc8:	08019e28 	.word	0x08019e28
 800ffcc:	08019e30 	.word	0x08019e30

0800ffd0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ffd0:	b084      	sub	sp, #16
 800ffd2:	b480      	push	{r7}
 800ffd4:	b085      	sub	sp, #20
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	6078      	str	r0, [r7, #4]
 800ffda:	f107 001c 	add.w	r0, r7, #28
 800ffde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ffe6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800ffe8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ffea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ffec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800ffee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800fff2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800fff6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800fff8:	68fa      	ldr	r2, [r7, #12]
 800fffa:	4313      	orrs	r3, r2
 800fffc:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	685a      	ldr	r2, [r3, #4]
 8010002:	4b07      	ldr	r3, [pc, #28]	; (8010020 <SDMMC_Init+0x50>)
 8010004:	4013      	ands	r3, r2
 8010006:	68fa      	ldr	r2, [r7, #12]
 8010008:	431a      	orrs	r2, r3
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801000e:	2300      	movs	r3, #0
}
 8010010:	4618      	mov	r0, r3
 8010012:	3714      	adds	r7, #20
 8010014:	46bd      	mov	sp, r7
 8010016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001a:	b004      	add	sp, #16
 801001c:	4770      	bx	lr
 801001e:	bf00      	nop
 8010020:	ffc02c00 	.word	0xffc02c00

08010024 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010032:	4618      	mov	r0, r3
 8010034:	370c      	adds	r7, #12
 8010036:	46bd      	mov	sp, r7
 8010038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003c:	4770      	bx	lr

0801003e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801003e:	b480      	push	{r7}
 8010040:	b083      	sub	sp, #12
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
 8010046:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	681a      	ldr	r2, [r3, #0]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010052:	2300      	movs	r3, #0
}
 8010054:	4618      	mov	r0, r3
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010060:	b480      	push	{r7}
 8010062:	b083      	sub	sp, #12
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f043 0203 	orr.w	r2, r3, #3
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010074:	2300      	movs	r3, #0
}
 8010076:	4618      	mov	r0, r3
 8010078:	370c      	adds	r7, #12
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr

08010082 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010082:	b480      	push	{r7}
 8010084:	b083      	sub	sp, #12
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f003 0303 	and.w	r3, r3, #3
}
 8010092:	4618      	mov	r0, r3
 8010094:	370c      	adds	r7, #12
 8010096:	46bd      	mov	sp, r7
 8010098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009c:	4770      	bx	lr
	...

080100a0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b085      	sub	sp, #20
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80100aa:	2300      	movs	r3, #0
 80100ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80100be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80100c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80100ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80100cc:	68fa      	ldr	r2, [r7, #12]
 80100ce:	4313      	orrs	r3, r2
 80100d0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	68da      	ldr	r2, [r3, #12]
 80100d6:	4b06      	ldr	r3, [pc, #24]	; (80100f0 <SDMMC_SendCommand+0x50>)
 80100d8:	4013      	ands	r3, r2
 80100da:	68fa      	ldr	r2, [r7, #12]
 80100dc:	431a      	orrs	r2, r3
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80100e2:	2300      	movs	r3, #0
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3714      	adds	r7, #20
 80100e8:	46bd      	mov	sp, r7
 80100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ee:	4770      	bx	lr
 80100f0:	fffee0c0 	.word	0xfffee0c0

080100f4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	691b      	ldr	r3, [r3, #16]
 8010100:	b2db      	uxtb	r3, r3
}
 8010102:	4618      	mov	r0, r3
 8010104:	370c      	adds	r7, #12
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr

0801010e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801010e:	b480      	push	{r7}
 8010110:	b085      	sub	sp, #20
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
 8010116:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	3314      	adds	r3, #20
 801011c:	461a      	mov	r2, r3
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	4413      	add	r3, r2
 8010122:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	681b      	ldr	r3, [r3, #0]
}
 8010128:	4618      	mov	r0, r3
 801012a:	3714      	adds	r7, #20
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr

08010134 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010134:	b480      	push	{r7}
 8010136:	b085      	sub	sp, #20
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801013e:	2300      	movs	r3, #0
 8010140:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	685a      	ldr	r2, [r3, #4]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801015a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010160:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010166:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010168:	68fa      	ldr	r2, [r7, #12]
 801016a:	4313      	orrs	r3, r2
 801016c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010172:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	431a      	orrs	r2, r3
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801017e:	2300      	movs	r3, #0

}
 8010180:	4618      	mov	r0, r3
 8010182:	3714      	adds	r7, #20
 8010184:	46bd      	mov	sp, r7
 8010186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018a:	4770      	bx	lr

0801018c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b088      	sub	sp, #32
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801019a:	2310      	movs	r3, #16
 801019c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801019e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80101a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101a4:	2300      	movs	r3, #0
 80101a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80101ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101ae:	f107 0308 	add.w	r3, r7, #8
 80101b2:	4619      	mov	r1, r3
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f7ff ff73 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80101ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80101be:	2110      	movs	r1, #16
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f000 faaf 	bl	8010724 <SDMMC_GetCmdResp1>
 80101c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101c8:	69fb      	ldr	r3, [r7, #28]
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3720      	adds	r7, #32
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}

080101d2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80101d2:	b580      	push	{r7, lr}
 80101d4:	b088      	sub	sp, #32
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	6078      	str	r0, [r7, #4]
 80101da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80101e0:	2311      	movs	r3, #17
 80101e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80101e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101ea:	2300      	movs	r3, #0
 80101ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80101f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101f4:	f107 0308 	add.w	r3, r7, #8
 80101f8:	4619      	mov	r1, r3
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f7ff ff50 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010200:	f241 3288 	movw	r2, #5000	; 0x1388
 8010204:	2111      	movs	r1, #17
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f000 fa8c 	bl	8010724 <SDMMC_GetCmdResp1>
 801020c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801020e:	69fb      	ldr	r3, [r7, #28]
}
 8010210:	4618      	mov	r0, r3
 8010212:	3720      	adds	r7, #32
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b088      	sub	sp, #32
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010226:	2312      	movs	r3, #18
 8010228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801022a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801022e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010230:	2300      	movs	r3, #0
 8010232:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010238:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801023a:	f107 0308 	add.w	r3, r7, #8
 801023e:	4619      	mov	r1, r3
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f7ff ff2d 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010246:	f241 3288 	movw	r2, #5000	; 0x1388
 801024a:	2112      	movs	r1, #18
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f000 fa69 	bl	8010724 <SDMMC_GetCmdResp1>
 8010252:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010254:	69fb      	ldr	r3, [r7, #28]
}
 8010256:	4618      	mov	r0, r3
 8010258:	3720      	adds	r7, #32
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}

0801025e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801025e:	b580      	push	{r7, lr}
 8010260:	b088      	sub	sp, #32
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
 8010266:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801026c:	2318      	movs	r3, #24
 801026e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010274:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010276:	2300      	movs	r3, #0
 8010278:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801027a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801027e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010280:	f107 0308 	add.w	r3, r7, #8
 8010284:	4619      	mov	r1, r3
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f7ff ff0a 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801028c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010290:	2118      	movs	r1, #24
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f000 fa46 	bl	8010724 <SDMMC_GetCmdResp1>
 8010298:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801029a:	69fb      	ldr	r3, [r7, #28]
}
 801029c:	4618      	mov	r0, r3
 801029e:	3720      	adds	r7, #32
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b088      	sub	sp, #32
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80102b2:	2319      	movs	r3, #25
 80102b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80102ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102bc:	2300      	movs	r3, #0
 80102be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102c6:	f107 0308 	add.w	r3, r7, #8
 80102ca:	4619      	mov	r1, r3
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f7ff fee7 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80102d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80102d6:	2119      	movs	r1, #25
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f000 fa23 	bl	8010724 <SDMMC_GetCmdResp1>
 80102de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102e0:	69fb      	ldr	r3, [r7, #28]
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3720      	adds	r7, #32
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
	...

080102ec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b088      	sub	sp, #32
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80102f4:	2300      	movs	r3, #0
 80102f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80102f8:	230c      	movs	r3, #12
 80102fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010300:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010302:	2300      	movs	r3, #0
 8010304:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801030a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	68db      	ldr	r3, [r3, #12]
 801031c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010324:	f107 0308 	add.w	r3, r7, #8
 8010328:	4619      	mov	r1, r3
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f7ff feb8 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010330:	4a0b      	ldr	r2, [pc, #44]	; (8010360 <SDMMC_CmdStopTransfer+0x74>)
 8010332:	210c      	movs	r1, #12
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f000 f9f5 	bl	8010724 <SDMMC_GetCmdResp1>
 801033a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	68db      	ldr	r3, [r3, #12]
 8010340:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801034e:	d101      	bne.n	8010354 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010350:	2300      	movs	r3, #0
 8010352:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010354:	69fb      	ldr	r3, [r7, #28]
}
 8010356:	4618      	mov	r0, r3
 8010358:	3720      	adds	r7, #32
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	05f5e100 	.word	0x05f5e100

08010364 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b08a      	sub	sp, #40	; 0x28
 8010368:	af00      	add	r7, sp, #0
 801036a:	60f8      	str	r0, [r7, #12]
 801036c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010374:	2307      	movs	r3, #7
 8010376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010378:	f44f 7380 	mov.w	r3, #256	; 0x100
 801037c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801037e:	2300      	movs	r3, #0
 8010380:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010386:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010388:	f107 0310 	add.w	r3, r7, #16
 801038c:	4619      	mov	r1, r3
 801038e:	68f8      	ldr	r0, [r7, #12]
 8010390:	f7ff fe86 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010394:	f241 3288 	movw	r2, #5000	; 0x1388
 8010398:	2107      	movs	r1, #7
 801039a:	68f8      	ldr	r0, [r7, #12]
 801039c:	f000 f9c2 	bl	8010724 <SDMMC_GetCmdResp1>
 80103a0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80103a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80103a4:	4618      	mov	r0, r3
 80103a6:	3728      	adds	r7, #40	; 0x28
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b088      	sub	sp, #32
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80103b4:	2300      	movs	r3, #0
 80103b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80103b8:	2300      	movs	r3, #0
 80103ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80103bc:	2300      	movs	r3, #0
 80103be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103c0:	2300      	movs	r3, #0
 80103c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103ca:	f107 0308 	add.w	r3, r7, #8
 80103ce:	4619      	mov	r1, r3
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f7ff fe65 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 f976 	bl	80106c8 <SDMMC_GetCmdError>
 80103dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103de:	69fb      	ldr	r3, [r7, #28]
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3720      	adds	r7, #32
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b088      	sub	sp, #32
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80103f0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80103f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80103f6:	2308      	movs	r3, #8
 80103f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010400:	2300      	movs	r3, #0
 8010402:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010408:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801040a:	f107 0308 	add.w	r3, r7, #8
 801040e:	4619      	mov	r1, r3
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f7ff fe45 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f000 fb78 	bl	8010b0c <SDMMC_GetCmdResp7>
 801041c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801041e:	69fb      	ldr	r3, [r7, #28]
}
 8010420:	4618      	mov	r0, r3
 8010422:	3720      	adds	r7, #32
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b088      	sub	sp, #32
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010436:	2337      	movs	r3, #55	; 0x37
 8010438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801043a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801043e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010440:	2300      	movs	r3, #0
 8010442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010448:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801044a:	f107 0308 	add.w	r3, r7, #8
 801044e:	4619      	mov	r1, r3
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f7ff fe25 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010456:	f241 3288 	movw	r2, #5000	; 0x1388
 801045a:	2137      	movs	r1, #55	; 0x37
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f000 f961 	bl	8010724 <SDMMC_GetCmdResp1>
 8010462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010464:	69fb      	ldr	r3, [r7, #28]
}
 8010466:	4618      	mov	r0, r3
 8010468:	3720      	adds	r7, #32
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}

0801046e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801046e:	b580      	push	{r7, lr}
 8010470:	b088      	sub	sp, #32
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
 8010476:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801047c:	2329      	movs	r3, #41	; 0x29
 801047e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010486:	2300      	movs	r3, #0
 8010488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801048a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801048e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010490:	f107 0308 	add.w	r3, r7, #8
 8010494:	4619      	mov	r1, r3
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f7ff fe02 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 fa7d 	bl	801099c <SDMMC_GetCmdResp3>
 80104a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104a4:	69fb      	ldr	r3, [r7, #28]
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3720      	adds	r7, #32
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}

080104ae <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80104ae:	b580      	push	{r7, lr}
 80104b0:	b088      	sub	sp, #32
 80104b2:	af00      	add	r7, sp, #0
 80104b4:	6078      	str	r0, [r7, #4]
 80104b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80104bc:	2306      	movs	r3, #6
 80104be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104c6:	2300      	movs	r3, #0
 80104c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104d0:	f107 0308 	add.w	r3, r7, #8
 80104d4:	4619      	mov	r1, r3
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f7ff fde2 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80104dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80104e0:	2106      	movs	r1, #6
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 f91e 	bl	8010724 <SDMMC_GetCmdResp1>
 80104e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104ea:	69fb      	ldr	r3, [r7, #28]
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3720      	adds	r7, #32
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b088      	sub	sp, #32
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80104fc:	2300      	movs	r3, #0
 80104fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010500:	2333      	movs	r3, #51	; 0x33
 8010502:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801050a:	2300      	movs	r3, #0
 801050c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801050e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010512:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010514:	f107 0308 	add.w	r3, r7, #8
 8010518:	4619      	mov	r1, r3
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f7ff fdc0 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010520:	f241 3288 	movw	r2, #5000	; 0x1388
 8010524:	2133      	movs	r1, #51	; 0x33
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 f8fc 	bl	8010724 <SDMMC_GetCmdResp1>
 801052c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801052e:	69fb      	ldr	r3, [r7, #28]
}
 8010530:	4618      	mov	r0, r3
 8010532:	3720      	adds	r7, #32
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b088      	sub	sp, #32
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010540:	2300      	movs	r3, #0
 8010542:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010544:	2302      	movs	r3, #2
 8010546:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010548:	f44f 7340 	mov.w	r3, #768	; 0x300
 801054c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801054e:	2300      	movs	r3, #0
 8010550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010556:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010558:	f107 0308 	add.w	r3, r7, #8
 801055c:	4619      	mov	r1, r3
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f7ff fd9e 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f000 f9cf 	bl	8010908 <SDMMC_GetCmdResp2>
 801056a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801056c:	69fb      	ldr	r3, [r7, #28]
}
 801056e:	4618      	mov	r0, r3
 8010570:	3720      	adds	r7, #32
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}

08010576 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010576:	b580      	push	{r7, lr}
 8010578:	b088      	sub	sp, #32
 801057a:	af00      	add	r7, sp, #0
 801057c:	6078      	str	r0, [r7, #4]
 801057e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010584:	2309      	movs	r3, #9
 8010586:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010588:	f44f 7340 	mov.w	r3, #768	; 0x300
 801058c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801058e:	2300      	movs	r3, #0
 8010590:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010596:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010598:	f107 0308 	add.w	r3, r7, #8
 801059c:	4619      	mov	r1, r3
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f7ff fd7e 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f000 f9af 	bl	8010908 <SDMMC_GetCmdResp2>
 80105aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105ac:	69fb      	ldr	r3, [r7, #28]
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3720      	adds	r7, #32
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}

080105b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80105b6:	b580      	push	{r7, lr}
 80105b8:	b088      	sub	sp, #32
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
 80105be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80105c0:	2300      	movs	r3, #0
 80105c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80105c4:	2303      	movs	r3, #3
 80105c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105ce:	2300      	movs	r3, #0
 80105d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105d8:	f107 0308 	add.w	r3, r7, #8
 80105dc:	4619      	mov	r1, r3
 80105de:	6878      	ldr	r0, [r7, #4]
 80105e0:	f7ff fd5e 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80105e4:	683a      	ldr	r2, [r7, #0]
 80105e6:	2103      	movs	r1, #3
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f000 fa17 	bl	8010a1c <SDMMC_GetCmdResp6>
 80105ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105f0:	69fb      	ldr	r3, [r7, #28]
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3720      	adds	r7, #32
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}

080105fa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80105fa:	b580      	push	{r7, lr}
 80105fc:	b088      	sub	sp, #32
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
 8010602:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010608:	230d      	movs	r3, #13
 801060a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801060c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010612:	2300      	movs	r3, #0
 8010614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801061a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801061c:	f107 0308 	add.w	r3, r7, #8
 8010620:	4619      	mov	r1, r3
 8010622:	6878      	ldr	r0, [r7, #4]
 8010624:	f7ff fd3c 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010628:	f241 3288 	movw	r2, #5000	; 0x1388
 801062c:	210d      	movs	r1, #13
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f000 f878 	bl	8010724 <SDMMC_GetCmdResp1>
 8010634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010636:	69fb      	ldr	r3, [r7, #28]
}
 8010638:	4618      	mov	r0, r3
 801063a:	3720      	adds	r7, #32
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}

08010640 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b088      	sub	sp, #32
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010648:	2300      	movs	r3, #0
 801064a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801064c:	230d      	movs	r3, #13
 801064e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010656:	2300      	movs	r3, #0
 8010658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801065e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010660:	f107 0308 	add.w	r3, r7, #8
 8010664:	4619      	mov	r1, r3
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7ff fd1a 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801066c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010670:	210d      	movs	r1, #13
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f000 f856 	bl	8010724 <SDMMC_GetCmdResp1>
 8010678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801067a:	69fb      	ldr	r3, [r7, #28]
}
 801067c:	4618      	mov	r0, r3
 801067e:	3720      	adds	r7, #32
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}

08010684 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b088      	sub	sp, #32
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 801068c:	2300      	movs	r3, #0
 801068e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8010690:	230b      	movs	r3, #11
 8010692:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801069a:	2300      	movs	r3, #0
 801069c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106a4:	f107 0308 	add.w	r3, r7, #8
 80106a8:	4619      	mov	r1, r3
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f7ff fcf8 	bl	80100a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80106b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80106b4:	210b      	movs	r1, #11
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f000 f834 	bl	8010724 <SDMMC_GetCmdResp1>
 80106bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106be:	69fb      	ldr	r3, [r7, #28]
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	3720      	adds	r7, #32
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}

080106c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80106c8:	b480      	push	{r7}
 80106ca:	b085      	sub	sp, #20
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80106d0:	4b11      	ldr	r3, [pc, #68]	; (8010718 <SDMMC_GetCmdError+0x50>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	4a11      	ldr	r2, [pc, #68]	; (801071c <SDMMC_GetCmdError+0x54>)
 80106d6:	fba2 2303 	umull	r2, r3, r2, r3
 80106da:	0a5b      	lsrs	r3, r3, #9
 80106dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80106e0:	fb02 f303 	mul.w	r3, r2, r3
 80106e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	1e5a      	subs	r2, r3, #1
 80106ea:	60fa      	str	r2, [r7, #12]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d102      	bne.n	80106f6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80106f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80106f4:	e009      	b.n	801070a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d0f1      	beq.n	80106e6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	4a06      	ldr	r2, [pc, #24]	; (8010720 <SDMMC_GetCmdError+0x58>)
 8010706:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8010708:	2300      	movs	r3, #0
}
 801070a:	4618      	mov	r0, r3
 801070c:	3714      	adds	r7, #20
 801070e:	46bd      	mov	sp, r7
 8010710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010714:	4770      	bx	lr
 8010716:	bf00      	nop
 8010718:	2400000c 	.word	0x2400000c
 801071c:	10624dd3 	.word	0x10624dd3
 8010720:	002000c5 	.word	0x002000c5

08010724 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b088      	sub	sp, #32
 8010728:	af00      	add	r7, sp, #0
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	460b      	mov	r3, r1
 801072e:	607a      	str	r2, [r7, #4]
 8010730:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010732:	4b70      	ldr	r3, [pc, #448]	; (80108f4 <SDMMC_GetCmdResp1+0x1d0>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	4a70      	ldr	r2, [pc, #448]	; (80108f8 <SDMMC_GetCmdResp1+0x1d4>)
 8010738:	fba2 2303 	umull	r2, r3, r2, r3
 801073c:	0a5a      	lsrs	r2, r3, #9
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	fb02 f303 	mul.w	r3, r2, r3
 8010744:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010746:	69fb      	ldr	r3, [r7, #28]
 8010748:	1e5a      	subs	r2, r3, #1
 801074a:	61fa      	str	r2, [r7, #28]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d102      	bne.n	8010756 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010750:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010754:	e0c9      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801075a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801075c:	69ba      	ldr	r2, [r7, #24]
 801075e:	4b67      	ldr	r3, [pc, #412]	; (80108fc <SDMMC_GetCmdResp1+0x1d8>)
 8010760:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010762:	2b00      	cmp	r3, #0
 8010764:	d0ef      	beq.n	8010746 <SDMMC_GetCmdResp1+0x22>
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801076c:	2b00      	cmp	r3, #0
 801076e:	d1ea      	bne.n	8010746 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010774:	f003 0304 	and.w	r3, r3, #4
 8010778:	2b00      	cmp	r3, #0
 801077a:	d004      	beq.n	8010786 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2204      	movs	r2, #4
 8010780:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010782:	2304      	movs	r3, #4
 8010784:	e0b1      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801078a:	f003 0301 	and.w	r3, r3, #1
 801078e:	2b00      	cmp	r3, #0
 8010790:	d004      	beq.n	801079c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	2201      	movs	r2, #1
 8010796:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010798:	2301      	movs	r3, #1
 801079a:	e0a6      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	4a58      	ldr	r2, [pc, #352]	; (8010900 <SDMMC_GetCmdResp1+0x1dc>)
 80107a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80107a2:	68f8      	ldr	r0, [r7, #12]
 80107a4:	f7ff fca6 	bl	80100f4 <SDMMC_GetCommandResponse>
 80107a8:	4603      	mov	r3, r0
 80107aa:	461a      	mov	r2, r3
 80107ac:	7afb      	ldrb	r3, [r7, #11]
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d001      	beq.n	80107b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80107b2:	2301      	movs	r3, #1
 80107b4:	e099      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80107b6:	2100      	movs	r1, #0
 80107b8:	68f8      	ldr	r0, [r7, #12]
 80107ba:	f7ff fca8 	bl	801010e <SDMMC_GetResponse>
 80107be:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80107c0:	697a      	ldr	r2, [r7, #20]
 80107c2:	4b50      	ldr	r3, [pc, #320]	; (8010904 <SDMMC_GetCmdResp1+0x1e0>)
 80107c4:	4013      	ands	r3, r2
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d101      	bne.n	80107ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80107ca:	2300      	movs	r3, #0
 80107cc:	e08d      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	da02      	bge.n	80107da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80107d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80107d8:	e087      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d001      	beq.n	80107e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80107e4:	2340      	movs	r3, #64	; 0x40
 80107e6:	e080      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d001      	beq.n	80107f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80107f2:	2380      	movs	r3, #128	; 0x80
 80107f4:	e079      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d002      	beq.n	8010806 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010804:	e071      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801080c:	2b00      	cmp	r3, #0
 801080e:	d002      	beq.n	8010816 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010814:	e069      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801081c:	2b00      	cmp	r3, #0
 801081e:	d002      	beq.n	8010826 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010824:	e061      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801082c:	2b00      	cmp	r3, #0
 801082e:	d002      	beq.n	8010836 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010830:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010834:	e059      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801083c:	2b00      	cmp	r3, #0
 801083e:	d002      	beq.n	8010846 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010844:	e051      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801084c:	2b00      	cmp	r3, #0
 801084e:	d002      	beq.n	8010856 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010854:	e049      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801085c:	2b00      	cmp	r3, #0
 801085e:	d002      	beq.n	8010866 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010860:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010864:	e041      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801086c:	2b00      	cmp	r3, #0
 801086e:	d002      	beq.n	8010876 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010870:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010874:	e039      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801087c:	2b00      	cmp	r3, #0
 801087e:	d002      	beq.n	8010886 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010884:	e031      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801088c:	2b00      	cmp	r3, #0
 801088e:	d002      	beq.n	8010896 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010890:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010894:	e029      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801089c:	2b00      	cmp	r3, #0
 801089e:	d002      	beq.n	80108a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80108a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80108a4:	e021      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d002      	beq.n	80108b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80108b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80108b4:	e019      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d002      	beq.n	80108c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80108c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80108c4:	e011      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d002      	beq.n	80108d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80108d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80108d4:	e009      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	f003 0308 	and.w	r3, r3, #8
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d002      	beq.n	80108e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80108e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80108e4:	e001      	b.n	80108ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80108e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3720      	adds	r7, #32
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	2400000c 	.word	0x2400000c
 80108f8:	10624dd3 	.word	0x10624dd3
 80108fc:	00200045 	.word	0x00200045
 8010900:	002000c5 	.word	0x002000c5
 8010904:	fdffe008 	.word	0xfdffe008

08010908 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010908:	b480      	push	{r7}
 801090a:	b085      	sub	sp, #20
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010910:	4b1f      	ldr	r3, [pc, #124]	; (8010990 <SDMMC_GetCmdResp2+0x88>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	4a1f      	ldr	r2, [pc, #124]	; (8010994 <SDMMC_GetCmdResp2+0x8c>)
 8010916:	fba2 2303 	umull	r2, r3, r2, r3
 801091a:	0a5b      	lsrs	r3, r3, #9
 801091c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010920:	fb02 f303 	mul.w	r3, r2, r3
 8010924:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	1e5a      	subs	r2, r3, #1
 801092a:	60fa      	str	r2, [r7, #12]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d102      	bne.n	8010936 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010930:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010934:	e026      	b.n	8010984 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801093a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010942:	2b00      	cmp	r3, #0
 8010944:	d0ef      	beq.n	8010926 <SDMMC_GetCmdResp2+0x1e>
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801094c:	2b00      	cmp	r3, #0
 801094e:	d1ea      	bne.n	8010926 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010954:	f003 0304 	and.w	r3, r3, #4
 8010958:	2b00      	cmp	r3, #0
 801095a:	d004      	beq.n	8010966 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2204      	movs	r2, #4
 8010960:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010962:	2304      	movs	r3, #4
 8010964:	e00e      	b.n	8010984 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801096a:	f003 0301 	and.w	r3, r3, #1
 801096e:	2b00      	cmp	r3, #0
 8010970:	d004      	beq.n	801097c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2201      	movs	r2, #1
 8010976:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010978:	2301      	movs	r3, #1
 801097a:	e003      	b.n	8010984 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	4a06      	ldr	r2, [pc, #24]	; (8010998 <SDMMC_GetCmdResp2+0x90>)
 8010980:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010982:	2300      	movs	r3, #0
}
 8010984:	4618      	mov	r0, r3
 8010986:	3714      	adds	r7, #20
 8010988:	46bd      	mov	sp, r7
 801098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098e:	4770      	bx	lr
 8010990:	2400000c 	.word	0x2400000c
 8010994:	10624dd3 	.word	0x10624dd3
 8010998:	002000c5 	.word	0x002000c5

0801099c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801099c:	b480      	push	{r7}
 801099e:	b085      	sub	sp, #20
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80109a4:	4b1a      	ldr	r3, [pc, #104]	; (8010a10 <SDMMC_GetCmdResp3+0x74>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	4a1a      	ldr	r2, [pc, #104]	; (8010a14 <SDMMC_GetCmdResp3+0x78>)
 80109aa:	fba2 2303 	umull	r2, r3, r2, r3
 80109ae:	0a5b      	lsrs	r3, r3, #9
 80109b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80109b4:	fb02 f303 	mul.w	r3, r2, r3
 80109b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	1e5a      	subs	r2, r3, #1
 80109be:	60fa      	str	r2, [r7, #12]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d102      	bne.n	80109ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80109c8:	e01b      	b.n	8010a02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d0ef      	beq.n	80109ba <SDMMC_GetCmdResp3+0x1e>
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d1ea      	bne.n	80109ba <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109e8:	f003 0304 	and.w	r3, r3, #4
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d004      	beq.n	80109fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2204      	movs	r2, #4
 80109f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80109f6:	2304      	movs	r3, #4
 80109f8:	e003      	b.n	8010a02 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	4a06      	ldr	r2, [pc, #24]	; (8010a18 <SDMMC_GetCmdResp3+0x7c>)
 80109fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a00:	2300      	movs	r3, #0
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3714      	adds	r7, #20
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr
 8010a0e:	bf00      	nop
 8010a10:	2400000c 	.word	0x2400000c
 8010a14:	10624dd3 	.word	0x10624dd3
 8010a18:	002000c5 	.word	0x002000c5

08010a1c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b088      	sub	sp, #32
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	460b      	mov	r3, r1
 8010a26:	607a      	str	r2, [r7, #4]
 8010a28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a2a:	4b35      	ldr	r3, [pc, #212]	; (8010b00 <SDMMC_GetCmdResp6+0xe4>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	4a35      	ldr	r2, [pc, #212]	; (8010b04 <SDMMC_GetCmdResp6+0xe8>)
 8010a30:	fba2 2303 	umull	r2, r3, r2, r3
 8010a34:	0a5b      	lsrs	r3, r3, #9
 8010a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a3a:	fb02 f303 	mul.w	r3, r2, r3
 8010a3e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	1e5a      	subs	r2, r3, #1
 8010a44:	61fa      	str	r2, [r7, #28]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d102      	bne.n	8010a50 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a4e:	e052      	b.n	8010af6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a54:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a56:	69bb      	ldr	r3, [r7, #24]
 8010a58:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d0ef      	beq.n	8010a40 <SDMMC_GetCmdResp6+0x24>
 8010a60:	69bb      	ldr	r3, [r7, #24]
 8010a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d1ea      	bne.n	8010a40 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a6e:	f003 0304 	and.w	r3, r3, #4
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d004      	beq.n	8010a80 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2204      	movs	r2, #4
 8010a7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a7c:	2304      	movs	r3, #4
 8010a7e:	e03a      	b.n	8010af6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a84:	f003 0301 	and.w	r3, r3, #1
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d004      	beq.n	8010a96 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	2201      	movs	r2, #1
 8010a90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a92:	2301      	movs	r3, #1
 8010a94:	e02f      	b.n	8010af6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010a96:	68f8      	ldr	r0, [r7, #12]
 8010a98:	f7ff fb2c 	bl	80100f4 <SDMMC_GetCommandResponse>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	7afb      	ldrb	r3, [r7, #11]
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d001      	beq.n	8010aaa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	e025      	b.n	8010af6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	4a16      	ldr	r2, [pc, #88]	; (8010b08 <SDMMC_GetCmdResp6+0xec>)
 8010aae:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010ab0:	2100      	movs	r1, #0
 8010ab2:	68f8      	ldr	r0, [r7, #12]
 8010ab4:	f7ff fb2b 	bl	801010e <SDMMC_GetResponse>
 8010ab8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d106      	bne.n	8010ad2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	0c1b      	lsrs	r3, r3, #16
 8010ac8:	b29a      	uxth	r2, r3
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	e011      	b.n	8010af6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d002      	beq.n	8010ae2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010ae0:	e009      	b.n	8010af6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d002      	beq.n	8010af2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010af0:	e001      	b.n	8010af6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010af2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3720      	adds	r7, #32
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}
 8010afe:	bf00      	nop
 8010b00:	2400000c 	.word	0x2400000c
 8010b04:	10624dd3 	.word	0x10624dd3
 8010b08:	002000c5 	.word	0x002000c5

08010b0c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b085      	sub	sp, #20
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010b14:	4b22      	ldr	r3, [pc, #136]	; (8010ba0 <SDMMC_GetCmdResp7+0x94>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	4a22      	ldr	r2, [pc, #136]	; (8010ba4 <SDMMC_GetCmdResp7+0x98>)
 8010b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8010b1e:	0a5b      	lsrs	r3, r3, #9
 8010b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b24:	fb02 f303 	mul.w	r3, r2, r3
 8010b28:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	1e5a      	subs	r2, r3, #1
 8010b2e:	60fa      	str	r2, [r7, #12]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d102      	bne.n	8010b3a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b38:	e02c      	b.n	8010b94 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d0ef      	beq.n	8010b2a <SDMMC_GetCmdResp7+0x1e>
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d1ea      	bne.n	8010b2a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b58:	f003 0304 	and.w	r3, r3, #4
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d004      	beq.n	8010b6a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2204      	movs	r2, #4
 8010b64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b66:	2304      	movs	r3, #4
 8010b68:	e014      	b.n	8010b94 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b6e:	f003 0301 	and.w	r3, r3, #1
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d004      	beq.n	8010b80 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2201      	movs	r2, #1
 8010b7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	e009      	b.n	8010b94 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d002      	beq.n	8010b92 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2240      	movs	r2, #64	; 0x40
 8010b90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010b92:	2300      	movs	r3, #0

}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3714      	adds	r7, #20
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr
 8010ba0:	2400000c 	.word	0x2400000c
 8010ba4:	10624dd3 	.word	0x10624dd3

08010ba8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010ba8:	b084      	sub	sp, #16
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b084      	sub	sp, #16
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
 8010bb2:	f107 001c 	add.w	r0, r7, #28
 8010bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	d120      	bne.n	8010c02 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	68da      	ldr	r2, [r3, #12]
 8010bd0:	4b25      	ldr	r3, [pc, #148]	; (8010c68 <USB_CoreInit+0xc0>)
 8010bd2:	4013      	ands	r3, r2
 8010bd4:	687a      	ldr	r2, [r7, #4]
 8010bd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	68db      	ldr	r3, [r3, #12]
 8010bdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d105      	bne.n	8010bf6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	68db      	ldr	r3, [r3, #12]
 8010bee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f001 fabe 	bl	8012178 <USB_CoreReset>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	73fb      	strb	r3, [r7, #15]
 8010c00:	e01a      	b.n	8010c38 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	68db      	ldr	r3, [r3, #12]
 8010c06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f001 fab2 	bl	8012178 <USB_CoreReset>
 8010c14:	4603      	mov	r3, r0
 8010c16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d106      	bne.n	8010c2c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	639a      	str	r2, [r3, #56]	; 0x38
 8010c2a:	e005      	b.n	8010c38 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c3a:	2b01      	cmp	r3, #1
 8010c3c:	d10b      	bne.n	8010c56 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	689b      	ldr	r3, [r3, #8]
 8010c42:	f043 0206 	orr.w	r2, r3, #6
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	689b      	ldr	r3, [r3, #8]
 8010c4e:	f043 0220 	orr.w	r2, r3, #32
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	3710      	adds	r7, #16
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010c62:	b004      	add	sp, #16
 8010c64:	4770      	bx	lr
 8010c66:	bf00      	nop
 8010c68:	ffbdffbf 	.word	0xffbdffbf

08010c6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010c6c:	b480      	push	{r7}
 8010c6e:	b087      	sub	sp, #28
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	60f8      	str	r0, [r7, #12]
 8010c74:	60b9      	str	r1, [r7, #8]
 8010c76:	4613      	mov	r3, r2
 8010c78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010c7a:	79fb      	ldrb	r3, [r7, #7]
 8010c7c:	2b02      	cmp	r3, #2
 8010c7e:	d165      	bne.n	8010d4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	4a41      	ldr	r2, [pc, #260]	; (8010d88 <USB_SetTurnaroundTime+0x11c>)
 8010c84:	4293      	cmp	r3, r2
 8010c86:	d906      	bls.n	8010c96 <USB_SetTurnaroundTime+0x2a>
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	4a40      	ldr	r2, [pc, #256]	; (8010d8c <USB_SetTurnaroundTime+0x120>)
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d802      	bhi.n	8010c96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010c90:	230f      	movs	r3, #15
 8010c92:	617b      	str	r3, [r7, #20]
 8010c94:	e062      	b.n	8010d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	4a3c      	ldr	r2, [pc, #240]	; (8010d8c <USB_SetTurnaroundTime+0x120>)
 8010c9a:	4293      	cmp	r3, r2
 8010c9c:	d906      	bls.n	8010cac <USB_SetTurnaroundTime+0x40>
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	4a3b      	ldr	r2, [pc, #236]	; (8010d90 <USB_SetTurnaroundTime+0x124>)
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d802      	bhi.n	8010cac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010ca6:	230e      	movs	r3, #14
 8010ca8:	617b      	str	r3, [r7, #20]
 8010caa:	e057      	b.n	8010d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	4a38      	ldr	r2, [pc, #224]	; (8010d90 <USB_SetTurnaroundTime+0x124>)
 8010cb0:	4293      	cmp	r3, r2
 8010cb2:	d906      	bls.n	8010cc2 <USB_SetTurnaroundTime+0x56>
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	4a37      	ldr	r2, [pc, #220]	; (8010d94 <USB_SetTurnaroundTime+0x128>)
 8010cb8:	4293      	cmp	r3, r2
 8010cba:	d802      	bhi.n	8010cc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010cbc:	230d      	movs	r3, #13
 8010cbe:	617b      	str	r3, [r7, #20]
 8010cc0:	e04c      	b.n	8010d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	4a33      	ldr	r2, [pc, #204]	; (8010d94 <USB_SetTurnaroundTime+0x128>)
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d906      	bls.n	8010cd8 <USB_SetTurnaroundTime+0x6c>
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	4a32      	ldr	r2, [pc, #200]	; (8010d98 <USB_SetTurnaroundTime+0x12c>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d802      	bhi.n	8010cd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010cd2:	230c      	movs	r3, #12
 8010cd4:	617b      	str	r3, [r7, #20]
 8010cd6:	e041      	b.n	8010d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	4a2f      	ldr	r2, [pc, #188]	; (8010d98 <USB_SetTurnaroundTime+0x12c>)
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d906      	bls.n	8010cee <USB_SetTurnaroundTime+0x82>
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	4a2e      	ldr	r2, [pc, #184]	; (8010d9c <USB_SetTurnaroundTime+0x130>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d802      	bhi.n	8010cee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010ce8:	230b      	movs	r3, #11
 8010cea:	617b      	str	r3, [r7, #20]
 8010cec:	e036      	b.n	8010d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	4a2a      	ldr	r2, [pc, #168]	; (8010d9c <USB_SetTurnaroundTime+0x130>)
 8010cf2:	4293      	cmp	r3, r2
 8010cf4:	d906      	bls.n	8010d04 <USB_SetTurnaroundTime+0x98>
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	4a29      	ldr	r2, [pc, #164]	; (8010da0 <USB_SetTurnaroundTime+0x134>)
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	d802      	bhi.n	8010d04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010cfe:	230a      	movs	r3, #10
 8010d00:	617b      	str	r3, [r7, #20]
 8010d02:	e02b      	b.n	8010d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	4a26      	ldr	r2, [pc, #152]	; (8010da0 <USB_SetTurnaroundTime+0x134>)
 8010d08:	4293      	cmp	r3, r2
 8010d0a:	d906      	bls.n	8010d1a <USB_SetTurnaroundTime+0xae>
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	4a25      	ldr	r2, [pc, #148]	; (8010da4 <USB_SetTurnaroundTime+0x138>)
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d802      	bhi.n	8010d1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010d14:	2309      	movs	r3, #9
 8010d16:	617b      	str	r3, [r7, #20]
 8010d18:	e020      	b.n	8010d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	4a21      	ldr	r2, [pc, #132]	; (8010da4 <USB_SetTurnaroundTime+0x138>)
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d906      	bls.n	8010d30 <USB_SetTurnaroundTime+0xc4>
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	4a20      	ldr	r2, [pc, #128]	; (8010da8 <USB_SetTurnaroundTime+0x13c>)
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d802      	bhi.n	8010d30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010d2a:	2308      	movs	r3, #8
 8010d2c:	617b      	str	r3, [r7, #20]
 8010d2e:	e015      	b.n	8010d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	4a1d      	ldr	r2, [pc, #116]	; (8010da8 <USB_SetTurnaroundTime+0x13c>)
 8010d34:	4293      	cmp	r3, r2
 8010d36:	d906      	bls.n	8010d46 <USB_SetTurnaroundTime+0xda>
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	4a1c      	ldr	r2, [pc, #112]	; (8010dac <USB_SetTurnaroundTime+0x140>)
 8010d3c:	4293      	cmp	r3, r2
 8010d3e:	d802      	bhi.n	8010d46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010d40:	2307      	movs	r3, #7
 8010d42:	617b      	str	r3, [r7, #20]
 8010d44:	e00a      	b.n	8010d5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010d46:	2306      	movs	r3, #6
 8010d48:	617b      	str	r3, [r7, #20]
 8010d4a:	e007      	b.n	8010d5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010d4c:	79fb      	ldrb	r3, [r7, #7]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d102      	bne.n	8010d58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010d52:	2309      	movs	r3, #9
 8010d54:	617b      	str	r3, [r7, #20]
 8010d56:	e001      	b.n	8010d5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010d58:	2309      	movs	r3, #9
 8010d5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	68da      	ldr	r2, [r3, #12]
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	029b      	lsls	r3, r3, #10
 8010d70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010d74:	431a      	orrs	r2, r3
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010d7a:	2300      	movs	r3, #0
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	371c      	adds	r7, #28
 8010d80:	46bd      	mov	sp, r7
 8010d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d86:	4770      	bx	lr
 8010d88:	00d8acbf 	.word	0x00d8acbf
 8010d8c:	00e4e1bf 	.word	0x00e4e1bf
 8010d90:	00f423ff 	.word	0x00f423ff
 8010d94:	0106737f 	.word	0x0106737f
 8010d98:	011a499f 	.word	0x011a499f
 8010d9c:	01312cff 	.word	0x01312cff
 8010da0:	014ca43f 	.word	0x014ca43f
 8010da4:	016e35ff 	.word	0x016e35ff
 8010da8:	01a6ab1f 	.word	0x01a6ab1f
 8010dac:	01e847ff 	.word	0x01e847ff

08010db0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010db0:	b480      	push	{r7}
 8010db2:	b083      	sub	sp, #12
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	689b      	ldr	r3, [r3, #8]
 8010dbc:	f043 0201 	orr.w	r2, r3, #1
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010dc4:	2300      	movs	r3, #0
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	370c      	adds	r7, #12
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr

08010dd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010dd2:	b480      	push	{r7}
 8010dd4:	b083      	sub	sp, #12
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	689b      	ldr	r3, [r3, #8]
 8010dde:	f023 0201 	bic.w	r2, r3, #1
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010de6:	2300      	movs	r3, #0
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	370c      	adds	r7, #12
 8010dec:	46bd      	mov	sp, r7
 8010dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df2:	4770      	bx	lr

08010df4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	460b      	mov	r3, r1
 8010dfe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	68db      	ldr	r3, [r3, #12]
 8010e04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010e0c:	78fb      	ldrb	r3, [r7, #3]
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d106      	bne.n	8010e20 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	68db      	ldr	r3, [r3, #12]
 8010e16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	60da      	str	r2, [r3, #12]
 8010e1e:	e00b      	b.n	8010e38 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010e20:	78fb      	ldrb	r3, [r7, #3]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d106      	bne.n	8010e34 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	68db      	ldr	r3, [r3, #12]
 8010e2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	60da      	str	r2, [r3, #12]
 8010e32:	e001      	b.n	8010e38 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010e34:	2301      	movs	r3, #1
 8010e36:	e003      	b.n	8010e40 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010e38:	2032      	movs	r0, #50	; 0x32
 8010e3a:	f7f2 fbc1 	bl	80035c0 <HAL_Delay>

  return HAL_OK;
 8010e3e:	2300      	movs	r3, #0
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3708      	adds	r7, #8
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010e48:	b084      	sub	sp, #16
 8010e4a:	b580      	push	{r7, lr}
 8010e4c:	b086      	sub	sp, #24
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	6078      	str	r0, [r7, #4]
 8010e52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010e62:	2300      	movs	r3, #0
 8010e64:	613b      	str	r3, [r7, #16]
 8010e66:	e009      	b.n	8010e7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010e68:	687a      	ldr	r2, [r7, #4]
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	3340      	adds	r3, #64	; 0x40
 8010e6e:	009b      	lsls	r3, r3, #2
 8010e70:	4413      	add	r3, r2
 8010e72:	2200      	movs	r2, #0
 8010e74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	3301      	adds	r3, #1
 8010e7a:	613b      	str	r3, [r7, #16]
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	2b0e      	cmp	r3, #14
 8010e80:	d9f2      	bls.n	8010e68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d11c      	bne.n	8010ec2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e8e:	685b      	ldr	r3, [r3, #4]
 8010e90:	68fa      	ldr	r2, [r7, #12]
 8010e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e96:	f043 0302 	orr.w	r3, r3, #2
 8010e9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ea0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	601a      	str	r2, [r3, #0]
 8010ec0:	e005      	b.n	8010ece <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ec6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010ed4:	461a      	mov	r2, r3
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ee8:	461a      	mov	r2, r3
 8010eea:	680b      	ldr	r3, [r1, #0]
 8010eec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef0:	2b01      	cmp	r3, #1
 8010ef2:	d10c      	bne.n	8010f0e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d104      	bne.n	8010f04 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010efa:	2100      	movs	r1, #0
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f000 f949 	bl	8011194 <USB_SetDevSpeed>
 8010f02:	e008      	b.n	8010f16 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010f04:	2101      	movs	r1, #1
 8010f06:	6878      	ldr	r0, [r7, #4]
 8010f08:	f000 f944 	bl	8011194 <USB_SetDevSpeed>
 8010f0c:	e003      	b.n	8010f16 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010f0e:	2103      	movs	r1, #3
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f000 f93f 	bl	8011194 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010f16:	2110      	movs	r1, #16
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f000 f8f3 	bl	8011104 <USB_FlushTxFifo>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d001      	beq.n	8010f28 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010f24:	2301      	movs	r3, #1
 8010f26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f000 f911 	bl	8011150 <USB_FlushRxFifo>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d001      	beq.n	8010f38 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010f34:	2301      	movs	r3, #1
 8010f36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f3e:	461a      	mov	r2, r3
 8010f40:	2300      	movs	r3, #0
 8010f42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f56:	461a      	mov	r2, r3
 8010f58:	2300      	movs	r3, #0
 8010f5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	613b      	str	r3, [r7, #16]
 8010f60:	e043      	b.n	8010fea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	015a      	lsls	r2, r3, #5
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	4413      	add	r3, r2
 8010f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f78:	d118      	bne.n	8010fac <USB_DevInit+0x164>
    {
      if (i == 0U)
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d10a      	bne.n	8010f96 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010f80:	693b      	ldr	r3, [r7, #16]
 8010f82:	015a      	lsls	r2, r3, #5
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	4413      	add	r3, r2
 8010f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010f92:	6013      	str	r3, [r2, #0]
 8010f94:	e013      	b.n	8010fbe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010f96:	693b      	ldr	r3, [r7, #16]
 8010f98:	015a      	lsls	r2, r3, #5
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	4413      	add	r3, r2
 8010f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010fa8:	6013      	str	r3, [r2, #0]
 8010faa:	e008      	b.n	8010fbe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010fac:	693b      	ldr	r3, [r7, #16]
 8010fae:	015a      	lsls	r2, r3, #5
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	4413      	add	r3, r2
 8010fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fb8:	461a      	mov	r2, r3
 8010fba:	2300      	movs	r3, #0
 8010fbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	015a      	lsls	r2, r3, #5
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	4413      	add	r3, r2
 8010fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fca:	461a      	mov	r2, r3
 8010fcc:	2300      	movs	r3, #0
 8010fce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	015a      	lsls	r2, r3, #5
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	4413      	add	r3, r2
 8010fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fdc:	461a      	mov	r2, r3
 8010fde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010fe2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	3301      	adds	r3, #1
 8010fe8:	613b      	str	r3, [r7, #16]
 8010fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fec:	693a      	ldr	r2, [r7, #16]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d3b7      	bcc.n	8010f62 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	613b      	str	r3, [r7, #16]
 8010ff6:	e043      	b.n	8011080 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	015a      	lsls	r2, r3, #5
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	4413      	add	r3, r2
 8011000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801100a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801100e:	d118      	bne.n	8011042 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d10a      	bne.n	801102c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	015a      	lsls	r2, r3, #5
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	4413      	add	r3, r2
 801101e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011022:	461a      	mov	r2, r3
 8011024:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011028:	6013      	str	r3, [r2, #0]
 801102a:	e013      	b.n	8011054 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	015a      	lsls	r2, r3, #5
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	4413      	add	r3, r2
 8011034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011038:	461a      	mov	r2, r3
 801103a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801103e:	6013      	str	r3, [r2, #0]
 8011040:	e008      	b.n	8011054 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	015a      	lsls	r2, r3, #5
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	4413      	add	r3, r2
 801104a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801104e:	461a      	mov	r2, r3
 8011050:	2300      	movs	r3, #0
 8011052:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	015a      	lsls	r2, r3, #5
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	4413      	add	r3, r2
 801105c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011060:	461a      	mov	r2, r3
 8011062:	2300      	movs	r3, #0
 8011064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	015a      	lsls	r2, r3, #5
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	4413      	add	r3, r2
 801106e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011072:	461a      	mov	r2, r3
 8011074:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011078:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	3301      	adds	r3, #1
 801107e:	613b      	str	r3, [r7, #16]
 8011080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011082:	693a      	ldr	r2, [r7, #16]
 8011084:	429a      	cmp	r2, r3
 8011086:	d3b7      	bcc.n	8010ff8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801108e:	691b      	ldr	r3, [r3, #16]
 8011090:	68fa      	ldr	r2, [r7, #12]
 8011092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801109a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2200      	movs	r2, #0
 80110a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80110a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80110aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d105      	bne.n	80110bc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	699b      	ldr	r3, [r3, #24]
 80110b4:	f043 0210 	orr.w	r2, r3, #16
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	699a      	ldr	r2, [r3, #24]
 80110c0:	4b0e      	ldr	r3, [pc, #56]	; (80110fc <USB_DevInit+0x2b4>)
 80110c2:	4313      	orrs	r3, r2
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80110c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d005      	beq.n	80110da <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	699b      	ldr	r3, [r3, #24]
 80110d2:	f043 0208 	orr.w	r2, r3, #8
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80110da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d105      	bne.n	80110ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	699a      	ldr	r2, [r3, #24]
 80110e4:	4b06      	ldr	r3, [pc, #24]	; (8011100 <USB_DevInit+0x2b8>)
 80110e6:	4313      	orrs	r3, r2
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80110ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	3718      	adds	r7, #24
 80110f2:	46bd      	mov	sp, r7
 80110f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80110f8:	b004      	add	sp, #16
 80110fa:	4770      	bx	lr
 80110fc:	803c3800 	.word	0x803c3800
 8011100:	40000004 	.word	0x40000004

08011104 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011104:	b480      	push	{r7}
 8011106:	b085      	sub	sp, #20
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801110e:	2300      	movs	r3, #0
 8011110:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	019b      	lsls	r3, r3, #6
 8011116:	f043 0220 	orr.w	r2, r3, #32
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	3301      	adds	r3, #1
 8011122:	60fb      	str	r3, [r7, #12]
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	4a09      	ldr	r2, [pc, #36]	; (801114c <USB_FlushTxFifo+0x48>)
 8011128:	4293      	cmp	r3, r2
 801112a:	d901      	bls.n	8011130 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801112c:	2303      	movs	r3, #3
 801112e:	e006      	b.n	801113e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	691b      	ldr	r3, [r3, #16]
 8011134:	f003 0320 	and.w	r3, r3, #32
 8011138:	2b20      	cmp	r3, #32
 801113a:	d0f0      	beq.n	801111e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801113c:	2300      	movs	r3, #0
}
 801113e:	4618      	mov	r0, r3
 8011140:	3714      	adds	r7, #20
 8011142:	46bd      	mov	sp, r7
 8011144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011148:	4770      	bx	lr
 801114a:	bf00      	nop
 801114c:	00030d40 	.word	0x00030d40

08011150 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011150:	b480      	push	{r7}
 8011152:	b085      	sub	sp, #20
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011158:	2300      	movs	r3, #0
 801115a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2210      	movs	r2, #16
 8011160:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	3301      	adds	r3, #1
 8011166:	60fb      	str	r3, [r7, #12]
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	4a09      	ldr	r2, [pc, #36]	; (8011190 <USB_FlushRxFifo+0x40>)
 801116c:	4293      	cmp	r3, r2
 801116e:	d901      	bls.n	8011174 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011170:	2303      	movs	r3, #3
 8011172:	e006      	b.n	8011182 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	691b      	ldr	r3, [r3, #16]
 8011178:	f003 0310 	and.w	r3, r3, #16
 801117c:	2b10      	cmp	r3, #16
 801117e:	d0f0      	beq.n	8011162 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011180:	2300      	movs	r3, #0
}
 8011182:	4618      	mov	r0, r3
 8011184:	3714      	adds	r7, #20
 8011186:	46bd      	mov	sp, r7
 8011188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118c:	4770      	bx	lr
 801118e:	bf00      	nop
 8011190:	00030d40 	.word	0x00030d40

08011194 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011194:	b480      	push	{r7}
 8011196:	b085      	sub	sp, #20
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
 801119c:	460b      	mov	r3, r1
 801119e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111aa:	681a      	ldr	r2, [r3, #0]
 80111ac:	78fb      	ldrb	r3, [r7, #3]
 80111ae:	68f9      	ldr	r1, [r7, #12]
 80111b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80111b4:	4313      	orrs	r3, r2
 80111b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80111b8:	2300      	movs	r3, #0
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3714      	adds	r7, #20
 80111be:	46bd      	mov	sp, r7
 80111c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c4:	4770      	bx	lr

080111c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80111c6:	b480      	push	{r7}
 80111c8:	b087      	sub	sp, #28
 80111ca:	af00      	add	r7, sp, #0
 80111cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111d8:	689b      	ldr	r3, [r3, #8]
 80111da:	f003 0306 	and.w	r3, r3, #6
 80111de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d102      	bne.n	80111ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80111e6:	2300      	movs	r3, #0
 80111e8:	75fb      	strb	r3, [r7, #23]
 80111ea:	e00a      	b.n	8011202 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2b02      	cmp	r3, #2
 80111f0:	d002      	beq.n	80111f8 <USB_GetDevSpeed+0x32>
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	2b06      	cmp	r3, #6
 80111f6:	d102      	bne.n	80111fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80111f8:	2302      	movs	r3, #2
 80111fa:	75fb      	strb	r3, [r7, #23]
 80111fc:	e001      	b.n	8011202 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80111fe:	230f      	movs	r3, #15
 8011200:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011202:	7dfb      	ldrb	r3, [r7, #23]
}
 8011204:	4618      	mov	r0, r3
 8011206:	371c      	adds	r7, #28
 8011208:	46bd      	mov	sp, r7
 801120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120e:	4770      	bx	lr

08011210 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011210:	b480      	push	{r7}
 8011212:	b085      	sub	sp, #20
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
 8011218:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	781b      	ldrb	r3, [r3, #0]
 8011222:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	785b      	ldrb	r3, [r3, #1]
 8011228:	2b01      	cmp	r3, #1
 801122a:	d139      	bne.n	80112a0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011232:	69da      	ldr	r2, [r3, #28]
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	f003 030f 	and.w	r3, r3, #15
 801123c:	2101      	movs	r1, #1
 801123e:	fa01 f303 	lsl.w	r3, r1, r3
 8011242:	b29b      	uxth	r3, r3
 8011244:	68f9      	ldr	r1, [r7, #12]
 8011246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801124a:	4313      	orrs	r3, r2
 801124c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	015a      	lsls	r2, r3, #5
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	4413      	add	r3, r2
 8011256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011260:	2b00      	cmp	r3, #0
 8011262:	d153      	bne.n	801130c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	015a      	lsls	r2, r3, #5
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	4413      	add	r3, r2
 801126c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011270:	681a      	ldr	r2, [r3, #0]
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	689b      	ldr	r3, [r3, #8]
 8011276:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	78db      	ldrb	r3, [r3, #3]
 801127e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011280:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	059b      	lsls	r3, r3, #22
 8011286:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011288:	431a      	orrs	r2, r3
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	0159      	lsls	r1, r3, #5
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	440b      	add	r3, r1
 8011292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011296:	4619      	mov	r1, r3
 8011298:	4b20      	ldr	r3, [pc, #128]	; (801131c <USB_ActivateEndpoint+0x10c>)
 801129a:	4313      	orrs	r3, r2
 801129c:	600b      	str	r3, [r1, #0]
 801129e:	e035      	b.n	801130c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112a6:	69da      	ldr	r2, [r3, #28]
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	781b      	ldrb	r3, [r3, #0]
 80112ac:	f003 030f 	and.w	r3, r3, #15
 80112b0:	2101      	movs	r1, #1
 80112b2:	fa01 f303 	lsl.w	r3, r1, r3
 80112b6:	041b      	lsls	r3, r3, #16
 80112b8:	68f9      	ldr	r1, [r7, #12]
 80112ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80112be:	4313      	orrs	r3, r2
 80112c0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	015a      	lsls	r2, r3, #5
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	4413      	add	r3, r2
 80112ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d119      	bne.n	801130c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	015a      	lsls	r2, r3, #5
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	4413      	add	r3, r2
 80112e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	689b      	ldr	r3, [r3, #8]
 80112ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	78db      	ldrb	r3, [r3, #3]
 80112f2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80112f4:	430b      	orrs	r3, r1
 80112f6:	431a      	orrs	r2, r3
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	0159      	lsls	r1, r3, #5
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	440b      	add	r3, r1
 8011300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011304:	4619      	mov	r1, r3
 8011306:	4b05      	ldr	r3, [pc, #20]	; (801131c <USB_ActivateEndpoint+0x10c>)
 8011308:	4313      	orrs	r3, r2
 801130a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801130c:	2300      	movs	r3, #0
}
 801130e:	4618      	mov	r0, r3
 8011310:	3714      	adds	r7, #20
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop
 801131c:	10008000 	.word	0x10008000

08011320 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011320:	b480      	push	{r7}
 8011322:	b085      	sub	sp, #20
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	781b      	ldrb	r3, [r3, #0]
 8011332:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	785b      	ldrb	r3, [r3, #1]
 8011338:	2b01      	cmp	r3, #1
 801133a:	d161      	bne.n	8011400 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	015a      	lsls	r2, r3, #5
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	4413      	add	r3, r2
 8011344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801134e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011352:	d11f      	bne.n	8011394 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	015a      	lsls	r2, r3, #5
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	4413      	add	r3, r2
 801135c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	68ba      	ldr	r2, [r7, #8]
 8011364:	0151      	lsls	r1, r2, #5
 8011366:	68fa      	ldr	r2, [r7, #12]
 8011368:	440a      	add	r2, r1
 801136a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801136e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011372:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	015a      	lsls	r2, r3, #5
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	4413      	add	r3, r2
 801137c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	68ba      	ldr	r2, [r7, #8]
 8011384:	0151      	lsls	r1, r2, #5
 8011386:	68fa      	ldr	r2, [r7, #12]
 8011388:	440a      	add	r2, r1
 801138a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801138e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011392:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801139a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	781b      	ldrb	r3, [r3, #0]
 80113a0:	f003 030f 	and.w	r3, r3, #15
 80113a4:	2101      	movs	r1, #1
 80113a6:	fa01 f303 	lsl.w	r3, r1, r3
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	43db      	mvns	r3, r3
 80113ae:	68f9      	ldr	r1, [r7, #12]
 80113b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113b4:	4013      	ands	r3, r2
 80113b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113be:	69da      	ldr	r2, [r3, #28]
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	f003 030f 	and.w	r3, r3, #15
 80113c8:	2101      	movs	r1, #1
 80113ca:	fa01 f303 	lsl.w	r3, r1, r3
 80113ce:	b29b      	uxth	r3, r3
 80113d0:	43db      	mvns	r3, r3
 80113d2:	68f9      	ldr	r1, [r7, #12]
 80113d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113d8:	4013      	ands	r3, r2
 80113da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	015a      	lsls	r2, r3, #5
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	4413      	add	r3, r2
 80113e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	0159      	lsls	r1, r3, #5
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	440b      	add	r3, r1
 80113f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113f6:	4619      	mov	r1, r3
 80113f8:	4b35      	ldr	r3, [pc, #212]	; (80114d0 <USB_DeactivateEndpoint+0x1b0>)
 80113fa:	4013      	ands	r3, r2
 80113fc:	600b      	str	r3, [r1, #0]
 80113fe:	e060      	b.n	80114c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	015a      	lsls	r2, r3, #5
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	4413      	add	r3, r2
 8011408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011416:	d11f      	bne.n	8011458 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	015a      	lsls	r2, r3, #5
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	4413      	add	r3, r2
 8011420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	68ba      	ldr	r2, [r7, #8]
 8011428:	0151      	lsls	r1, r2, #5
 801142a:	68fa      	ldr	r2, [r7, #12]
 801142c:	440a      	add	r2, r1
 801142e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011432:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011436:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	015a      	lsls	r2, r3, #5
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	4413      	add	r3, r2
 8011440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	68ba      	ldr	r2, [r7, #8]
 8011448:	0151      	lsls	r1, r2, #5
 801144a:	68fa      	ldr	r2, [r7, #12]
 801144c:	440a      	add	r2, r1
 801144e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011456:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801145e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	f003 030f 	and.w	r3, r3, #15
 8011468:	2101      	movs	r1, #1
 801146a:	fa01 f303 	lsl.w	r3, r1, r3
 801146e:	041b      	lsls	r3, r3, #16
 8011470:	43db      	mvns	r3, r3
 8011472:	68f9      	ldr	r1, [r7, #12]
 8011474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011478:	4013      	ands	r3, r2
 801147a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011482:	69da      	ldr	r2, [r3, #28]
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	f003 030f 	and.w	r3, r3, #15
 801148c:	2101      	movs	r1, #1
 801148e:	fa01 f303 	lsl.w	r3, r1, r3
 8011492:	041b      	lsls	r3, r3, #16
 8011494:	43db      	mvns	r3, r3
 8011496:	68f9      	ldr	r1, [r7, #12]
 8011498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801149c:	4013      	ands	r3, r2
 801149e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	015a      	lsls	r2, r3, #5
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	4413      	add	r3, r2
 80114a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114ac:	681a      	ldr	r2, [r3, #0]
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	0159      	lsls	r1, r3, #5
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	440b      	add	r3, r1
 80114b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114ba:	4619      	mov	r1, r3
 80114bc:	4b05      	ldr	r3, [pc, #20]	; (80114d4 <USB_DeactivateEndpoint+0x1b4>)
 80114be:	4013      	ands	r3, r2
 80114c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80114c2:	2300      	movs	r3, #0
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	3714      	adds	r7, #20
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr
 80114d0:	ec337800 	.word	0xec337800
 80114d4:	eff37800 	.word	0xeff37800

080114d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b08a      	sub	sp, #40	; 0x28
 80114dc:	af02      	add	r7, sp, #8
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	60b9      	str	r1, [r7, #8]
 80114e2:	4613      	mov	r3, r2
 80114e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	781b      	ldrb	r3, [r3, #0]
 80114ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	785b      	ldrb	r3, [r3, #1]
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	f040 8163 	bne.w	80117c0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	695b      	ldr	r3, [r3, #20]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d132      	bne.n	8011568 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	015a      	lsls	r2, r3, #5
 8011506:	69fb      	ldr	r3, [r7, #28]
 8011508:	4413      	add	r3, r2
 801150a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801150e:	691a      	ldr	r2, [r3, #16]
 8011510:	69bb      	ldr	r3, [r7, #24]
 8011512:	0159      	lsls	r1, r3, #5
 8011514:	69fb      	ldr	r3, [r7, #28]
 8011516:	440b      	add	r3, r1
 8011518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801151c:	4619      	mov	r1, r3
 801151e:	4ba5      	ldr	r3, [pc, #660]	; (80117b4 <USB_EPStartXfer+0x2dc>)
 8011520:	4013      	ands	r3, r2
 8011522:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011524:	69bb      	ldr	r3, [r7, #24]
 8011526:	015a      	lsls	r2, r3, #5
 8011528:	69fb      	ldr	r3, [r7, #28]
 801152a:	4413      	add	r3, r2
 801152c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011530:	691b      	ldr	r3, [r3, #16]
 8011532:	69ba      	ldr	r2, [r7, #24]
 8011534:	0151      	lsls	r1, r2, #5
 8011536:	69fa      	ldr	r2, [r7, #28]
 8011538:	440a      	add	r2, r1
 801153a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801153e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011542:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011544:	69bb      	ldr	r3, [r7, #24]
 8011546:	015a      	lsls	r2, r3, #5
 8011548:	69fb      	ldr	r3, [r7, #28]
 801154a:	4413      	add	r3, r2
 801154c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011550:	691a      	ldr	r2, [r3, #16]
 8011552:	69bb      	ldr	r3, [r7, #24]
 8011554:	0159      	lsls	r1, r3, #5
 8011556:	69fb      	ldr	r3, [r7, #28]
 8011558:	440b      	add	r3, r1
 801155a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801155e:	4619      	mov	r1, r3
 8011560:	4b95      	ldr	r3, [pc, #596]	; (80117b8 <USB_EPStartXfer+0x2e0>)
 8011562:	4013      	ands	r3, r2
 8011564:	610b      	str	r3, [r1, #16]
 8011566:	e074      	b.n	8011652 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011568:	69bb      	ldr	r3, [r7, #24]
 801156a:	015a      	lsls	r2, r3, #5
 801156c:	69fb      	ldr	r3, [r7, #28]
 801156e:	4413      	add	r3, r2
 8011570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011574:	691a      	ldr	r2, [r3, #16]
 8011576:	69bb      	ldr	r3, [r7, #24]
 8011578:	0159      	lsls	r1, r3, #5
 801157a:	69fb      	ldr	r3, [r7, #28]
 801157c:	440b      	add	r3, r1
 801157e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011582:	4619      	mov	r1, r3
 8011584:	4b8c      	ldr	r3, [pc, #560]	; (80117b8 <USB_EPStartXfer+0x2e0>)
 8011586:	4013      	ands	r3, r2
 8011588:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801158a:	69bb      	ldr	r3, [r7, #24]
 801158c:	015a      	lsls	r2, r3, #5
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	4413      	add	r3, r2
 8011592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011596:	691a      	ldr	r2, [r3, #16]
 8011598:	69bb      	ldr	r3, [r7, #24]
 801159a:	0159      	lsls	r1, r3, #5
 801159c:	69fb      	ldr	r3, [r7, #28]
 801159e:	440b      	add	r3, r1
 80115a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115a4:	4619      	mov	r1, r3
 80115a6:	4b83      	ldr	r3, [pc, #524]	; (80117b4 <USB_EPStartXfer+0x2dc>)
 80115a8:	4013      	ands	r3, r2
 80115aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80115ac:	69bb      	ldr	r3, [r7, #24]
 80115ae:	015a      	lsls	r2, r3, #5
 80115b0:	69fb      	ldr	r3, [r7, #28]
 80115b2:	4413      	add	r3, r2
 80115b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115b8:	691a      	ldr	r2, [r3, #16]
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	6959      	ldr	r1, [r3, #20]
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	689b      	ldr	r3, [r3, #8]
 80115c2:	440b      	add	r3, r1
 80115c4:	1e59      	subs	r1, r3, #1
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	689b      	ldr	r3, [r3, #8]
 80115ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80115ce:	04d9      	lsls	r1, r3, #19
 80115d0:	4b7a      	ldr	r3, [pc, #488]	; (80117bc <USB_EPStartXfer+0x2e4>)
 80115d2:	400b      	ands	r3, r1
 80115d4:	69b9      	ldr	r1, [r7, #24]
 80115d6:	0148      	lsls	r0, r1, #5
 80115d8:	69f9      	ldr	r1, [r7, #28]
 80115da:	4401      	add	r1, r0
 80115dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80115e0:	4313      	orrs	r3, r2
 80115e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80115e4:	69bb      	ldr	r3, [r7, #24]
 80115e6:	015a      	lsls	r2, r3, #5
 80115e8:	69fb      	ldr	r3, [r7, #28]
 80115ea:	4413      	add	r3, r2
 80115ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115f0:	691a      	ldr	r2, [r3, #16]
 80115f2:	68bb      	ldr	r3, [r7, #8]
 80115f4:	695b      	ldr	r3, [r3, #20]
 80115f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80115fa:	69b9      	ldr	r1, [r7, #24]
 80115fc:	0148      	lsls	r0, r1, #5
 80115fe:	69f9      	ldr	r1, [r7, #28]
 8011600:	4401      	add	r1, r0
 8011602:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011606:	4313      	orrs	r3, r2
 8011608:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	78db      	ldrb	r3, [r3, #3]
 801160e:	2b01      	cmp	r3, #1
 8011610:	d11f      	bne.n	8011652 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011612:	69bb      	ldr	r3, [r7, #24]
 8011614:	015a      	lsls	r2, r3, #5
 8011616:	69fb      	ldr	r3, [r7, #28]
 8011618:	4413      	add	r3, r2
 801161a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801161e:	691b      	ldr	r3, [r3, #16]
 8011620:	69ba      	ldr	r2, [r7, #24]
 8011622:	0151      	lsls	r1, r2, #5
 8011624:	69fa      	ldr	r2, [r7, #28]
 8011626:	440a      	add	r2, r1
 8011628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801162c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011630:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011632:	69bb      	ldr	r3, [r7, #24]
 8011634:	015a      	lsls	r2, r3, #5
 8011636:	69fb      	ldr	r3, [r7, #28]
 8011638:	4413      	add	r3, r2
 801163a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801163e:	691b      	ldr	r3, [r3, #16]
 8011640:	69ba      	ldr	r2, [r7, #24]
 8011642:	0151      	lsls	r1, r2, #5
 8011644:	69fa      	ldr	r2, [r7, #28]
 8011646:	440a      	add	r2, r1
 8011648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801164c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011650:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8011652:	79fb      	ldrb	r3, [r7, #7]
 8011654:	2b01      	cmp	r3, #1
 8011656:	d14b      	bne.n	80116f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	691b      	ldr	r3, [r3, #16]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d009      	beq.n	8011674 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011660:	69bb      	ldr	r3, [r7, #24]
 8011662:	015a      	lsls	r2, r3, #5
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	4413      	add	r3, r2
 8011668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801166c:	461a      	mov	r2, r3
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	691b      	ldr	r3, [r3, #16]
 8011672:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	78db      	ldrb	r3, [r3, #3]
 8011678:	2b01      	cmp	r3, #1
 801167a:	d128      	bne.n	80116ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011682:	689b      	ldr	r3, [r3, #8]
 8011684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011688:	2b00      	cmp	r3, #0
 801168a:	d110      	bne.n	80116ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801168c:	69bb      	ldr	r3, [r7, #24]
 801168e:	015a      	lsls	r2, r3, #5
 8011690:	69fb      	ldr	r3, [r7, #28]
 8011692:	4413      	add	r3, r2
 8011694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	69ba      	ldr	r2, [r7, #24]
 801169c:	0151      	lsls	r1, r2, #5
 801169e:	69fa      	ldr	r2, [r7, #28]
 80116a0:	440a      	add	r2, r1
 80116a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80116aa:	6013      	str	r3, [r2, #0]
 80116ac:	e00f      	b.n	80116ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80116ae:	69bb      	ldr	r3, [r7, #24]
 80116b0:	015a      	lsls	r2, r3, #5
 80116b2:	69fb      	ldr	r3, [r7, #28]
 80116b4:	4413      	add	r3, r2
 80116b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	69ba      	ldr	r2, [r7, #24]
 80116be:	0151      	lsls	r1, r2, #5
 80116c0:	69fa      	ldr	r2, [r7, #28]
 80116c2:	440a      	add	r2, r1
 80116c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80116cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80116ce:	69bb      	ldr	r3, [r7, #24]
 80116d0:	015a      	lsls	r2, r3, #5
 80116d2:	69fb      	ldr	r3, [r7, #28]
 80116d4:	4413      	add	r3, r2
 80116d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	69ba      	ldr	r2, [r7, #24]
 80116de:	0151      	lsls	r1, r2, #5
 80116e0:	69fa      	ldr	r2, [r7, #28]
 80116e2:	440a      	add	r2, r1
 80116e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80116ec:	6013      	str	r3, [r2, #0]
 80116ee:	e133      	b.n	8011958 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80116f0:	69bb      	ldr	r3, [r7, #24]
 80116f2:	015a      	lsls	r2, r3, #5
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	4413      	add	r3, r2
 80116f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	69ba      	ldr	r2, [r7, #24]
 8011700:	0151      	lsls	r1, r2, #5
 8011702:	69fa      	ldr	r2, [r7, #28]
 8011704:	440a      	add	r2, r1
 8011706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801170a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801170e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	78db      	ldrb	r3, [r3, #3]
 8011714:	2b01      	cmp	r3, #1
 8011716:	d015      	beq.n	8011744 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	695b      	ldr	r3, [r3, #20]
 801171c:	2b00      	cmp	r3, #0
 801171e:	f000 811b 	beq.w	8011958 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011722:	69fb      	ldr	r3, [r7, #28]
 8011724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	f003 030f 	and.w	r3, r3, #15
 8011732:	2101      	movs	r1, #1
 8011734:	fa01 f303 	lsl.w	r3, r1, r3
 8011738:	69f9      	ldr	r1, [r7, #28]
 801173a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801173e:	4313      	orrs	r3, r2
 8011740:	634b      	str	r3, [r1, #52]	; 0x34
 8011742:	e109      	b.n	8011958 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801174a:	689b      	ldr	r3, [r3, #8]
 801174c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011750:	2b00      	cmp	r3, #0
 8011752:	d110      	bne.n	8011776 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011754:	69bb      	ldr	r3, [r7, #24]
 8011756:	015a      	lsls	r2, r3, #5
 8011758:	69fb      	ldr	r3, [r7, #28]
 801175a:	4413      	add	r3, r2
 801175c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	69ba      	ldr	r2, [r7, #24]
 8011764:	0151      	lsls	r1, r2, #5
 8011766:	69fa      	ldr	r2, [r7, #28]
 8011768:	440a      	add	r2, r1
 801176a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801176e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011772:	6013      	str	r3, [r2, #0]
 8011774:	e00f      	b.n	8011796 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011776:	69bb      	ldr	r3, [r7, #24]
 8011778:	015a      	lsls	r2, r3, #5
 801177a:	69fb      	ldr	r3, [r7, #28]
 801177c:	4413      	add	r3, r2
 801177e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	69ba      	ldr	r2, [r7, #24]
 8011786:	0151      	lsls	r1, r2, #5
 8011788:	69fa      	ldr	r2, [r7, #28]
 801178a:	440a      	add	r2, r1
 801178c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011794:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	68d9      	ldr	r1, [r3, #12]
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	781a      	ldrb	r2, [r3, #0]
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	695b      	ldr	r3, [r3, #20]
 80117a2:	b298      	uxth	r0, r3
 80117a4:	79fb      	ldrb	r3, [r7, #7]
 80117a6:	9300      	str	r3, [sp, #0]
 80117a8:	4603      	mov	r3, r0
 80117aa:	68f8      	ldr	r0, [r7, #12]
 80117ac:	f000 fa38 	bl	8011c20 <USB_WritePacket>
 80117b0:	e0d2      	b.n	8011958 <USB_EPStartXfer+0x480>
 80117b2:	bf00      	nop
 80117b4:	e007ffff 	.word	0xe007ffff
 80117b8:	fff80000 	.word	0xfff80000
 80117bc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80117c0:	69bb      	ldr	r3, [r7, #24]
 80117c2:	015a      	lsls	r2, r3, #5
 80117c4:	69fb      	ldr	r3, [r7, #28]
 80117c6:	4413      	add	r3, r2
 80117c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117cc:	691a      	ldr	r2, [r3, #16]
 80117ce:	69bb      	ldr	r3, [r7, #24]
 80117d0:	0159      	lsls	r1, r3, #5
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	440b      	add	r3, r1
 80117d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117da:	4619      	mov	r1, r3
 80117dc:	4b61      	ldr	r3, [pc, #388]	; (8011964 <USB_EPStartXfer+0x48c>)
 80117de:	4013      	ands	r3, r2
 80117e0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80117e2:	69bb      	ldr	r3, [r7, #24]
 80117e4:	015a      	lsls	r2, r3, #5
 80117e6:	69fb      	ldr	r3, [r7, #28]
 80117e8:	4413      	add	r3, r2
 80117ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117ee:	691a      	ldr	r2, [r3, #16]
 80117f0:	69bb      	ldr	r3, [r7, #24]
 80117f2:	0159      	lsls	r1, r3, #5
 80117f4:	69fb      	ldr	r3, [r7, #28]
 80117f6:	440b      	add	r3, r1
 80117f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117fc:	4619      	mov	r1, r3
 80117fe:	4b5a      	ldr	r3, [pc, #360]	; (8011968 <USB_EPStartXfer+0x490>)
 8011800:	4013      	ands	r3, r2
 8011802:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8011804:	68bb      	ldr	r3, [r7, #8]
 8011806:	695b      	ldr	r3, [r3, #20]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d123      	bne.n	8011854 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801180c:	69bb      	ldr	r3, [r7, #24]
 801180e:	015a      	lsls	r2, r3, #5
 8011810:	69fb      	ldr	r3, [r7, #28]
 8011812:	4413      	add	r3, r2
 8011814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011818:	691a      	ldr	r2, [r3, #16]
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	689b      	ldr	r3, [r3, #8]
 801181e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011822:	69b9      	ldr	r1, [r7, #24]
 8011824:	0148      	lsls	r0, r1, #5
 8011826:	69f9      	ldr	r1, [r7, #28]
 8011828:	4401      	add	r1, r0
 801182a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801182e:	4313      	orrs	r3, r2
 8011830:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011832:	69bb      	ldr	r3, [r7, #24]
 8011834:	015a      	lsls	r2, r3, #5
 8011836:	69fb      	ldr	r3, [r7, #28]
 8011838:	4413      	add	r3, r2
 801183a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801183e:	691b      	ldr	r3, [r3, #16]
 8011840:	69ba      	ldr	r2, [r7, #24]
 8011842:	0151      	lsls	r1, r2, #5
 8011844:	69fa      	ldr	r2, [r7, #28]
 8011846:	440a      	add	r2, r1
 8011848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801184c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011850:	6113      	str	r3, [r2, #16]
 8011852:	e033      	b.n	80118bc <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	695a      	ldr	r2, [r3, #20]
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	689b      	ldr	r3, [r3, #8]
 801185c:	4413      	add	r3, r2
 801185e:	1e5a      	subs	r2, r3, #1
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	689b      	ldr	r3, [r3, #8]
 8011864:	fbb2 f3f3 	udiv	r3, r2, r3
 8011868:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801186a:	69bb      	ldr	r3, [r7, #24]
 801186c:	015a      	lsls	r2, r3, #5
 801186e:	69fb      	ldr	r3, [r7, #28]
 8011870:	4413      	add	r3, r2
 8011872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011876:	691a      	ldr	r2, [r3, #16]
 8011878:	8afb      	ldrh	r3, [r7, #22]
 801187a:	04d9      	lsls	r1, r3, #19
 801187c:	4b3b      	ldr	r3, [pc, #236]	; (801196c <USB_EPStartXfer+0x494>)
 801187e:	400b      	ands	r3, r1
 8011880:	69b9      	ldr	r1, [r7, #24]
 8011882:	0148      	lsls	r0, r1, #5
 8011884:	69f9      	ldr	r1, [r7, #28]
 8011886:	4401      	add	r1, r0
 8011888:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801188c:	4313      	orrs	r3, r2
 801188e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011890:	69bb      	ldr	r3, [r7, #24]
 8011892:	015a      	lsls	r2, r3, #5
 8011894:	69fb      	ldr	r3, [r7, #28]
 8011896:	4413      	add	r3, r2
 8011898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801189c:	691a      	ldr	r2, [r3, #16]
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	689b      	ldr	r3, [r3, #8]
 80118a2:	8af9      	ldrh	r1, [r7, #22]
 80118a4:	fb01 f303 	mul.w	r3, r1, r3
 80118a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80118ac:	69b9      	ldr	r1, [r7, #24]
 80118ae:	0148      	lsls	r0, r1, #5
 80118b0:	69f9      	ldr	r1, [r7, #28]
 80118b2:	4401      	add	r1, r0
 80118b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80118b8:	4313      	orrs	r3, r2
 80118ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80118bc:	79fb      	ldrb	r3, [r7, #7]
 80118be:	2b01      	cmp	r3, #1
 80118c0:	d10d      	bne.n	80118de <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	68db      	ldr	r3, [r3, #12]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d009      	beq.n	80118de <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	68d9      	ldr	r1, [r3, #12]
 80118ce:	69bb      	ldr	r3, [r7, #24]
 80118d0:	015a      	lsls	r2, r3, #5
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	4413      	add	r3, r2
 80118d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118da:	460a      	mov	r2, r1
 80118dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	78db      	ldrb	r3, [r3, #3]
 80118e2:	2b01      	cmp	r3, #1
 80118e4:	d128      	bne.n	8011938 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80118e6:	69fb      	ldr	r3, [r7, #28]
 80118e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118ec:	689b      	ldr	r3, [r3, #8]
 80118ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d110      	bne.n	8011918 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	015a      	lsls	r2, r3, #5
 80118fa:	69fb      	ldr	r3, [r7, #28]
 80118fc:	4413      	add	r3, r2
 80118fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	69ba      	ldr	r2, [r7, #24]
 8011906:	0151      	lsls	r1, r2, #5
 8011908:	69fa      	ldr	r2, [r7, #28]
 801190a:	440a      	add	r2, r1
 801190c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011910:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011914:	6013      	str	r3, [r2, #0]
 8011916:	e00f      	b.n	8011938 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011918:	69bb      	ldr	r3, [r7, #24]
 801191a:	015a      	lsls	r2, r3, #5
 801191c:	69fb      	ldr	r3, [r7, #28]
 801191e:	4413      	add	r3, r2
 8011920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	69ba      	ldr	r2, [r7, #24]
 8011928:	0151      	lsls	r1, r2, #5
 801192a:	69fa      	ldr	r2, [r7, #28]
 801192c:	440a      	add	r2, r1
 801192e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011936:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011938:	69bb      	ldr	r3, [r7, #24]
 801193a:	015a      	lsls	r2, r3, #5
 801193c:	69fb      	ldr	r3, [r7, #28]
 801193e:	4413      	add	r3, r2
 8011940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	69ba      	ldr	r2, [r7, #24]
 8011948:	0151      	lsls	r1, r2, #5
 801194a:	69fa      	ldr	r2, [r7, #28]
 801194c:	440a      	add	r2, r1
 801194e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011952:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011956:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011958:	2300      	movs	r3, #0
}
 801195a:	4618      	mov	r0, r3
 801195c:	3720      	adds	r7, #32
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}
 8011962:	bf00      	nop
 8011964:	fff80000 	.word	0xfff80000
 8011968:	e007ffff 	.word	0xe007ffff
 801196c:	1ff80000 	.word	0x1ff80000

08011970 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011970:	b480      	push	{r7}
 8011972:	b087      	sub	sp, #28
 8011974:	af00      	add	r7, sp, #0
 8011976:	60f8      	str	r0, [r7, #12]
 8011978:	60b9      	str	r1, [r7, #8]
 801197a:	4613      	mov	r3, r2
 801197c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	781b      	ldrb	r3, [r3, #0]
 8011986:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	785b      	ldrb	r3, [r3, #1]
 801198c:	2b01      	cmp	r3, #1
 801198e:	f040 80cd 	bne.w	8011b2c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	695b      	ldr	r3, [r3, #20]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d132      	bne.n	8011a00 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	015a      	lsls	r2, r3, #5
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	4413      	add	r3, r2
 80119a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119a6:	691a      	ldr	r2, [r3, #16]
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	0159      	lsls	r1, r3, #5
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	440b      	add	r3, r1
 80119b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119b4:	4619      	mov	r1, r3
 80119b6:	4b98      	ldr	r3, [pc, #608]	; (8011c18 <USB_EP0StartXfer+0x2a8>)
 80119b8:	4013      	ands	r3, r2
 80119ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	015a      	lsls	r2, r3, #5
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	4413      	add	r3, r2
 80119c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119c8:	691b      	ldr	r3, [r3, #16]
 80119ca:	693a      	ldr	r2, [r7, #16]
 80119cc:	0151      	lsls	r1, r2, #5
 80119ce:	697a      	ldr	r2, [r7, #20]
 80119d0:	440a      	add	r2, r1
 80119d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80119d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80119da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80119dc:	693b      	ldr	r3, [r7, #16]
 80119de:	015a      	lsls	r2, r3, #5
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	4413      	add	r3, r2
 80119e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119e8:	691a      	ldr	r2, [r3, #16]
 80119ea:	693b      	ldr	r3, [r7, #16]
 80119ec:	0159      	lsls	r1, r3, #5
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	440b      	add	r3, r1
 80119f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119f6:	4619      	mov	r1, r3
 80119f8:	4b88      	ldr	r3, [pc, #544]	; (8011c1c <USB_EP0StartXfer+0x2ac>)
 80119fa:	4013      	ands	r3, r2
 80119fc:	610b      	str	r3, [r1, #16]
 80119fe:	e04e      	b.n	8011a9e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011a00:	693b      	ldr	r3, [r7, #16]
 8011a02:	015a      	lsls	r2, r3, #5
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	4413      	add	r3, r2
 8011a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a0c:	691a      	ldr	r2, [r3, #16]
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	0159      	lsls	r1, r3, #5
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	440b      	add	r3, r1
 8011a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	4b7f      	ldr	r3, [pc, #508]	; (8011c1c <USB_EP0StartXfer+0x2ac>)
 8011a1e:	4013      	ands	r3, r2
 8011a20:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	015a      	lsls	r2, r3, #5
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	4413      	add	r3, r2
 8011a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a2e:	691a      	ldr	r2, [r3, #16]
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	0159      	lsls	r1, r3, #5
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	440b      	add	r3, r1
 8011a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a3c:	4619      	mov	r1, r3
 8011a3e:	4b76      	ldr	r3, [pc, #472]	; (8011c18 <USB_EP0StartXfer+0x2a8>)
 8011a40:	4013      	ands	r3, r2
 8011a42:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	695a      	ldr	r2, [r3, #20]
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	689b      	ldr	r3, [r3, #8]
 8011a4c:	429a      	cmp	r2, r3
 8011a4e:	d903      	bls.n	8011a58 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	689a      	ldr	r2, [r3, #8]
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	015a      	lsls	r2, r3, #5
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	4413      	add	r3, r2
 8011a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a64:	691b      	ldr	r3, [r3, #16]
 8011a66:	693a      	ldr	r2, [r7, #16]
 8011a68:	0151      	lsls	r1, r2, #5
 8011a6a:	697a      	ldr	r2, [r7, #20]
 8011a6c:	440a      	add	r2, r1
 8011a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011a78:	693b      	ldr	r3, [r7, #16]
 8011a7a:	015a      	lsls	r2, r3, #5
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	4413      	add	r3, r2
 8011a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a84:	691a      	ldr	r2, [r3, #16]
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	695b      	ldr	r3, [r3, #20]
 8011a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a8e:	6939      	ldr	r1, [r7, #16]
 8011a90:	0148      	lsls	r0, r1, #5
 8011a92:	6979      	ldr	r1, [r7, #20]
 8011a94:	4401      	add	r1, r0
 8011a96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011a9a:	4313      	orrs	r3, r2
 8011a9c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011a9e:	79fb      	ldrb	r3, [r7, #7]
 8011aa0:	2b01      	cmp	r3, #1
 8011aa2:	d11e      	bne.n	8011ae2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	691b      	ldr	r3, [r3, #16]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d009      	beq.n	8011ac0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	015a      	lsls	r2, r3, #5
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	4413      	add	r3, r2
 8011ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ab8:	461a      	mov	r2, r3
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	691b      	ldr	r3, [r3, #16]
 8011abe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	015a      	lsls	r2, r3, #5
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	4413      	add	r3, r2
 8011ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	693a      	ldr	r2, [r7, #16]
 8011ad0:	0151      	lsls	r1, r2, #5
 8011ad2:	697a      	ldr	r2, [r7, #20]
 8011ad4:	440a      	add	r2, r1
 8011ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ada:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011ade:	6013      	str	r3, [r2, #0]
 8011ae0:	e092      	b.n	8011c08 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	015a      	lsls	r2, r3, #5
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	4413      	add	r3, r2
 8011aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	693a      	ldr	r2, [r7, #16]
 8011af2:	0151      	lsls	r1, r2, #5
 8011af4:	697a      	ldr	r2, [r7, #20]
 8011af6:	440a      	add	r2, r1
 8011af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011afc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011b00:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	695b      	ldr	r3, [r3, #20]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d07e      	beq.n	8011c08 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	781b      	ldrb	r3, [r3, #0]
 8011b16:	f003 030f 	and.w	r3, r3, #15
 8011b1a:	2101      	movs	r1, #1
 8011b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8011b20:	6979      	ldr	r1, [r7, #20]
 8011b22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011b26:	4313      	orrs	r3, r2
 8011b28:	634b      	str	r3, [r1, #52]	; 0x34
 8011b2a:	e06d      	b.n	8011c08 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011b2c:	693b      	ldr	r3, [r7, #16]
 8011b2e:	015a      	lsls	r2, r3, #5
 8011b30:	697b      	ldr	r3, [r7, #20]
 8011b32:	4413      	add	r3, r2
 8011b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b38:	691a      	ldr	r2, [r3, #16]
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	0159      	lsls	r1, r3, #5
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	440b      	add	r3, r1
 8011b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b46:	4619      	mov	r1, r3
 8011b48:	4b34      	ldr	r3, [pc, #208]	; (8011c1c <USB_EP0StartXfer+0x2ac>)
 8011b4a:	4013      	ands	r3, r2
 8011b4c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	015a      	lsls	r2, r3, #5
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	4413      	add	r3, r2
 8011b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b5a:	691a      	ldr	r2, [r3, #16]
 8011b5c:	693b      	ldr	r3, [r7, #16]
 8011b5e:	0159      	lsls	r1, r3, #5
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	440b      	add	r3, r1
 8011b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b68:	4619      	mov	r1, r3
 8011b6a:	4b2b      	ldr	r3, [pc, #172]	; (8011c18 <USB_EP0StartXfer+0x2a8>)
 8011b6c:	4013      	ands	r3, r2
 8011b6e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	695b      	ldr	r3, [r3, #20]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d003      	beq.n	8011b80 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	689a      	ldr	r2, [r3, #8]
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	015a      	lsls	r2, r3, #5
 8011b84:	697b      	ldr	r3, [r7, #20]
 8011b86:	4413      	add	r3, r2
 8011b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b8c:	691b      	ldr	r3, [r3, #16]
 8011b8e:	693a      	ldr	r2, [r7, #16]
 8011b90:	0151      	lsls	r1, r2, #5
 8011b92:	697a      	ldr	r2, [r7, #20]
 8011b94:	440a      	add	r2, r1
 8011b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011b9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011ba0:	693b      	ldr	r3, [r7, #16]
 8011ba2:	015a      	lsls	r2, r3, #5
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	4413      	add	r3, r2
 8011ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bac:	691a      	ldr	r2, [r3, #16]
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	689b      	ldr	r3, [r3, #8]
 8011bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011bb6:	6939      	ldr	r1, [r7, #16]
 8011bb8:	0148      	lsls	r0, r1, #5
 8011bba:	6979      	ldr	r1, [r7, #20]
 8011bbc:	4401      	add	r1, r0
 8011bbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011bc2:	4313      	orrs	r3, r2
 8011bc4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8011bc6:	79fb      	ldrb	r3, [r7, #7]
 8011bc8:	2b01      	cmp	r3, #1
 8011bca:	d10d      	bne.n	8011be8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	68db      	ldr	r3, [r3, #12]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d009      	beq.n	8011be8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	68d9      	ldr	r1, [r3, #12]
 8011bd8:	693b      	ldr	r3, [r7, #16]
 8011bda:	015a      	lsls	r2, r3, #5
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	4413      	add	r3, r2
 8011be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011be4:	460a      	mov	r2, r1
 8011be6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011be8:	693b      	ldr	r3, [r7, #16]
 8011bea:	015a      	lsls	r2, r3, #5
 8011bec:	697b      	ldr	r3, [r7, #20]
 8011bee:	4413      	add	r3, r2
 8011bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	693a      	ldr	r2, [r7, #16]
 8011bf8:	0151      	lsls	r1, r2, #5
 8011bfa:	697a      	ldr	r2, [r7, #20]
 8011bfc:	440a      	add	r2, r1
 8011bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011c06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011c08:	2300      	movs	r3, #0
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	371c      	adds	r7, #28
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr
 8011c16:	bf00      	nop
 8011c18:	e007ffff 	.word	0xe007ffff
 8011c1c:	fff80000 	.word	0xfff80000

08011c20 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011c20:	b480      	push	{r7}
 8011c22:	b089      	sub	sp, #36	; 0x24
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	60b9      	str	r1, [r7, #8]
 8011c2a:	4611      	mov	r1, r2
 8011c2c:	461a      	mov	r2, r3
 8011c2e:	460b      	mov	r3, r1
 8011c30:	71fb      	strb	r3, [r7, #7]
 8011c32:	4613      	mov	r3, r2
 8011c34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8011c3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d11a      	bne.n	8011c7c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011c46:	88bb      	ldrh	r3, [r7, #4]
 8011c48:	3303      	adds	r3, #3
 8011c4a:	089b      	lsrs	r3, r3, #2
 8011c4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011c4e:	2300      	movs	r3, #0
 8011c50:	61bb      	str	r3, [r7, #24]
 8011c52:	e00f      	b.n	8011c74 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011c54:	79fb      	ldrb	r3, [r7, #7]
 8011c56:	031a      	lsls	r2, r3, #12
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	4413      	add	r3, r2
 8011c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c60:	461a      	mov	r2, r3
 8011c62:	69fb      	ldr	r3, [r7, #28]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011c68:	69fb      	ldr	r3, [r7, #28]
 8011c6a:	3304      	adds	r3, #4
 8011c6c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011c6e:	69bb      	ldr	r3, [r7, #24]
 8011c70:	3301      	adds	r3, #1
 8011c72:	61bb      	str	r3, [r7, #24]
 8011c74:	69ba      	ldr	r2, [r7, #24]
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	429a      	cmp	r2, r3
 8011c7a:	d3eb      	bcc.n	8011c54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011c7c:	2300      	movs	r3, #0
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3724      	adds	r7, #36	; 0x24
 8011c82:	46bd      	mov	sp, r7
 8011c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c88:	4770      	bx	lr

08011c8a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011c8a:	b480      	push	{r7}
 8011c8c:	b089      	sub	sp, #36	; 0x24
 8011c8e:	af00      	add	r7, sp, #0
 8011c90:	60f8      	str	r0, [r7, #12]
 8011c92:	60b9      	str	r1, [r7, #8]
 8011c94:	4613      	mov	r3, r2
 8011c96:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011ca0:	88fb      	ldrh	r3, [r7, #6]
 8011ca2:	3303      	adds	r3, #3
 8011ca4:	089b      	lsrs	r3, r3, #2
 8011ca6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011ca8:	2300      	movs	r3, #0
 8011caa:	61bb      	str	r3, [r7, #24]
 8011cac:	e00b      	b.n	8011cc6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011cb4:	681a      	ldr	r2, [r3, #0]
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	601a      	str	r2, [r3, #0]
    pDest++;
 8011cba:	69fb      	ldr	r3, [r7, #28]
 8011cbc:	3304      	adds	r3, #4
 8011cbe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011cc0:	69bb      	ldr	r3, [r7, #24]
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	61bb      	str	r3, [r7, #24]
 8011cc6:	69ba      	ldr	r2, [r7, #24]
 8011cc8:	693b      	ldr	r3, [r7, #16]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d3ef      	bcc.n	8011cae <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011cce:	69fb      	ldr	r3, [r7, #28]
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3724      	adds	r7, #36	; 0x24
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cda:	4770      	bx	lr

08011cdc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011cdc:	b480      	push	{r7}
 8011cde:	b085      	sub	sp, #20
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
 8011ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	785b      	ldrb	r3, [r3, #1]
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	d12c      	bne.n	8011d52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	015a      	lsls	r2, r3, #5
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	4413      	add	r3, r2
 8011d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	db12      	blt.n	8011d30 <USB_EPSetStall+0x54>
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d00f      	beq.n	8011d30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	015a      	lsls	r2, r3, #5
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	4413      	add	r3, r2
 8011d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	68ba      	ldr	r2, [r7, #8]
 8011d20:	0151      	lsls	r1, r2, #5
 8011d22:	68fa      	ldr	r2, [r7, #12]
 8011d24:	440a      	add	r2, r1
 8011d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011d2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	015a      	lsls	r2, r3, #5
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	4413      	add	r3, r2
 8011d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	68ba      	ldr	r2, [r7, #8]
 8011d40:	0151      	lsls	r1, r2, #5
 8011d42:	68fa      	ldr	r2, [r7, #12]
 8011d44:	440a      	add	r2, r1
 8011d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011d4e:	6013      	str	r3, [r2, #0]
 8011d50:	e02b      	b.n	8011daa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	015a      	lsls	r2, r3, #5
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	4413      	add	r3, r2
 8011d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	db12      	blt.n	8011d8a <USB_EPSetStall+0xae>
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d00f      	beq.n	8011d8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	015a      	lsls	r2, r3, #5
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	4413      	add	r3, r2
 8011d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	68ba      	ldr	r2, [r7, #8]
 8011d7a:	0151      	lsls	r1, r2, #5
 8011d7c:	68fa      	ldr	r2, [r7, #12]
 8011d7e:	440a      	add	r2, r1
 8011d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011d88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	015a      	lsls	r2, r3, #5
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	4413      	add	r3, r2
 8011d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	68ba      	ldr	r2, [r7, #8]
 8011d9a:	0151      	lsls	r1, r2, #5
 8011d9c:	68fa      	ldr	r2, [r7, #12]
 8011d9e:	440a      	add	r2, r1
 8011da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011da4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011da8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011daa:	2300      	movs	r3, #0
}
 8011dac:	4618      	mov	r0, r3
 8011dae:	3714      	adds	r7, #20
 8011db0:	46bd      	mov	sp, r7
 8011db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db6:	4770      	bx	lr

08011db8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011db8:	b480      	push	{r7}
 8011dba:	b085      	sub	sp, #20
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	785b      	ldrb	r3, [r3, #1]
 8011dd0:	2b01      	cmp	r3, #1
 8011dd2:	d128      	bne.n	8011e26 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	015a      	lsls	r2, r3, #5
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	4413      	add	r3, r2
 8011ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	68ba      	ldr	r2, [r7, #8]
 8011de4:	0151      	lsls	r1, r2, #5
 8011de6:	68fa      	ldr	r2, [r7, #12]
 8011de8:	440a      	add	r2, r1
 8011dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011dee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011df2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	78db      	ldrb	r3, [r3, #3]
 8011df8:	2b03      	cmp	r3, #3
 8011dfa:	d003      	beq.n	8011e04 <USB_EPClearStall+0x4c>
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	78db      	ldrb	r3, [r3, #3]
 8011e00:	2b02      	cmp	r3, #2
 8011e02:	d138      	bne.n	8011e76 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	015a      	lsls	r2, r3, #5
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	4413      	add	r3, r2
 8011e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	68ba      	ldr	r2, [r7, #8]
 8011e14:	0151      	lsls	r1, r2, #5
 8011e16:	68fa      	ldr	r2, [r7, #12]
 8011e18:	440a      	add	r2, r1
 8011e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e22:	6013      	str	r3, [r2, #0]
 8011e24:	e027      	b.n	8011e76 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	015a      	lsls	r2, r3, #5
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	4413      	add	r3, r2
 8011e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	68ba      	ldr	r2, [r7, #8]
 8011e36:	0151      	lsls	r1, r2, #5
 8011e38:	68fa      	ldr	r2, [r7, #12]
 8011e3a:	440a      	add	r2, r1
 8011e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011e44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	78db      	ldrb	r3, [r3, #3]
 8011e4a:	2b03      	cmp	r3, #3
 8011e4c:	d003      	beq.n	8011e56 <USB_EPClearStall+0x9e>
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	78db      	ldrb	r3, [r3, #3]
 8011e52:	2b02      	cmp	r3, #2
 8011e54:	d10f      	bne.n	8011e76 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	015a      	lsls	r2, r3, #5
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	4413      	add	r3, r2
 8011e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	68ba      	ldr	r2, [r7, #8]
 8011e66:	0151      	lsls	r1, r2, #5
 8011e68:	68fa      	ldr	r2, [r7, #12]
 8011e6a:	440a      	add	r2, r1
 8011e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e74:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011e76:	2300      	movs	r3, #0
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	3714      	adds	r7, #20
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e82:	4770      	bx	lr

08011e84 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011e84:	b480      	push	{r7}
 8011e86:	b085      	sub	sp, #20
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
 8011e8c:	460b      	mov	r3, r1
 8011e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	68fa      	ldr	r2, [r7, #12]
 8011e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ea2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011ea6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	78fb      	ldrb	r3, [r7, #3]
 8011eb2:	011b      	lsls	r3, r3, #4
 8011eb4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011eb8:	68f9      	ldr	r1, [r7, #12]
 8011eba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011ebe:	4313      	orrs	r3, r2
 8011ec0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011ec2:	2300      	movs	r3, #0
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3714      	adds	r7, #20
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ece:	4770      	bx	lr

08011ed0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b084      	sub	sp, #16
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	68fa      	ldr	r2, [r7, #12]
 8011ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011eea:	f023 0302 	bic.w	r3, r3, #2
 8011eee:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8011ef0:	2003      	movs	r0, #3
 8011ef2:	f7f1 fb65 	bl	80035c0 <HAL_Delay>

  return HAL_OK;
 8011ef6:	2300      	movs	r3, #0
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3710      	adds	r7, #16
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}

08011f00 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b084      	sub	sp, #16
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f12:	685b      	ldr	r3, [r3, #4]
 8011f14:	68fa      	ldr	r2, [r7, #12]
 8011f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011f1a:	f043 0302 	orr.w	r3, r3, #2
 8011f1e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8011f20:	2003      	movs	r0, #3
 8011f22:	f7f1 fb4d 	bl	80035c0 <HAL_Delay>

  return HAL_OK;
 8011f26:	2300      	movs	r3, #0
}
 8011f28:	4618      	mov	r0, r3
 8011f2a:	3710      	adds	r7, #16
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}

08011f30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011f30:	b480      	push	{r7}
 8011f32:	b085      	sub	sp, #20
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	695b      	ldr	r3, [r3, #20]
 8011f3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	699b      	ldr	r3, [r3, #24]
 8011f42:	68fa      	ldr	r2, [r7, #12]
 8011f44:	4013      	ands	r3, r2
 8011f46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011f48:	68fb      	ldr	r3, [r7, #12]
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3714      	adds	r7, #20
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f54:	4770      	bx	lr

08011f56 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011f56:	b480      	push	{r7}
 8011f58:	b085      	sub	sp, #20
 8011f5a:	af00      	add	r7, sp, #0
 8011f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f68:	699b      	ldr	r3, [r3, #24]
 8011f6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f72:	69db      	ldr	r3, [r3, #28]
 8011f74:	68ba      	ldr	r2, [r7, #8]
 8011f76:	4013      	ands	r3, r2
 8011f78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	0c1b      	lsrs	r3, r3, #16
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3714      	adds	r7, #20
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr

08011f8a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011f8a:	b480      	push	{r7}
 8011f8c:	b085      	sub	sp, #20
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f9c:	699b      	ldr	r3, [r3, #24]
 8011f9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fa6:	69db      	ldr	r3, [r3, #28]
 8011fa8:	68ba      	ldr	r2, [r7, #8]
 8011faa:	4013      	ands	r3, r2
 8011fac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	b29b      	uxth	r3, r3
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3714      	adds	r7, #20
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbc:	4770      	bx	lr

08011fbe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011fbe:	b480      	push	{r7}
 8011fc0:	b085      	sub	sp, #20
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
 8011fc6:	460b      	mov	r3, r1
 8011fc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011fce:	78fb      	ldrb	r3, [r7, #3]
 8011fd0:	015a      	lsls	r2, r3, #5
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	4413      	add	r3, r2
 8011fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fda:	689b      	ldr	r3, [r3, #8]
 8011fdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fe4:	695b      	ldr	r3, [r3, #20]
 8011fe6:	68ba      	ldr	r2, [r7, #8]
 8011fe8:	4013      	ands	r3, r2
 8011fea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011fec:	68bb      	ldr	r3, [r7, #8]
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	3714      	adds	r7, #20
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff8:	4770      	bx	lr

08011ffa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011ffa:	b480      	push	{r7}
 8011ffc:	b087      	sub	sp, #28
 8011ffe:	af00      	add	r7, sp, #0
 8012000:	6078      	str	r0, [r7, #4]
 8012002:	460b      	mov	r3, r1
 8012004:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012010:	691b      	ldr	r3, [r3, #16]
 8012012:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801201a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801201c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801201e:	78fb      	ldrb	r3, [r7, #3]
 8012020:	f003 030f 	and.w	r3, r3, #15
 8012024:	68fa      	ldr	r2, [r7, #12]
 8012026:	fa22 f303 	lsr.w	r3, r2, r3
 801202a:	01db      	lsls	r3, r3, #7
 801202c:	b2db      	uxtb	r3, r3
 801202e:	693a      	ldr	r2, [r7, #16]
 8012030:	4313      	orrs	r3, r2
 8012032:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012034:	78fb      	ldrb	r3, [r7, #3]
 8012036:	015a      	lsls	r2, r3, #5
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	4413      	add	r3, r2
 801203c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012040:	689b      	ldr	r3, [r3, #8]
 8012042:	693a      	ldr	r2, [r7, #16]
 8012044:	4013      	ands	r3, r2
 8012046:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012048:	68bb      	ldr	r3, [r7, #8]
}
 801204a:	4618      	mov	r0, r3
 801204c:	371c      	adds	r7, #28
 801204e:	46bd      	mov	sp, r7
 8012050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012054:	4770      	bx	lr

08012056 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012056:	b480      	push	{r7}
 8012058:	b083      	sub	sp, #12
 801205a:	af00      	add	r7, sp, #0
 801205c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	695b      	ldr	r3, [r3, #20]
 8012062:	f003 0301 	and.w	r3, r3, #1
}
 8012066:	4618      	mov	r0, r3
 8012068:	370c      	adds	r7, #12
 801206a:	46bd      	mov	sp, r7
 801206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012070:	4770      	bx	lr
	...

08012074 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012074:	b480      	push	{r7}
 8012076:	b085      	sub	sp, #20
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012086:	681a      	ldr	r2, [r3, #0]
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801208e:	4619      	mov	r1, r3
 8012090:	4b09      	ldr	r3, [pc, #36]	; (80120b8 <USB_ActivateSetup+0x44>)
 8012092:	4013      	ands	r3, r2
 8012094:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801209c:	685b      	ldr	r3, [r3, #4]
 801209e:	68fa      	ldr	r2, [r7, #12]
 80120a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80120a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80120a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80120aa:	2300      	movs	r3, #0
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3714      	adds	r7, #20
 80120b0:	46bd      	mov	sp, r7
 80120b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b6:	4770      	bx	lr
 80120b8:	fffff800 	.word	0xfffff800

080120bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80120bc:	b480      	push	{r7}
 80120be:	b087      	sub	sp, #28
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	60f8      	str	r0, [r7, #12]
 80120c4:	460b      	mov	r3, r1
 80120c6:	607a      	str	r2, [r7, #4]
 80120c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	333c      	adds	r3, #60	; 0x3c
 80120d2:	3304      	adds	r3, #4
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	4a26      	ldr	r2, [pc, #152]	; (8012174 <USB_EP0_OutStart+0xb8>)
 80120dc:	4293      	cmp	r3, r2
 80120de:	d90a      	bls.n	80120f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80120ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80120f0:	d101      	bne.n	80120f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80120f2:	2300      	movs	r3, #0
 80120f4:	e037      	b.n	8012166 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120fc:	461a      	mov	r2, r3
 80120fe:	2300      	movs	r3, #0
 8012100:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012108:	691b      	ldr	r3, [r3, #16]
 801210a:	697a      	ldr	r2, [r7, #20]
 801210c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012110:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801211c:	691b      	ldr	r3, [r3, #16]
 801211e:	697a      	ldr	r2, [r7, #20]
 8012120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012124:	f043 0318 	orr.w	r3, r3, #24
 8012128:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801212a:	697b      	ldr	r3, [r7, #20]
 801212c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012130:	691b      	ldr	r3, [r3, #16]
 8012132:	697a      	ldr	r2, [r7, #20]
 8012134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012138:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801213c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801213e:	7afb      	ldrb	r3, [r7, #11]
 8012140:	2b01      	cmp	r3, #1
 8012142:	d10f      	bne.n	8012164 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801214a:	461a      	mov	r2, r3
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012150:	697b      	ldr	r3, [r7, #20]
 8012152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	697a      	ldr	r2, [r7, #20]
 801215a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801215e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8012162:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012164:	2300      	movs	r3, #0
}
 8012166:	4618      	mov	r0, r3
 8012168:	371c      	adds	r7, #28
 801216a:	46bd      	mov	sp, r7
 801216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012170:	4770      	bx	lr
 8012172:	bf00      	nop
 8012174:	4f54300a 	.word	0x4f54300a

08012178 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012178:	b480      	push	{r7}
 801217a:	b085      	sub	sp, #20
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8012180:	2300      	movs	r3, #0
 8012182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	3301      	adds	r3, #1
 8012188:	60fb      	str	r3, [r7, #12]
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	4a13      	ldr	r2, [pc, #76]	; (80121dc <USB_CoreReset+0x64>)
 801218e:	4293      	cmp	r3, r2
 8012190:	d901      	bls.n	8012196 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012192:	2303      	movs	r3, #3
 8012194:	e01b      	b.n	80121ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	691b      	ldr	r3, [r3, #16]
 801219a:	2b00      	cmp	r3, #0
 801219c:	daf2      	bge.n	8012184 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801219e:	2300      	movs	r3, #0
 80121a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	691b      	ldr	r3, [r3, #16]
 80121a6:	f043 0201 	orr.w	r2, r3, #1
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	3301      	adds	r3, #1
 80121b2:	60fb      	str	r3, [r7, #12]
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	4a09      	ldr	r2, [pc, #36]	; (80121dc <USB_CoreReset+0x64>)
 80121b8:	4293      	cmp	r3, r2
 80121ba:	d901      	bls.n	80121c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80121bc:	2303      	movs	r3, #3
 80121be:	e006      	b.n	80121ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	691b      	ldr	r3, [r3, #16]
 80121c4:	f003 0301 	and.w	r3, r3, #1
 80121c8:	2b01      	cmp	r3, #1
 80121ca:	d0f0      	beq.n	80121ae <USB_CoreReset+0x36>

  return HAL_OK;
 80121cc:	2300      	movs	r3, #0
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3714      	adds	r7, #20
 80121d2:	46bd      	mov	sp, r7
 80121d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d8:	4770      	bx	lr
 80121da:	bf00      	nop
 80121dc:	00030d40 	.word	0x00030d40

080121e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80121e4:	4904      	ldr	r1, [pc, #16]	; (80121f8 <MX_FATFS_Init+0x18>)
 80121e6:	4805      	ldr	r0, [pc, #20]	; (80121fc <MX_FATFS_Init+0x1c>)
 80121e8:	f005 fbec 	bl	80179c4 <FATFS_LinkDriver>
 80121ec:	4603      	mov	r3, r0
 80121ee:	461a      	mov	r2, r3
 80121f0:	4b03      	ldr	r3, [pc, #12]	; (8012200 <MX_FATFS_Init+0x20>)
 80121f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80121f4:	bf00      	nop
 80121f6:	bd80      	pop	{r7, pc}
 80121f8:	24040f48 	.word	0x24040f48
 80121fc:	08019f00 	.word	0x08019f00
 8012200:	24040f44 	.word	0x24040f44

08012204 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012204:	b480      	push	{r7}
 8012206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012208:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801220a:	4618      	mov	r0, r3
 801220c:	46bd      	mov	sp, r7
 801220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012212:	4770      	bx	lr

08012214 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b082      	sub	sp, #8
 8012218:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801221a:	2300      	movs	r3, #0
 801221c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801221e:	f000 f885 	bl	801232c <BSP_SD_IsDetected>
 8012222:	4603      	mov	r3, r0
 8012224:	2b01      	cmp	r3, #1
 8012226:	d001      	beq.n	801222c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012228:	2302      	movs	r3, #2
 801222a:	e012      	b.n	8012252 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801222c:	480b      	ldr	r0, [pc, #44]	; (801225c <BSP_SD_Init+0x48>)
 801222e:	f7f9 fc1d 	bl	800ba6c <HAL_SD_Init>
 8012232:	4603      	mov	r3, r0
 8012234:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012236:	79fb      	ldrb	r3, [r7, #7]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d109      	bne.n	8012250 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801223c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8012240:	4806      	ldr	r0, [pc, #24]	; (801225c <BSP_SD_Init+0x48>)
 8012242:	f7fa fdf1 	bl	800ce28 <HAL_SD_ConfigWideBusOperation>
 8012246:	4603      	mov	r3, r0
 8012248:	2b00      	cmp	r3, #0
 801224a:	d001      	beq.n	8012250 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801224c:	2301      	movs	r3, #1
 801224e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012250:	79fb      	ldrb	r3, [r7, #7]
}
 8012252:	4618      	mov	r0, r3
 8012254:	3708      	adds	r7, #8
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}
 801225a:	bf00      	nop
 801225c:	24040c48 	.word	0x24040c48

08012260 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b086      	sub	sp, #24
 8012264:	af00      	add	r7, sp, #0
 8012266:	60f8      	str	r0, [r7, #12]
 8012268:	60b9      	str	r1, [r7, #8]
 801226a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801226c:	2300      	movs	r3, #0
 801226e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	68ba      	ldr	r2, [r7, #8]
 8012274:	68f9      	ldr	r1, [r7, #12]
 8012276:	4806      	ldr	r0, [pc, #24]	; (8012290 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012278:	f7fa f834 	bl	800c2e4 <HAL_SD_ReadBlocks_DMA>
 801227c:	4603      	mov	r3, r0
 801227e:	2b00      	cmp	r3, #0
 8012280:	d001      	beq.n	8012286 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012282:	2301      	movs	r3, #1
 8012284:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012286:	7dfb      	ldrb	r3, [r7, #23]
}
 8012288:	4618      	mov	r0, r3
 801228a:	3718      	adds	r7, #24
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}
 8012290:	24040c48 	.word	0x24040c48

08012294 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b086      	sub	sp, #24
 8012298:	af00      	add	r7, sp, #0
 801229a:	60f8      	str	r0, [r7, #12]
 801229c:	60b9      	str	r1, [r7, #8]
 801229e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80122a0:	2300      	movs	r3, #0
 80122a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	68ba      	ldr	r2, [r7, #8]
 80122a8:	68f9      	ldr	r1, [r7, #12]
 80122aa:	4806      	ldr	r0, [pc, #24]	; (80122c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80122ac:	f7fa f8c2 	bl	800c434 <HAL_SD_WriteBlocks_DMA>
 80122b0:	4603      	mov	r3, r0
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d001      	beq.n	80122ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80122b6:	2301      	movs	r3, #1
 80122b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80122ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80122bc:	4618      	mov	r0, r3
 80122be:	3718      	adds	r7, #24
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}
 80122c4:	24040c48 	.word	0x24040c48

080122c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80122cc:	4805      	ldr	r0, [pc, #20]	; (80122e4 <BSP_SD_GetCardState+0x1c>)
 80122ce:	f7fa fe55 	bl	800cf7c <HAL_SD_GetCardState>
 80122d2:	4603      	mov	r3, r0
 80122d4:	2b04      	cmp	r3, #4
 80122d6:	bf14      	ite	ne
 80122d8:	2301      	movne	r3, #1
 80122da:	2300      	moveq	r3, #0
 80122dc:	b2db      	uxtb	r3, r3
}
 80122de:	4618      	mov	r0, r3
 80122e0:	bd80      	pop	{r7, pc}
 80122e2:	bf00      	nop
 80122e4:	24040c48 	.word	0x24040c48

080122e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b082      	sub	sp, #8
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80122f0:	6879      	ldr	r1, [r7, #4]
 80122f2:	4803      	ldr	r0, [pc, #12]	; (8012300 <BSP_SD_GetCardInfo+0x18>)
 80122f4:	f7fa fd6c 	bl	800cdd0 <HAL_SD_GetCardInfo>
}
 80122f8:	bf00      	nop
 80122fa:	3708      	adds	r7, #8
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	24040c48 	.word	0x24040c48

08012304 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b082      	sub	sp, #8
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801230c:	f000 f9a0 	bl	8012650 <BSP_SD_WriteCpltCallback>
}
 8012310:	bf00      	nop
 8012312:	3708      	adds	r7, #8
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012320:	f000 f9a2 	bl	8012668 <BSP_SD_ReadCpltCallback>
}
 8012324:	bf00      	nop
 8012326:	3708      	adds	r7, #8
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b082      	sub	sp, #8
 8012330:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012332:	2301      	movs	r3, #1
 8012334:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012336:	f000 f80b 	bl	8012350 <BSP_PlatformIsDetected>
 801233a:	4603      	mov	r3, r0
 801233c:	2b00      	cmp	r3, #0
 801233e:	d101      	bne.n	8012344 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012340:	2300      	movs	r3, #0
 8012342:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012344:	79fb      	ldrb	r3, [r7, #7]
 8012346:	b2db      	uxtb	r3, r3
}
 8012348:	4618      	mov	r0, r3
 801234a:	3708      	adds	r7, #8
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}

08012350 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012350:	b580      	push	{r7, lr}
 8012352:	b082      	sub	sp, #8
 8012354:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012356:	2301      	movs	r3, #1
 8012358:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801235a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801235e:	4806      	ldr	r0, [pc, #24]	; (8012378 <BSP_PlatformIsDetected+0x28>)
 8012360:	f7f4 fe30 	bl	8006fc4 <HAL_GPIO_ReadPin>
 8012364:	4603      	mov	r3, r0
 8012366:	2b00      	cmp	r3, #0
 8012368:	d001      	beq.n	801236e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801236a:	2300      	movs	r3, #0
 801236c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801236e:	79fb      	ldrb	r3, [r7, #7]
}
 8012370:	4618      	mov	r0, r3
 8012372:	3708      	adds	r7, #8
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}
 8012378:	58020000 	.word	0x58020000

0801237c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b084      	sub	sp, #16
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8012384:	f7f1 f910 	bl	80035a8 <HAL_GetTick>
 8012388:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801238a:	e006      	b.n	801239a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801238c:	f7ff ff9c 	bl	80122c8 <BSP_SD_GetCardState>
 8012390:	4603      	mov	r3, r0
 8012392:	2b00      	cmp	r3, #0
 8012394:	d101      	bne.n	801239a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012396:	2300      	movs	r3, #0
 8012398:	e009      	b.n	80123ae <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801239a:	f7f1 f905 	bl	80035a8 <HAL_GetTick>
 801239e:	4602      	mov	r2, r0
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	1ad3      	subs	r3, r2, r3
 80123a4:	687a      	ldr	r2, [r7, #4]
 80123a6:	429a      	cmp	r2, r3
 80123a8:	d8f0      	bhi.n	801238c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80123aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3710      	adds	r7, #16
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
	...

080123b8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	4603      	mov	r3, r0
 80123c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80123c2:	4b0b      	ldr	r3, [pc, #44]	; (80123f0 <SD_CheckStatus+0x38>)
 80123c4:	2201      	movs	r2, #1
 80123c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80123c8:	f7ff ff7e 	bl	80122c8 <BSP_SD_GetCardState>
 80123cc:	4603      	mov	r3, r0
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d107      	bne.n	80123e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80123d2:	4b07      	ldr	r3, [pc, #28]	; (80123f0 <SD_CheckStatus+0x38>)
 80123d4:	781b      	ldrb	r3, [r3, #0]
 80123d6:	b2db      	uxtb	r3, r3
 80123d8:	f023 0301 	bic.w	r3, r3, #1
 80123dc:	b2da      	uxtb	r2, r3
 80123de:	4b04      	ldr	r3, [pc, #16]	; (80123f0 <SD_CheckStatus+0x38>)
 80123e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80123e2:	4b03      	ldr	r3, [pc, #12]	; (80123f0 <SD_CheckStatus+0x38>)
 80123e4:	781b      	ldrb	r3, [r3, #0]
 80123e6:	b2db      	uxtb	r3, r3
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3708      	adds	r7, #8
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}
 80123f0:	24000019 	.word	0x24000019

080123f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	4603      	mov	r3, r0
 80123fc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80123fe:	f7ff ff09 	bl	8012214 <BSP_SD_Init>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d107      	bne.n	8012418 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8012408:	79fb      	ldrb	r3, [r7, #7]
 801240a:	4618      	mov	r0, r3
 801240c:	f7ff ffd4 	bl	80123b8 <SD_CheckStatus>
 8012410:	4603      	mov	r3, r0
 8012412:	461a      	mov	r2, r3
 8012414:	4b04      	ldr	r3, [pc, #16]	; (8012428 <SD_initialize+0x34>)
 8012416:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012418:	4b03      	ldr	r3, [pc, #12]	; (8012428 <SD_initialize+0x34>)
 801241a:	781b      	ldrb	r3, [r3, #0]
 801241c:	b2db      	uxtb	r3, r3
}
 801241e:	4618      	mov	r0, r3
 8012420:	3708      	adds	r7, #8
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
 8012426:	bf00      	nop
 8012428:	24000019 	.word	0x24000019

0801242c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	af00      	add	r7, sp, #0
 8012432:	4603      	mov	r3, r0
 8012434:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012436:	79fb      	ldrb	r3, [r7, #7]
 8012438:	4618      	mov	r0, r3
 801243a:	f7ff ffbd 	bl	80123b8 <SD_CheckStatus>
 801243e:	4603      	mov	r3, r0
}
 8012440:	4618      	mov	r0, r3
 8012442:	3708      	adds	r7, #8
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}

08012448 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b086      	sub	sp, #24
 801244c:	af00      	add	r7, sp, #0
 801244e:	60b9      	str	r1, [r7, #8]
 8012450:	607a      	str	r2, [r7, #4]
 8012452:	603b      	str	r3, [r7, #0]
 8012454:	4603      	mov	r3, r0
 8012456:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012458:	2301      	movs	r3, #1
 801245a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801245c:	f247 5030 	movw	r0, #30000	; 0x7530
 8012460:	f7ff ff8c 	bl	801237c <SD_CheckStatusWithTimeout>
 8012464:	4603      	mov	r3, r0
 8012466:	2b00      	cmp	r3, #0
 8012468:	da01      	bge.n	801246e <SD_read+0x26>
  {
    return res;
 801246a:	7dfb      	ldrb	r3, [r7, #23]
 801246c:	e03b      	b.n	80124e6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801246e:	683a      	ldr	r2, [r7, #0]
 8012470:	6879      	ldr	r1, [r7, #4]
 8012472:	68b8      	ldr	r0, [r7, #8]
 8012474:	f7ff fef4 	bl	8012260 <BSP_SD_ReadBlocks_DMA>
 8012478:	4603      	mov	r3, r0
 801247a:	2b00      	cmp	r3, #0
 801247c:	d132      	bne.n	80124e4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801247e:	4b1c      	ldr	r3, [pc, #112]	; (80124f0 <SD_read+0xa8>)
 8012480:	2200      	movs	r2, #0
 8012482:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8012484:	f7f1 f890 	bl	80035a8 <HAL_GetTick>
 8012488:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801248a:	bf00      	nop
 801248c:	4b18      	ldr	r3, [pc, #96]	; (80124f0 <SD_read+0xa8>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d108      	bne.n	80124a6 <SD_read+0x5e>
 8012494:	f7f1 f888 	bl	80035a8 <HAL_GetTick>
 8012498:	4602      	mov	r2, r0
 801249a:	693b      	ldr	r3, [r7, #16]
 801249c:	1ad3      	subs	r3, r2, r3
 801249e:	f247 522f 	movw	r2, #29999	; 0x752f
 80124a2:	4293      	cmp	r3, r2
 80124a4:	d9f2      	bls.n	801248c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80124a6:	4b12      	ldr	r3, [pc, #72]	; (80124f0 <SD_read+0xa8>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d102      	bne.n	80124b4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80124ae:	2301      	movs	r3, #1
 80124b0:	75fb      	strb	r3, [r7, #23]
 80124b2:	e017      	b.n	80124e4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80124b4:	4b0e      	ldr	r3, [pc, #56]	; (80124f0 <SD_read+0xa8>)
 80124b6:	2200      	movs	r2, #0
 80124b8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80124ba:	f7f1 f875 	bl	80035a8 <HAL_GetTick>
 80124be:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80124c0:	e007      	b.n	80124d2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80124c2:	f7ff ff01 	bl	80122c8 <BSP_SD_GetCardState>
 80124c6:	4603      	mov	r3, r0
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d102      	bne.n	80124d2 <SD_read+0x8a>
          {
            res = RES_OK;
 80124cc:	2300      	movs	r3, #0
 80124ce:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80124d0:	e008      	b.n	80124e4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80124d2:	f7f1 f869 	bl	80035a8 <HAL_GetTick>
 80124d6:	4602      	mov	r2, r0
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	1ad3      	subs	r3, r2, r3
 80124dc:	f247 522f 	movw	r2, #29999	; 0x752f
 80124e0:	4293      	cmp	r3, r2
 80124e2:	d9ee      	bls.n	80124c2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80124e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3718      	adds	r7, #24
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
 80124ee:	bf00      	nop
 80124f0:	24040348 	.word	0x24040348

080124f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b086      	sub	sp, #24
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	60b9      	str	r1, [r7, #8]
 80124fc:	607a      	str	r2, [r7, #4]
 80124fe:	603b      	str	r3, [r7, #0]
 8012500:	4603      	mov	r3, r0
 8012502:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012504:	2301      	movs	r3, #1
 8012506:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8012508:	4b24      	ldr	r3, [pc, #144]	; (801259c <SD_write+0xa8>)
 801250a:	2200      	movs	r2, #0
 801250c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801250e:	f247 5030 	movw	r0, #30000	; 0x7530
 8012512:	f7ff ff33 	bl	801237c <SD_CheckStatusWithTimeout>
 8012516:	4603      	mov	r3, r0
 8012518:	2b00      	cmp	r3, #0
 801251a:	da01      	bge.n	8012520 <SD_write+0x2c>
  {
    return res;
 801251c:	7dfb      	ldrb	r3, [r7, #23]
 801251e:	e038      	b.n	8012592 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012520:	683a      	ldr	r2, [r7, #0]
 8012522:	6879      	ldr	r1, [r7, #4]
 8012524:	68b8      	ldr	r0, [r7, #8]
 8012526:	f7ff feb5 	bl	8012294 <BSP_SD_WriteBlocks_DMA>
 801252a:	4603      	mov	r3, r0
 801252c:	2b00      	cmp	r3, #0
 801252e:	d12f      	bne.n	8012590 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012530:	f7f1 f83a 	bl	80035a8 <HAL_GetTick>
 8012534:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012536:	bf00      	nop
 8012538:	4b18      	ldr	r3, [pc, #96]	; (801259c <SD_write+0xa8>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d108      	bne.n	8012552 <SD_write+0x5e>
 8012540:	f7f1 f832 	bl	80035a8 <HAL_GetTick>
 8012544:	4602      	mov	r2, r0
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	1ad3      	subs	r3, r2, r3
 801254a:	f247 522f 	movw	r2, #29999	; 0x752f
 801254e:	4293      	cmp	r3, r2
 8012550:	d9f2      	bls.n	8012538 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8012552:	4b12      	ldr	r3, [pc, #72]	; (801259c <SD_write+0xa8>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d102      	bne.n	8012560 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801255a:	2301      	movs	r3, #1
 801255c:	75fb      	strb	r3, [r7, #23]
 801255e:	e017      	b.n	8012590 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8012560:	4b0e      	ldr	r3, [pc, #56]	; (801259c <SD_write+0xa8>)
 8012562:	2200      	movs	r2, #0
 8012564:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012566:	f7f1 f81f 	bl	80035a8 <HAL_GetTick>
 801256a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801256c:	e007      	b.n	801257e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801256e:	f7ff feab 	bl	80122c8 <BSP_SD_GetCardState>
 8012572:	4603      	mov	r3, r0
 8012574:	2b00      	cmp	r3, #0
 8012576:	d102      	bne.n	801257e <SD_write+0x8a>
          {
            res = RES_OK;
 8012578:	2300      	movs	r3, #0
 801257a:	75fb      	strb	r3, [r7, #23]
            break;
 801257c:	e008      	b.n	8012590 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801257e:	f7f1 f813 	bl	80035a8 <HAL_GetTick>
 8012582:	4602      	mov	r2, r0
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	1ad3      	subs	r3, r2, r3
 8012588:	f247 522f 	movw	r2, #29999	; 0x752f
 801258c:	4293      	cmp	r3, r2
 801258e:	d9ee      	bls.n	801256e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8012590:	7dfb      	ldrb	r3, [r7, #23]
}
 8012592:	4618      	mov	r0, r3
 8012594:	3718      	adds	r7, #24
 8012596:	46bd      	mov	sp, r7
 8012598:	bd80      	pop	{r7, pc}
 801259a:	bf00      	nop
 801259c:	24040344 	.word	0x24040344

080125a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b08c      	sub	sp, #48	; 0x30
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	4603      	mov	r3, r0
 80125a8:	603a      	str	r2, [r7, #0]
 80125aa:	71fb      	strb	r3, [r7, #7]
 80125ac:	460b      	mov	r3, r1
 80125ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80125b0:	2301      	movs	r3, #1
 80125b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80125b6:	4b25      	ldr	r3, [pc, #148]	; (801264c <SD_ioctl+0xac>)
 80125b8:	781b      	ldrb	r3, [r3, #0]
 80125ba:	b2db      	uxtb	r3, r3
 80125bc:	f003 0301 	and.w	r3, r3, #1
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d001      	beq.n	80125c8 <SD_ioctl+0x28>
 80125c4:	2303      	movs	r3, #3
 80125c6:	e03c      	b.n	8012642 <SD_ioctl+0xa2>

  switch (cmd)
 80125c8:	79bb      	ldrb	r3, [r7, #6]
 80125ca:	2b03      	cmp	r3, #3
 80125cc:	d834      	bhi.n	8012638 <SD_ioctl+0x98>
 80125ce:	a201      	add	r2, pc, #4	; (adr r2, 80125d4 <SD_ioctl+0x34>)
 80125d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125d4:	080125e5 	.word	0x080125e5
 80125d8:	080125ed 	.word	0x080125ed
 80125dc:	08012605 	.word	0x08012605
 80125e0:	0801261f 	.word	0x0801261f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80125e4:	2300      	movs	r3, #0
 80125e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80125ea:	e028      	b.n	801263e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80125ec:	f107 0308 	add.w	r3, r7, #8
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7ff fe79 	bl	80122e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80125f6:	6a3a      	ldr	r2, [r7, #32]
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80125fc:	2300      	movs	r3, #0
 80125fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012602:	e01c      	b.n	801263e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012604:	f107 0308 	add.w	r3, r7, #8
 8012608:	4618      	mov	r0, r3
 801260a:	f7ff fe6d 	bl	80122e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012610:	b29a      	uxth	r2, r3
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012616:	2300      	movs	r3, #0
 8012618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801261c:	e00f      	b.n	801263e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801261e:	f107 0308 	add.w	r3, r7, #8
 8012622:	4618      	mov	r0, r3
 8012624:	f7ff fe60 	bl	80122e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262a:	0a5a      	lsrs	r2, r3, #9
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012630:	2300      	movs	r3, #0
 8012632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012636:	e002      	b.n	801263e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012638:	2304      	movs	r3, #4
 801263a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801263e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012642:	4618      	mov	r0, r3
 8012644:	3730      	adds	r7, #48	; 0x30
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
 801264a:	bf00      	nop
 801264c:	24000019 	.word	0x24000019

08012650 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012650:	b480      	push	{r7}
 8012652:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8012654:	4b03      	ldr	r3, [pc, #12]	; (8012664 <BSP_SD_WriteCpltCallback+0x14>)
 8012656:	2201      	movs	r2, #1
 8012658:	601a      	str	r2, [r3, #0]
}
 801265a:	bf00      	nop
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr
 8012664:	24040344 	.word	0x24040344

08012668 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012668:	b480      	push	{r7}
 801266a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801266c:	4b03      	ldr	r3, [pc, #12]	; (801267c <BSP_SD_ReadCpltCallback+0x14>)
 801266e:	2201      	movs	r2, #1
 8012670:	601a      	str	r2, [r3, #0]
}
 8012672:	bf00      	nop
 8012674:	46bd      	mov	sp, r7
 8012676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267a:	4770      	bx	lr
 801267c:	24040348 	.word	0x24040348

08012680 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b084      	sub	sp, #16
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	460b      	mov	r3, r1
 801268a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801268c:	f248 0074 	movw	r0, #32884	; 0x8074
 8012690:	f005 fed0 	bl	8018434 <malloc>
 8012694:	4603      	mov	r3, r0
 8012696:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d105      	bne.n	80126aa <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	2200      	movs	r2, #0
 80126a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80126a6:	2302      	movs	r3, #2
 80126a8:	e034      	b.n	8012714 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	68fa      	ldr	r2, [r7, #12]
 80126ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	7c1b      	ldrb	r3, [r3, #16]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d115      	bne.n	80126e6 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80126ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126be:	2202      	movs	r2, #2
 80126c0:	2101      	movs	r1, #1
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	f005 fd1d 	bl	8018102 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	2201      	movs	r2, #1
 80126cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80126d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126d4:	2202      	movs	r2, #2
 80126d6:	2181      	movs	r1, #129	; 0x81
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f005 fd12 	bl	8018102 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	2201      	movs	r2, #1
 80126e2:	871a      	strh	r2, [r3, #56]	; 0x38
 80126e4:	e012      	b.n	801270c <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80126e6:	2340      	movs	r3, #64	; 0x40
 80126e8:	2202      	movs	r2, #2
 80126ea:	2101      	movs	r1, #1
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f005 fd08 	bl	8018102 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2201      	movs	r2, #1
 80126f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80126fa:	2340      	movs	r3, #64	; 0x40
 80126fc:	2202      	movs	r2, #2
 80126fe:	2181      	movs	r1, #129	; 0x81
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f005 fcfe 	bl	8018102 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2201      	movs	r2, #1
 801270a:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f000 f98e 	bl	8012a2e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8012712:	2300      	movs	r3, #0
}
 8012714:	4618      	mov	r0, r3
 8012716:	3710      	adds	r7, #16
 8012718:	46bd      	mov	sp, r7
 801271a:	bd80      	pop	{r7, pc}

0801271c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b082      	sub	sp, #8
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	460b      	mov	r3, r1
 8012726:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8012728:	2101      	movs	r1, #1
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f005 fd0f 	bl	801814e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2200      	movs	r2, #0
 8012734:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8012738:	2181      	movs	r1, #129	; 0x81
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f005 fd07 	bl	801814e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2200      	movs	r2, #0
 8012744:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	f000 f9cf 	bl	8012aea <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012752:	2b00      	cmp	r3, #0
 8012754:	d009      	beq.n	801276a <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801275c:	4618      	mov	r0, r3
 801275e:	f005 fe71 	bl	8018444 <free>
    pdev->pClassData = NULL;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2200      	movs	r2, #0
 8012766:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801276a:	2300      	movs	r3, #0
}
 801276c:	4618      	mov	r0, r3
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b086      	sub	sp, #24
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012784:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8012786:	2300      	movs	r3, #0
 8012788:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801278a:	2300      	movs	r3, #0
 801278c:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012796:	2b00      	cmp	r3, #0
 8012798:	d04d      	beq.n	8012836 <USBD_MSC_Setup+0xc2>
 801279a:	2b20      	cmp	r3, #32
 801279c:	f040 80c6 	bne.w	801292c <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	785b      	ldrb	r3, [r3, #1]
 80127a4:	2bfe      	cmp	r3, #254	; 0xfe
 80127a6:	d002      	beq.n	80127ae <USBD_MSC_Setup+0x3a>
 80127a8:	2bff      	cmp	r3, #255	; 0xff
 80127aa:	d024      	beq.n	80127f6 <USBD_MSC_Setup+0x82>
 80127ac:	e03b      	b.n	8012826 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	885b      	ldrh	r3, [r3, #2]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d118      	bne.n	80127e8 <USBD_MSC_Setup+0x74>
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	88db      	ldrh	r3, [r3, #6]
 80127ba:	2b01      	cmp	r3, #1
 80127bc:	d114      	bne.n	80127e8 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 80127be:	683b      	ldr	r3, [r7, #0]
 80127c0:	781b      	ldrb	r3, [r3, #0]
 80127c2:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	da0f      	bge.n	80127e8 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80127ce:	699b      	ldr	r3, [r3, #24]
 80127d0:	4798      	blx	r3
 80127d2:	4603      	mov	r3, r0
 80127d4:	461a      	mov	r2, r3
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	2201      	movs	r2, #1
 80127de:	4619      	mov	r1, r3
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f002 fdaa 	bl	801533a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80127e6:	e025      	b.n	8012834 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 80127e8:	6839      	ldr	r1, [r7, #0]
 80127ea:	6878      	ldr	r0, [r7, #4]
 80127ec:	f002 fd34 	bl	8015258 <USBD_CtlError>
        ret = USBD_FAIL;
 80127f0:	2303      	movs	r3, #3
 80127f2:	75fb      	strb	r3, [r7, #23]
      break;
 80127f4:	e01e      	b.n	8012834 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	885b      	ldrh	r3, [r3, #2]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d10c      	bne.n	8012818 <USBD_MSC_Setup+0xa4>
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	88db      	ldrh	r3, [r3, #6]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d108      	bne.n	8012818 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 8012806:	683b      	ldr	r3, [r7, #0]
 8012808:	781b      	ldrb	r3, [r3, #0]
 801280a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801280c:	2b00      	cmp	r3, #0
 801280e:	db03      	blt.n	8012818 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	f000 f947 	bl	8012aa4 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8012816:	e00d      	b.n	8012834 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8012818:	6839      	ldr	r1, [r7, #0]
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f002 fd1c 	bl	8015258 <USBD_CtlError>
        ret = USBD_FAIL;
 8012820:	2303      	movs	r3, #3
 8012822:	75fb      	strb	r3, [r7, #23]
      break;
 8012824:	e006      	b.n	8012834 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8012826:	6839      	ldr	r1, [r7, #0]
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f002 fd15 	bl	8015258 <USBD_CtlError>
      ret = USBD_FAIL;
 801282e:	2303      	movs	r3, #3
 8012830:	75fb      	strb	r3, [r7, #23]
      break;
 8012832:	bf00      	nop
    }
    break;
 8012834:	e081      	b.n	801293a <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8012836:	683b      	ldr	r3, [r7, #0]
 8012838:	785b      	ldrb	r3, [r3, #1]
 801283a:	2b0b      	cmp	r3, #11
 801283c:	d86d      	bhi.n	801291a <USBD_MSC_Setup+0x1a6>
 801283e:	a201      	add	r2, pc, #4	; (adr r2, 8012844 <USBD_MSC_Setup+0xd0>)
 8012840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012844:	08012875 	.word	0x08012875
 8012848:	080128eb 	.word	0x080128eb
 801284c:	0801291b 	.word	0x0801291b
 8012850:	0801291b 	.word	0x0801291b
 8012854:	0801291b 	.word	0x0801291b
 8012858:	0801291b 	.word	0x0801291b
 801285c:	0801291b 	.word	0x0801291b
 8012860:	0801291b 	.word	0x0801291b
 8012864:	0801291b 	.word	0x0801291b
 8012868:	0801291b 	.word	0x0801291b
 801286c:	0801289d 	.word	0x0801289d
 8012870:	080128c5 	.word	0x080128c5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801287a:	2b03      	cmp	r3, #3
 801287c:	d107      	bne.n	801288e <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801287e:	f107 030e 	add.w	r3, r7, #14
 8012882:	2202      	movs	r2, #2
 8012884:	4619      	mov	r1, r3
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f002 fd57 	bl	801533a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801288c:	e04d      	b.n	801292a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 801288e:	6839      	ldr	r1, [r7, #0]
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	f002 fce1 	bl	8015258 <USBD_CtlError>
        ret = USBD_FAIL;
 8012896:	2303      	movs	r3, #3
 8012898:	75fb      	strb	r3, [r7, #23]
      break;
 801289a:	e046      	b.n	801292a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128a2:	2b03      	cmp	r3, #3
 80128a4:	d107      	bne.n	80128b6 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	3304      	adds	r3, #4
 80128aa:	2201      	movs	r2, #1
 80128ac:	4619      	mov	r1, r3
 80128ae:	6878      	ldr	r0, [r7, #4]
 80128b0:	f002 fd43 	bl	801533a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80128b4:	e039      	b.n	801292a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80128b6:	6839      	ldr	r1, [r7, #0]
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f002 fccd 	bl	8015258 <USBD_CtlError>
        ret = USBD_FAIL;
 80128be:	2303      	movs	r3, #3
 80128c0:	75fb      	strb	r3, [r7, #23]
      break;
 80128c2:	e032      	b.n	801292a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128ca:	2b03      	cmp	r3, #3
 80128cc:	d106      	bne.n	80128dc <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	885b      	ldrh	r3, [r3, #2]
 80128d2:	b2db      	uxtb	r3, r3
 80128d4:	461a      	mov	r2, r3
 80128d6:	693b      	ldr	r3, [r7, #16]
 80128d8:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80128da:	e026      	b.n	801292a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80128dc:	6839      	ldr	r1, [r7, #0]
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f002 fcba 	bl	8015258 <USBD_CtlError>
        ret = USBD_FAIL;
 80128e4:	2303      	movs	r3, #3
 80128e6:	75fb      	strb	r3, [r7, #23]
      break;
 80128e8:	e01f      	b.n	801292a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128f0:	2b03      	cmp	r3, #3
 80128f2:	d119      	bne.n	8012928 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	885b      	ldrh	r3, [r3, #2]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d115      	bne.n	8012928 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	889b      	ldrh	r3, [r3, #4]
 8012900:	b2db      	uxtb	r3, r3
 8012902:	4619      	mov	r1, r3
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f005 fc41 	bl	801818c <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	889b      	ldrh	r3, [r3, #4]
 801290e:	b2db      	uxtb	r3, r3
 8012910:	4619      	mov	r1, r3
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f000 fa90 	bl	8012e38 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8012918:	e006      	b.n	8012928 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 801291a:	6839      	ldr	r1, [r7, #0]
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f002 fc9b 	bl	8015258 <USBD_CtlError>
      ret = USBD_FAIL;
 8012922:	2303      	movs	r3, #3
 8012924:	75fb      	strb	r3, [r7, #23]
      break;
 8012926:	e000      	b.n	801292a <USBD_MSC_Setup+0x1b6>
      break;
 8012928:	bf00      	nop
    }
    break;
 801292a:	e006      	b.n	801293a <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 801292c:	6839      	ldr	r1, [r7, #0]
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f002 fc92 	bl	8015258 <USBD_CtlError>
    ret = USBD_FAIL;
 8012934:	2303      	movs	r3, #3
 8012936:	75fb      	strb	r3, [r7, #23]
    break;
 8012938:	bf00      	nop
  }

  return (uint8_t)ret;
 801293a:	7dfb      	ldrb	r3, [r7, #23]
}
 801293c:	4618      	mov	r0, r3
 801293e:	3718      	adds	r7, #24
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}

08012944 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b082      	sub	sp, #8
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	460b      	mov	r3, r1
 801294e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8012950:	78fb      	ldrb	r3, [r7, #3]
 8012952:	4619      	mov	r1, r3
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f000 f8d9 	bl	8012b0c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801295a:	2300      	movs	r3, #0
}
 801295c:	4618      	mov	r0, r3
 801295e:	3708      	adds	r7, #8
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}

08012964 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b082      	sub	sp, #8
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
 801296c:	460b      	mov	r3, r1
 801296e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8012970:	78fb      	ldrb	r3, [r7, #3]
 8012972:	4619      	mov	r1, r3
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f000 f8fd 	bl	8012b74 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801297a:	2300      	movs	r3, #0
}
 801297c:	4618      	mov	r0, r3
 801297e:	3708      	adds	r7, #8
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}

08012984 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8012984:	b480      	push	{r7}
 8012986:	b083      	sub	sp, #12
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2220      	movs	r2, #32
 8012990:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8012992:	4b03      	ldr	r3, [pc, #12]	; (80129a0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8012994:	4618      	mov	r0, r3
 8012996:	370c      	adds	r7, #12
 8012998:	46bd      	mov	sp, r7
 801299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299e:	4770      	bx	lr
 80129a0:	24000054 	.word	0x24000054

080129a4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80129a4:	b480      	push	{r7}
 80129a6:	b083      	sub	sp, #12
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2220      	movs	r2, #32
 80129b0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80129b2:	4b03      	ldr	r3, [pc, #12]	; (80129c0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80129b4:	4618      	mov	r0, r3
 80129b6:	370c      	adds	r7, #12
 80129b8:	46bd      	mov	sp, r7
 80129ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129be:	4770      	bx	lr
 80129c0:	24000074 	.word	0x24000074

080129c4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80129c4:	b480      	push	{r7}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2220      	movs	r2, #32
 80129d0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80129d2:	4b03      	ldr	r3, [pc, #12]	; (80129e0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	370c      	adds	r7, #12
 80129d8:	46bd      	mov	sp, r7
 80129da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129de:	4770      	bx	lr
 80129e0:	24000094 	.word	0x24000094

080129e4 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80129e4:	b480      	push	{r7}
 80129e6:	b083      	sub	sp, #12
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	220a      	movs	r2, #10
 80129f0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80129f2:	4b03      	ldr	r3, [pc, #12]	; (8012a00 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80129f4:	4618      	mov	r0, r3
 80129f6:	370c      	adds	r7, #12
 80129f8:	46bd      	mov	sp, r7
 80129fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fe:	4770      	bx	lr
 8012a00:	240000b4 	.word	0x240000b4

08012a04 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8012a04:	b480      	push	{r7}
 8012a06:	b083      	sub	sp, #12
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d101      	bne.n	8012a18 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012a14:	2303      	movs	r3, #3
 8012a16:	e004      	b.n	8012a22 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	683a      	ldr	r2, [r7, #0]
 8012a1c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8012a20:	2300      	movs	r3, #0
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	370c      	adds	r7, #12
 8012a26:	46bd      	mov	sp, r7
 8012a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2c:	4770      	bx	lr

08012a2e <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8012a2e:	b580      	push	{r7, lr}
 8012a30:	b084      	sub	sp, #16
 8012a32:	af00      	add	r7, sp, #0
 8012a34:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a3c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	2200      	movs	r2, #0
 8012a42:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	2200      	movs	r2, #0
 8012a48:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8012a4a:	68fa      	ldr	r2, [r7, #12]
 8012a4c:	f248 0361 	movw	r3, #32865	; 0x8061
 8012a50:	4413      	add	r3, r2
 8012a52:	2200      	movs	r2, #0
 8012a54:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 8012a56:	68fa      	ldr	r2, [r7, #12]
 8012a58:	f248 0360 	movw	r3, #32864	; 0x8060
 8012a5c:	4413      	add	r3, r2
 8012a5e:	2200      	movs	r2, #0
 8012a60:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012a62:	68fa      	ldr	r2, [r7, #12]
 8012a64:	f248 0362 	movw	r3, #32866	; 0x8062
 8012a68:	4413      	add	r3, r2
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	2000      	movs	r0, #0
 8012a78:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8012a7a:	2101      	movs	r1, #1
 8012a7c:	6878      	ldr	r0, [r7, #4]
 8012a7e:	f005 fb85 	bl	801818c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8012a82:	2181      	movs	r1, #129	; 0x81
 8012a84:	6878      	ldr	r0, [r7, #4]
 8012a86:	f005 fb81 	bl	801818c <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	f248 0210 	movw	r2, #32784	; 0x8010
 8012a90:	441a      	add	r2, r3
 8012a92:	231f      	movs	r3, #31
 8012a94:	2101      	movs	r1, #1
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	f005 fc41 	bl	801831e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012a9c:	bf00      	nop
 8012a9e:	3710      	adds	r7, #16
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	bd80      	pop	{r7, pc}

08012aa4 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b084      	sub	sp, #16
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ab2:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	2201      	movs	r2, #1
 8012abe:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8012ac0:	2181      	movs	r1, #129	; 0x81
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f005 fba0 	bl	8018208 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8012ac8:	2101      	movs	r1, #1
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f005 fb9c 	bl	8018208 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	f248 0210 	movw	r2, #32784	; 0x8010
 8012ad6:	441a      	add	r2, r3
 8012ad8:	231f      	movs	r3, #31
 8012ada:	2101      	movs	r1, #1
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f005 fc1e 	bl	801831e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012ae2:	bf00      	nop
 8012ae4:	3710      	adds	r7, #16
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}

08012aea <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8012aea:	b480      	push	{r7}
 8012aec:	b085      	sub	sp, #20
 8012aee:	af00      	add	r7, sp, #0
 8012af0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012af8:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	2200      	movs	r2, #0
 8012afe:	721a      	strb	r2, [r3, #8]
}
 8012b00:	bf00      	nop
 8012b02:	3714      	adds	r7, #20
 8012b04:	46bd      	mov	sp, r7
 8012b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0a:	4770      	bx	lr

08012b0c <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b084      	sub	sp, #16
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	460b      	mov	r3, r1
 8012b16:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b1e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	7a1b      	ldrb	r3, [r3, #8]
 8012b24:	2b02      	cmp	r3, #2
 8012b26:	d004      	beq.n	8012b32 <MSC_BOT_DataIn+0x26>
 8012b28:	2b02      	cmp	r3, #2
 8012b2a:	db1c      	blt.n	8012b66 <MSC_BOT_DataIn+0x5a>
 8012b2c:	2b04      	cmp	r3, #4
 8012b2e:	dc1a      	bgt.n	8012b66 <MSC_BOT_DataIn+0x5a>
 8012b30:	e014      	b.n	8012b5c <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012b32:	68fa      	ldr	r2, [r7, #12]
 8012b34:	f248 031d 	movw	r3, #32797	; 0x801d
 8012b38:	4413      	add	r3, r2
 8012b3a:	7819      	ldrb	r1, [r3, #0]
 8012b3c:	68fa      	ldr	r2, [r7, #12]
 8012b3e:	f248 031f 	movw	r3, #32799	; 0x801f
 8012b42:	4413      	add	r3, r2
 8012b44:	461a      	mov	r2, r3
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f000 f99e 	bl	8012e88 <SCSI_ProcessCmd>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	da0b      	bge.n	8012b6a <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012b52:	2101      	movs	r1, #1
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f000 f90b 	bl	8012d70 <MSC_BOT_SendCSW>
    }
    break;
 8012b5a:	e006      	b.n	8012b6a <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012b5c:	2100      	movs	r1, #0
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f000 f906 	bl	8012d70 <MSC_BOT_SendCSW>
    break;
 8012b64:	e002      	b.n	8012b6c <MSC_BOT_DataIn+0x60>

  default:
    break;
 8012b66:	bf00      	nop
 8012b68:	e000      	b.n	8012b6c <MSC_BOT_DataIn+0x60>
    break;
 8012b6a:	bf00      	nop
  }
}
 8012b6c:	bf00      	nop
 8012b6e:	3710      	adds	r7, #16
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}

08012b74 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b084      	sub	sp, #16
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
 8012b7c:	460b      	mov	r3, r1
 8012b7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b86:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	7a1b      	ldrb	r3, [r3, #8]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d002      	beq.n	8012b96 <MSC_BOT_DataOut+0x22>
 8012b90:	2b01      	cmp	r3, #1
 8012b92:	d004      	beq.n	8012b9e <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8012b94:	e018      	b.n	8012bc8 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f000 f81a 	bl	8012bd0 <MSC_BOT_CBW_Decode>
      break;
 8012b9c:	e014      	b.n	8012bc8 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012b9e:	68fa      	ldr	r2, [r7, #12]
 8012ba0:	f248 031d 	movw	r3, #32797	; 0x801d
 8012ba4:	4413      	add	r3, r2
 8012ba6:	7819      	ldrb	r1, [r3, #0]
 8012ba8:	68fa      	ldr	r2, [r7, #12]
 8012baa:	f248 031f 	movw	r3, #32799	; 0x801f
 8012bae:	4413      	add	r3, r2
 8012bb0:	461a      	mov	r2, r3
 8012bb2:	6878      	ldr	r0, [r7, #4]
 8012bb4:	f000 f968 	bl	8012e88 <SCSI_ProcessCmd>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	da03      	bge.n	8012bc6 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012bbe:	2101      	movs	r1, #1
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f000 f8d5 	bl	8012d70 <MSC_BOT_SendCSW>
      break;
 8012bc6:	bf00      	nop
  }
}
 8012bc8:	bf00      	nop
 8012bca:	3710      	adds	r7, #16
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}

08012bd0 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b084      	sub	sp, #16
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012bde:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8012be0:	68fa      	ldr	r2, [r7, #12]
 8012be2:	f248 0314 	movw	r3, #32788	; 0x8014
 8012be6:	4413      	add	r3, r2
 8012be8:	681a      	ldr	r2, [r3, #0]
 8012bea:	68f9      	ldr	r1, [r7, #12]
 8012bec:	f248 0334 	movw	r3, #32820	; 0x8034
 8012bf0:	440b      	add	r3, r1
 8012bf2:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8012bf4:	68fa      	ldr	r2, [r7, #12]
 8012bf6:	f248 0318 	movw	r3, #32792	; 0x8018
 8012bfa:	4413      	add	r3, r2
 8012bfc:	681a      	ldr	r2, [r3, #0]
 8012bfe:	68f9      	ldr	r1, [r7, #12]
 8012c00:	f248 0338 	movw	r3, #32824	; 0x8038
 8012c04:	440b      	add	r3, r1
 8012c06:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8012c08:	2101      	movs	r1, #1
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f005 fba8 	bl	8018360 <USBD_LL_GetRxDataSize>
 8012c10:	4603      	mov	r3, r0
 8012c12:	2b1f      	cmp	r3, #31
 8012c14:	d11c      	bne.n	8012c50 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012c16:	68fa      	ldr	r2, [r7, #12]
 8012c18:	f248 0310 	movw	r3, #32784	; 0x8010
 8012c1c:	4413      	add	r3, r2
 8012c1e:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8012c20:	4a38      	ldr	r2, [pc, #224]	; (8012d04 <MSC_BOT_CBW_Decode+0x134>)
 8012c22:	4293      	cmp	r3, r2
 8012c24:	d114      	bne.n	8012c50 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012c26:	68fa      	ldr	r2, [r7, #12]
 8012c28:	f248 031d 	movw	r3, #32797	; 0x801d
 8012c2c:	4413      	add	r3, r2
 8012c2e:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012c30:	2b01      	cmp	r3, #1
 8012c32:	d80d      	bhi.n	8012c50 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012c34:	68fa      	ldr	r2, [r7, #12]
 8012c36:	f248 031e 	movw	r3, #32798	; 0x801e
 8012c3a:	4413      	add	r3, r2
 8012c3c:	781b      	ldrb	r3, [r3, #0]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d006      	beq.n	8012c50 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 8012c42:	68fa      	ldr	r2, [r7, #12]
 8012c44:	f248 031e 	movw	r3, #32798	; 0x801e
 8012c48:	4413      	add	r3, r2
 8012c4a:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012c4c:	2b10      	cmp	r3, #16
 8012c4e:	d910      	bls.n	8012c72 <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012c50:	68fa      	ldr	r2, [r7, #12]
 8012c52:	f248 031d 	movw	r3, #32797	; 0x801d
 8012c56:	4413      	add	r3, r2
 8012c58:	7819      	ldrb	r1, [r3, #0]
 8012c5a:	2320      	movs	r3, #32
 8012c5c:	2205      	movs	r2, #5
 8012c5e:	6878      	ldr	r0, [r7, #4]
 8012c60:	f000 fd36 	bl	80136d0 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2202      	movs	r2, #2
 8012c68:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f000 f8b2 	bl	8012dd4 <MSC_BOT_Abort>
 8012c70:	e044      	b.n	8012cfc <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012c72:	68fa      	ldr	r2, [r7, #12]
 8012c74:	f248 031d 	movw	r3, #32797	; 0x801d
 8012c78:	4413      	add	r3, r2
 8012c7a:	7819      	ldrb	r1, [r3, #0]
 8012c7c:	68fa      	ldr	r2, [r7, #12]
 8012c7e:	f248 031f 	movw	r3, #32799	; 0x801f
 8012c82:	4413      	add	r3, r2
 8012c84:	461a      	mov	r2, r3
 8012c86:	6878      	ldr	r0, [r7, #4]
 8012c88:	f000 f8fe 	bl	8012e88 <SCSI_ProcessCmd>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	da0c      	bge.n	8012cac <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	7a1b      	ldrb	r3, [r3, #8]
 8012c96:	2b05      	cmp	r3, #5
 8012c98:	d104      	bne.n	8012ca4 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012c9a:	2101      	movs	r1, #1
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f000 f867 	bl	8012d70 <MSC_BOT_SendCSW>
 8012ca2:	e02b      	b.n	8012cfc <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f000 f895 	bl	8012dd4 <MSC_BOT_Abort>
 8012caa:	e027      	b.n	8012cfc <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	7a1b      	ldrb	r3, [r3, #8]
 8012cb0:	2b02      	cmp	r3, #2
 8012cb2:	d022      	beq.n	8012cfa <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012cb8:	2b01      	cmp	r3, #1
 8012cba:	d01e      	beq.n	8012cfa <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012cc0:	2b03      	cmp	r3, #3
 8012cc2:	d01a      	beq.n	8012cfa <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d009      	beq.n	8012ce0 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	f103 0110 	add.w	r1, r3, #16
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	68db      	ldr	r3, [r3, #12]
 8012cd6:	461a      	mov	r2, r3
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f000 f815 	bl	8012d08 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8012cde:	e00d      	b.n	8012cfc <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	68db      	ldr	r3, [r3, #12]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d104      	bne.n	8012cf2 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012ce8:	2100      	movs	r1, #0
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	f000 f840 	bl	8012d70 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8012cf0:	e004      	b.n	8012cfc <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012cf2:	6878      	ldr	r0, [r7, #4]
 8012cf4:	f000 f86e 	bl	8012dd4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8012cf8:	e000      	b.n	8012cfc <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8012cfa:	bf00      	nop
    }
  }
}
 8012cfc:	3710      	adds	r7, #16
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}
 8012d02:	bf00      	nop
 8012d04:	43425355 	.word	0x43425355

08012d08 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b086      	sub	sp, #24
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	60f8      	str	r0, [r7, #12]
 8012d10:	60b9      	str	r1, [r7, #8]
 8012d12:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d1a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8012d1c:	697a      	ldr	r2, [r7, #20]
 8012d1e:	f248 0318 	movw	r3, #32792	; 0x8018
 8012d22:	4413      	add	r3, r2
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	687a      	ldr	r2, [r7, #4]
 8012d28:	4293      	cmp	r3, r2
 8012d2a:	bf28      	it	cs
 8012d2c:	4613      	movcs	r3, r2
 8012d2e:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8012d30:	697a      	ldr	r2, [r7, #20]
 8012d32:	f248 0338 	movw	r3, #32824	; 0x8038
 8012d36:	4413      	add	r3, r2
 8012d38:	681a      	ldr	r2, [r3, #0]
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	1ad2      	subs	r2, r2, r3
 8012d3e:	6979      	ldr	r1, [r7, #20]
 8012d40:	f248 0338 	movw	r3, #32824	; 0x8038
 8012d44:	440b      	add	r3, r1
 8012d46:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8012d48:	697a      	ldr	r2, [r7, #20]
 8012d4a:	f248 033c 	movw	r3, #32828	; 0x803c
 8012d4e:	4413      	add	r3, r2
 8012d50:	2200      	movs	r2, #0
 8012d52:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	2204      	movs	r2, #4
 8012d58:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8012d5a:	693b      	ldr	r3, [r7, #16]
 8012d5c:	68ba      	ldr	r2, [r7, #8]
 8012d5e:	2181      	movs	r1, #129	; 0x81
 8012d60:	68f8      	ldr	r0, [r7, #12]
 8012d62:	f005 fabb 	bl	80182dc <USBD_LL_Transmit>
}
 8012d66:	bf00      	nop
 8012d68:	3718      	adds	r7, #24
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
	...

08012d70 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b084      	sub	sp, #16
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	460b      	mov	r3, r1
 8012d7a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d82:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8012d84:	68fa      	ldr	r2, [r7, #12]
 8012d86:	f248 0330 	movw	r3, #32816	; 0x8030
 8012d8a:	4413      	add	r3, r2
 8012d8c:	4a10      	ldr	r2, [pc, #64]	; (8012dd0 <MSC_BOT_SendCSW+0x60>)
 8012d8e:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8012d90:	68fa      	ldr	r2, [r7, #12]
 8012d92:	f248 033c 	movw	r3, #32828	; 0x803c
 8012d96:	4413      	add	r3, r2
 8012d98:	78fa      	ldrb	r2, [r7, #3]
 8012d9a:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	2200      	movs	r2, #0
 8012da0:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	f248 0230 	movw	r2, #32816	; 0x8030
 8012da8:	441a      	add	r2, r3
 8012daa:	230d      	movs	r3, #13
 8012dac:	2181      	movs	r1, #129	; 0x81
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f005 fa94 	bl	80182dc <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	f248 0210 	movw	r2, #32784	; 0x8010
 8012dba:	441a      	add	r2, r3
 8012dbc:	231f      	movs	r3, #31
 8012dbe:	2101      	movs	r1, #1
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f005 faac 	bl	801831e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012dc6:	bf00      	nop
 8012dc8:	3710      	adds	r7, #16
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	53425355 	.word	0x53425355

08012dd4 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b084      	sub	sp, #16
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012de2:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8012de4:	68fa      	ldr	r2, [r7, #12]
 8012de6:	f248 031c 	movw	r3, #32796	; 0x801c
 8012dea:	4413      	add	r3, r2
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d10e      	bne.n	8012e10 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8012df2:	68fa      	ldr	r2, [r7, #12]
 8012df4:	f248 0318 	movw	r3, #32792	; 0x8018
 8012df8:	4413      	add	r3, r2
 8012dfa:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d007      	beq.n	8012e10 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d103      	bne.n	8012e10 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012e08:	2101      	movs	r1, #1
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f005 f9dd 	bl	80181ca <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012e10:	2181      	movs	r1, #129	; 0x81
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f005 f9d9 	bl	80181ca <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	7a5b      	ldrb	r3, [r3, #9]
 8012e1c:	2b02      	cmp	r3, #2
 8012e1e:	d107      	bne.n	8012e30 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012e20:	2181      	movs	r1, #129	; 0x81
 8012e22:	6878      	ldr	r0, [r7, #4]
 8012e24:	f005 f9d1 	bl	80181ca <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012e28:	2101      	movs	r1, #1
 8012e2a:	6878      	ldr	r0, [r7, #4]
 8012e2c:	f005 f9cd 	bl	80181ca <USBD_LL_StallEP>
  }
}
 8012e30:	bf00      	nop
 8012e32:	3710      	adds	r7, #16
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd80      	pop	{r7, pc}

08012e38 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b084      	sub	sp, #16
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	460b      	mov	r3, r1
 8012e42:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e4a:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	7a5b      	ldrb	r3, [r3, #9]
 8012e50:	2b02      	cmp	r3, #2
 8012e52:	d108      	bne.n	8012e66 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012e54:	2181      	movs	r1, #129	; 0x81
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f005 f9b7 	bl	80181ca <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012e5c:	2101      	movs	r1, #1
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f005 f9b3 	bl	80181ca <USBD_LL_StallEP>
 8012e64:	e00d      	b.n	8012e82 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8012e66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	da08      	bge.n	8012e80 <MSC_BOT_CplClrFeature+0x48>
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	7a5b      	ldrb	r3, [r3, #9]
 8012e72:	2b01      	cmp	r3, #1
 8012e74:	d004      	beq.n	8012e80 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012e76:	2101      	movs	r1, #1
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7ff ff79 	bl	8012d70 <MSC_BOT_SendCSW>
 8012e7e:	e000      	b.n	8012e82 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8012e80:	bf00      	nop
  }
}
 8012e82:	3710      	adds	r7, #16
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b086      	sub	sp, #24
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	60f8      	str	r0, [r7, #12]
 8012e90:	460b      	mov	r3, r1
 8012e92:	607a      	str	r2, [r7, #4]
 8012e94:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e9c:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	781b      	ldrb	r3, [r3, #0]
 8012ea2:	2b25      	cmp	r3, #37	; 0x25
 8012ea4:	d06e      	beq.n	8012f84 <SCSI_ProcessCmd+0xfc>
 8012ea6:	2b25      	cmp	r3, #37	; 0x25
 8012ea8:	dc11      	bgt.n	8012ece <SCSI_ProcessCmd+0x46>
 8012eaa:	2b1a      	cmp	r3, #26
 8012eac:	d04f      	beq.n	8012f4e <SCSI_ProcessCmd+0xc6>
 8012eae:	2b1a      	cmp	r3, #26
 8012eb0:	dc06      	bgt.n	8012ec0 <SCSI_ProcessCmd+0x38>
 8012eb2:	2b03      	cmp	r3, #3
 8012eb4:	d027      	beq.n	8012f06 <SCSI_ProcessCmd+0x7e>
 8012eb6:	2b12      	cmp	r3, #18
 8012eb8:	d02e      	beq.n	8012f18 <SCSI_ProcessCmd+0x90>
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d01a      	beq.n	8012ef4 <SCSI_ProcessCmd+0x6c>
 8012ebe:	e0a0      	b.n	8013002 <SCSI_ProcessCmd+0x17a>
 8012ec0:	2b1e      	cmp	r3, #30
 8012ec2:	d03b      	beq.n	8012f3c <SCSI_ProcessCmd+0xb4>
 8012ec4:	2b23      	cmp	r3, #35	; 0x23
 8012ec6:	d054      	beq.n	8012f72 <SCSI_ProcessCmd+0xea>
 8012ec8:	2b1b      	cmp	r3, #27
 8012eca:	d02e      	beq.n	8012f2a <SCSI_ProcessCmd+0xa2>
 8012ecc:	e099      	b.n	8013002 <SCSI_ProcessCmd+0x17a>
 8012ece:	2b5a      	cmp	r3, #90	; 0x5a
 8012ed0:	d046      	beq.n	8012f60 <SCSI_ProcessCmd+0xd8>
 8012ed2:	2b5a      	cmp	r3, #90	; 0x5a
 8012ed4:	dc07      	bgt.n	8012ee6 <SCSI_ProcessCmd+0x5e>
 8012ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8012ed8:	d078      	beq.n	8012fcc <SCSI_ProcessCmd+0x144>
 8012eda:	2b2f      	cmp	r3, #47	; 0x2f
 8012edc:	f000 8088 	beq.w	8012ff0 <SCSI_ProcessCmd+0x168>
 8012ee0:	2b28      	cmp	r3, #40	; 0x28
 8012ee2:	d061      	beq.n	8012fa8 <SCSI_ProcessCmd+0x120>
 8012ee4:	e08d      	b.n	8013002 <SCSI_ProcessCmd+0x17a>
 8012ee6:	2ba8      	cmp	r3, #168	; 0xa8
 8012ee8:	d067      	beq.n	8012fba <SCSI_ProcessCmd+0x132>
 8012eea:	2baa      	cmp	r3, #170	; 0xaa
 8012eec:	d077      	beq.n	8012fde <SCSI_ProcessCmd+0x156>
 8012eee:	2b9e      	cmp	r3, #158	; 0x9e
 8012ef0:	d051      	beq.n	8012f96 <SCSI_ProcessCmd+0x10e>
 8012ef2:	e086      	b.n	8013002 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8012ef4:	7afb      	ldrb	r3, [r7, #11]
 8012ef6:	687a      	ldr	r2, [r7, #4]
 8012ef8:	4619      	mov	r1, r3
 8012efa:	68f8      	ldr	r0, [r7, #12]
 8012efc:	f000 f893 	bl	8013026 <SCSI_TestUnitReady>
 8012f00:	4603      	mov	r3, r0
 8012f02:	75fb      	strb	r3, [r7, #23]
    break;
 8012f04:	e089      	b.n	801301a <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8012f06:	7afb      	ldrb	r3, [r7, #11]
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	4619      	mov	r1, r3
 8012f0c:	68f8      	ldr	r0, [r7, #12]
 8012f0e:	f000 fb47 	bl	80135a0 <SCSI_RequestSense>
 8012f12:	4603      	mov	r3, r0
 8012f14:	75fb      	strb	r3, [r7, #23]
    break;
 8012f16:	e080      	b.n	801301a <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8012f18:	7afb      	ldrb	r3, [r7, #11]
 8012f1a:	687a      	ldr	r2, [r7, #4]
 8012f1c:	4619      	mov	r1, r3
 8012f1e:	68f8      	ldr	r0, [r7, #12]
 8012f20:	f000 f8d2 	bl	80130c8 <SCSI_Inquiry>
 8012f24:	4603      	mov	r3, r0
 8012f26:	75fb      	strb	r3, [r7, #23]
    break;
 8012f28:	e077      	b.n	801301a <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8012f2a:	7afb      	ldrb	r3, [r7, #11]
 8012f2c:	687a      	ldr	r2, [r7, #4]
 8012f2e:	4619      	mov	r1, r3
 8012f30:	68f8      	ldr	r0, [r7, #12]
 8012f32:	f000 fc27 	bl	8013784 <SCSI_StartStopUnit>
 8012f36:	4603      	mov	r3, r0
 8012f38:	75fb      	strb	r3, [r7, #23]
    break;
 8012f3a:	e06e      	b.n	801301a <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8012f3c:	7afb      	ldrb	r3, [r7, #11]
 8012f3e:	687a      	ldr	r2, [r7, #4]
 8012f40:	4619      	mov	r1, r3
 8012f42:	68f8      	ldr	r0, [r7, #12]
 8012f44:	f000 fc71 	bl	801382a <SCSI_AllowPreventRemovable>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	75fb      	strb	r3, [r7, #23]
    break;
 8012f4c:	e065      	b.n	801301a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8012f4e:	7afb      	ldrb	r3, [r7, #11]
 8012f50:	687a      	ldr	r2, [r7, #4]
 8012f52:	4619      	mov	r1, r3
 8012f54:	68f8      	ldr	r0, [r7, #12]
 8012f56:	f000 fad7 	bl	8013508 <SCSI_ModeSense6>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	75fb      	strb	r3, [r7, #23]
    break;
 8012f5e:	e05c      	b.n	801301a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8012f60:	7afb      	ldrb	r3, [r7, #11]
 8012f62:	687a      	ldr	r2, [r7, #4]
 8012f64:	4619      	mov	r1, r3
 8012f66:	68f8      	ldr	r0, [r7, #12]
 8012f68:	f000 faf4 	bl	8013554 <SCSI_ModeSense10>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	75fb      	strb	r3, [r7, #23]
    break;
 8012f70:	e053      	b.n	801301a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8012f72:	7afb      	ldrb	r3, [r7, #11]
 8012f74:	687a      	ldr	r2, [r7, #4]
 8012f76:	4619      	mov	r1, r3
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f000 fa56 	bl	801342a <SCSI_ReadFormatCapacity>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	75fb      	strb	r3, [r7, #23]
    break;
 8012f82:	e04a      	b.n	801301a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8012f84:	7afb      	ldrb	r3, [r7, #11]
 8012f86:	687a      	ldr	r2, [r7, #4]
 8012f88:	4619      	mov	r1, r3
 8012f8a:	68f8      	ldr	r0, [r7, #12]
 8012f8c:	f000 f910 	bl	80131b0 <SCSI_ReadCapacity10>
 8012f90:	4603      	mov	r3, r0
 8012f92:	75fb      	strb	r3, [r7, #23]
    break;
 8012f94:	e041      	b.n	801301a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8012f96:	7afb      	ldrb	r3, [r7, #11]
 8012f98:	687a      	ldr	r2, [r7, #4]
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	68f8      	ldr	r0, [r7, #12]
 8012f9e:	f000 f98b 	bl	80132b8 <SCSI_ReadCapacity16>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	75fb      	strb	r3, [r7, #23]
    break;
 8012fa6:	e038      	b.n	801301a <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8012fa8:	7afb      	ldrb	r3, [r7, #11]
 8012faa:	687a      	ldr	r2, [r7, #4]
 8012fac:	4619      	mov	r1, r3
 8012fae:	68f8      	ldr	r0, [r7, #12]
 8012fb0:	f000 fc62 	bl	8013878 <SCSI_Read10>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	75fb      	strb	r3, [r7, #23]
    break;
 8012fb8:	e02f      	b.n	801301a <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8012fba:	7afb      	ldrb	r3, [r7, #11]
 8012fbc:	687a      	ldr	r2, [r7, #4]
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	68f8      	ldr	r0, [r7, #12]
 8012fc2:	f000 fd0b 	bl	80139dc <SCSI_Read12>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	75fb      	strb	r3, [r7, #23]
    break;
 8012fca:	e026      	b.n	801301a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8012fcc:	7afb      	ldrb	r3, [r7, #11]
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	4619      	mov	r1, r3
 8012fd2:	68f8      	ldr	r0, [r7, #12]
 8012fd4:	f000 fdbe 	bl	8013b54 <SCSI_Write10>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	75fb      	strb	r3, [r7, #23]
    break;
 8012fdc:	e01d      	b.n	801301a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8012fde:	7afb      	ldrb	r3, [r7, #11]
 8012fe0:	687a      	ldr	r2, [r7, #4]
 8012fe2:	4619      	mov	r1, r3
 8012fe4:	68f8      	ldr	r0, [r7, #12]
 8012fe6:	f000 fe8d 	bl	8013d04 <SCSI_Write12>
 8012fea:	4603      	mov	r3, r0
 8012fec:	75fb      	strb	r3, [r7, #23]
    break;
 8012fee:	e014      	b.n	801301a <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8012ff0:	7afb      	ldrb	r3, [r7, #11]
 8012ff2:	687a      	ldr	r2, [r7, #4]
 8012ff4:	4619      	mov	r1, r3
 8012ff6:	68f8      	ldr	r0, [r7, #12]
 8012ff8:	f000 ff6c 	bl	8013ed4 <SCSI_Verify10>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	75fb      	strb	r3, [r7, #23]
    break;
 8013000:	e00b      	b.n	801301a <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8013002:	7af9      	ldrb	r1, [r7, #11]
 8013004:	2320      	movs	r3, #32
 8013006:	2205      	movs	r2, #5
 8013008:	68f8      	ldr	r0, [r7, #12]
 801300a:	f000 fb61 	bl	80136d0 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801300e:	693b      	ldr	r3, [r7, #16]
 8013010:	2202      	movs	r2, #2
 8013012:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8013014:	23ff      	movs	r3, #255	; 0xff
 8013016:	75fb      	strb	r3, [r7, #23]
    break;
 8013018:	bf00      	nop
  }

  return ret;
 801301a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801301e:	4618      	mov	r0, r3
 8013020:	3718      	adds	r7, #24
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}

08013026 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013026:	b580      	push	{r7, lr}
 8013028:	b086      	sub	sp, #24
 801302a:	af00      	add	r7, sp, #0
 801302c:	60f8      	str	r0, [r7, #12]
 801302e:	460b      	mov	r3, r1
 8013030:	607a      	str	r2, [r7, #4]
 8013032:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801303a:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801303c:	697a      	ldr	r2, [r7, #20]
 801303e:	f248 0318 	movw	r3, #32792	; 0x8018
 8013042:	4413      	add	r3, r2
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d00c      	beq.n	8013064 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801304a:	697a      	ldr	r2, [r7, #20]
 801304c:	f248 031d 	movw	r3, #32797	; 0x801d
 8013050:	4413      	add	r3, r2
 8013052:	7819      	ldrb	r1, [r3, #0]
 8013054:	2320      	movs	r3, #32
 8013056:	2205      	movs	r2, #5
 8013058:	68f8      	ldr	r0, [r7, #12]
 801305a:	f000 fb39 	bl	80136d0 <SCSI_SenseCode>

    return -1;
 801305e:	f04f 33ff 	mov.w	r3, #4294967295
 8013062:	e02c      	b.n	80130be <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8013064:	697a      	ldr	r2, [r7, #20]
 8013066:	f248 0362 	movw	r3, #32866	; 0x8062
 801306a:	4413      	add	r3, r2
 801306c:	781b      	ldrb	r3, [r3, #0]
 801306e:	2b02      	cmp	r3, #2
 8013070:	d10b      	bne.n	801308a <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013072:	7af9      	ldrb	r1, [r7, #11]
 8013074:	233a      	movs	r3, #58	; 0x3a
 8013076:	2202      	movs	r2, #2
 8013078:	68f8      	ldr	r0, [r7, #12]
 801307a:	f000 fb29 	bl	80136d0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	2205      	movs	r2, #5
 8013082:	721a      	strb	r2, [r3, #8]
    return -1;
 8013084:	f04f 33ff 	mov.w	r3, #4294967295
 8013088:	e019      	b.n	80130be <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013090:	689b      	ldr	r3, [r3, #8]
 8013092:	7afa      	ldrb	r2, [r7, #11]
 8013094:	4610      	mov	r0, r2
 8013096:	4798      	blx	r3
 8013098:	4603      	mov	r3, r0
 801309a:	2b00      	cmp	r3, #0
 801309c:	d00b      	beq.n	80130b6 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801309e:	7af9      	ldrb	r1, [r7, #11]
 80130a0:	233a      	movs	r3, #58	; 0x3a
 80130a2:	2202      	movs	r2, #2
 80130a4:	68f8      	ldr	r0, [r7, #12]
 80130a6:	f000 fb13 	bl	80136d0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	2205      	movs	r2, #5
 80130ae:	721a      	strb	r2, [r3, #8]

    return -1;
 80130b0:	f04f 33ff 	mov.w	r3, #4294967295
 80130b4:	e003      	b.n	80130be <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	2200      	movs	r2, #0
 80130ba:	60da      	str	r2, [r3, #12]

  return 0;
 80130bc:	2300      	movs	r3, #0
}
 80130be:	4618      	mov	r0, r3
 80130c0:	3718      	adds	r7, #24
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd80      	pop	{r7, pc}
	...

080130c8 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b088      	sub	sp, #32
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	60f8      	str	r0, [r7, #12]
 80130d0:	460b      	mov	r3, r1
 80130d2:	607a      	str	r2, [r7, #4]
 80130d4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80130dc:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 80130de:	69ba      	ldr	r2, [r7, #24]
 80130e0:	f248 0318 	movw	r3, #32792	; 0x8018
 80130e4:	4413      	add	r3, r2
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d10c      	bne.n	8013106 <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80130ec:	69ba      	ldr	r2, [r7, #24]
 80130ee:	f248 031d 	movw	r3, #32797	; 0x801d
 80130f2:	4413      	add	r3, r2
 80130f4:	7819      	ldrb	r1, [r3, #0]
 80130f6:	2320      	movs	r3, #32
 80130f8:	2205      	movs	r2, #5
 80130fa:	68f8      	ldr	r0, [r7, #12]
 80130fc:	f000 fae8 	bl	80136d0 <SCSI_SenseCode>
    return -1;
 8013100:	f04f 33ff 	mov.w	r3, #4294967295
 8013104:	e04c      	b.n	80131a0 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	3301      	adds	r3, #1
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	f003 0301 	and.w	r3, r3, #1
 8013110:	2b00      	cmp	r3, #0
 8013112:	d022      	beq.n	801315a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	3302      	adds	r3, #2
 8013118:	781b      	ldrb	r3, [r3, #0]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d105      	bne.n	801312a <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801311e:	2206      	movs	r2, #6
 8013120:	4921      	ldr	r1, [pc, #132]	; (80131a8 <SCSI_Inquiry+0xe0>)
 8013122:	69b8      	ldr	r0, [r7, #24]
 8013124:	f001 f862 	bl	80141ec <SCSI_UpdateBotData>
 8013128:	e039      	b.n	801319e <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	3302      	adds	r3, #2
 801312e:	781b      	ldrb	r3, [r3, #0]
 8013130:	2b80      	cmp	r3, #128	; 0x80
 8013132:	d105      	bne.n	8013140 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8013134:	2208      	movs	r2, #8
 8013136:	491d      	ldr	r1, [pc, #116]	; (80131ac <SCSI_Inquiry+0xe4>)
 8013138:	69b8      	ldr	r0, [r7, #24]
 801313a:	f001 f857 	bl	80141ec <SCSI_UpdateBotData>
 801313e:	e02e      	b.n	801319e <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8013140:	69ba      	ldr	r2, [r7, #24]
 8013142:	f248 031d 	movw	r3, #32797	; 0x801d
 8013146:	4413      	add	r3, r2
 8013148:	7819      	ldrb	r1, [r3, #0]
 801314a:	2324      	movs	r3, #36	; 0x24
 801314c:	2205      	movs	r2, #5
 801314e:	68f8      	ldr	r0, [r7, #12]
 8013150:	f000 fabe 	bl	80136d0 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8013154:	f04f 33ff 	mov.w	r3, #4294967295
 8013158:	e022      	b.n	80131a0 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013160:	69d9      	ldr	r1, [r3, #28]
 8013162:	7afa      	ldrb	r2, [r7, #11]
 8013164:	4613      	mov	r3, r2
 8013166:	00db      	lsls	r3, r3, #3
 8013168:	4413      	add	r3, r2
 801316a:	009b      	lsls	r3, r3, #2
 801316c:	440b      	add	r3, r1
 801316e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8013170:	697b      	ldr	r3, [r7, #20]
 8013172:	3304      	adds	r3, #4
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	b29b      	uxth	r3, r3
 8013178:	3305      	adds	r3, #5
 801317a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	3304      	adds	r3, #4
 8013180:	781b      	ldrb	r3, [r3, #0]
 8013182:	b29b      	uxth	r3, r3
 8013184:	8bfa      	ldrh	r2, [r7, #30]
 8013186:	429a      	cmp	r2, r3
 8013188:	d303      	bcc.n	8013192 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	3304      	adds	r3, #4
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8013192:	8bfb      	ldrh	r3, [r7, #30]
 8013194:	461a      	mov	r2, r3
 8013196:	6979      	ldr	r1, [r7, #20]
 8013198:	69b8      	ldr	r0, [r7, #24]
 801319a:	f001 f827 	bl	80141ec <SCSI_UpdateBotData>
  }

  return 0;
 801319e:	2300      	movs	r3, #0
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	3720      	adds	r7, #32
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}
 80131a8:	240000c0 	.word	0x240000c0
 80131ac:	240000c8 	.word	0x240000c8

080131b0 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80131b0:	b590      	push	{r4, r7, lr}
 80131b2:	b087      	sub	sp, #28
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	60f8      	str	r0, [r7, #12]
 80131b8:	460b      	mov	r3, r1
 80131ba:	607a      	str	r2, [r7, #4]
 80131bc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80131c4:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80131cc:	685c      	ldr	r4, [r3, #4]
 80131ce:	697a      	ldr	r2, [r7, #20]
 80131d0:	f248 0368 	movw	r3, #32872	; 0x8068
 80131d4:	4413      	add	r3, r2
 80131d6:	6979      	ldr	r1, [r7, #20]
 80131d8:	f248 0264 	movw	r2, #32868	; 0x8064
 80131dc:	440a      	add	r2, r1
 80131de:	7af8      	ldrb	r0, [r7, #11]
 80131e0:	4619      	mov	r1, r3
 80131e2:	47a0      	blx	r4
 80131e4:	4603      	mov	r3, r0
 80131e6:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80131e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d106      	bne.n	80131fe <SCSI_ReadCapacity10+0x4e>
 80131f0:	697a      	ldr	r2, [r7, #20]
 80131f2:	f248 0362 	movw	r3, #32866	; 0x8062
 80131f6:	4413      	add	r3, r2
 80131f8:	781b      	ldrb	r3, [r3, #0]
 80131fa:	2b02      	cmp	r3, #2
 80131fc:	d108      	bne.n	8013210 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80131fe:	7af9      	ldrb	r1, [r7, #11]
 8013200:	233a      	movs	r3, #58	; 0x3a
 8013202:	2202      	movs	r2, #2
 8013204:	68f8      	ldr	r0, [r7, #12]
 8013206:	f000 fa63 	bl	80136d0 <SCSI_SenseCode>
    return -1;
 801320a:	f04f 33ff 	mov.w	r3, #4294967295
 801320e:	e04f      	b.n	80132b0 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8013210:	697a      	ldr	r2, [r7, #20]
 8013212:	f248 0368 	movw	r3, #32872	; 0x8068
 8013216:	4413      	add	r3, r2
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	3b01      	subs	r3, #1
 801321c:	0e1b      	lsrs	r3, r3, #24
 801321e:	b2da      	uxtb	r2, r3
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8013224:	697a      	ldr	r2, [r7, #20]
 8013226:	f248 0368 	movw	r3, #32872	; 0x8068
 801322a:	4413      	add	r3, r2
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	3b01      	subs	r3, #1
 8013230:	0c1b      	lsrs	r3, r3, #16
 8013232:	b2da      	uxtb	r2, r3
 8013234:	697b      	ldr	r3, [r7, #20]
 8013236:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8013238:	697a      	ldr	r2, [r7, #20]
 801323a:	f248 0368 	movw	r3, #32872	; 0x8068
 801323e:	4413      	add	r3, r2
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	3b01      	subs	r3, #1
 8013244:	0a1b      	lsrs	r3, r3, #8
 8013246:	b2da      	uxtb	r2, r3
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801324c:	697a      	ldr	r2, [r7, #20]
 801324e:	f248 0368 	movw	r3, #32872	; 0x8068
 8013252:	4413      	add	r3, r2
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	b2db      	uxtb	r3, r3
 8013258:	3b01      	subs	r3, #1
 801325a:	b2da      	uxtb	r2, r3
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8013260:	697a      	ldr	r2, [r7, #20]
 8013262:	f248 0364 	movw	r3, #32868	; 0x8064
 8013266:	4413      	add	r3, r2
 8013268:	881b      	ldrh	r3, [r3, #0]
 801326a:	161b      	asrs	r3, r3, #24
 801326c:	b2da      	uxtb	r2, r3
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8013272:	697a      	ldr	r2, [r7, #20]
 8013274:	f248 0364 	movw	r3, #32868	; 0x8064
 8013278:	4413      	add	r3, r2
 801327a:	881b      	ldrh	r3, [r3, #0]
 801327c:	141b      	asrs	r3, r3, #16
 801327e:	b2da      	uxtb	r2, r3
 8013280:	697b      	ldr	r3, [r7, #20]
 8013282:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8013284:	697a      	ldr	r2, [r7, #20]
 8013286:	f248 0364 	movw	r3, #32868	; 0x8064
 801328a:	4413      	add	r3, r2
 801328c:	881b      	ldrh	r3, [r3, #0]
 801328e:	0a1b      	lsrs	r3, r3, #8
 8013290:	b29b      	uxth	r3, r3
 8013292:	b2da      	uxtb	r2, r3
 8013294:	697b      	ldr	r3, [r7, #20]
 8013296:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8013298:	697a      	ldr	r2, [r7, #20]
 801329a:	f248 0364 	movw	r3, #32868	; 0x8064
 801329e:	4413      	add	r3, r2
 80132a0:	881b      	ldrh	r3, [r3, #0]
 80132a2:	b2da      	uxtb	r2, r3
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	2208      	movs	r2, #8
 80132ac:	60da      	str	r2, [r3, #12]

  return 0;
 80132ae:	2300      	movs	r3, #0

}
 80132b0:	4618      	mov	r0, r3
 80132b2:	371c      	adds	r7, #28
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bd90      	pop	{r4, r7, pc}

080132b8 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80132b8:	b590      	push	{r4, r7, lr}
 80132ba:	b089      	sub	sp, #36	; 0x24
 80132bc:	af00      	add	r7, sp, #0
 80132be:	60f8      	str	r0, [r7, #12]
 80132c0:	460b      	mov	r3, r1
 80132c2:	607a      	str	r2, [r7, #4]
 80132c4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80132cc:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80132d4:	685c      	ldr	r4, [r3, #4]
 80132d6:	69ba      	ldr	r2, [r7, #24]
 80132d8:	f248 0368 	movw	r3, #32872	; 0x8068
 80132dc:	4413      	add	r3, r2
 80132de:	69b9      	ldr	r1, [r7, #24]
 80132e0:	f248 0264 	movw	r2, #32868	; 0x8064
 80132e4:	440a      	add	r2, r1
 80132e6:	7af8      	ldrb	r0, [r7, #11]
 80132e8:	4619      	mov	r1, r3
 80132ea:	47a0      	blx	r4
 80132ec:	4603      	mov	r3, r0
 80132ee:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80132f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d106      	bne.n	8013306 <SCSI_ReadCapacity16+0x4e>
 80132f8:	69ba      	ldr	r2, [r7, #24]
 80132fa:	f248 0362 	movw	r3, #32866	; 0x8062
 80132fe:	4413      	add	r3, r2
 8013300:	781b      	ldrb	r3, [r3, #0]
 8013302:	2b02      	cmp	r3, #2
 8013304:	d108      	bne.n	8013318 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013306:	7af9      	ldrb	r1, [r7, #11]
 8013308:	233a      	movs	r3, #58	; 0x3a
 801330a:	2202      	movs	r2, #2
 801330c:	68f8      	ldr	r0, [r7, #12]
 801330e:	f000 f9df 	bl	80136d0 <SCSI_SenseCode>
    return -1;
 8013312:	f04f 33ff 	mov.w	r3, #4294967295
 8013316:	e084      	b.n	8013422 <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	330a      	adds	r3, #10
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	330b      	adds	r3, #11
 8013324:	781b      	ldrb	r3, [r3, #0]
 8013326:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013328:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	330c      	adds	r3, #12
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8013332:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8013334:	687a      	ldr	r2, [r7, #4]
 8013336:	320d      	adds	r2, #13
 8013338:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801333a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801333c:	69bb      	ldr	r3, [r7, #24]
 801333e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8013340:	2300      	movs	r3, #0
 8013342:	77fb      	strb	r3, [r7, #31]
 8013344:	e007      	b.n	8013356 <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8013346:	7ffb      	ldrb	r3, [r7, #31]
 8013348:	69ba      	ldr	r2, [r7, #24]
 801334a:	4413      	add	r3, r2
 801334c:	2200      	movs	r2, #0
 801334e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8013350:	7ffb      	ldrb	r3, [r7, #31]
 8013352:	3301      	adds	r3, #1
 8013354:	77fb      	strb	r3, [r7, #31]
 8013356:	7ffa      	ldrb	r2, [r7, #31]
 8013358:	69bb      	ldr	r3, [r7, #24]
 801335a:	68db      	ldr	r3, [r3, #12]
 801335c:	429a      	cmp	r2, r3
 801335e:	d3f2      	bcc.n	8013346 <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8013360:	69ba      	ldr	r2, [r7, #24]
 8013362:	f248 0368 	movw	r3, #32872	; 0x8068
 8013366:	4413      	add	r3, r2
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	3b01      	subs	r3, #1
 801336c:	0e1b      	lsrs	r3, r3, #24
 801336e:	b2da      	uxtb	r2, r3
 8013370:	69bb      	ldr	r3, [r7, #24]
 8013372:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8013374:	69ba      	ldr	r2, [r7, #24]
 8013376:	f248 0368 	movw	r3, #32872	; 0x8068
 801337a:	4413      	add	r3, r2
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	3b01      	subs	r3, #1
 8013380:	0c1b      	lsrs	r3, r3, #16
 8013382:	b2da      	uxtb	r2, r3
 8013384:	69bb      	ldr	r3, [r7, #24]
 8013386:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8013388:	69ba      	ldr	r2, [r7, #24]
 801338a:	f248 0368 	movw	r3, #32872	; 0x8068
 801338e:	4413      	add	r3, r2
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	3b01      	subs	r3, #1
 8013394:	0a1b      	lsrs	r3, r3, #8
 8013396:	b2da      	uxtb	r2, r3
 8013398:	69bb      	ldr	r3, [r7, #24]
 801339a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801339c:	69ba      	ldr	r2, [r7, #24]
 801339e:	f248 0368 	movw	r3, #32872	; 0x8068
 80133a2:	4413      	add	r3, r2
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	b2db      	uxtb	r3, r3
 80133a8:	3b01      	subs	r3, #1
 80133aa:	b2da      	uxtb	r2, r3
 80133ac:	69bb      	ldr	r3, [r7, #24]
 80133ae:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80133b0:	69ba      	ldr	r2, [r7, #24]
 80133b2:	f248 0364 	movw	r3, #32868	; 0x8064
 80133b6:	4413      	add	r3, r2
 80133b8:	881b      	ldrh	r3, [r3, #0]
 80133ba:	161b      	asrs	r3, r3, #24
 80133bc:	b2da      	uxtb	r2, r3
 80133be:	69bb      	ldr	r3, [r7, #24]
 80133c0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80133c2:	69ba      	ldr	r2, [r7, #24]
 80133c4:	f248 0364 	movw	r3, #32868	; 0x8064
 80133c8:	4413      	add	r3, r2
 80133ca:	881b      	ldrh	r3, [r3, #0]
 80133cc:	141b      	asrs	r3, r3, #16
 80133ce:	b2da      	uxtb	r2, r3
 80133d0:	69bb      	ldr	r3, [r7, #24]
 80133d2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80133d4:	69ba      	ldr	r2, [r7, #24]
 80133d6:	f248 0364 	movw	r3, #32868	; 0x8064
 80133da:	4413      	add	r3, r2
 80133dc:	881b      	ldrh	r3, [r3, #0]
 80133de:	0a1b      	lsrs	r3, r3, #8
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	b2da      	uxtb	r2, r3
 80133e4:	69bb      	ldr	r3, [r7, #24]
 80133e6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80133e8:	69ba      	ldr	r2, [r7, #24]
 80133ea:	f248 0364 	movw	r3, #32868	; 0x8064
 80133ee:	4413      	add	r3, r2
 80133f0:	881b      	ldrh	r3, [r3, #0]
 80133f2:	b2da      	uxtb	r2, r3
 80133f4:	69bb      	ldr	r3, [r7, #24]
 80133f6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	330a      	adds	r3, #10
 80133fc:	781b      	ldrb	r3, [r3, #0]
 80133fe:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	330b      	adds	r3, #11
 8013404:	781b      	ldrb	r3, [r3, #0]
 8013406:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013408:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	330c      	adds	r3, #12
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8013412:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8013414:	687a      	ldr	r2, [r7, #4]
 8013416:	320d      	adds	r2, #13
 8013418:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801341a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801341c:	69bb      	ldr	r3, [r7, #24]
 801341e:	60da      	str	r2, [r3, #12]

  return 0;
 8013420:	2300      	movs	r3, #0
}
 8013422:	4618      	mov	r0, r3
 8013424:	3724      	adds	r7, #36	; 0x24
 8013426:	46bd      	mov	sp, r7
 8013428:	bd90      	pop	{r4, r7, pc}

0801342a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801342a:	b580      	push	{r7, lr}
 801342c:	b088      	sub	sp, #32
 801342e:	af00      	add	r7, sp, #0
 8013430:	60f8      	str	r0, [r7, #12]
 8013432:	460b      	mov	r3, r1
 8013434:	607a      	str	r2, [r7, #4]
 8013436:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801343e:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013446:	685b      	ldr	r3, [r3, #4]
 8013448:	f107 0214 	add.w	r2, r7, #20
 801344c:	f107 0110 	add.w	r1, r7, #16
 8013450:	7af8      	ldrb	r0, [r7, #11]
 8013452:	4798      	blx	r3
 8013454:	4603      	mov	r3, r0
 8013456:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8013458:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d106      	bne.n	801346e <SCSI_ReadFormatCapacity+0x44>
 8013460:	69ba      	ldr	r2, [r7, #24]
 8013462:	f248 0362 	movw	r3, #32866	; 0x8062
 8013466:	4413      	add	r3, r2
 8013468:	781b      	ldrb	r3, [r3, #0]
 801346a:	2b02      	cmp	r3, #2
 801346c:	d108      	bne.n	8013480 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801346e:	7af9      	ldrb	r1, [r7, #11]
 8013470:	233a      	movs	r3, #58	; 0x3a
 8013472:	2202      	movs	r2, #2
 8013474:	68f8      	ldr	r0, [r7, #12]
 8013476:	f000 f92b 	bl	80136d0 <SCSI_SenseCode>
    return -1;
 801347a:	f04f 33ff 	mov.w	r3, #4294967295
 801347e:	e03e      	b.n	80134fe <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 8013480:	2300      	movs	r3, #0
 8013482:	83fb      	strh	r3, [r7, #30]
 8013484:	e007      	b.n	8013496 <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8013486:	8bfb      	ldrh	r3, [r7, #30]
 8013488:	69ba      	ldr	r2, [r7, #24]
 801348a:	4413      	add	r3, r2
 801348c:	2200      	movs	r2, #0
 801348e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8013490:	8bfb      	ldrh	r3, [r7, #30]
 8013492:	3301      	adds	r3, #1
 8013494:	83fb      	strh	r3, [r7, #30]
 8013496:	8bfb      	ldrh	r3, [r7, #30]
 8013498:	2b0b      	cmp	r3, #11
 801349a:	d9f4      	bls.n	8013486 <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 801349c:	69bb      	ldr	r3, [r7, #24]
 801349e:	2208      	movs	r2, #8
 80134a0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	3b01      	subs	r3, #1
 80134a6:	0e1b      	lsrs	r3, r3, #24
 80134a8:	b2da      	uxtb	r2, r3
 80134aa:	69bb      	ldr	r3, [r7, #24]
 80134ac:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80134ae:	693b      	ldr	r3, [r7, #16]
 80134b0:	3b01      	subs	r3, #1
 80134b2:	0c1b      	lsrs	r3, r3, #16
 80134b4:	b2da      	uxtb	r2, r3
 80134b6:	69bb      	ldr	r3, [r7, #24]
 80134b8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80134ba:	693b      	ldr	r3, [r7, #16]
 80134bc:	3b01      	subs	r3, #1
 80134be:	0a1b      	lsrs	r3, r3, #8
 80134c0:	b2da      	uxtb	r2, r3
 80134c2:	69bb      	ldr	r3, [r7, #24]
 80134c4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	b2db      	uxtb	r3, r3
 80134ca:	3b01      	subs	r3, #1
 80134cc:	b2da      	uxtb	r2, r3
 80134ce:	69bb      	ldr	r3, [r7, #24]
 80134d0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80134d2:	69bb      	ldr	r3, [r7, #24]
 80134d4:	2202      	movs	r2, #2
 80134d6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80134d8:	8abb      	ldrh	r3, [r7, #20]
 80134da:	141b      	asrs	r3, r3, #16
 80134dc:	b2da      	uxtb	r2, r3
 80134de:	69bb      	ldr	r3, [r7, #24]
 80134e0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80134e2:	8abb      	ldrh	r3, [r7, #20]
 80134e4:	0a1b      	lsrs	r3, r3, #8
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	b2da      	uxtb	r2, r3
 80134ea:	69bb      	ldr	r3, [r7, #24]
 80134ec:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80134ee:	8abb      	ldrh	r3, [r7, #20]
 80134f0:	b2da      	uxtb	r2, r3
 80134f2:	69bb      	ldr	r3, [r7, #24]
 80134f4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80134f6:	69bb      	ldr	r3, [r7, #24]
 80134f8:	220c      	movs	r2, #12
 80134fa:	60da      	str	r2, [r3, #12]

  return 0;
 80134fc:	2300      	movs	r3, #0
}
 80134fe:	4618      	mov	r0, r3
 8013500:	3720      	adds	r7, #32
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}
	...

08013508 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b086      	sub	sp, #24
 801350c:	af00      	add	r7, sp, #0
 801350e:	60f8      	str	r0, [r7, #12]
 8013510:	460b      	mov	r3, r1
 8013512:	607a      	str	r2, [r7, #4]
 8013514:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801351c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801351e:	2317      	movs	r3, #23
 8013520:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	3304      	adds	r3, #4
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	b29b      	uxth	r3, r3
 801352a:	8afa      	ldrh	r2, [r7, #22]
 801352c:	429a      	cmp	r2, r3
 801352e:	d303      	bcc.n	8013538 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	3304      	adds	r3, #4
 8013534:	781b      	ldrb	r3, [r3, #0]
 8013536:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8013538:	8afb      	ldrh	r3, [r7, #22]
 801353a:	461a      	mov	r2, r3
 801353c:	4904      	ldr	r1, [pc, #16]	; (8013550 <SCSI_ModeSense6+0x48>)
 801353e:	6938      	ldr	r0, [r7, #16]
 8013540:	f000 fe54 	bl	80141ec <SCSI_UpdateBotData>

  return 0;
 8013544:	2300      	movs	r3, #0
}
 8013546:	4618      	mov	r0, r3
 8013548:	3718      	adds	r7, #24
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
 801354e:	bf00      	nop
 8013550:	240000d0 	.word	0x240000d0

08013554 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b086      	sub	sp, #24
 8013558:	af00      	add	r7, sp, #0
 801355a:	60f8      	str	r0, [r7, #12]
 801355c:	460b      	mov	r3, r1
 801355e:	607a      	str	r2, [r7, #4]
 8013560:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013568:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801356a:	231b      	movs	r3, #27
 801356c:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	3308      	adds	r3, #8
 8013572:	781b      	ldrb	r3, [r3, #0]
 8013574:	b29b      	uxth	r3, r3
 8013576:	8afa      	ldrh	r2, [r7, #22]
 8013578:	429a      	cmp	r2, r3
 801357a:	d303      	bcc.n	8013584 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	3308      	adds	r3, #8
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8013584:	8afb      	ldrh	r3, [r7, #22]
 8013586:	461a      	mov	r2, r3
 8013588:	4904      	ldr	r1, [pc, #16]	; (801359c <SCSI_ModeSense10+0x48>)
 801358a:	6938      	ldr	r0, [r7, #16]
 801358c:	f000 fe2e 	bl	80141ec <SCSI_UpdateBotData>

  return 0;
 8013590:	2300      	movs	r3, #0
}
 8013592:	4618      	mov	r0, r3
 8013594:	3718      	adds	r7, #24
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}
 801359a:	bf00      	nop
 801359c:	240000e8 	.word	0x240000e8

080135a0 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b086      	sub	sp, #24
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	60f8      	str	r0, [r7, #12]
 80135a8:	460b      	mov	r3, r1
 80135aa:	607a      	str	r2, [r7, #4]
 80135ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80135b4:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 80135b6:	693a      	ldr	r2, [r7, #16]
 80135b8:	f248 0318 	movw	r3, #32792	; 0x8018
 80135bc:	4413      	add	r3, r2
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d10c      	bne.n	80135de <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80135c4:	693a      	ldr	r2, [r7, #16]
 80135c6:	f248 031d 	movw	r3, #32797	; 0x801d
 80135ca:	4413      	add	r3, r2
 80135cc:	7819      	ldrb	r1, [r3, #0]
 80135ce:	2320      	movs	r3, #32
 80135d0:	2205      	movs	r2, #5
 80135d2:	68f8      	ldr	r0, [r7, #12]
 80135d4:	f000 f87c 	bl	80136d0 <SCSI_SenseCode>
    return -1;
 80135d8:	f04f 33ff 	mov.w	r3, #4294967295
 80135dc:	e074      	b.n	80136c8 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80135de:	2300      	movs	r3, #0
 80135e0:	75fb      	strb	r3, [r7, #23]
 80135e2:	e007      	b.n	80135f4 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 80135e4:	7dfb      	ldrb	r3, [r7, #23]
 80135e6:	693a      	ldr	r2, [r7, #16]
 80135e8:	4413      	add	r3, r2
 80135ea:	2200      	movs	r2, #0
 80135ec:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80135ee:	7dfb      	ldrb	r3, [r7, #23]
 80135f0:	3301      	adds	r3, #1
 80135f2:	75fb      	strb	r3, [r7, #23]
 80135f4:	7dfb      	ldrb	r3, [r7, #23]
 80135f6:	2b11      	cmp	r3, #17
 80135f8:	d9f4      	bls.n	80135e4 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 80135fa:	693b      	ldr	r3, [r7, #16]
 80135fc:	2270      	movs	r2, #112	; 0x70
 80135fe:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	220c      	movs	r2, #12
 8013604:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8013606:	693a      	ldr	r2, [r7, #16]
 8013608:	f248 0360 	movw	r3, #32864	; 0x8060
 801360c:	4413      	add	r3, r2
 801360e:	781a      	ldrb	r2, [r3, #0]
 8013610:	6939      	ldr	r1, [r7, #16]
 8013612:	f248 0361 	movw	r3, #32865	; 0x8061
 8013616:	440b      	add	r3, r1
 8013618:	781b      	ldrb	r3, [r3, #0]
 801361a:	429a      	cmp	r2, r3
 801361c:	d045      	beq.n	80136aa <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801361e:	693a      	ldr	r2, [r7, #16]
 8013620:	f248 0360 	movw	r3, #32864	; 0x8060
 8013624:	4413      	add	r3, r2
 8013626:	781b      	ldrb	r3, [r3, #0]
 8013628:	4619      	mov	r1, r3
 801362a:	693a      	ldr	r2, [r7, #16]
 801362c:	f241 0308 	movw	r3, #4104	; 0x1008
 8013630:	440b      	add	r3, r1
 8013632:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801363a:	693a      	ldr	r2, [r7, #16]
 801363c:	f248 0360 	movw	r3, #32864	; 0x8060
 8013640:	4413      	add	r3, r2
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	4619      	mov	r1, r3
 8013646:	693a      	ldr	r2, [r7, #16]
 8013648:	f241 0308 	movw	r3, #4104	; 0x1008
 801364c:	440b      	add	r3, r1
 801364e:	00db      	lsls	r3, r3, #3
 8013650:	4413      	add	r3, r2
 8013652:	791a      	ldrb	r2, [r3, #4]
 8013654:	693b      	ldr	r3, [r7, #16]
 8013656:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8013658:	693a      	ldr	r2, [r7, #16]
 801365a:	f248 0360 	movw	r3, #32864	; 0x8060
 801365e:	4413      	add	r3, r2
 8013660:	781b      	ldrb	r3, [r3, #0]
 8013662:	4619      	mov	r1, r3
 8013664:	693a      	ldr	r2, [r7, #16]
 8013666:	f241 0308 	movw	r3, #4104	; 0x1008
 801366a:	440b      	add	r3, r1
 801366c:	00db      	lsls	r3, r3, #3
 801366e:	4413      	add	r3, r2
 8013670:	795a      	ldrb	r2, [r3, #5]
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8013676:	693a      	ldr	r2, [r7, #16]
 8013678:	f248 0360 	movw	r3, #32864	; 0x8060
 801367c:	4413      	add	r3, r2
 801367e:	781b      	ldrb	r3, [r3, #0]
 8013680:	3301      	adds	r3, #1
 8013682:	b2d9      	uxtb	r1, r3
 8013684:	693a      	ldr	r2, [r7, #16]
 8013686:	f248 0360 	movw	r3, #32864	; 0x8060
 801368a:	4413      	add	r3, r2
 801368c:	460a      	mov	r2, r1
 801368e:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8013690:	693a      	ldr	r2, [r7, #16]
 8013692:	f248 0360 	movw	r3, #32864	; 0x8060
 8013696:	4413      	add	r3, r2
 8013698:	781b      	ldrb	r3, [r3, #0]
 801369a:	2b04      	cmp	r3, #4
 801369c:	d105      	bne.n	80136aa <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 801369e:	693a      	ldr	r2, [r7, #16]
 80136a0:	f248 0360 	movw	r3, #32864	; 0x8060
 80136a4:	4413      	add	r3, r2
 80136a6:	2200      	movs	r2, #0
 80136a8:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	2212      	movs	r2, #18
 80136ae:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	3304      	adds	r3, #4
 80136b4:	781b      	ldrb	r3, [r3, #0]
 80136b6:	2b12      	cmp	r3, #18
 80136b8:	d805      	bhi.n	80136c6 <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	3304      	adds	r3, #4
 80136be:	781b      	ldrb	r3, [r3, #0]
 80136c0:	461a      	mov	r2, r3
 80136c2:	693b      	ldr	r3, [r7, #16]
 80136c4:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80136c6:	2300      	movs	r3, #0
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	3718      	adds	r7, #24
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}

080136d0 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80136d0:	b480      	push	{r7}
 80136d2:	b085      	sub	sp, #20
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	4608      	mov	r0, r1
 80136da:	4611      	mov	r1, r2
 80136dc:	461a      	mov	r2, r3
 80136de:	4603      	mov	r3, r0
 80136e0:	70fb      	strb	r3, [r7, #3]
 80136e2:	460b      	mov	r3, r1
 80136e4:	70bb      	strb	r3, [r7, #2]
 80136e6:	4613      	mov	r3, r2
 80136e8:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80136f0:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80136f2:	68fa      	ldr	r2, [r7, #12]
 80136f4:	f248 0361 	movw	r3, #32865	; 0x8061
 80136f8:	4413      	add	r3, r2
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	4619      	mov	r1, r3
 80136fe:	68fa      	ldr	r2, [r7, #12]
 8013700:	f241 0308 	movw	r3, #4104	; 0x1008
 8013704:	440b      	add	r3, r1
 8013706:	78b9      	ldrb	r1, [r7, #2]
 8013708:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801370c:	68fa      	ldr	r2, [r7, #12]
 801370e:	f248 0361 	movw	r3, #32865	; 0x8061
 8013712:	4413      	add	r3, r2
 8013714:	781b      	ldrb	r3, [r3, #0]
 8013716:	4619      	mov	r1, r3
 8013718:	68fa      	ldr	r2, [r7, #12]
 801371a:	f241 0308 	movw	r3, #4104	; 0x1008
 801371e:	440b      	add	r3, r1
 8013720:	00db      	lsls	r3, r3, #3
 8013722:	4413      	add	r3, r2
 8013724:	787a      	ldrb	r2, [r7, #1]
 8013726:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8013728:	68fa      	ldr	r2, [r7, #12]
 801372a:	f248 0361 	movw	r3, #32865	; 0x8061
 801372e:	4413      	add	r3, r2
 8013730:	781b      	ldrb	r3, [r3, #0]
 8013732:	4619      	mov	r1, r3
 8013734:	68fa      	ldr	r2, [r7, #12]
 8013736:	f241 0308 	movw	r3, #4104	; 0x1008
 801373a:	440b      	add	r3, r1
 801373c:	00db      	lsls	r3, r3, #3
 801373e:	4413      	add	r3, r2
 8013740:	2200      	movs	r2, #0
 8013742:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8013744:	68fa      	ldr	r2, [r7, #12]
 8013746:	f248 0361 	movw	r3, #32865	; 0x8061
 801374a:	4413      	add	r3, r2
 801374c:	781b      	ldrb	r3, [r3, #0]
 801374e:	3301      	adds	r3, #1
 8013750:	b2d9      	uxtb	r1, r3
 8013752:	68fa      	ldr	r2, [r7, #12]
 8013754:	f248 0361 	movw	r3, #32865	; 0x8061
 8013758:	4413      	add	r3, r2
 801375a:	460a      	mov	r2, r1
 801375c:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801375e:	68fa      	ldr	r2, [r7, #12]
 8013760:	f248 0361 	movw	r3, #32865	; 0x8061
 8013764:	4413      	add	r3, r2
 8013766:	781b      	ldrb	r3, [r3, #0]
 8013768:	2b04      	cmp	r3, #4
 801376a:	d105      	bne.n	8013778 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 801376c:	68fa      	ldr	r2, [r7, #12]
 801376e:	f248 0361 	movw	r3, #32865	; 0x8061
 8013772:	4413      	add	r3, r2
 8013774:	2200      	movs	r2, #0
 8013776:	701a      	strb	r2, [r3, #0]
  }
}
 8013778:	bf00      	nop
 801377a:	3714      	adds	r7, #20
 801377c:	46bd      	mov	sp, r7
 801377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013782:	4770      	bx	lr

08013784 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b086      	sub	sp, #24
 8013788:	af00      	add	r7, sp, #0
 801378a:	60f8      	str	r0, [r7, #12]
 801378c:	460b      	mov	r3, r1
 801378e:	607a      	str	r2, [r7, #4]
 8013790:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013798:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801379a:	697a      	ldr	r2, [r7, #20]
 801379c:	f248 0362 	movw	r3, #32866	; 0x8062
 80137a0:	4413      	add	r3, r2
 80137a2:	781b      	ldrb	r3, [r3, #0]
 80137a4:	2b01      	cmp	r3, #1
 80137a6:	d10f      	bne.n	80137c8 <SCSI_StartStopUnit+0x44>
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	3304      	adds	r3, #4
 80137ac:	781b      	ldrb	r3, [r3, #0]
 80137ae:	f003 0303 	and.w	r3, r3, #3
 80137b2:	2b02      	cmp	r3, #2
 80137b4:	d108      	bne.n	80137c8 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80137b6:	7af9      	ldrb	r1, [r7, #11]
 80137b8:	2324      	movs	r3, #36	; 0x24
 80137ba:	2205      	movs	r2, #5
 80137bc:	68f8      	ldr	r0, [r7, #12]
 80137be:	f7ff ff87 	bl	80136d0 <SCSI_SenseCode>

    return -1;
 80137c2:	f04f 33ff 	mov.w	r3, #4294967295
 80137c6:	e02c      	b.n	8013822 <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	3304      	adds	r3, #4
 80137cc:	781b      	ldrb	r3, [r3, #0]
 80137ce:	f003 0303 	and.w	r3, r3, #3
 80137d2:	2b01      	cmp	r3, #1
 80137d4:	d106      	bne.n	80137e4 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80137d6:	697a      	ldr	r2, [r7, #20]
 80137d8:	f248 0362 	movw	r3, #32866	; 0x8062
 80137dc:	4413      	add	r3, r2
 80137de:	2200      	movs	r2, #0
 80137e0:	701a      	strb	r2, [r3, #0]
 80137e2:	e01a      	b.n	801381a <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	3304      	adds	r3, #4
 80137e8:	781b      	ldrb	r3, [r3, #0]
 80137ea:	f003 0303 	and.w	r3, r3, #3
 80137ee:	2b02      	cmp	r3, #2
 80137f0:	d106      	bne.n	8013800 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80137f2:	697a      	ldr	r2, [r7, #20]
 80137f4:	f248 0362 	movw	r3, #32866	; 0x8062
 80137f8:	4413      	add	r3, r2
 80137fa:	2202      	movs	r2, #2
 80137fc:	701a      	strb	r2, [r3, #0]
 80137fe:	e00c      	b.n	801381a <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	3304      	adds	r3, #4
 8013804:	781b      	ldrb	r3, [r3, #0]
 8013806:	f003 0303 	and.w	r3, r3, #3
 801380a:	2b03      	cmp	r3, #3
 801380c:	d105      	bne.n	801381a <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801380e:	697a      	ldr	r2, [r7, #20]
 8013810:	f248 0362 	movw	r3, #32866	; 0x8062
 8013814:	4413      	add	r3, r2
 8013816:	2200      	movs	r2, #0
 8013818:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	2200      	movs	r2, #0
 801381e:	60da      	str	r2, [r3, #12]

  return 0;
 8013820:	2300      	movs	r3, #0
}
 8013822:	4618      	mov	r0, r3
 8013824:	3718      	adds	r7, #24
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}

0801382a <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801382a:	b480      	push	{r7}
 801382c:	b087      	sub	sp, #28
 801382e:	af00      	add	r7, sp, #0
 8013830:	60f8      	str	r0, [r7, #12]
 8013832:	460b      	mov	r3, r1
 8013834:	607a      	str	r2, [r7, #4]
 8013836:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801383e:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	3304      	adds	r3, #4
 8013844:	781b      	ldrb	r3, [r3, #0]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d106      	bne.n	8013858 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801384a:	697a      	ldr	r2, [r7, #20]
 801384c:	f248 0362 	movw	r3, #32866	; 0x8062
 8013850:	4413      	add	r3, r2
 8013852:	2200      	movs	r2, #0
 8013854:	701a      	strb	r2, [r3, #0]
 8013856:	e005      	b.n	8013864 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8013858:	697a      	ldr	r2, [r7, #20]
 801385a:	f248 0362 	movw	r3, #32866	; 0x8062
 801385e:	4413      	add	r3, r2
 8013860:	2201      	movs	r2, #1
 8013862:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	2200      	movs	r2, #0
 8013868:	60da      	str	r2, [r3, #12]

  return 0;
 801386a:	2300      	movs	r3, #0
}
 801386c:	4618      	mov	r0, r3
 801386e:	371c      	adds	r7, #28
 8013870:	46bd      	mov	sp, r7
 8013872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013876:	4770      	bx	lr

08013878 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b086      	sub	sp, #24
 801387c:	af00      	add	r7, sp, #0
 801387e:	60f8      	str	r0, [r7, #12]
 8013880:	460b      	mov	r3, r1
 8013882:	607a      	str	r2, [r7, #4]
 8013884:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801388c:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	7a1b      	ldrb	r3, [r3, #8]
 8013892:	2b00      	cmp	r3, #0
 8013894:	f040 8094 	bne.w	80139c0 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8013898:	697a      	ldr	r2, [r7, #20]
 801389a:	f248 031c 	movw	r3, #32796	; 0x801c
 801389e:	4413      	add	r3, r2
 80138a0:	781b      	ldrb	r3, [r3, #0]
 80138a2:	b25b      	sxtb	r3, r3
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	db0c      	blt.n	80138c2 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80138a8:	697a      	ldr	r2, [r7, #20]
 80138aa:	f248 031d 	movw	r3, #32797	; 0x801d
 80138ae:	4413      	add	r3, r2
 80138b0:	7819      	ldrb	r1, [r3, #0]
 80138b2:	2320      	movs	r3, #32
 80138b4:	2205      	movs	r2, #5
 80138b6:	68f8      	ldr	r0, [r7, #12]
 80138b8:	f7ff ff0a 	bl	80136d0 <SCSI_SenseCode>
      return -1;
 80138bc:	f04f 33ff 	mov.w	r3, #4294967295
 80138c0:	e088      	b.n	80139d4 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80138c2:	697a      	ldr	r2, [r7, #20]
 80138c4:	f248 0362 	movw	r3, #32866	; 0x8062
 80138c8:	4413      	add	r3, r2
 80138ca:	781b      	ldrb	r3, [r3, #0]
 80138cc:	2b02      	cmp	r3, #2
 80138ce:	d108      	bne.n	80138e2 <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80138d0:	7af9      	ldrb	r1, [r7, #11]
 80138d2:	233a      	movs	r3, #58	; 0x3a
 80138d4:	2202      	movs	r2, #2
 80138d6:	68f8      	ldr	r0, [r7, #12]
 80138d8:	f7ff fefa 	bl	80136d0 <SCSI_SenseCode>

      return -1;
 80138dc:	f04f 33ff 	mov.w	r3, #4294967295
 80138e0:	e078      	b.n	80139d4 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80138e8:	689b      	ldr	r3, [r3, #8]
 80138ea:	7afa      	ldrb	r2, [r7, #11]
 80138ec:	4610      	mov	r0, r2
 80138ee:	4798      	blx	r3
 80138f0:	4603      	mov	r3, r0
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d008      	beq.n	8013908 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80138f6:	7af9      	ldrb	r1, [r7, #11]
 80138f8:	233a      	movs	r3, #58	; 0x3a
 80138fa:	2202      	movs	r2, #2
 80138fc:	68f8      	ldr	r0, [r7, #12]
 80138fe:	f7ff fee7 	bl	80136d0 <SCSI_SenseCode>
      return -1;
 8013902:	f04f 33ff 	mov.w	r3, #4294967295
 8013906:	e065      	b.n	80139d4 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	3302      	adds	r3, #2
 801390c:	781b      	ldrb	r3, [r3, #0]
 801390e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	3303      	adds	r3, #3
 8013914:	781b      	ldrb	r3, [r3, #0]
 8013916:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013918:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	3304      	adds	r3, #4
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013922:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013924:	687a      	ldr	r2, [r7, #4]
 8013926:	3205      	adds	r2, #5
 8013928:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801392a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801392c:	6979      	ldr	r1, [r7, #20]
 801392e:	f248 036c 	movw	r3, #32876	; 0x806c
 8013932:	440b      	add	r3, r1
 8013934:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	3307      	adds	r3, #7
 801393a:	781b      	ldrb	r3, [r3, #0]
 801393c:	021b      	lsls	r3, r3, #8
 801393e:	687a      	ldr	r2, [r7, #4]
 8013940:	3208      	adds	r2, #8
 8013942:	7812      	ldrb	r2, [r2, #0]
 8013944:	431a      	orrs	r2, r3
 8013946:	6979      	ldr	r1, [r7, #20]
 8013948:	f248 0370 	movw	r3, #32880	; 0x8070
 801394c:	440b      	add	r3, r1
 801394e:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013950:	697a      	ldr	r2, [r7, #20]
 8013952:	f248 036c 	movw	r3, #32876	; 0x806c
 8013956:	4413      	add	r3, r2
 8013958:	6818      	ldr	r0, [r3, #0]
 801395a:	697a      	ldr	r2, [r7, #20]
 801395c:	f248 0370 	movw	r3, #32880	; 0x8070
 8013960:	4413      	add	r3, r2
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	7af9      	ldrb	r1, [r7, #11]
 8013966:	4602      	mov	r2, r0
 8013968:	68f8      	ldr	r0, [r7, #12]
 801396a:	f000 faeb 	bl	8013f44 <SCSI_CheckAddressRange>
 801396e:	4603      	mov	r3, r0
 8013970:	2b00      	cmp	r3, #0
 8013972:	da02      	bge.n	801397a <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013974:	f04f 33ff 	mov.w	r3, #4294967295
 8013978:	e02c      	b.n	80139d4 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801397a:	697a      	ldr	r2, [r7, #20]
 801397c:	f248 0318 	movw	r3, #32792	; 0x8018
 8013980:	4413      	add	r3, r2
 8013982:	681a      	ldr	r2, [r3, #0]
 8013984:	6979      	ldr	r1, [r7, #20]
 8013986:	f248 0370 	movw	r3, #32880	; 0x8070
 801398a:	440b      	add	r3, r1
 801398c:	6819      	ldr	r1, [r3, #0]
 801398e:	6978      	ldr	r0, [r7, #20]
 8013990:	f248 0364 	movw	r3, #32868	; 0x8064
 8013994:	4403      	add	r3, r0
 8013996:	881b      	ldrh	r3, [r3, #0]
 8013998:	fb03 f301 	mul.w	r3, r3, r1
 801399c:	429a      	cmp	r2, r3
 801399e:	d00c      	beq.n	80139ba <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80139a0:	697a      	ldr	r2, [r7, #20]
 80139a2:	f248 031d 	movw	r3, #32797	; 0x801d
 80139a6:	4413      	add	r3, r2
 80139a8:	7819      	ldrb	r1, [r3, #0]
 80139aa:	2320      	movs	r3, #32
 80139ac:	2205      	movs	r2, #5
 80139ae:	68f8      	ldr	r0, [r7, #12]
 80139b0:	f7ff fe8e 	bl	80136d0 <SCSI_SenseCode>
      return -1;
 80139b4:	f04f 33ff 	mov.w	r3, #4294967295
 80139b8:	e00c      	b.n	80139d4 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80139ba:	697b      	ldr	r3, [r7, #20]
 80139bc:	2202      	movs	r2, #2
 80139be:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80139c0:	697b      	ldr	r3, [r7, #20]
 80139c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80139c6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80139c8:	7afb      	ldrb	r3, [r7, #11]
 80139ca:	4619      	mov	r1, r3
 80139cc:	68f8      	ldr	r0, [r7, #12]
 80139ce:	f000 fadd 	bl	8013f8c <SCSI_ProcessRead>
 80139d2:	4603      	mov	r3, r0
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	3718      	adds	r7, #24
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}

080139dc <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b086      	sub	sp, #24
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	460b      	mov	r3, r1
 80139e6:	607a      	str	r2, [r7, #4]
 80139e8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80139f0:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80139f2:	697b      	ldr	r3, [r7, #20]
 80139f4:	7a1b      	ldrb	r3, [r3, #8]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	f040 809e 	bne.w	8013b38 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80139fc:	697a      	ldr	r2, [r7, #20]
 80139fe:	f248 031c 	movw	r3, #32796	; 0x801c
 8013a02:	4413      	add	r3, r2
 8013a04:	781b      	ldrb	r3, [r3, #0]
 8013a06:	b25b      	sxtb	r3, r3
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	db0c      	blt.n	8013a26 <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013a0c:	697a      	ldr	r2, [r7, #20]
 8013a0e:	f248 031d 	movw	r3, #32797	; 0x801d
 8013a12:	4413      	add	r3, r2
 8013a14:	7819      	ldrb	r1, [r3, #0]
 8013a16:	2320      	movs	r3, #32
 8013a18:	2205      	movs	r2, #5
 8013a1a:	68f8      	ldr	r0, [r7, #12]
 8013a1c:	f7ff fe58 	bl	80136d0 <SCSI_SenseCode>
      return -1;
 8013a20:	f04f 33ff 	mov.w	r3, #4294967295
 8013a24:	e092      	b.n	8013b4c <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8013a26:	697a      	ldr	r2, [r7, #20]
 8013a28:	f248 0362 	movw	r3, #32866	; 0x8062
 8013a2c:	4413      	add	r3, r2
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	2b02      	cmp	r3, #2
 8013a32:	d108      	bne.n	8013a46 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013a34:	7af9      	ldrb	r1, [r7, #11]
 8013a36:	233a      	movs	r3, #58	; 0x3a
 8013a38:	2202      	movs	r2, #2
 8013a3a:	68f8      	ldr	r0, [r7, #12]
 8013a3c:	f7ff fe48 	bl	80136d0 <SCSI_SenseCode>
      return -1;
 8013a40:	f04f 33ff 	mov.w	r3, #4294967295
 8013a44:	e082      	b.n	8013b4c <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a4c:	689b      	ldr	r3, [r3, #8]
 8013a4e:	7afa      	ldrb	r2, [r7, #11]
 8013a50:	4610      	mov	r0, r2
 8013a52:	4798      	blx	r3
 8013a54:	4603      	mov	r3, r0
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d008      	beq.n	8013a6c <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013a5a:	7af9      	ldrb	r1, [r7, #11]
 8013a5c:	233a      	movs	r3, #58	; 0x3a
 8013a5e:	2202      	movs	r2, #2
 8013a60:	68f8      	ldr	r0, [r7, #12]
 8013a62:	f7ff fe35 	bl	80136d0 <SCSI_SenseCode>
      return -1;
 8013a66:	f04f 33ff 	mov.w	r3, #4294967295
 8013a6a:	e06f      	b.n	8013b4c <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	3302      	adds	r3, #2
 8013a70:	781b      	ldrb	r3, [r3, #0]
 8013a72:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	3303      	adds	r3, #3
 8013a78:	781b      	ldrb	r3, [r3, #0]
 8013a7a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013a7c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	3304      	adds	r3, #4
 8013a82:	781b      	ldrb	r3, [r3, #0]
 8013a84:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013a86:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013a88:	687a      	ldr	r2, [r7, #4]
 8013a8a:	3205      	adds	r2, #5
 8013a8c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013a8e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013a90:	6979      	ldr	r1, [r7, #20]
 8013a92:	f248 036c 	movw	r3, #32876	; 0x806c
 8013a96:	440b      	add	r3, r1
 8013a98:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	3306      	adds	r3, #6
 8013a9e:	781b      	ldrb	r3, [r3, #0]
 8013aa0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	3307      	adds	r3, #7
 8013aa6:	781b      	ldrb	r3, [r3, #0]
 8013aa8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013aaa:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	3308      	adds	r3, #8
 8013ab0:	781b      	ldrb	r3, [r3, #0]
 8013ab2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8013ab4:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8013ab6:	687a      	ldr	r2, [r7, #4]
 8013ab8:	3209      	adds	r2, #9
 8013aba:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013abc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013abe:	6979      	ldr	r1, [r7, #20]
 8013ac0:	f248 0370 	movw	r3, #32880	; 0x8070
 8013ac4:	440b      	add	r3, r1
 8013ac6:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013ac8:	697a      	ldr	r2, [r7, #20]
 8013aca:	f248 036c 	movw	r3, #32876	; 0x806c
 8013ace:	4413      	add	r3, r2
 8013ad0:	6818      	ldr	r0, [r3, #0]
 8013ad2:	697a      	ldr	r2, [r7, #20]
 8013ad4:	f248 0370 	movw	r3, #32880	; 0x8070
 8013ad8:	4413      	add	r3, r2
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	7af9      	ldrb	r1, [r7, #11]
 8013ade:	4602      	mov	r2, r0
 8013ae0:	68f8      	ldr	r0, [r7, #12]
 8013ae2:	f000 fa2f 	bl	8013f44 <SCSI_CheckAddressRange>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	da02      	bge.n	8013af2 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013aec:	f04f 33ff 	mov.w	r3, #4294967295
 8013af0:	e02c      	b.n	8013b4c <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013af2:	697a      	ldr	r2, [r7, #20]
 8013af4:	f248 0318 	movw	r3, #32792	; 0x8018
 8013af8:	4413      	add	r3, r2
 8013afa:	681a      	ldr	r2, [r3, #0]
 8013afc:	6979      	ldr	r1, [r7, #20]
 8013afe:	f248 0370 	movw	r3, #32880	; 0x8070
 8013b02:	440b      	add	r3, r1
 8013b04:	6819      	ldr	r1, [r3, #0]
 8013b06:	6978      	ldr	r0, [r7, #20]
 8013b08:	f248 0364 	movw	r3, #32868	; 0x8064
 8013b0c:	4403      	add	r3, r0
 8013b0e:	881b      	ldrh	r3, [r3, #0]
 8013b10:	fb03 f301 	mul.w	r3, r3, r1
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d00c      	beq.n	8013b32 <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013b18:	697a      	ldr	r2, [r7, #20]
 8013b1a:	f248 031d 	movw	r3, #32797	; 0x801d
 8013b1e:	4413      	add	r3, r2
 8013b20:	7819      	ldrb	r1, [r3, #0]
 8013b22:	2320      	movs	r3, #32
 8013b24:	2205      	movs	r2, #5
 8013b26:	68f8      	ldr	r0, [r7, #12]
 8013b28:	f7ff fdd2 	bl	80136d0 <SCSI_SenseCode>
      return -1;
 8013b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b30:	e00c      	b.n	8013b4c <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	2202      	movs	r2, #2
 8013b36:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013b38:	697b      	ldr	r3, [r7, #20]
 8013b3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013b3e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8013b40:	7afb      	ldrb	r3, [r7, #11]
 8013b42:	4619      	mov	r1, r3
 8013b44:	68f8      	ldr	r0, [r7, #12]
 8013b46:	f000 fa21 	bl	8013f8c <SCSI_ProcessRead>
 8013b4a:	4603      	mov	r3, r0
}
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	3718      	adds	r7, #24
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}

08013b54 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b086      	sub	sp, #24
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	60f8      	str	r0, [r7, #12]
 8013b5c:	460b      	mov	r3, r1
 8013b5e:	607a      	str	r2, [r7, #4]
 8013b60:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b68:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	7a1b      	ldrb	r3, [r3, #8]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	f040 80be 	bne.w	8013cf0 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8013b74:	697a      	ldr	r2, [r7, #20]
 8013b76:	f248 0318 	movw	r3, #32792	; 0x8018
 8013b7a:	4413      	add	r3, r2
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d10c      	bne.n	8013b9c <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013b82:	697a      	ldr	r2, [r7, #20]
 8013b84:	f248 031d 	movw	r3, #32797	; 0x801d
 8013b88:	4413      	add	r3, r2
 8013b8a:	7819      	ldrb	r1, [r3, #0]
 8013b8c:	2320      	movs	r3, #32
 8013b8e:	2205      	movs	r2, #5
 8013b90:	68f8      	ldr	r0, [r7, #12]
 8013b92:	f7ff fd9d 	bl	80136d0 <SCSI_SenseCode>
      return -1;
 8013b96:	f04f 33ff 	mov.w	r3, #4294967295
 8013b9a:	e0af      	b.n	8013cfc <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013b9c:	697a      	ldr	r2, [r7, #20]
 8013b9e:	f248 031c 	movw	r3, #32796	; 0x801c
 8013ba2:	4413      	add	r3, r2
 8013ba4:	781b      	ldrb	r3, [r3, #0]
 8013ba6:	b25b      	sxtb	r3, r3
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	da0c      	bge.n	8013bc6 <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013bac:	697a      	ldr	r2, [r7, #20]
 8013bae:	f248 031d 	movw	r3, #32797	; 0x801d
 8013bb2:	4413      	add	r3, r2
 8013bb4:	7819      	ldrb	r1, [r3, #0]
 8013bb6:	2320      	movs	r3, #32
 8013bb8:	2205      	movs	r2, #5
 8013bba:	68f8      	ldr	r0, [r7, #12]
 8013bbc:	f7ff fd88 	bl	80136d0 <SCSI_SenseCode>
      return -1;
 8013bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8013bc4:	e09a      	b.n	8013cfc <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013bcc:	689b      	ldr	r3, [r3, #8]
 8013bce:	7afa      	ldrb	r2, [r7, #11]
 8013bd0:	4610      	mov	r0, r2
 8013bd2:	4798      	blx	r3
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d008      	beq.n	8013bec <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013bda:	7af9      	ldrb	r1, [r7, #11]
 8013bdc:	233a      	movs	r3, #58	; 0x3a
 8013bde:	2202      	movs	r2, #2
 8013be0:	68f8      	ldr	r0, [r7, #12]
 8013be2:	f7ff fd75 	bl	80136d0 <SCSI_SenseCode>
      return -1;
 8013be6:	f04f 33ff 	mov.w	r3, #4294967295
 8013bea:	e087      	b.n	8013cfc <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013bf2:	68db      	ldr	r3, [r3, #12]
 8013bf4:	7afa      	ldrb	r2, [r7, #11]
 8013bf6:	4610      	mov	r0, r2
 8013bf8:	4798      	blx	r3
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d008      	beq.n	8013c12 <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013c00:	7af9      	ldrb	r1, [r7, #11]
 8013c02:	2327      	movs	r3, #39	; 0x27
 8013c04:	2202      	movs	r2, #2
 8013c06:	68f8      	ldr	r0, [r7, #12]
 8013c08:	f7ff fd62 	bl	80136d0 <SCSI_SenseCode>
      return -1;
 8013c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8013c10:	e074      	b.n	8013cfc <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	3302      	adds	r3, #2
 8013c16:	781b      	ldrb	r3, [r3, #0]
 8013c18:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	3303      	adds	r3, #3
 8013c1e:	781b      	ldrb	r3, [r3, #0]
 8013c20:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013c22:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	3304      	adds	r3, #4
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013c2c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013c2e:	687a      	ldr	r2, [r7, #4]
 8013c30:	3205      	adds	r2, #5
 8013c32:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013c34:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013c36:	6979      	ldr	r1, [r7, #20]
 8013c38:	f248 036c 	movw	r3, #32876	; 0x806c
 8013c3c:	440b      	add	r3, r1
 8013c3e:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	3307      	adds	r3, #7
 8013c44:	781b      	ldrb	r3, [r3, #0]
 8013c46:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8013c48:	687a      	ldr	r2, [r7, #4]
 8013c4a:	3208      	adds	r2, #8
 8013c4c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8013c4e:	431a      	orrs	r2, r3
 8013c50:	6979      	ldr	r1, [r7, #20]
 8013c52:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c56:	440b      	add	r3, r1
 8013c58:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013c5a:	697a      	ldr	r2, [r7, #20]
 8013c5c:	f248 036c 	movw	r3, #32876	; 0x806c
 8013c60:	4413      	add	r3, r2
 8013c62:	6818      	ldr	r0, [r3, #0]
 8013c64:	697a      	ldr	r2, [r7, #20]
 8013c66:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c6a:	4413      	add	r3, r2
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	7af9      	ldrb	r1, [r7, #11]
 8013c70:	4602      	mov	r2, r0
 8013c72:	68f8      	ldr	r0, [r7, #12]
 8013c74:	f000 f966 	bl	8013f44 <SCSI_CheckAddressRange>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	da02      	bge.n	8013c84 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8013c82:	e03b      	b.n	8013cfc <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013c84:	697a      	ldr	r2, [r7, #20]
 8013c86:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c8a:	4413      	add	r3, r2
 8013c8c:	681a      	ldr	r2, [r3, #0]
 8013c8e:	6979      	ldr	r1, [r7, #20]
 8013c90:	f248 0364 	movw	r3, #32868	; 0x8064
 8013c94:	440b      	add	r3, r1
 8013c96:	881b      	ldrh	r3, [r3, #0]
 8013c98:	fb03 f302 	mul.w	r3, r3, r2
 8013c9c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013c9e:	697a      	ldr	r2, [r7, #20]
 8013ca0:	f248 0318 	movw	r3, #32792	; 0x8018
 8013ca4:	4413      	add	r3, r2
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	693a      	ldr	r2, [r7, #16]
 8013caa:	429a      	cmp	r2, r3
 8013cac:	d00c      	beq.n	8013cc8 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013cae:	697a      	ldr	r2, [r7, #20]
 8013cb0:	f248 031d 	movw	r3, #32797	; 0x801d
 8013cb4:	4413      	add	r3, r2
 8013cb6:	7819      	ldrb	r1, [r3, #0]
 8013cb8:	2320      	movs	r3, #32
 8013cba:	2205      	movs	r2, #5
 8013cbc:	68f8      	ldr	r0, [r7, #12]
 8013cbe:	f7ff fd07 	bl	80136d0 <SCSI_SenseCode>
      return -1;
 8013cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8013cc6:	e019      	b.n	8013cfc <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013cc8:	693b      	ldr	r3, [r7, #16]
 8013cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013cce:	bf28      	it	cs
 8013cd0:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013cd4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	2201      	movs	r2, #1
 8013cda:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013cdc:	697b      	ldr	r3, [r7, #20]
 8013cde:	f103 0210 	add.w	r2, r3, #16
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	2101      	movs	r1, #1
 8013ce6:	68f8      	ldr	r0, [r7, #12]
 8013ce8:	f004 fb19 	bl	801831e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8013cec:	2300      	movs	r3, #0
 8013cee:	e005      	b.n	8013cfc <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8013cf0:	7afb      	ldrb	r3, [r7, #11]
 8013cf2:	4619      	mov	r1, r3
 8013cf4:	68f8      	ldr	r0, [r7, #12]
 8013cf6:	f000 f9d7 	bl	80140a8 <SCSI_ProcessWrite>
 8013cfa:	4603      	mov	r3, r0
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3718      	adds	r7, #24
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}

08013d04 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b086      	sub	sp, #24
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	60f8      	str	r0, [r7, #12]
 8013d0c:	460b      	mov	r3, r1
 8013d0e:	607a      	str	r2, [r7, #4]
 8013d10:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d18:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013d1a:	697b      	ldr	r3, [r7, #20]
 8013d1c:	7a1b      	ldrb	r3, [r3, #8]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	f040 80ce 	bne.w	8013ec0 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8013d24:	697a      	ldr	r2, [r7, #20]
 8013d26:	f248 0318 	movw	r3, #32792	; 0x8018
 8013d2a:	4413      	add	r3, r2
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d10c      	bne.n	8013d4c <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013d32:	697a      	ldr	r2, [r7, #20]
 8013d34:	f248 031d 	movw	r3, #32797	; 0x801d
 8013d38:	4413      	add	r3, r2
 8013d3a:	7819      	ldrb	r1, [r3, #0]
 8013d3c:	2320      	movs	r3, #32
 8013d3e:	2205      	movs	r2, #5
 8013d40:	68f8      	ldr	r0, [r7, #12]
 8013d42:	f7ff fcc5 	bl	80136d0 <SCSI_SenseCode>
      return -1;
 8013d46:	f04f 33ff 	mov.w	r3, #4294967295
 8013d4a:	e0bf      	b.n	8013ecc <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013d4c:	697a      	ldr	r2, [r7, #20]
 8013d4e:	f248 031c 	movw	r3, #32796	; 0x801c
 8013d52:	4413      	add	r3, r2
 8013d54:	781b      	ldrb	r3, [r3, #0]
 8013d56:	b25b      	sxtb	r3, r3
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	da0c      	bge.n	8013d76 <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013d5c:	697a      	ldr	r2, [r7, #20]
 8013d5e:	f248 031d 	movw	r3, #32797	; 0x801d
 8013d62:	4413      	add	r3, r2
 8013d64:	7819      	ldrb	r1, [r3, #0]
 8013d66:	2320      	movs	r3, #32
 8013d68:	2205      	movs	r2, #5
 8013d6a:	68f8      	ldr	r0, [r7, #12]
 8013d6c:	f7ff fcb0 	bl	80136d0 <SCSI_SenseCode>
      return -1;
 8013d70:	f04f 33ff 	mov.w	r3, #4294967295
 8013d74:	e0aa      	b.n	8013ecc <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d7c:	689b      	ldr	r3, [r3, #8]
 8013d7e:	7afa      	ldrb	r2, [r7, #11]
 8013d80:	4610      	mov	r0, r2
 8013d82:	4798      	blx	r3
 8013d84:	4603      	mov	r3, r0
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d00b      	beq.n	8013da2 <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013d8a:	7af9      	ldrb	r1, [r7, #11]
 8013d8c:	233a      	movs	r3, #58	; 0x3a
 8013d8e:	2202      	movs	r2, #2
 8013d90:	68f8      	ldr	r0, [r7, #12]
 8013d92:	f7ff fc9d 	bl	80136d0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	2205      	movs	r2, #5
 8013d9a:	721a      	strb	r2, [r3, #8]
      return -1;
 8013d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013da0:	e094      	b.n	8013ecc <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013da8:	68db      	ldr	r3, [r3, #12]
 8013daa:	7afa      	ldrb	r2, [r7, #11]
 8013dac:	4610      	mov	r0, r2
 8013dae:	4798      	blx	r3
 8013db0:	4603      	mov	r3, r0
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d00b      	beq.n	8013dce <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013db6:	7af9      	ldrb	r1, [r7, #11]
 8013db8:	2327      	movs	r3, #39	; 0x27
 8013dba:	2202      	movs	r2, #2
 8013dbc:	68f8      	ldr	r0, [r7, #12]
 8013dbe:	f7ff fc87 	bl	80136d0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	2205      	movs	r2, #5
 8013dc6:	721a      	strb	r2, [r3, #8]
      return -1;
 8013dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8013dcc:	e07e      	b.n	8013ecc <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	3302      	adds	r3, #2
 8013dd2:	781b      	ldrb	r3, [r3, #0]
 8013dd4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	3303      	adds	r3, #3
 8013dda:	781b      	ldrb	r3, [r3, #0]
 8013ddc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013dde:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	3304      	adds	r3, #4
 8013de4:	781b      	ldrb	r3, [r3, #0]
 8013de6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013de8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013dea:	687a      	ldr	r2, [r7, #4]
 8013dec:	3205      	adds	r2, #5
 8013dee:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013df0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013df2:	6979      	ldr	r1, [r7, #20]
 8013df4:	f248 036c 	movw	r3, #32876	; 0x806c
 8013df8:	440b      	add	r3, r1
 8013dfa:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	3306      	adds	r3, #6
 8013e00:	781b      	ldrb	r3, [r3, #0]
 8013e02:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	3307      	adds	r3, #7
 8013e08:	781b      	ldrb	r3, [r3, #0]
 8013e0a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013e0c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	3308      	adds	r3, #8
 8013e12:	781b      	ldrb	r3, [r3, #0]
 8013e14:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8013e16:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8013e18:	687a      	ldr	r2, [r7, #4]
 8013e1a:	3209      	adds	r2, #9
 8013e1c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013e1e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013e20:	6979      	ldr	r1, [r7, #20]
 8013e22:	f248 0370 	movw	r3, #32880	; 0x8070
 8013e26:	440b      	add	r3, r1
 8013e28:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013e2a:	697a      	ldr	r2, [r7, #20]
 8013e2c:	f248 036c 	movw	r3, #32876	; 0x806c
 8013e30:	4413      	add	r3, r2
 8013e32:	6818      	ldr	r0, [r3, #0]
 8013e34:	697a      	ldr	r2, [r7, #20]
 8013e36:	f248 0370 	movw	r3, #32880	; 0x8070
 8013e3a:	4413      	add	r3, r2
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	7af9      	ldrb	r1, [r7, #11]
 8013e40:	4602      	mov	r2, r0
 8013e42:	68f8      	ldr	r0, [r7, #12]
 8013e44:	f000 f87e 	bl	8013f44 <SCSI_CheckAddressRange>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	da02      	bge.n	8013e54 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e52:	e03b      	b.n	8013ecc <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013e54:	697a      	ldr	r2, [r7, #20]
 8013e56:	f248 0370 	movw	r3, #32880	; 0x8070
 8013e5a:	4413      	add	r3, r2
 8013e5c:	681a      	ldr	r2, [r3, #0]
 8013e5e:	6979      	ldr	r1, [r7, #20]
 8013e60:	f248 0364 	movw	r3, #32868	; 0x8064
 8013e64:	440b      	add	r3, r1
 8013e66:	881b      	ldrh	r3, [r3, #0]
 8013e68:	fb03 f302 	mul.w	r3, r3, r2
 8013e6c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013e6e:	697a      	ldr	r2, [r7, #20]
 8013e70:	f248 0318 	movw	r3, #32792	; 0x8018
 8013e74:	4413      	add	r3, r2
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	693a      	ldr	r2, [r7, #16]
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d00c      	beq.n	8013e98 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013e7e:	697a      	ldr	r2, [r7, #20]
 8013e80:	f248 031d 	movw	r3, #32797	; 0x801d
 8013e84:	4413      	add	r3, r2
 8013e86:	7819      	ldrb	r1, [r3, #0]
 8013e88:	2320      	movs	r3, #32
 8013e8a:	2205      	movs	r2, #5
 8013e8c:	68f8      	ldr	r0, [r7, #12]
 8013e8e:	f7ff fc1f 	bl	80136d0 <SCSI_SenseCode>
      return -1;
 8013e92:	f04f 33ff 	mov.w	r3, #4294967295
 8013e96:	e019      	b.n	8013ecc <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013e98:	693b      	ldr	r3, [r7, #16]
 8013e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013e9e:	bf28      	it	cs
 8013ea0:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013ea4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013ea6:	697b      	ldr	r3, [r7, #20]
 8013ea8:	2201      	movs	r2, #1
 8013eaa:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	f103 0210 	add.w	r2, r3, #16
 8013eb2:	693b      	ldr	r3, [r7, #16]
 8013eb4:	2101      	movs	r1, #1
 8013eb6:	68f8      	ldr	r0, [r7, #12]
 8013eb8:	f004 fa31 	bl	801831e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	e005      	b.n	8013ecc <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8013ec0:	7afb      	ldrb	r3, [r7, #11]
 8013ec2:	4619      	mov	r1, r3
 8013ec4:	68f8      	ldr	r0, [r7, #12]
 8013ec6:	f000 f8ef 	bl	80140a8 <SCSI_ProcessWrite>
 8013eca:	4603      	mov	r3, r0
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3718      	adds	r7, #24
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}

08013ed4 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b086      	sub	sp, #24
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	60f8      	str	r0, [r7, #12]
 8013edc:	460b      	mov	r3, r1
 8013ede:	607a      	str	r2, [r7, #4]
 8013ee0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ee8:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	3301      	adds	r3, #1
 8013eee:	781b      	ldrb	r3, [r3, #0]
 8013ef0:	f003 0302 	and.w	r3, r3, #2
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d008      	beq.n	8013f0a <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8013ef8:	7af9      	ldrb	r1, [r7, #11]
 8013efa:	2324      	movs	r3, #36	; 0x24
 8013efc:	2205      	movs	r2, #5
 8013efe:	68f8      	ldr	r0, [r7, #12]
 8013f00:	f7ff fbe6 	bl	80136d0 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8013f04:	f04f 33ff 	mov.w	r3, #4294967295
 8013f08:	e018      	b.n	8013f3c <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8013f0a:	697a      	ldr	r2, [r7, #20]
 8013f0c:	f248 036c 	movw	r3, #32876	; 0x806c
 8013f10:	4413      	add	r3, r2
 8013f12:	6818      	ldr	r0, [r3, #0]
 8013f14:	697a      	ldr	r2, [r7, #20]
 8013f16:	f248 0370 	movw	r3, #32880	; 0x8070
 8013f1a:	4413      	add	r3, r2
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	7af9      	ldrb	r1, [r7, #11]
 8013f20:	4602      	mov	r2, r0
 8013f22:	68f8      	ldr	r0, [r7, #12]
 8013f24:	f000 f80e 	bl	8013f44 <SCSI_CheckAddressRange>
 8013f28:	4603      	mov	r3, r0
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	da02      	bge.n	8013f34 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 8013f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8013f32:	e003      	b.n	8013f3c <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	2200      	movs	r2, #0
 8013f38:	60da      	str	r2, [r3, #12]

  return 0;
 8013f3a:	2300      	movs	r3, #0
}
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	3718      	adds	r7, #24
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}

08013f44 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b086      	sub	sp, #24
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	60f8      	str	r0, [r7, #12]
 8013f4c:	607a      	str	r2, [r7, #4]
 8013f4e:	603b      	str	r3, [r7, #0]
 8013f50:	460b      	mov	r3, r1
 8013f52:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f5a:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8013f5c:	687a      	ldr	r2, [r7, #4]
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	441a      	add	r2, r3
 8013f62:	6979      	ldr	r1, [r7, #20]
 8013f64:	f248 0368 	movw	r3, #32872	; 0x8068
 8013f68:	440b      	add	r3, r1
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	d908      	bls.n	8013f82 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8013f70:	7af9      	ldrb	r1, [r7, #11]
 8013f72:	2321      	movs	r3, #33	; 0x21
 8013f74:	2205      	movs	r2, #5
 8013f76:	68f8      	ldr	r0, [r7, #12]
 8013f78:	f7ff fbaa 	bl	80136d0 <SCSI_SenseCode>
    return -1;
 8013f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8013f80:	e000      	b.n	8013f84 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 8013f82:	2300      	movs	r3, #0
}
 8013f84:	4618      	mov	r0, r3
 8013f86:	3718      	adds	r7, #24
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}

08013f8c <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013f8c:	b5b0      	push	{r4, r5, r7, lr}
 8013f8e:	b084      	sub	sp, #16
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	460b      	mov	r3, r1
 8013f96:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f9e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013fa0:	68fa      	ldr	r2, [r7, #12]
 8013fa2:	f248 0370 	movw	r3, #32880	; 0x8070
 8013fa6:	4413      	add	r3, r2
 8013fa8:	681a      	ldr	r2, [r3, #0]
 8013faa:	68f9      	ldr	r1, [r7, #12]
 8013fac:	f248 0364 	movw	r3, #32868	; 0x8064
 8013fb0:	440b      	add	r3, r1
 8013fb2:	881b      	ldrh	r3, [r3, #0]
 8013fb4:	fb03 f302 	mul.w	r3, r3, r2
 8013fb8:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013fc0:	bf28      	it	cs
 8013fc2:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013fc6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013fce:	691c      	ldr	r4, [r3, #16]
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	f103 0110 	add.w	r1, r3, #16
 8013fd6:	68fa      	ldr	r2, [r7, #12]
 8013fd8:	f248 036c 	movw	r3, #32876	; 0x806c
 8013fdc:	4413      	add	r3, r2
 8013fde:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8013fe0:	68fa      	ldr	r2, [r7, #12]
 8013fe2:	f248 0364 	movw	r3, #32868	; 0x8064
 8013fe6:	4413      	add	r3, r2
 8013fe8:	881b      	ldrh	r3, [r3, #0]
 8013fea:	461a      	mov	r2, r3
 8013fec:	68bb      	ldr	r3, [r7, #8]
 8013fee:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8013ff2:	b29b      	uxth	r3, r3
 8013ff4:	78f8      	ldrb	r0, [r7, #3]
 8013ff6:	462a      	mov	r2, r5
 8013ff8:	47a0      	blx	r4
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	da08      	bge.n	8014012 <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8014000:	78f9      	ldrb	r1, [r7, #3]
 8014002:	2311      	movs	r3, #17
 8014004:	2204      	movs	r2, #4
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f7ff fb62 	bl	80136d0 <SCSI_SenseCode>
    return -1;
 801400c:	f04f 33ff 	mov.w	r3, #4294967295
 8014010:	e046      	b.n	80140a0 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	f103 0210 	add.w	r2, r3, #16
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	2181      	movs	r1, #129	; 0x81
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f004 f95d 	bl	80182dc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8014022:	68fa      	ldr	r2, [r7, #12]
 8014024:	f248 036c 	movw	r3, #32876	; 0x806c
 8014028:	4413      	add	r3, r2
 801402a:	681a      	ldr	r2, [r3, #0]
 801402c:	68f9      	ldr	r1, [r7, #12]
 801402e:	f248 0364 	movw	r3, #32868	; 0x8064
 8014032:	440b      	add	r3, r1
 8014034:	881b      	ldrh	r3, [r3, #0]
 8014036:	4619      	mov	r1, r3
 8014038:	68bb      	ldr	r3, [r7, #8]
 801403a:	fbb3 f3f1 	udiv	r3, r3, r1
 801403e:	441a      	add	r2, r3
 8014040:	68f9      	ldr	r1, [r7, #12]
 8014042:	f248 036c 	movw	r3, #32876	; 0x806c
 8014046:	440b      	add	r3, r1
 8014048:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801404a:	68fa      	ldr	r2, [r7, #12]
 801404c:	f248 0370 	movw	r3, #32880	; 0x8070
 8014050:	4413      	add	r3, r2
 8014052:	681a      	ldr	r2, [r3, #0]
 8014054:	68f9      	ldr	r1, [r7, #12]
 8014056:	f248 0364 	movw	r3, #32868	; 0x8064
 801405a:	440b      	add	r3, r1
 801405c:	881b      	ldrh	r3, [r3, #0]
 801405e:	4619      	mov	r1, r3
 8014060:	68bb      	ldr	r3, [r7, #8]
 8014062:	fbb3 f3f1 	udiv	r3, r3, r1
 8014066:	1ad2      	subs	r2, r2, r3
 8014068:	68f9      	ldr	r1, [r7, #12]
 801406a:	f248 0370 	movw	r3, #32880	; 0x8070
 801406e:	440b      	add	r3, r1
 8014070:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8014072:	68fa      	ldr	r2, [r7, #12]
 8014074:	f248 0338 	movw	r3, #32824	; 0x8038
 8014078:	4413      	add	r3, r2
 801407a:	681a      	ldr	r2, [r3, #0]
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	1ad2      	subs	r2, r2, r3
 8014080:	68f9      	ldr	r1, [r7, #12]
 8014082:	f248 0338 	movw	r3, #32824	; 0x8038
 8014086:	440b      	add	r3, r1
 8014088:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 801408a:	68fa      	ldr	r2, [r7, #12]
 801408c:	f248 0370 	movw	r3, #32880	; 0x8070
 8014090:	4413      	add	r3, r2
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d102      	bne.n	801409e <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	2203      	movs	r2, #3
 801409c:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801409e:	2300      	movs	r3, #0
}
 80140a0:	4618      	mov	r0, r3
 80140a2:	3710      	adds	r7, #16
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bdb0      	pop	{r4, r5, r7, pc}

080140a8 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80140a8:	b5b0      	push	{r4, r5, r7, lr}
 80140aa:	b084      	sub	sp, #16
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
 80140b0:	460b      	mov	r3, r1
 80140b2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140ba:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80140bc:	68fa      	ldr	r2, [r7, #12]
 80140be:	f248 0370 	movw	r3, #32880	; 0x8070
 80140c2:	4413      	add	r3, r2
 80140c4:	681a      	ldr	r2, [r3, #0]
 80140c6:	68f9      	ldr	r1, [r7, #12]
 80140c8:	f248 0364 	movw	r3, #32868	; 0x8064
 80140cc:	440b      	add	r3, r1
 80140ce:	881b      	ldrh	r3, [r3, #0]
 80140d0:	fb03 f302 	mul.w	r3, r3, r2
 80140d4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80140dc:	bf28      	it	cs
 80140de:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80140e2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140ea:	695c      	ldr	r4, [r3, #20]
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	f103 0110 	add.w	r1, r3, #16
 80140f2:	68fa      	ldr	r2, [r7, #12]
 80140f4:	f248 036c 	movw	r3, #32876	; 0x806c
 80140f8:	4413      	add	r3, r2
 80140fa:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80140fc:	68fa      	ldr	r2, [r7, #12]
 80140fe:	f248 0364 	movw	r3, #32868	; 0x8064
 8014102:	4413      	add	r3, r2
 8014104:	881b      	ldrh	r3, [r3, #0]
 8014106:	461a      	mov	r2, r3
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801410e:	b29b      	uxth	r3, r3
 8014110:	78f8      	ldrb	r0, [r7, #3]
 8014112:	462a      	mov	r2, r5
 8014114:	47a0      	blx	r4
 8014116:	4603      	mov	r3, r0
 8014118:	2b00      	cmp	r3, #0
 801411a:	da08      	bge.n	801412e <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801411c:	78f9      	ldrb	r1, [r7, #3]
 801411e:	2303      	movs	r3, #3
 8014120:	2204      	movs	r2, #4
 8014122:	6878      	ldr	r0, [r7, #4]
 8014124:	f7ff fad4 	bl	80136d0 <SCSI_SenseCode>
    return -1;
 8014128:	f04f 33ff 	mov.w	r3, #4294967295
 801412c:	e05a      	b.n	80141e4 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801412e:	68fa      	ldr	r2, [r7, #12]
 8014130:	f248 036c 	movw	r3, #32876	; 0x806c
 8014134:	4413      	add	r3, r2
 8014136:	681a      	ldr	r2, [r3, #0]
 8014138:	68f9      	ldr	r1, [r7, #12]
 801413a:	f248 0364 	movw	r3, #32868	; 0x8064
 801413e:	440b      	add	r3, r1
 8014140:	881b      	ldrh	r3, [r3, #0]
 8014142:	4619      	mov	r1, r3
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	fbb3 f3f1 	udiv	r3, r3, r1
 801414a:	441a      	add	r2, r3
 801414c:	68f9      	ldr	r1, [r7, #12]
 801414e:	f248 036c 	movw	r3, #32876	; 0x806c
 8014152:	440b      	add	r3, r1
 8014154:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8014156:	68fa      	ldr	r2, [r7, #12]
 8014158:	f248 0370 	movw	r3, #32880	; 0x8070
 801415c:	4413      	add	r3, r2
 801415e:	681a      	ldr	r2, [r3, #0]
 8014160:	68f9      	ldr	r1, [r7, #12]
 8014162:	f248 0364 	movw	r3, #32868	; 0x8064
 8014166:	440b      	add	r3, r1
 8014168:	881b      	ldrh	r3, [r3, #0]
 801416a:	4619      	mov	r1, r3
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014172:	1ad2      	subs	r2, r2, r3
 8014174:	68f9      	ldr	r1, [r7, #12]
 8014176:	f248 0370 	movw	r3, #32880	; 0x8070
 801417a:	440b      	add	r3, r1
 801417c:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801417e:	68fa      	ldr	r2, [r7, #12]
 8014180:	f248 0338 	movw	r3, #32824	; 0x8038
 8014184:	4413      	add	r3, r2
 8014186:	681a      	ldr	r2, [r3, #0]
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	1ad2      	subs	r2, r2, r3
 801418c:	68f9      	ldr	r1, [r7, #12]
 801418e:	f248 0338 	movw	r3, #32824	; 0x8038
 8014192:	440b      	add	r3, r1
 8014194:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8014196:	68fa      	ldr	r2, [r7, #12]
 8014198:	f248 0370 	movw	r3, #32880	; 0x8070
 801419c:	4413      	add	r3, r2
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d104      	bne.n	80141ae <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80141a4:	2100      	movs	r1, #0
 80141a6:	6878      	ldr	r0, [r7, #4]
 80141a8:	f7fe fde2 	bl	8012d70 <MSC_BOT_SendCSW>
 80141ac:	e019      	b.n	80141e2 <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80141ae:	68fa      	ldr	r2, [r7, #12]
 80141b0:	f248 0370 	movw	r3, #32880	; 0x8070
 80141b4:	4413      	add	r3, r2
 80141b6:	681a      	ldr	r2, [r3, #0]
 80141b8:	68f9      	ldr	r1, [r7, #12]
 80141ba:	f248 0364 	movw	r3, #32868	; 0x8064
 80141be:	440b      	add	r3, r1
 80141c0:	881b      	ldrh	r3, [r3, #0]
 80141c2:	fb03 f302 	mul.w	r3, r3, r2
 80141c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80141ca:	bf28      	it	cs
 80141cc:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80141d0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	f103 0210 	add.w	r2, r3, #16
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	2101      	movs	r1, #1
 80141dc:	6878      	ldr	r0, [r7, #4]
 80141de:	f004 f89e 	bl	801831e <USBD_LL_PrepareReceive>
  }

  return 0;
 80141e2:	2300      	movs	r3, #0
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	3710      	adds	r7, #16
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bdb0      	pop	{r4, r5, r7, pc}

080141ec <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80141ec:	b480      	push	{r7}
 80141ee:	b087      	sub	sp, #28
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	60f8      	str	r0, [r7, #12]
 80141f4:	60b9      	str	r1, [r7, #8]
 80141f6:	4613      	mov	r3, r2
 80141f8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80141fa:	88fb      	ldrh	r3, [r7, #6]
 80141fc:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 80141fe:	8afa      	ldrh	r2, [r7, #22]
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8014204:	e00b      	b.n	801421e <SCSI_UpdateBotData+0x32>
  {
    len--;
 8014206:	8afb      	ldrh	r3, [r7, #22]
 8014208:	3b01      	subs	r3, #1
 801420a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801420c:	8afb      	ldrh	r3, [r7, #22]
 801420e:	68ba      	ldr	r2, [r7, #8]
 8014210:	441a      	add	r2, r3
 8014212:	8afb      	ldrh	r3, [r7, #22]
 8014214:	7811      	ldrb	r1, [r2, #0]
 8014216:	68fa      	ldr	r2, [r7, #12]
 8014218:	4413      	add	r3, r2
 801421a:	460a      	mov	r2, r1
 801421c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801421e:	8afb      	ldrh	r3, [r7, #22]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d1f0      	bne.n	8014206 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8014224:	2300      	movs	r3, #0
}
 8014226:	4618      	mov	r0, r3
 8014228:	371c      	adds	r7, #28
 801422a:	46bd      	mov	sp, r7
 801422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014230:	4770      	bx	lr

08014232 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014232:	b580      	push	{r7, lr}
 8014234:	b086      	sub	sp, #24
 8014236:	af00      	add	r7, sp, #0
 8014238:	60f8      	str	r0, [r7, #12]
 801423a:	60b9      	str	r1, [r7, #8]
 801423c:	4613      	mov	r3, r2
 801423e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d101      	bne.n	801424a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8014246:	2303      	movs	r3, #3
 8014248:	e025      	b.n	8014296 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014250:	2b00      	cmp	r3, #0
 8014252:	d003      	beq.n	801425c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	2200      	movs	r2, #0
 8014258:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8014262:	2b00      	cmp	r3, #0
 8014264:	d003      	beq.n	801426e <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	2200      	movs	r2, #0
 801426a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d003      	beq.n	801427c <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	68ba      	ldr	r2, [r7, #8]
 8014278:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	2201      	movs	r2, #1
 8014280:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	79fa      	ldrb	r2, [r7, #7]
 8014288:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801428a:	68f8      	ldr	r0, [r7, #12]
 801428c:	f003 fece 	bl	801802c <USBD_LL_Init>
 8014290:	4603      	mov	r3, r0
 8014292:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014294:	7dfb      	ldrb	r3, [r7, #23]
}
 8014296:	4618      	mov	r0, r3
 8014298:	3718      	adds	r7, #24
 801429a:	46bd      	mov	sp, r7
 801429c:	bd80      	pop	{r7, pc}

0801429e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801429e:	b580      	push	{r7, lr}
 80142a0:	b084      	sub	sp, #16
 80142a2:	af00      	add	r7, sp, #0
 80142a4:	6078      	str	r0, [r7, #4]
 80142a6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80142a8:	2300      	movs	r3, #0
 80142aa:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d101      	bne.n	80142b6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80142b2:	2303      	movs	r3, #3
 80142b4:	e010      	b.n	80142d8 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	683a      	ldr	r2, [r7, #0]
 80142ba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142c6:	f107 020e 	add.w	r2, r7, #14
 80142ca:	4610      	mov	r0, r2
 80142cc:	4798      	blx	r3
 80142ce:	4602      	mov	r2, r0
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80142d6:	2300      	movs	r3, #0
}
 80142d8:	4618      	mov	r0, r3
 80142da:	3710      	adds	r7, #16
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}

080142e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b082      	sub	sp, #8
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f003 feef 	bl	80180cc <USBD_LL_Start>
 80142ee:	4603      	mov	r3, r0
}
 80142f0:	4618      	mov	r0, r3
 80142f2:	3708      	adds	r7, #8
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd80      	pop	{r7, pc}

080142f8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80142f8:	b480      	push	{r7}
 80142fa:	b083      	sub	sp, #12
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014300:	2300      	movs	r3, #0
}
 8014302:	4618      	mov	r0, r3
 8014304:	370c      	adds	r7, #12
 8014306:	46bd      	mov	sp, r7
 8014308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430c:	4770      	bx	lr

0801430e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801430e:	b580      	push	{r7, lr}
 8014310:	b084      	sub	sp, #16
 8014312:	af00      	add	r7, sp, #0
 8014314:	6078      	str	r0, [r7, #4]
 8014316:	460b      	mov	r3, r1
 8014318:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801431a:	2303      	movs	r3, #3
 801431c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014324:	2b00      	cmp	r3, #0
 8014326:	d009      	beq.n	801433c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	78fa      	ldrb	r2, [r7, #3]
 8014332:	4611      	mov	r1, r2
 8014334:	6878      	ldr	r0, [r7, #4]
 8014336:	4798      	blx	r3
 8014338:	4603      	mov	r3, r0
 801433a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801433c:	7bfb      	ldrb	r3, [r7, #15]
}
 801433e:	4618      	mov	r0, r3
 8014340:	3710      	adds	r7, #16
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}

08014346 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014346:	b580      	push	{r7, lr}
 8014348:	b082      	sub	sp, #8
 801434a:	af00      	add	r7, sp, #0
 801434c:	6078      	str	r0, [r7, #4]
 801434e:	460b      	mov	r3, r1
 8014350:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014358:	2b00      	cmp	r3, #0
 801435a:	d007      	beq.n	801436c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014362:	685b      	ldr	r3, [r3, #4]
 8014364:	78fa      	ldrb	r2, [r7, #3]
 8014366:	4611      	mov	r1, r2
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	4798      	blx	r3
  }

  return USBD_OK;
 801436c:	2300      	movs	r3, #0
}
 801436e:	4618      	mov	r0, r3
 8014370:	3708      	adds	r7, #8
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}

08014376 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014376:	b580      	push	{r7, lr}
 8014378:	b084      	sub	sp, #16
 801437a:	af00      	add	r7, sp, #0
 801437c:	6078      	str	r0, [r7, #4]
 801437e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014386:	6839      	ldr	r1, [r7, #0]
 8014388:	4618      	mov	r0, r3
 801438a:	f000 ff2b 	bl	80151e4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2201      	movs	r2, #1
 8014392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801439c:	461a      	mov	r2, r3
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80143aa:	f003 031f 	and.w	r3, r3, #31
 80143ae:	2b01      	cmp	r3, #1
 80143b0:	d00e      	beq.n	80143d0 <USBD_LL_SetupStage+0x5a>
 80143b2:	2b01      	cmp	r3, #1
 80143b4:	d302      	bcc.n	80143bc <USBD_LL_SetupStage+0x46>
 80143b6:	2b02      	cmp	r3, #2
 80143b8:	d014      	beq.n	80143e4 <USBD_LL_SetupStage+0x6e>
 80143ba:	e01d      	b.n	80143f8 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80143c2:	4619      	mov	r1, r3
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	f000 fa17 	bl	80147f8 <USBD_StdDevReq>
 80143ca:	4603      	mov	r3, r0
 80143cc:	73fb      	strb	r3, [r7, #15]
      break;
 80143ce:	e020      	b.n	8014412 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80143d6:	4619      	mov	r1, r3
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f000 fa7b 	bl	80148d4 <USBD_StdItfReq>
 80143de:	4603      	mov	r3, r0
 80143e0:	73fb      	strb	r3, [r7, #15]
      break;
 80143e2:	e016      	b.n	8014412 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80143ea:	4619      	mov	r1, r3
 80143ec:	6878      	ldr	r0, [r7, #4]
 80143ee:	f000 fab7 	bl	8014960 <USBD_StdEPReq>
 80143f2:	4603      	mov	r3, r0
 80143f4:	73fb      	strb	r3, [r7, #15]
      break;
 80143f6:	e00c      	b.n	8014412 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80143fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014402:	b2db      	uxtb	r3, r3
 8014404:	4619      	mov	r1, r3
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f003 fedf 	bl	80181ca <USBD_LL_StallEP>
 801440c:	4603      	mov	r3, r0
 801440e:	73fb      	strb	r3, [r7, #15]
      break;
 8014410:	bf00      	nop
  }

  return ret;
 8014412:	7bfb      	ldrb	r3, [r7, #15]
}
 8014414:	4618      	mov	r0, r3
 8014416:	3710      	adds	r7, #16
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b086      	sub	sp, #24
 8014420:	af00      	add	r7, sp, #0
 8014422:	60f8      	str	r0, [r7, #12]
 8014424:	460b      	mov	r3, r1
 8014426:	607a      	str	r2, [r7, #4]
 8014428:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801442a:	7afb      	ldrb	r3, [r7, #11]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d137      	bne.n	80144a0 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014436:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801443e:	2b03      	cmp	r3, #3
 8014440:	d14a      	bne.n	80144d8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	689a      	ldr	r2, [r3, #8]
 8014446:	693b      	ldr	r3, [r7, #16]
 8014448:	68db      	ldr	r3, [r3, #12]
 801444a:	429a      	cmp	r2, r3
 801444c:	d913      	bls.n	8014476 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801444e:	693b      	ldr	r3, [r7, #16]
 8014450:	689a      	ldr	r2, [r3, #8]
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	68db      	ldr	r3, [r3, #12]
 8014456:	1ad2      	subs	r2, r2, r3
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801445c:	693b      	ldr	r3, [r7, #16]
 801445e:	68da      	ldr	r2, [r3, #12]
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	689b      	ldr	r3, [r3, #8]
 8014464:	4293      	cmp	r3, r2
 8014466:	bf28      	it	cs
 8014468:	4613      	movcs	r3, r2
 801446a:	461a      	mov	r2, r3
 801446c:	6879      	ldr	r1, [r7, #4]
 801446e:	68f8      	ldr	r0, [r7, #12]
 8014470:	f000 ff8f 	bl	8015392 <USBD_CtlContinueRx>
 8014474:	e030      	b.n	80144d8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801447c:	691b      	ldr	r3, [r3, #16]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d00a      	beq.n	8014498 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014488:	2b03      	cmp	r3, #3
 801448a:	d105      	bne.n	8014498 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014492:	691b      	ldr	r3, [r3, #16]
 8014494:	68f8      	ldr	r0, [r7, #12]
 8014496:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8014498:	68f8      	ldr	r0, [r7, #12]
 801449a:	f000 ff8b 	bl	80153b4 <USBD_CtlSendStatus>
 801449e:	e01b      	b.n	80144d8 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144a6:	699b      	ldr	r3, [r3, #24]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d013      	beq.n	80144d4 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80144b2:	2b03      	cmp	r3, #3
 80144b4:	d10e      	bne.n	80144d4 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144bc:	699b      	ldr	r3, [r3, #24]
 80144be:	7afa      	ldrb	r2, [r7, #11]
 80144c0:	4611      	mov	r1, r2
 80144c2:	68f8      	ldr	r0, [r7, #12]
 80144c4:	4798      	blx	r3
 80144c6:	4603      	mov	r3, r0
 80144c8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80144ca:	7dfb      	ldrb	r3, [r7, #23]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d003      	beq.n	80144d8 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80144d0:	7dfb      	ldrb	r3, [r7, #23]
 80144d2:	e002      	b.n	80144da <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80144d4:	2303      	movs	r3, #3
 80144d6:	e000      	b.n	80144da <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80144d8:	2300      	movs	r3, #0
}
 80144da:	4618      	mov	r0, r3
 80144dc:	3718      	adds	r7, #24
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}

080144e2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80144e2:	b580      	push	{r7, lr}
 80144e4:	b086      	sub	sp, #24
 80144e6:	af00      	add	r7, sp, #0
 80144e8:	60f8      	str	r0, [r7, #12]
 80144ea:	460b      	mov	r3, r1
 80144ec:	607a      	str	r2, [r7, #4]
 80144ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80144f0:	7afb      	ldrb	r3, [r7, #11]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d16a      	bne.n	80145cc <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	3314      	adds	r3, #20
 80144fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014502:	2b02      	cmp	r3, #2
 8014504:	d155      	bne.n	80145b2 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	689a      	ldr	r2, [r3, #8]
 801450a:	693b      	ldr	r3, [r7, #16]
 801450c:	68db      	ldr	r3, [r3, #12]
 801450e:	429a      	cmp	r2, r3
 8014510:	d914      	bls.n	801453c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	689a      	ldr	r2, [r3, #8]
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	68db      	ldr	r3, [r3, #12]
 801451a:	1ad2      	subs	r2, r2, r3
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014520:	693b      	ldr	r3, [r7, #16]
 8014522:	689b      	ldr	r3, [r3, #8]
 8014524:	461a      	mov	r2, r3
 8014526:	6879      	ldr	r1, [r7, #4]
 8014528:	68f8      	ldr	r0, [r7, #12]
 801452a:	f000 ff21 	bl	8015370 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801452e:	2300      	movs	r3, #0
 8014530:	2200      	movs	r2, #0
 8014532:	2100      	movs	r1, #0
 8014534:	68f8      	ldr	r0, [r7, #12]
 8014536:	f003 fef2 	bl	801831e <USBD_LL_PrepareReceive>
 801453a:	e03a      	b.n	80145b2 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801453c:	693b      	ldr	r3, [r7, #16]
 801453e:	68da      	ldr	r2, [r3, #12]
 8014540:	693b      	ldr	r3, [r7, #16]
 8014542:	689b      	ldr	r3, [r3, #8]
 8014544:	429a      	cmp	r2, r3
 8014546:	d11c      	bne.n	8014582 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014548:	693b      	ldr	r3, [r7, #16]
 801454a:	685a      	ldr	r2, [r3, #4]
 801454c:	693b      	ldr	r3, [r7, #16]
 801454e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014550:	429a      	cmp	r2, r3
 8014552:	d316      	bcc.n	8014582 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	685a      	ldr	r2, [r3, #4]
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801455e:	429a      	cmp	r2, r3
 8014560:	d20f      	bcs.n	8014582 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014562:	2200      	movs	r2, #0
 8014564:	2100      	movs	r1, #0
 8014566:	68f8      	ldr	r0, [r7, #12]
 8014568:	f000 ff02 	bl	8015370 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	2200      	movs	r2, #0
 8014570:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014574:	2300      	movs	r3, #0
 8014576:	2200      	movs	r2, #0
 8014578:	2100      	movs	r1, #0
 801457a:	68f8      	ldr	r0, [r7, #12]
 801457c:	f003 fecf 	bl	801831e <USBD_LL_PrepareReceive>
 8014580:	e017      	b.n	80145b2 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014588:	68db      	ldr	r3, [r3, #12]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d00a      	beq.n	80145a4 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014594:	2b03      	cmp	r3, #3
 8014596:	d105      	bne.n	80145a4 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801459e:	68db      	ldr	r3, [r3, #12]
 80145a0:	68f8      	ldr	r0, [r7, #12]
 80145a2:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80145a4:	2180      	movs	r1, #128	; 0x80
 80145a6:	68f8      	ldr	r0, [r7, #12]
 80145a8:	f003 fe0f 	bl	80181ca <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80145ac:	68f8      	ldr	r0, [r7, #12]
 80145ae:	f000 ff14 	bl	80153da <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80145b8:	2b01      	cmp	r3, #1
 80145ba:	d123      	bne.n	8014604 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80145bc:	68f8      	ldr	r0, [r7, #12]
 80145be:	f7ff fe9b 	bl	80142f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	2200      	movs	r2, #0
 80145c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80145ca:	e01b      	b.n	8014604 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145d2:	695b      	ldr	r3, [r3, #20]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d013      	beq.n	8014600 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80145de:	2b03      	cmp	r3, #3
 80145e0:	d10e      	bne.n	8014600 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145e8:	695b      	ldr	r3, [r3, #20]
 80145ea:	7afa      	ldrb	r2, [r7, #11]
 80145ec:	4611      	mov	r1, r2
 80145ee:	68f8      	ldr	r0, [r7, #12]
 80145f0:	4798      	blx	r3
 80145f2:	4603      	mov	r3, r0
 80145f4:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80145f6:	7dfb      	ldrb	r3, [r7, #23]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d003      	beq.n	8014604 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80145fc:	7dfb      	ldrb	r3, [r7, #23]
 80145fe:	e002      	b.n	8014606 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8014600:	2303      	movs	r3, #3
 8014602:	e000      	b.n	8014606 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8014604:	2300      	movs	r3, #0
}
 8014606:	4618      	mov	r0, r3
 8014608:	3718      	adds	r7, #24
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}

0801460e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801460e:	b580      	push	{r7, lr}
 8014610:	b082      	sub	sp, #8
 8014612:	af00      	add	r7, sp, #0
 8014614:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	2201      	movs	r2, #1
 801461a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	2200      	movs	r2, #0
 8014622:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	2200      	movs	r2, #0
 801462a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2200      	movs	r2, #0
 8014630:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801463a:	2b00      	cmp	r3, #0
 801463c:	d009      	beq.n	8014652 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014644:	685b      	ldr	r3, [r3, #4]
 8014646:	687a      	ldr	r2, [r7, #4]
 8014648:	6852      	ldr	r2, [r2, #4]
 801464a:	b2d2      	uxtb	r2, r2
 801464c:	4611      	mov	r1, r2
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014652:	2340      	movs	r3, #64	; 0x40
 8014654:	2200      	movs	r2, #0
 8014656:	2100      	movs	r1, #0
 8014658:	6878      	ldr	r0, [r7, #4]
 801465a:	f003 fd52 	bl	8018102 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	2201      	movs	r2, #1
 8014662:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2240      	movs	r2, #64	; 0x40
 801466a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801466e:	2340      	movs	r3, #64	; 0x40
 8014670:	2200      	movs	r2, #0
 8014672:	2180      	movs	r1, #128	; 0x80
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f003 fd44 	bl	8018102 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2201      	movs	r2, #1
 801467e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	2240      	movs	r2, #64	; 0x40
 8014684:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8014686:	2300      	movs	r3, #0
}
 8014688:	4618      	mov	r0, r3
 801468a:	3708      	adds	r7, #8
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}

08014690 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014690:	b480      	push	{r7}
 8014692:	b083      	sub	sp, #12
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
 8014698:	460b      	mov	r3, r1
 801469a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	78fa      	ldrb	r2, [r7, #3]
 80146a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80146a2:	2300      	movs	r3, #0
}
 80146a4:	4618      	mov	r0, r3
 80146a6:	370c      	adds	r7, #12
 80146a8:	46bd      	mov	sp, r7
 80146aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ae:	4770      	bx	lr

080146b0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80146b0:	b480      	push	{r7}
 80146b2:	b083      	sub	sp, #12
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2204      	movs	r2, #4
 80146c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80146cc:	2300      	movs	r3, #0
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	370c      	adds	r7, #12
 80146d2:	46bd      	mov	sp, r7
 80146d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d8:	4770      	bx	lr

080146da <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80146da:	b480      	push	{r7}
 80146dc:	b083      	sub	sp, #12
 80146de:	af00      	add	r7, sp, #0
 80146e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146e8:	2b04      	cmp	r3, #4
 80146ea:	d105      	bne.n	80146f8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80146f8:	2300      	movs	r3, #0
}
 80146fa:	4618      	mov	r0, r3
 80146fc:	370c      	adds	r7, #12
 80146fe:	46bd      	mov	sp, r7
 8014700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014704:	4770      	bx	lr

08014706 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014706:	b580      	push	{r7, lr}
 8014708:	b082      	sub	sp, #8
 801470a:	af00      	add	r7, sp, #0
 801470c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014714:	2b03      	cmp	r3, #3
 8014716:	d10b      	bne.n	8014730 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801471e:	69db      	ldr	r3, [r3, #28]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d005      	beq.n	8014730 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801472a:	69db      	ldr	r3, [r3, #28]
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014730:	2300      	movs	r3, #0
}
 8014732:	4618      	mov	r0, r3
 8014734:	3708      	adds	r7, #8
 8014736:	46bd      	mov	sp, r7
 8014738:	bd80      	pop	{r7, pc}

0801473a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801473a:	b480      	push	{r7}
 801473c:	b083      	sub	sp, #12
 801473e:	af00      	add	r7, sp, #0
 8014740:	6078      	str	r0, [r7, #4]
 8014742:	460b      	mov	r3, r1
 8014744:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8014746:	2300      	movs	r3, #0
}
 8014748:	4618      	mov	r0, r3
 801474a:	370c      	adds	r7, #12
 801474c:	46bd      	mov	sp, r7
 801474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014752:	4770      	bx	lr

08014754 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014754:	b480      	push	{r7}
 8014756:	b083      	sub	sp, #12
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
 801475c:	460b      	mov	r3, r1
 801475e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8014760:	2300      	movs	r3, #0
}
 8014762:	4618      	mov	r0, r3
 8014764:	370c      	adds	r7, #12
 8014766:	46bd      	mov	sp, r7
 8014768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476c:	4770      	bx	lr

0801476e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801476e:	b480      	push	{r7}
 8014770:	b083      	sub	sp, #12
 8014772:	af00      	add	r7, sp, #0
 8014774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014776:	2300      	movs	r3, #0
}
 8014778:	4618      	mov	r0, r3
 801477a:	370c      	adds	r7, #12
 801477c:	46bd      	mov	sp, r7
 801477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014782:	4770      	bx	lr

08014784 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b082      	sub	sp, #8
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	2201      	movs	r2, #1
 8014790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801479a:	2b00      	cmp	r3, #0
 801479c:	d009      	beq.n	80147b2 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147a4:	685b      	ldr	r3, [r3, #4]
 80147a6:	687a      	ldr	r2, [r7, #4]
 80147a8:	6852      	ldr	r2, [r2, #4]
 80147aa:	b2d2      	uxtb	r2, r2
 80147ac:	4611      	mov	r1, r2
 80147ae:	6878      	ldr	r0, [r7, #4]
 80147b0:	4798      	blx	r3
  }

  return USBD_OK;
 80147b2:	2300      	movs	r3, #0
}
 80147b4:	4618      	mov	r0, r3
 80147b6:	3708      	adds	r7, #8
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}

080147bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80147bc:	b480      	push	{r7}
 80147be:	b087      	sub	sp, #28
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80147ce:	697b      	ldr	r3, [r7, #20]
 80147d0:	3301      	adds	r3, #1
 80147d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80147d4:	697b      	ldr	r3, [r7, #20]
 80147d6:	781b      	ldrb	r3, [r3, #0]
 80147d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80147da:	8a3b      	ldrh	r3, [r7, #16]
 80147dc:	021b      	lsls	r3, r3, #8
 80147de:	b21a      	sxth	r2, r3
 80147e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80147e4:	4313      	orrs	r3, r2
 80147e6:	b21b      	sxth	r3, r3
 80147e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80147ea:	89fb      	ldrh	r3, [r7, #14]
}
 80147ec:	4618      	mov	r0, r3
 80147ee:	371c      	adds	r7, #28
 80147f0:	46bd      	mov	sp, r7
 80147f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f6:	4770      	bx	lr

080147f8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b084      	sub	sp, #16
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
 8014800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014802:	2300      	movs	r3, #0
 8014804:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014806:	683b      	ldr	r3, [r7, #0]
 8014808:	781b      	ldrb	r3, [r3, #0]
 801480a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801480e:	2b20      	cmp	r3, #32
 8014810:	d004      	beq.n	801481c <USBD_StdDevReq+0x24>
 8014812:	2b40      	cmp	r3, #64	; 0x40
 8014814:	d002      	beq.n	801481c <USBD_StdDevReq+0x24>
 8014816:	2b00      	cmp	r3, #0
 8014818:	d00a      	beq.n	8014830 <USBD_StdDevReq+0x38>
 801481a:	e050      	b.n	80148be <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014822:	689b      	ldr	r3, [r3, #8]
 8014824:	6839      	ldr	r1, [r7, #0]
 8014826:	6878      	ldr	r0, [r7, #4]
 8014828:	4798      	blx	r3
 801482a:	4603      	mov	r3, r0
 801482c:	73fb      	strb	r3, [r7, #15]
    break;
 801482e:	e04b      	b.n	80148c8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8014830:	683b      	ldr	r3, [r7, #0]
 8014832:	785b      	ldrb	r3, [r3, #1]
 8014834:	2b09      	cmp	r3, #9
 8014836:	d83c      	bhi.n	80148b2 <USBD_StdDevReq+0xba>
 8014838:	a201      	add	r2, pc, #4	; (adr r2, 8014840 <USBD_StdDevReq+0x48>)
 801483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801483e:	bf00      	nop
 8014840:	08014895 	.word	0x08014895
 8014844:	080148a9 	.word	0x080148a9
 8014848:	080148b3 	.word	0x080148b3
 801484c:	0801489f 	.word	0x0801489f
 8014850:	080148b3 	.word	0x080148b3
 8014854:	08014873 	.word	0x08014873
 8014858:	08014869 	.word	0x08014869
 801485c:	080148b3 	.word	0x080148b3
 8014860:	0801488b 	.word	0x0801488b
 8014864:	0801487d 	.word	0x0801487d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8014868:	6839      	ldr	r1, [r7, #0]
 801486a:	6878      	ldr	r0, [r7, #4]
 801486c:	f000 f9ce 	bl	8014c0c <USBD_GetDescriptor>
      break;
 8014870:	e024      	b.n	80148bc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8014872:	6839      	ldr	r1, [r7, #0]
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f000 fb33 	bl	8014ee0 <USBD_SetAddress>
      break;
 801487a:	e01f      	b.n	80148bc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 801487c:	6839      	ldr	r1, [r7, #0]
 801487e:	6878      	ldr	r0, [r7, #4]
 8014880:	f000 fb70 	bl	8014f64 <USBD_SetConfig>
 8014884:	4603      	mov	r3, r0
 8014886:	73fb      	strb	r3, [r7, #15]
      break;
 8014888:	e018      	b.n	80148bc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 801488a:	6839      	ldr	r1, [r7, #0]
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f000 fc0d 	bl	80150ac <USBD_GetConfig>
      break;
 8014892:	e013      	b.n	80148bc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8014894:	6839      	ldr	r1, [r7, #0]
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f000 fc3c 	bl	8015114 <USBD_GetStatus>
      break;
 801489c:	e00e      	b.n	80148bc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 801489e:	6839      	ldr	r1, [r7, #0]
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f000 fc6a 	bl	801517a <USBD_SetFeature>
      break;
 80148a6:	e009      	b.n	80148bc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80148a8:	6839      	ldr	r1, [r7, #0]
 80148aa:	6878      	ldr	r0, [r7, #4]
 80148ac:	f000 fc79 	bl	80151a2 <USBD_ClrFeature>
      break;
 80148b0:	e004      	b.n	80148bc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80148b2:	6839      	ldr	r1, [r7, #0]
 80148b4:	6878      	ldr	r0, [r7, #4]
 80148b6:	f000 fccf 	bl	8015258 <USBD_CtlError>
      break;
 80148ba:	bf00      	nop
    }
    break;
 80148bc:	e004      	b.n	80148c8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80148be:	6839      	ldr	r1, [r7, #0]
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f000 fcc9 	bl	8015258 <USBD_CtlError>
    break;
 80148c6:	bf00      	nop
  }

  return ret;
 80148c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80148ca:	4618      	mov	r0, r3
 80148cc:	3710      	adds	r7, #16
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}
 80148d2:	bf00      	nop

080148d4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b084      	sub	sp, #16
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80148de:	2300      	movs	r3, #0
 80148e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80148e2:	683b      	ldr	r3, [r7, #0]
 80148e4:	781b      	ldrb	r3, [r3, #0]
 80148e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80148ea:	2b20      	cmp	r3, #32
 80148ec:	d003      	beq.n	80148f6 <USBD_StdItfReq+0x22>
 80148ee:	2b40      	cmp	r3, #64	; 0x40
 80148f0:	d001      	beq.n	80148f6 <USBD_StdItfReq+0x22>
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d12a      	bne.n	801494c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148fc:	3b01      	subs	r3, #1
 80148fe:	2b02      	cmp	r3, #2
 8014900:	d81d      	bhi.n	801493e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	889b      	ldrh	r3, [r3, #4]
 8014906:	b2db      	uxtb	r3, r3
 8014908:	2b01      	cmp	r3, #1
 801490a:	d813      	bhi.n	8014934 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014912:	689b      	ldr	r3, [r3, #8]
 8014914:	6839      	ldr	r1, [r7, #0]
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	4798      	blx	r3
 801491a:	4603      	mov	r3, r0
 801491c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	88db      	ldrh	r3, [r3, #6]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d110      	bne.n	8014948 <USBD_StdItfReq+0x74>
 8014926:	7bfb      	ldrb	r3, [r7, #15]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d10d      	bne.n	8014948 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 801492c:	6878      	ldr	r0, [r7, #4]
 801492e:	f000 fd41 	bl	80153b4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8014932:	e009      	b.n	8014948 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8014934:	6839      	ldr	r1, [r7, #0]
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f000 fc8e 	bl	8015258 <USBD_CtlError>
      break;
 801493c:	e004      	b.n	8014948 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 801493e:	6839      	ldr	r1, [r7, #0]
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f000 fc89 	bl	8015258 <USBD_CtlError>
      break;
 8014946:	e000      	b.n	801494a <USBD_StdItfReq+0x76>
      break;
 8014948:	bf00      	nop
    }
    break;
 801494a:	e004      	b.n	8014956 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 801494c:	6839      	ldr	r1, [r7, #0]
 801494e:	6878      	ldr	r0, [r7, #4]
 8014950:	f000 fc82 	bl	8015258 <USBD_CtlError>
    break;
 8014954:	bf00      	nop
  }

  return ret;
 8014956:	7bfb      	ldrb	r3, [r7, #15]
}
 8014958:	4618      	mov	r0, r3
 801495a:	3710      	adds	r7, #16
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}

08014960 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b084      	sub	sp, #16
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801496a:	2300      	movs	r3, #0
 801496c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	889b      	ldrh	r3, [r3, #4]
 8014972:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	781b      	ldrb	r3, [r3, #0]
 8014978:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801497c:	2b20      	cmp	r3, #32
 801497e:	d004      	beq.n	801498a <USBD_StdEPReq+0x2a>
 8014980:	2b40      	cmp	r3, #64	; 0x40
 8014982:	d002      	beq.n	801498a <USBD_StdEPReq+0x2a>
 8014984:	2b00      	cmp	r3, #0
 8014986:	d00a      	beq.n	801499e <USBD_StdEPReq+0x3e>
 8014988:	e135      	b.n	8014bf6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014990:	689b      	ldr	r3, [r3, #8]
 8014992:	6839      	ldr	r1, [r7, #0]
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	4798      	blx	r3
 8014998:	4603      	mov	r3, r0
 801499a:	73fb      	strb	r3, [r7, #15]
    break;
 801499c:	e130      	b.n	8014c00 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801499e:	683b      	ldr	r3, [r7, #0]
 80149a0:	785b      	ldrb	r3, [r3, #1]
 80149a2:	2b01      	cmp	r3, #1
 80149a4:	d03e      	beq.n	8014a24 <USBD_StdEPReq+0xc4>
 80149a6:	2b03      	cmp	r3, #3
 80149a8:	d002      	beq.n	80149b0 <USBD_StdEPReq+0x50>
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d077      	beq.n	8014a9e <USBD_StdEPReq+0x13e>
 80149ae:	e11c      	b.n	8014bea <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149b6:	2b02      	cmp	r3, #2
 80149b8:	d002      	beq.n	80149c0 <USBD_StdEPReq+0x60>
 80149ba:	2b03      	cmp	r3, #3
 80149bc:	d015      	beq.n	80149ea <USBD_StdEPReq+0x8a>
 80149be:	e02b      	b.n	8014a18 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80149c0:	7bbb      	ldrb	r3, [r7, #14]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d00c      	beq.n	80149e0 <USBD_StdEPReq+0x80>
 80149c6:	7bbb      	ldrb	r3, [r7, #14]
 80149c8:	2b80      	cmp	r3, #128	; 0x80
 80149ca:	d009      	beq.n	80149e0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80149cc:	7bbb      	ldrb	r3, [r7, #14]
 80149ce:	4619      	mov	r1, r3
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f003 fbfa 	bl	80181ca <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80149d6:	2180      	movs	r1, #128	; 0x80
 80149d8:	6878      	ldr	r0, [r7, #4]
 80149da:	f003 fbf6 	bl	80181ca <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80149de:	e020      	b.n	8014a22 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80149e0:	6839      	ldr	r1, [r7, #0]
 80149e2:	6878      	ldr	r0, [r7, #4]
 80149e4:	f000 fc38 	bl	8015258 <USBD_CtlError>
        break;
 80149e8:	e01b      	b.n	8014a22 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	885b      	ldrh	r3, [r3, #2]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d10e      	bne.n	8014a10 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80149f2:	7bbb      	ldrb	r3, [r7, #14]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d00b      	beq.n	8014a10 <USBD_StdEPReq+0xb0>
 80149f8:	7bbb      	ldrb	r3, [r7, #14]
 80149fa:	2b80      	cmp	r3, #128	; 0x80
 80149fc:	d008      	beq.n	8014a10 <USBD_StdEPReq+0xb0>
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	88db      	ldrh	r3, [r3, #6]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d104      	bne.n	8014a10 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8014a06:	7bbb      	ldrb	r3, [r7, #14]
 8014a08:	4619      	mov	r1, r3
 8014a0a:	6878      	ldr	r0, [r7, #4]
 8014a0c:	f003 fbdd 	bl	80181ca <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f000 fccf 	bl	80153b4 <USBD_CtlSendStatus>

        break;
 8014a16:	e004      	b.n	8014a22 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8014a18:	6839      	ldr	r1, [r7, #0]
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f000 fc1c 	bl	8015258 <USBD_CtlError>
        break;
 8014a20:	bf00      	nop
      }
      break;
 8014a22:	e0e7      	b.n	8014bf4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a2a:	2b02      	cmp	r3, #2
 8014a2c:	d002      	beq.n	8014a34 <USBD_StdEPReq+0xd4>
 8014a2e:	2b03      	cmp	r3, #3
 8014a30:	d015      	beq.n	8014a5e <USBD_StdEPReq+0xfe>
 8014a32:	e02d      	b.n	8014a90 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014a34:	7bbb      	ldrb	r3, [r7, #14]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d00c      	beq.n	8014a54 <USBD_StdEPReq+0xf4>
 8014a3a:	7bbb      	ldrb	r3, [r7, #14]
 8014a3c:	2b80      	cmp	r3, #128	; 0x80
 8014a3e:	d009      	beq.n	8014a54 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8014a40:	7bbb      	ldrb	r3, [r7, #14]
 8014a42:	4619      	mov	r1, r3
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f003 fbc0 	bl	80181ca <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014a4a:	2180      	movs	r1, #128	; 0x80
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f003 fbbc 	bl	80181ca <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8014a52:	e023      	b.n	8014a9c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8014a54:	6839      	ldr	r1, [r7, #0]
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f000 fbfe 	bl	8015258 <USBD_CtlError>
        break;
 8014a5c:	e01e      	b.n	8014a9c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	885b      	ldrh	r3, [r3, #2]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d119      	bne.n	8014a9a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8014a66:	7bbb      	ldrb	r3, [r7, #14]
 8014a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d004      	beq.n	8014a7a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014a70:	7bbb      	ldrb	r3, [r7, #14]
 8014a72:	4619      	mov	r1, r3
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	f003 fbc7 	bl	8018208 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8014a7a:	6878      	ldr	r0, [r7, #4]
 8014a7c:	f000 fc9a 	bl	80153b4 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a86:	689b      	ldr	r3, [r3, #8]
 8014a88:	6839      	ldr	r1, [r7, #0]
 8014a8a:	6878      	ldr	r0, [r7, #4]
 8014a8c:	4798      	blx	r3
        }
        break;
 8014a8e:	e004      	b.n	8014a9a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8014a90:	6839      	ldr	r1, [r7, #0]
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f000 fbe0 	bl	8015258 <USBD_CtlError>
        break;
 8014a98:	e000      	b.n	8014a9c <USBD_StdEPReq+0x13c>
        break;
 8014a9a:	bf00      	nop
      }
      break;
 8014a9c:	e0aa      	b.n	8014bf4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014aa4:	2b02      	cmp	r3, #2
 8014aa6:	d002      	beq.n	8014aae <USBD_StdEPReq+0x14e>
 8014aa8:	2b03      	cmp	r3, #3
 8014aaa:	d032      	beq.n	8014b12 <USBD_StdEPReq+0x1b2>
 8014aac:	e097      	b.n	8014bde <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014aae:	7bbb      	ldrb	r3, [r7, #14]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d007      	beq.n	8014ac4 <USBD_StdEPReq+0x164>
 8014ab4:	7bbb      	ldrb	r3, [r7, #14]
 8014ab6:	2b80      	cmp	r3, #128	; 0x80
 8014ab8:	d004      	beq.n	8014ac4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8014aba:	6839      	ldr	r1, [r7, #0]
 8014abc:	6878      	ldr	r0, [r7, #4]
 8014abe:	f000 fbcb 	bl	8015258 <USBD_CtlError>
          break;
 8014ac2:	e091      	b.n	8014be8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	da0b      	bge.n	8014ae4 <USBD_StdEPReq+0x184>
 8014acc:	7bbb      	ldrb	r3, [r7, #14]
 8014ace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014ad2:	4613      	mov	r3, r2
 8014ad4:	009b      	lsls	r3, r3, #2
 8014ad6:	4413      	add	r3, r2
 8014ad8:	009b      	lsls	r3, r3, #2
 8014ada:	3310      	adds	r3, #16
 8014adc:	687a      	ldr	r2, [r7, #4]
 8014ade:	4413      	add	r3, r2
 8014ae0:	3304      	adds	r3, #4
 8014ae2:	e00b      	b.n	8014afc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8014ae4:	7bbb      	ldrb	r3, [r7, #14]
 8014ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014aea:	4613      	mov	r3, r2
 8014aec:	009b      	lsls	r3, r3, #2
 8014aee:	4413      	add	r3, r2
 8014af0:	009b      	lsls	r3, r3, #2
 8014af2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014af6:	687a      	ldr	r2, [r7, #4]
 8014af8:	4413      	add	r3, r2
 8014afa:	3304      	adds	r3, #4
 8014afc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	2200      	movs	r2, #0
 8014b02:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014b04:	68bb      	ldr	r3, [r7, #8]
 8014b06:	2202      	movs	r2, #2
 8014b08:	4619      	mov	r1, r3
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f000 fc15 	bl	801533a <USBD_CtlSendData>
        break;
 8014b10:	e06a      	b.n	8014be8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8014b12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	da11      	bge.n	8014b3e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014b1a:	7bbb      	ldrb	r3, [r7, #14]
 8014b1c:	f003 020f 	and.w	r2, r3, #15
 8014b20:	6879      	ldr	r1, [r7, #4]
 8014b22:	4613      	mov	r3, r2
 8014b24:	009b      	lsls	r3, r3, #2
 8014b26:	4413      	add	r3, r2
 8014b28:	009b      	lsls	r3, r3, #2
 8014b2a:	440b      	add	r3, r1
 8014b2c:	3324      	adds	r3, #36	; 0x24
 8014b2e:	881b      	ldrh	r3, [r3, #0]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d117      	bne.n	8014b64 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8014b34:	6839      	ldr	r1, [r7, #0]
 8014b36:	6878      	ldr	r0, [r7, #4]
 8014b38:	f000 fb8e 	bl	8015258 <USBD_CtlError>
            break;
 8014b3c:	e054      	b.n	8014be8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014b3e:	7bbb      	ldrb	r3, [r7, #14]
 8014b40:	f003 020f 	and.w	r2, r3, #15
 8014b44:	6879      	ldr	r1, [r7, #4]
 8014b46:	4613      	mov	r3, r2
 8014b48:	009b      	lsls	r3, r3, #2
 8014b4a:	4413      	add	r3, r2
 8014b4c:	009b      	lsls	r3, r3, #2
 8014b4e:	440b      	add	r3, r1
 8014b50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014b54:	881b      	ldrh	r3, [r3, #0]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d104      	bne.n	8014b64 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8014b5a:	6839      	ldr	r1, [r7, #0]
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	f000 fb7b 	bl	8015258 <USBD_CtlError>
            break;
 8014b62:	e041      	b.n	8014be8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014b64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	da0b      	bge.n	8014b84 <USBD_StdEPReq+0x224>
 8014b6c:	7bbb      	ldrb	r3, [r7, #14]
 8014b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014b72:	4613      	mov	r3, r2
 8014b74:	009b      	lsls	r3, r3, #2
 8014b76:	4413      	add	r3, r2
 8014b78:	009b      	lsls	r3, r3, #2
 8014b7a:	3310      	adds	r3, #16
 8014b7c:	687a      	ldr	r2, [r7, #4]
 8014b7e:	4413      	add	r3, r2
 8014b80:	3304      	adds	r3, #4
 8014b82:	e00b      	b.n	8014b9c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8014b84:	7bbb      	ldrb	r3, [r7, #14]
 8014b86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014b8a:	4613      	mov	r3, r2
 8014b8c:	009b      	lsls	r3, r3, #2
 8014b8e:	4413      	add	r3, r2
 8014b90:	009b      	lsls	r3, r3, #2
 8014b92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014b96:	687a      	ldr	r2, [r7, #4]
 8014b98:	4413      	add	r3, r2
 8014b9a:	3304      	adds	r3, #4
 8014b9c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014b9e:	7bbb      	ldrb	r3, [r7, #14]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d002      	beq.n	8014baa <USBD_StdEPReq+0x24a>
 8014ba4:	7bbb      	ldrb	r3, [r7, #14]
 8014ba6:	2b80      	cmp	r3, #128	; 0x80
 8014ba8:	d103      	bne.n	8014bb2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8014baa:	68bb      	ldr	r3, [r7, #8]
 8014bac:	2200      	movs	r2, #0
 8014bae:	601a      	str	r2, [r3, #0]
 8014bb0:	e00e      	b.n	8014bd0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014bb2:	7bbb      	ldrb	r3, [r7, #14]
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f003 fb45 	bl	8018246 <USBD_LL_IsStallEP>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d003      	beq.n	8014bca <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	2201      	movs	r2, #1
 8014bc6:	601a      	str	r2, [r3, #0]
 8014bc8:	e002      	b.n	8014bd0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8014bca:	68bb      	ldr	r3, [r7, #8]
 8014bcc:	2200      	movs	r2, #0
 8014bce:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	2202      	movs	r2, #2
 8014bd4:	4619      	mov	r1, r3
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	f000 fbaf 	bl	801533a <USBD_CtlSendData>
          break;
 8014bdc:	e004      	b.n	8014be8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8014bde:	6839      	ldr	r1, [r7, #0]
 8014be0:	6878      	ldr	r0, [r7, #4]
 8014be2:	f000 fb39 	bl	8015258 <USBD_CtlError>
        break;
 8014be6:	bf00      	nop
      }
      break;
 8014be8:	e004      	b.n	8014bf4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8014bea:	6839      	ldr	r1, [r7, #0]
 8014bec:	6878      	ldr	r0, [r7, #4]
 8014bee:	f000 fb33 	bl	8015258 <USBD_CtlError>
      break;
 8014bf2:	bf00      	nop
    }
    break;
 8014bf4:	e004      	b.n	8014c00 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8014bf6:	6839      	ldr	r1, [r7, #0]
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f000 fb2d 	bl	8015258 <USBD_CtlError>
    break;
 8014bfe:	bf00      	nop
  }

  return ret;
 8014c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c02:	4618      	mov	r0, r3
 8014c04:	3710      	adds	r7, #16
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}
	...

08014c0c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b084      	sub	sp, #16
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
 8014c14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014c16:	2300      	movs	r3, #0
 8014c18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	885b      	ldrh	r3, [r3, #2]
 8014c26:	0a1b      	lsrs	r3, r3, #8
 8014c28:	b29b      	uxth	r3, r3
 8014c2a:	3b01      	subs	r3, #1
 8014c2c:	2b06      	cmp	r3, #6
 8014c2e:	f200 8128 	bhi.w	8014e82 <USBD_GetDescriptor+0x276>
 8014c32:	a201      	add	r2, pc, #4	; (adr r2, 8014c38 <USBD_GetDescriptor+0x2c>)
 8014c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c38:	08014c55 	.word	0x08014c55
 8014c3c:	08014c6d 	.word	0x08014c6d
 8014c40:	08014cad 	.word	0x08014cad
 8014c44:	08014e83 	.word	0x08014e83
 8014c48:	08014e83 	.word	0x08014e83
 8014c4c:	08014e23 	.word	0x08014e23
 8014c50:	08014e4f 	.word	0x08014e4f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	687a      	ldr	r2, [r7, #4]
 8014c5e:	7c12      	ldrb	r2, [r2, #16]
 8014c60:	f107 0108 	add.w	r1, r7, #8
 8014c64:	4610      	mov	r0, r2
 8014c66:	4798      	blx	r3
 8014c68:	60f8      	str	r0, [r7, #12]
    break;
 8014c6a:	e112      	b.n	8014e92 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	7c1b      	ldrb	r3, [r3, #16]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d10d      	bne.n	8014c90 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c7c:	f107 0208 	add.w	r2, r7, #8
 8014c80:	4610      	mov	r0, r2
 8014c82:	4798      	blx	r3
 8014c84:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	3301      	adds	r3, #1
 8014c8a:	2202      	movs	r2, #2
 8014c8c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8014c8e:	e100      	b.n	8014e92 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c98:	f107 0208 	add.w	r2, r7, #8
 8014c9c:	4610      	mov	r0, r2
 8014c9e:	4798      	blx	r3
 8014ca0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	3301      	adds	r3, #1
 8014ca6:	2202      	movs	r2, #2
 8014ca8:	701a      	strb	r2, [r3, #0]
    break;
 8014caa:	e0f2      	b.n	8014e92 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8014cac:	683b      	ldr	r3, [r7, #0]
 8014cae:	885b      	ldrh	r3, [r3, #2]
 8014cb0:	b2db      	uxtb	r3, r3
 8014cb2:	2b05      	cmp	r3, #5
 8014cb4:	f200 80ac 	bhi.w	8014e10 <USBD_GetDescriptor+0x204>
 8014cb8:	a201      	add	r2, pc, #4	; (adr r2, 8014cc0 <USBD_GetDescriptor+0xb4>)
 8014cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cbe:	bf00      	nop
 8014cc0:	08014cd9 	.word	0x08014cd9
 8014cc4:	08014d0d 	.word	0x08014d0d
 8014cc8:	08014d41 	.word	0x08014d41
 8014ccc:	08014d75 	.word	0x08014d75
 8014cd0:	08014da9 	.word	0x08014da9
 8014cd4:	08014ddd 	.word	0x08014ddd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cde:	685b      	ldr	r3, [r3, #4]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d00b      	beq.n	8014cfc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cea:	685b      	ldr	r3, [r3, #4]
 8014cec:	687a      	ldr	r2, [r7, #4]
 8014cee:	7c12      	ldrb	r2, [r2, #16]
 8014cf0:	f107 0108 	add.w	r1, r7, #8
 8014cf4:	4610      	mov	r0, r2
 8014cf6:	4798      	blx	r3
 8014cf8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014cfa:	e091      	b.n	8014e20 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014cfc:	6839      	ldr	r1, [r7, #0]
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f000 faaa 	bl	8015258 <USBD_CtlError>
        err++;
 8014d04:	7afb      	ldrb	r3, [r7, #11]
 8014d06:	3301      	adds	r3, #1
 8014d08:	72fb      	strb	r3, [r7, #11]
      break;
 8014d0a:	e089      	b.n	8014e20 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d12:	689b      	ldr	r3, [r3, #8]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d00b      	beq.n	8014d30 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d1e:	689b      	ldr	r3, [r3, #8]
 8014d20:	687a      	ldr	r2, [r7, #4]
 8014d22:	7c12      	ldrb	r2, [r2, #16]
 8014d24:	f107 0108 	add.w	r1, r7, #8
 8014d28:	4610      	mov	r0, r2
 8014d2a:	4798      	blx	r3
 8014d2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d2e:	e077      	b.n	8014e20 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014d30:	6839      	ldr	r1, [r7, #0]
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f000 fa90 	bl	8015258 <USBD_CtlError>
        err++;
 8014d38:	7afb      	ldrb	r3, [r7, #11]
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	72fb      	strb	r3, [r7, #11]
      break;
 8014d3e:	e06f      	b.n	8014e20 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d46:	68db      	ldr	r3, [r3, #12]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d00b      	beq.n	8014d64 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d52:	68db      	ldr	r3, [r3, #12]
 8014d54:	687a      	ldr	r2, [r7, #4]
 8014d56:	7c12      	ldrb	r2, [r2, #16]
 8014d58:	f107 0108 	add.w	r1, r7, #8
 8014d5c:	4610      	mov	r0, r2
 8014d5e:	4798      	blx	r3
 8014d60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d62:	e05d      	b.n	8014e20 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014d64:	6839      	ldr	r1, [r7, #0]
 8014d66:	6878      	ldr	r0, [r7, #4]
 8014d68:	f000 fa76 	bl	8015258 <USBD_CtlError>
        err++;
 8014d6c:	7afb      	ldrb	r3, [r7, #11]
 8014d6e:	3301      	adds	r3, #1
 8014d70:	72fb      	strb	r3, [r7, #11]
      break;
 8014d72:	e055      	b.n	8014e20 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d7a:	691b      	ldr	r3, [r3, #16]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d00b      	beq.n	8014d98 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d86:	691b      	ldr	r3, [r3, #16]
 8014d88:	687a      	ldr	r2, [r7, #4]
 8014d8a:	7c12      	ldrb	r2, [r2, #16]
 8014d8c:	f107 0108 	add.w	r1, r7, #8
 8014d90:	4610      	mov	r0, r2
 8014d92:	4798      	blx	r3
 8014d94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d96:	e043      	b.n	8014e20 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014d98:	6839      	ldr	r1, [r7, #0]
 8014d9a:	6878      	ldr	r0, [r7, #4]
 8014d9c:	f000 fa5c 	bl	8015258 <USBD_CtlError>
        err++;
 8014da0:	7afb      	ldrb	r3, [r7, #11]
 8014da2:	3301      	adds	r3, #1
 8014da4:	72fb      	strb	r3, [r7, #11]
      break;
 8014da6:	e03b      	b.n	8014e20 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dae:	695b      	ldr	r3, [r3, #20]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d00b      	beq.n	8014dcc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dba:	695b      	ldr	r3, [r3, #20]
 8014dbc:	687a      	ldr	r2, [r7, #4]
 8014dbe:	7c12      	ldrb	r2, [r2, #16]
 8014dc0:	f107 0108 	add.w	r1, r7, #8
 8014dc4:	4610      	mov	r0, r2
 8014dc6:	4798      	blx	r3
 8014dc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014dca:	e029      	b.n	8014e20 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014dcc:	6839      	ldr	r1, [r7, #0]
 8014dce:	6878      	ldr	r0, [r7, #4]
 8014dd0:	f000 fa42 	bl	8015258 <USBD_CtlError>
        err++;
 8014dd4:	7afb      	ldrb	r3, [r7, #11]
 8014dd6:	3301      	adds	r3, #1
 8014dd8:	72fb      	strb	r3, [r7, #11]
      break;
 8014dda:	e021      	b.n	8014e20 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014de2:	699b      	ldr	r3, [r3, #24]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d00b      	beq.n	8014e00 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dee:	699b      	ldr	r3, [r3, #24]
 8014df0:	687a      	ldr	r2, [r7, #4]
 8014df2:	7c12      	ldrb	r2, [r2, #16]
 8014df4:	f107 0108 	add.w	r1, r7, #8
 8014df8:	4610      	mov	r0, r2
 8014dfa:	4798      	blx	r3
 8014dfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014dfe:	e00f      	b.n	8014e20 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014e00:	6839      	ldr	r1, [r7, #0]
 8014e02:	6878      	ldr	r0, [r7, #4]
 8014e04:	f000 fa28 	bl	8015258 <USBD_CtlError>
        err++;
 8014e08:	7afb      	ldrb	r3, [r7, #11]
 8014e0a:	3301      	adds	r3, #1
 8014e0c:	72fb      	strb	r3, [r7, #11]
      break;
 8014e0e:	e007      	b.n	8014e20 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8014e10:	6839      	ldr	r1, [r7, #0]
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	f000 fa20 	bl	8015258 <USBD_CtlError>
      err++;
 8014e18:	7afb      	ldrb	r3, [r7, #11]
 8014e1a:	3301      	adds	r3, #1
 8014e1c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8014e1e:	bf00      	nop
    }
    break;
 8014e20:	e037      	b.n	8014e92 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	7c1b      	ldrb	r3, [r3, #16]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d109      	bne.n	8014e3e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e32:	f107 0208 	add.w	r2, r7, #8
 8014e36:	4610      	mov	r0, r2
 8014e38:	4798      	blx	r3
 8014e3a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8014e3c:	e029      	b.n	8014e92 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8014e3e:	6839      	ldr	r1, [r7, #0]
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f000 fa09 	bl	8015258 <USBD_CtlError>
      err++;
 8014e46:	7afb      	ldrb	r3, [r7, #11]
 8014e48:	3301      	adds	r3, #1
 8014e4a:	72fb      	strb	r3, [r7, #11]
    break;
 8014e4c:	e021      	b.n	8014e92 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	7c1b      	ldrb	r3, [r3, #16]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d10d      	bne.n	8014e72 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e5e:	f107 0208 	add.w	r2, r7, #8
 8014e62:	4610      	mov	r0, r2
 8014e64:	4798      	blx	r3
 8014e66:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	3301      	adds	r3, #1
 8014e6c:	2207      	movs	r2, #7
 8014e6e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8014e70:	e00f      	b.n	8014e92 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8014e72:	6839      	ldr	r1, [r7, #0]
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f000 f9ef 	bl	8015258 <USBD_CtlError>
      err++;
 8014e7a:	7afb      	ldrb	r3, [r7, #11]
 8014e7c:	3301      	adds	r3, #1
 8014e7e:	72fb      	strb	r3, [r7, #11]
    break;
 8014e80:	e007      	b.n	8014e92 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8014e82:	6839      	ldr	r1, [r7, #0]
 8014e84:	6878      	ldr	r0, [r7, #4]
 8014e86:	f000 f9e7 	bl	8015258 <USBD_CtlError>
    err++;
 8014e8a:	7afb      	ldrb	r3, [r7, #11]
 8014e8c:	3301      	adds	r3, #1
 8014e8e:	72fb      	strb	r3, [r7, #11]
    break;
 8014e90:	bf00      	nop
  }

  if (err != 0U)
 8014e92:	7afb      	ldrb	r3, [r7, #11]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d11e      	bne.n	8014ed6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	88db      	ldrh	r3, [r3, #6]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d016      	beq.n	8014ece <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8014ea0:	893b      	ldrh	r3, [r7, #8]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d00e      	beq.n	8014ec4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	88da      	ldrh	r2, [r3, #6]
 8014eaa:	893b      	ldrh	r3, [r7, #8]
 8014eac:	4293      	cmp	r3, r2
 8014eae:	bf28      	it	cs
 8014eb0:	4613      	movcs	r3, r2
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8014eb6:	893b      	ldrh	r3, [r7, #8]
 8014eb8:	461a      	mov	r2, r3
 8014eba:	68f9      	ldr	r1, [r7, #12]
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f000 fa3c 	bl	801533a <USBD_CtlSendData>
 8014ec2:	e009      	b.n	8014ed8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8014ec4:	6839      	ldr	r1, [r7, #0]
 8014ec6:	6878      	ldr	r0, [r7, #4]
 8014ec8:	f000 f9c6 	bl	8015258 <USBD_CtlError>
 8014ecc:	e004      	b.n	8014ed8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8014ece:	6878      	ldr	r0, [r7, #4]
 8014ed0:	f000 fa70 	bl	80153b4 <USBD_CtlSendStatus>
 8014ed4:	e000      	b.n	8014ed8 <USBD_GetDescriptor+0x2cc>
    return;
 8014ed6:	bf00      	nop
    }
  }
}
 8014ed8:	3710      	adds	r7, #16
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bd80      	pop	{r7, pc}
 8014ede:	bf00      	nop

08014ee0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b084      	sub	sp, #16
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
 8014ee8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014eea:	683b      	ldr	r3, [r7, #0]
 8014eec:	889b      	ldrh	r3, [r3, #4]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d130      	bne.n	8014f54 <USBD_SetAddress+0x74>
 8014ef2:	683b      	ldr	r3, [r7, #0]
 8014ef4:	88db      	ldrh	r3, [r3, #6]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d12c      	bne.n	8014f54 <USBD_SetAddress+0x74>
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	885b      	ldrh	r3, [r3, #2]
 8014efe:	2b7f      	cmp	r3, #127	; 0x7f
 8014f00:	d828      	bhi.n	8014f54 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	885b      	ldrh	r3, [r3, #2]
 8014f06:	b2db      	uxtb	r3, r3
 8014f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f14:	2b03      	cmp	r3, #3
 8014f16:	d104      	bne.n	8014f22 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8014f18:	6839      	ldr	r1, [r7, #0]
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	f000 f99c 	bl	8015258 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f20:	e01c      	b.n	8014f5c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	7bfa      	ldrb	r2, [r7, #15]
 8014f26:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014f2a:	7bfb      	ldrb	r3, [r7, #15]
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f003 f9b5 	bl	801829e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014f34:	6878      	ldr	r0, [r7, #4]
 8014f36:	f000 fa3d 	bl	80153b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014f3a:	7bfb      	ldrb	r3, [r7, #15]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d004      	beq.n	8014f4a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2202      	movs	r2, #2
 8014f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f48:	e008      	b.n	8014f5c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	2201      	movs	r2, #1
 8014f4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f52:	e003      	b.n	8014f5c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014f54:	6839      	ldr	r1, [r7, #0]
 8014f56:	6878      	ldr	r0, [r7, #4]
 8014f58:	f000 f97e 	bl	8015258 <USBD_CtlError>
  }
}
 8014f5c:	bf00      	nop
 8014f5e:	3710      	adds	r7, #16
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}

08014f64 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b084      	sub	sp, #16
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
 8014f6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f6e:	2300      	movs	r3, #0
 8014f70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	885b      	ldrh	r3, [r3, #2]
 8014f76:	b2da      	uxtb	r2, r3
 8014f78:	4b4b      	ldr	r3, [pc, #300]	; (80150a8 <USBD_SetConfig+0x144>)
 8014f7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014f7c:	4b4a      	ldr	r3, [pc, #296]	; (80150a8 <USBD_SetConfig+0x144>)
 8014f7e:	781b      	ldrb	r3, [r3, #0]
 8014f80:	2b01      	cmp	r3, #1
 8014f82:	d905      	bls.n	8014f90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014f84:	6839      	ldr	r1, [r7, #0]
 8014f86:	6878      	ldr	r0, [r7, #4]
 8014f88:	f000 f966 	bl	8015258 <USBD_CtlError>
    return USBD_FAIL;
 8014f8c:	2303      	movs	r3, #3
 8014f8e:	e087      	b.n	80150a0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f96:	2b02      	cmp	r3, #2
 8014f98:	d002      	beq.n	8014fa0 <USBD_SetConfig+0x3c>
 8014f9a:	2b03      	cmp	r3, #3
 8014f9c:	d025      	beq.n	8014fea <USBD_SetConfig+0x86>
 8014f9e:	e071      	b.n	8015084 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8014fa0:	4b41      	ldr	r3, [pc, #260]	; (80150a8 <USBD_SetConfig+0x144>)
 8014fa2:	781b      	ldrb	r3, [r3, #0]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d01c      	beq.n	8014fe2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8014fa8:	4b3f      	ldr	r3, [pc, #252]	; (80150a8 <USBD_SetConfig+0x144>)
 8014faa:	781b      	ldrb	r3, [r3, #0]
 8014fac:	461a      	mov	r2, r3
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8014fb2:	4b3d      	ldr	r3, [pc, #244]	; (80150a8 <USBD_SetConfig+0x144>)
 8014fb4:	781b      	ldrb	r3, [r3, #0]
 8014fb6:	4619      	mov	r1, r3
 8014fb8:	6878      	ldr	r0, [r7, #4]
 8014fba:	f7ff f9a8 	bl	801430e <USBD_SetClassConfig>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8014fc2:	7bfb      	ldrb	r3, [r7, #15]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d004      	beq.n	8014fd2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8014fc8:	6839      	ldr	r1, [r7, #0]
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f000 f944 	bl	8015258 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8014fd0:	e065      	b.n	801509e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8014fd2:	6878      	ldr	r0, [r7, #4]
 8014fd4:	f000 f9ee 	bl	80153b4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	2203      	movs	r2, #3
 8014fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8014fe0:	e05d      	b.n	801509e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8014fe2:	6878      	ldr	r0, [r7, #4]
 8014fe4:	f000 f9e6 	bl	80153b4 <USBD_CtlSendStatus>
    break;
 8014fe8:	e059      	b.n	801509e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8014fea:	4b2f      	ldr	r3, [pc, #188]	; (80150a8 <USBD_SetConfig+0x144>)
 8014fec:	781b      	ldrb	r3, [r3, #0]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d112      	bne.n	8015018 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	2202      	movs	r2, #2
 8014ff6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8014ffa:	4b2b      	ldr	r3, [pc, #172]	; (80150a8 <USBD_SetConfig+0x144>)
 8014ffc:	781b      	ldrb	r3, [r3, #0]
 8014ffe:	461a      	mov	r2, r3
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015004:	4b28      	ldr	r3, [pc, #160]	; (80150a8 <USBD_SetConfig+0x144>)
 8015006:	781b      	ldrb	r3, [r3, #0]
 8015008:	4619      	mov	r1, r3
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f7ff f99b 	bl	8014346 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f000 f9cf 	bl	80153b4 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8015016:	e042      	b.n	801509e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8015018:	4b23      	ldr	r3, [pc, #140]	; (80150a8 <USBD_SetConfig+0x144>)
 801501a:	781b      	ldrb	r3, [r3, #0]
 801501c:	461a      	mov	r2, r3
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	685b      	ldr	r3, [r3, #4]
 8015022:	429a      	cmp	r2, r3
 8015024:	d02a      	beq.n	801507c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	685b      	ldr	r3, [r3, #4]
 801502a:	b2db      	uxtb	r3, r3
 801502c:	4619      	mov	r1, r3
 801502e:	6878      	ldr	r0, [r7, #4]
 8015030:	f7ff f989 	bl	8014346 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8015034:	4b1c      	ldr	r3, [pc, #112]	; (80150a8 <USBD_SetConfig+0x144>)
 8015036:	781b      	ldrb	r3, [r3, #0]
 8015038:	461a      	mov	r2, r3
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801503e:	4b1a      	ldr	r3, [pc, #104]	; (80150a8 <USBD_SetConfig+0x144>)
 8015040:	781b      	ldrb	r3, [r3, #0]
 8015042:	4619      	mov	r1, r3
 8015044:	6878      	ldr	r0, [r7, #4]
 8015046:	f7ff f962 	bl	801430e <USBD_SetClassConfig>
 801504a:	4603      	mov	r3, r0
 801504c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801504e:	7bfb      	ldrb	r3, [r7, #15]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d00f      	beq.n	8015074 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8015054:	6839      	ldr	r1, [r7, #0]
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f000 f8fe 	bl	8015258 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	685b      	ldr	r3, [r3, #4]
 8015060:	b2db      	uxtb	r3, r3
 8015062:	4619      	mov	r1, r3
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	f7ff f96e 	bl	8014346 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	2202      	movs	r2, #2
 801506e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8015072:	e014      	b.n	801509e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8015074:	6878      	ldr	r0, [r7, #4]
 8015076:	f000 f99d 	bl	80153b4 <USBD_CtlSendStatus>
    break;
 801507a:	e010      	b.n	801509e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801507c:	6878      	ldr	r0, [r7, #4]
 801507e:	f000 f999 	bl	80153b4 <USBD_CtlSendStatus>
    break;
 8015082:	e00c      	b.n	801509e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8015084:	6839      	ldr	r1, [r7, #0]
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f000 f8e6 	bl	8015258 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 801508c:	4b06      	ldr	r3, [pc, #24]	; (80150a8 <USBD_SetConfig+0x144>)
 801508e:	781b      	ldrb	r3, [r3, #0]
 8015090:	4619      	mov	r1, r3
 8015092:	6878      	ldr	r0, [r7, #4]
 8015094:	f7ff f957 	bl	8014346 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8015098:	2303      	movs	r3, #3
 801509a:	73fb      	strb	r3, [r7, #15]
    break;
 801509c:	bf00      	nop
  }

  return ret;
 801509e:	7bfb      	ldrb	r3, [r7, #15]
}
 80150a0:	4618      	mov	r0, r3
 80150a2:	3710      	adds	r7, #16
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}
 80150a8:	2404034c 	.word	0x2404034c

080150ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b082      	sub	sp, #8
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
 80150b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80150b6:	683b      	ldr	r3, [r7, #0]
 80150b8:	88db      	ldrh	r3, [r3, #6]
 80150ba:	2b01      	cmp	r3, #1
 80150bc:	d004      	beq.n	80150c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80150be:	6839      	ldr	r1, [r7, #0]
 80150c0:	6878      	ldr	r0, [r7, #4]
 80150c2:	f000 f8c9 	bl	8015258 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80150c6:	e021      	b.n	801510c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150ce:	2b01      	cmp	r3, #1
 80150d0:	db17      	blt.n	8015102 <USBD_GetConfig+0x56>
 80150d2:	2b02      	cmp	r3, #2
 80150d4:	dd02      	ble.n	80150dc <USBD_GetConfig+0x30>
 80150d6:	2b03      	cmp	r3, #3
 80150d8:	d00b      	beq.n	80150f2 <USBD_GetConfig+0x46>
 80150da:	e012      	b.n	8015102 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	2200      	movs	r2, #0
 80150e0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	3308      	adds	r3, #8
 80150e6:	2201      	movs	r2, #1
 80150e8:	4619      	mov	r1, r3
 80150ea:	6878      	ldr	r0, [r7, #4]
 80150ec:	f000 f925 	bl	801533a <USBD_CtlSendData>
      break;
 80150f0:	e00c      	b.n	801510c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	3304      	adds	r3, #4
 80150f6:	2201      	movs	r2, #1
 80150f8:	4619      	mov	r1, r3
 80150fa:	6878      	ldr	r0, [r7, #4]
 80150fc:	f000 f91d 	bl	801533a <USBD_CtlSendData>
      break;
 8015100:	e004      	b.n	801510c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8015102:	6839      	ldr	r1, [r7, #0]
 8015104:	6878      	ldr	r0, [r7, #4]
 8015106:	f000 f8a7 	bl	8015258 <USBD_CtlError>
      break;
 801510a:	bf00      	nop
}
 801510c:	bf00      	nop
 801510e:	3708      	adds	r7, #8
 8015110:	46bd      	mov	sp, r7
 8015112:	bd80      	pop	{r7, pc}

08015114 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b082      	sub	sp, #8
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
 801511c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015124:	3b01      	subs	r3, #1
 8015126:	2b02      	cmp	r3, #2
 8015128:	d81e      	bhi.n	8015168 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801512a:	683b      	ldr	r3, [r7, #0]
 801512c:	88db      	ldrh	r3, [r3, #6]
 801512e:	2b02      	cmp	r3, #2
 8015130:	d004      	beq.n	801513c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8015132:	6839      	ldr	r1, [r7, #0]
 8015134:	6878      	ldr	r0, [r7, #4]
 8015136:	f000 f88f 	bl	8015258 <USBD_CtlError>
      break;
 801513a:	e01a      	b.n	8015172 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2201      	movs	r2, #1
 8015140:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015148:	2b00      	cmp	r3, #0
 801514a:	d005      	beq.n	8015158 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	68db      	ldr	r3, [r3, #12]
 8015150:	f043 0202 	orr.w	r2, r3, #2
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	330c      	adds	r3, #12
 801515c:	2202      	movs	r2, #2
 801515e:	4619      	mov	r1, r3
 8015160:	6878      	ldr	r0, [r7, #4]
 8015162:	f000 f8ea 	bl	801533a <USBD_CtlSendData>
    break;
 8015166:	e004      	b.n	8015172 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8015168:	6839      	ldr	r1, [r7, #0]
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	f000 f874 	bl	8015258 <USBD_CtlError>
    break;
 8015170:	bf00      	nop
  }
}
 8015172:	bf00      	nop
 8015174:	3708      	adds	r7, #8
 8015176:	46bd      	mov	sp, r7
 8015178:	bd80      	pop	{r7, pc}

0801517a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801517a:	b580      	push	{r7, lr}
 801517c:	b082      	sub	sp, #8
 801517e:	af00      	add	r7, sp, #0
 8015180:	6078      	str	r0, [r7, #4]
 8015182:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015184:	683b      	ldr	r3, [r7, #0]
 8015186:	885b      	ldrh	r3, [r3, #2]
 8015188:	2b01      	cmp	r3, #1
 801518a:	d106      	bne.n	801519a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	2201      	movs	r2, #1
 8015190:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015194:	6878      	ldr	r0, [r7, #4]
 8015196:	f000 f90d 	bl	80153b4 <USBD_CtlSendStatus>
  }
}
 801519a:	bf00      	nop
 801519c:	3708      	adds	r7, #8
 801519e:	46bd      	mov	sp, r7
 80151a0:	bd80      	pop	{r7, pc}

080151a2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80151a2:	b580      	push	{r7, lr}
 80151a4:	b082      	sub	sp, #8
 80151a6:	af00      	add	r7, sp, #0
 80151a8:	6078      	str	r0, [r7, #4]
 80151aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151b2:	3b01      	subs	r3, #1
 80151b4:	2b02      	cmp	r3, #2
 80151b6:	d80b      	bhi.n	80151d0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80151b8:	683b      	ldr	r3, [r7, #0]
 80151ba:	885b      	ldrh	r3, [r3, #2]
 80151bc:	2b01      	cmp	r3, #1
 80151be:	d10c      	bne.n	80151da <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	2200      	movs	r2, #0
 80151c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80151c8:	6878      	ldr	r0, [r7, #4]
 80151ca:	f000 f8f3 	bl	80153b4 <USBD_CtlSendStatus>
      }
      break;
 80151ce:	e004      	b.n	80151da <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80151d0:	6839      	ldr	r1, [r7, #0]
 80151d2:	6878      	ldr	r0, [r7, #4]
 80151d4:	f000 f840 	bl	8015258 <USBD_CtlError>
      break;
 80151d8:	e000      	b.n	80151dc <USBD_ClrFeature+0x3a>
      break;
 80151da:	bf00      	nop
  }
}
 80151dc:	bf00      	nop
 80151de:	3708      	adds	r7, #8
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}

080151e4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b084      	sub	sp, #16
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80151ee:	683b      	ldr	r3, [r7, #0]
 80151f0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	781a      	ldrb	r2, [r3, #0]
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	3301      	adds	r3, #1
 80151fe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	781a      	ldrb	r2, [r3, #0]
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	3301      	adds	r3, #1
 801520c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801520e:	68f8      	ldr	r0, [r7, #12]
 8015210:	f7ff fad4 	bl	80147bc <SWAPBYTE>
 8015214:	4603      	mov	r3, r0
 8015216:	461a      	mov	r2, r3
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	3301      	adds	r3, #1
 8015220:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	3301      	adds	r3, #1
 8015226:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015228:	68f8      	ldr	r0, [r7, #12]
 801522a:	f7ff fac7 	bl	80147bc <SWAPBYTE>
 801522e:	4603      	mov	r3, r0
 8015230:	461a      	mov	r2, r3
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	3301      	adds	r3, #1
 801523a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	3301      	adds	r3, #1
 8015240:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015242:	68f8      	ldr	r0, [r7, #12]
 8015244:	f7ff faba 	bl	80147bc <SWAPBYTE>
 8015248:	4603      	mov	r3, r0
 801524a:	461a      	mov	r2, r3
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	80da      	strh	r2, [r3, #6]
}
 8015250:	bf00      	nop
 8015252:	3710      	adds	r7, #16
 8015254:	46bd      	mov	sp, r7
 8015256:	bd80      	pop	{r7, pc}

08015258 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b082      	sub	sp, #8
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
 8015260:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015262:	2180      	movs	r1, #128	; 0x80
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f002 ffb0 	bl	80181ca <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801526a:	2100      	movs	r1, #0
 801526c:	6878      	ldr	r0, [r7, #4]
 801526e:	f002 ffac 	bl	80181ca <USBD_LL_StallEP>
}
 8015272:	bf00      	nop
 8015274:	3708      	adds	r7, #8
 8015276:	46bd      	mov	sp, r7
 8015278:	bd80      	pop	{r7, pc}

0801527a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801527a:	b580      	push	{r7, lr}
 801527c:	b086      	sub	sp, #24
 801527e:	af00      	add	r7, sp, #0
 8015280:	60f8      	str	r0, [r7, #12]
 8015282:	60b9      	str	r1, [r7, #8]
 8015284:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015286:	2300      	movs	r3, #0
 8015288:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d036      	beq.n	80152fe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015294:	6938      	ldr	r0, [r7, #16]
 8015296:	f000 f836 	bl	8015306 <USBD_GetLen>
 801529a:	4603      	mov	r3, r0
 801529c:	3301      	adds	r3, #1
 801529e:	b29b      	uxth	r3, r3
 80152a0:	005b      	lsls	r3, r3, #1
 80152a2:	b29a      	uxth	r2, r3
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80152a8:	7dfb      	ldrb	r3, [r7, #23]
 80152aa:	68ba      	ldr	r2, [r7, #8]
 80152ac:	4413      	add	r3, r2
 80152ae:	687a      	ldr	r2, [r7, #4]
 80152b0:	7812      	ldrb	r2, [r2, #0]
 80152b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80152b4:	7dfb      	ldrb	r3, [r7, #23]
 80152b6:	3301      	adds	r3, #1
 80152b8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80152ba:	7dfb      	ldrb	r3, [r7, #23]
 80152bc:	68ba      	ldr	r2, [r7, #8]
 80152be:	4413      	add	r3, r2
 80152c0:	2203      	movs	r2, #3
 80152c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80152c4:	7dfb      	ldrb	r3, [r7, #23]
 80152c6:	3301      	adds	r3, #1
 80152c8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80152ca:	e013      	b.n	80152f4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80152cc:	7dfb      	ldrb	r3, [r7, #23]
 80152ce:	68ba      	ldr	r2, [r7, #8]
 80152d0:	4413      	add	r3, r2
 80152d2:	693a      	ldr	r2, [r7, #16]
 80152d4:	7812      	ldrb	r2, [r2, #0]
 80152d6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80152d8:	693b      	ldr	r3, [r7, #16]
 80152da:	3301      	adds	r3, #1
 80152dc:	613b      	str	r3, [r7, #16]
    idx++;
 80152de:	7dfb      	ldrb	r3, [r7, #23]
 80152e0:	3301      	adds	r3, #1
 80152e2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80152e4:	7dfb      	ldrb	r3, [r7, #23]
 80152e6:	68ba      	ldr	r2, [r7, #8]
 80152e8:	4413      	add	r3, r2
 80152ea:	2200      	movs	r2, #0
 80152ec:	701a      	strb	r2, [r3, #0]
    idx++;
 80152ee:	7dfb      	ldrb	r3, [r7, #23]
 80152f0:	3301      	adds	r3, #1
 80152f2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80152f4:	693b      	ldr	r3, [r7, #16]
 80152f6:	781b      	ldrb	r3, [r3, #0]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d1e7      	bne.n	80152cc <USBD_GetString+0x52>
 80152fc:	e000      	b.n	8015300 <USBD_GetString+0x86>
    return;
 80152fe:	bf00      	nop
  }
}
 8015300:	3718      	adds	r7, #24
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}

08015306 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015306:	b480      	push	{r7}
 8015308:	b085      	sub	sp, #20
 801530a:	af00      	add	r7, sp, #0
 801530c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801530e:	2300      	movs	r3, #0
 8015310:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015316:	e005      	b.n	8015324 <USBD_GetLen+0x1e>
  {
    len++;
 8015318:	7bfb      	ldrb	r3, [r7, #15]
 801531a:	3301      	adds	r3, #1
 801531c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801531e:	68bb      	ldr	r3, [r7, #8]
 8015320:	3301      	adds	r3, #1
 8015322:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015324:	68bb      	ldr	r3, [r7, #8]
 8015326:	781b      	ldrb	r3, [r3, #0]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d1f5      	bne.n	8015318 <USBD_GetLen+0x12>
  }

  return len;
 801532c:	7bfb      	ldrb	r3, [r7, #15]
}
 801532e:	4618      	mov	r0, r3
 8015330:	3714      	adds	r7, #20
 8015332:	46bd      	mov	sp, r7
 8015334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015338:	4770      	bx	lr

0801533a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801533a:	b580      	push	{r7, lr}
 801533c:	b084      	sub	sp, #16
 801533e:	af00      	add	r7, sp, #0
 8015340:	60f8      	str	r0, [r7, #12]
 8015342:	60b9      	str	r1, [r7, #8]
 8015344:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	2202      	movs	r2, #2
 801534a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	687a      	ldr	r2, [r7, #4]
 8015352:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	687a      	ldr	r2, [r7, #4]
 8015358:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	68ba      	ldr	r2, [r7, #8]
 801535e:	2100      	movs	r1, #0
 8015360:	68f8      	ldr	r0, [r7, #12]
 8015362:	f002 ffbb 	bl	80182dc <USBD_LL_Transmit>

  return USBD_OK;
 8015366:	2300      	movs	r3, #0
}
 8015368:	4618      	mov	r0, r3
 801536a:	3710      	adds	r7, #16
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}

08015370 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b084      	sub	sp, #16
 8015374:	af00      	add	r7, sp, #0
 8015376:	60f8      	str	r0, [r7, #12]
 8015378:	60b9      	str	r1, [r7, #8]
 801537a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	68ba      	ldr	r2, [r7, #8]
 8015380:	2100      	movs	r1, #0
 8015382:	68f8      	ldr	r0, [r7, #12]
 8015384:	f002 ffaa 	bl	80182dc <USBD_LL_Transmit>

  return USBD_OK;
 8015388:	2300      	movs	r3, #0
}
 801538a:	4618      	mov	r0, r3
 801538c:	3710      	adds	r7, #16
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}

08015392 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015392:	b580      	push	{r7, lr}
 8015394:	b084      	sub	sp, #16
 8015396:	af00      	add	r7, sp, #0
 8015398:	60f8      	str	r0, [r7, #12]
 801539a:	60b9      	str	r1, [r7, #8]
 801539c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	68ba      	ldr	r2, [r7, #8]
 80153a2:	2100      	movs	r1, #0
 80153a4:	68f8      	ldr	r0, [r7, #12]
 80153a6:	f002 ffba 	bl	801831e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80153aa:	2300      	movs	r3, #0
}
 80153ac:	4618      	mov	r0, r3
 80153ae:	3710      	adds	r7, #16
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}

080153b4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b082      	sub	sp, #8
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2204      	movs	r2, #4
 80153c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80153c4:	2300      	movs	r3, #0
 80153c6:	2200      	movs	r2, #0
 80153c8:	2100      	movs	r1, #0
 80153ca:	6878      	ldr	r0, [r7, #4]
 80153cc:	f002 ff86 	bl	80182dc <USBD_LL_Transmit>

  return USBD_OK;
 80153d0:	2300      	movs	r3, #0
}
 80153d2:	4618      	mov	r0, r3
 80153d4:	3708      	adds	r7, #8
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}

080153da <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80153da:	b580      	push	{r7, lr}
 80153dc:	b082      	sub	sp, #8
 80153de:	af00      	add	r7, sp, #0
 80153e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2205      	movs	r2, #5
 80153e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153ea:	2300      	movs	r3, #0
 80153ec:	2200      	movs	r2, #0
 80153ee:	2100      	movs	r1, #0
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f002 ff94 	bl	801831e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80153f6:	2300      	movs	r3, #0
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3708      	adds	r7, #8
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}

08015400 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b084      	sub	sp, #16
 8015404:	af00      	add	r7, sp, #0
 8015406:	4603      	mov	r3, r0
 8015408:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801540a:	79fb      	ldrb	r3, [r7, #7]
 801540c:	4a08      	ldr	r2, [pc, #32]	; (8015430 <disk_status+0x30>)
 801540e:	009b      	lsls	r3, r3, #2
 8015410:	4413      	add	r3, r2
 8015412:	685b      	ldr	r3, [r3, #4]
 8015414:	685b      	ldr	r3, [r3, #4]
 8015416:	79fa      	ldrb	r2, [r7, #7]
 8015418:	4905      	ldr	r1, [pc, #20]	; (8015430 <disk_status+0x30>)
 801541a:	440a      	add	r2, r1
 801541c:	7a12      	ldrb	r2, [r2, #8]
 801541e:	4610      	mov	r0, r2
 8015420:	4798      	blx	r3
 8015422:	4603      	mov	r3, r0
 8015424:	73fb      	strb	r3, [r7, #15]
  return stat;
 8015426:	7bfb      	ldrb	r3, [r7, #15]
}
 8015428:	4618      	mov	r0, r3
 801542a:	3710      	adds	r7, #16
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}
 8015430:	24040378 	.word	0x24040378

08015434 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b084      	sub	sp, #16
 8015438:	af00      	add	r7, sp, #0
 801543a:	4603      	mov	r3, r0
 801543c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801543e:	2300      	movs	r3, #0
 8015440:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8015442:	79fb      	ldrb	r3, [r7, #7]
 8015444:	4a0d      	ldr	r2, [pc, #52]	; (801547c <disk_initialize+0x48>)
 8015446:	5cd3      	ldrb	r3, [r2, r3]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d111      	bne.n	8015470 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801544c:	79fb      	ldrb	r3, [r7, #7]
 801544e:	4a0b      	ldr	r2, [pc, #44]	; (801547c <disk_initialize+0x48>)
 8015450:	2101      	movs	r1, #1
 8015452:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8015454:	79fb      	ldrb	r3, [r7, #7]
 8015456:	4a09      	ldr	r2, [pc, #36]	; (801547c <disk_initialize+0x48>)
 8015458:	009b      	lsls	r3, r3, #2
 801545a:	4413      	add	r3, r2
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	79fa      	ldrb	r2, [r7, #7]
 8015462:	4906      	ldr	r1, [pc, #24]	; (801547c <disk_initialize+0x48>)
 8015464:	440a      	add	r2, r1
 8015466:	7a12      	ldrb	r2, [r2, #8]
 8015468:	4610      	mov	r0, r2
 801546a:	4798      	blx	r3
 801546c:	4603      	mov	r3, r0
 801546e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8015470:	7bfb      	ldrb	r3, [r7, #15]
}
 8015472:	4618      	mov	r0, r3
 8015474:	3710      	adds	r7, #16
 8015476:	46bd      	mov	sp, r7
 8015478:	bd80      	pop	{r7, pc}
 801547a:	bf00      	nop
 801547c:	24040378 	.word	0x24040378

08015480 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8015480:	b590      	push	{r4, r7, lr}
 8015482:	b087      	sub	sp, #28
 8015484:	af00      	add	r7, sp, #0
 8015486:	60b9      	str	r1, [r7, #8]
 8015488:	607a      	str	r2, [r7, #4]
 801548a:	603b      	str	r3, [r7, #0]
 801548c:	4603      	mov	r3, r0
 801548e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8015490:	7bfb      	ldrb	r3, [r7, #15]
 8015492:	4a0a      	ldr	r2, [pc, #40]	; (80154bc <disk_read+0x3c>)
 8015494:	009b      	lsls	r3, r3, #2
 8015496:	4413      	add	r3, r2
 8015498:	685b      	ldr	r3, [r3, #4]
 801549a:	689c      	ldr	r4, [r3, #8]
 801549c:	7bfb      	ldrb	r3, [r7, #15]
 801549e:	4a07      	ldr	r2, [pc, #28]	; (80154bc <disk_read+0x3c>)
 80154a0:	4413      	add	r3, r2
 80154a2:	7a18      	ldrb	r0, [r3, #8]
 80154a4:	683b      	ldr	r3, [r7, #0]
 80154a6:	687a      	ldr	r2, [r7, #4]
 80154a8:	68b9      	ldr	r1, [r7, #8]
 80154aa:	47a0      	blx	r4
 80154ac:	4603      	mov	r3, r0
 80154ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80154b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80154b2:	4618      	mov	r0, r3
 80154b4:	371c      	adds	r7, #28
 80154b6:	46bd      	mov	sp, r7
 80154b8:	bd90      	pop	{r4, r7, pc}
 80154ba:	bf00      	nop
 80154bc:	24040378 	.word	0x24040378

080154c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80154c0:	b590      	push	{r4, r7, lr}
 80154c2:	b087      	sub	sp, #28
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	60b9      	str	r1, [r7, #8]
 80154c8:	607a      	str	r2, [r7, #4]
 80154ca:	603b      	str	r3, [r7, #0]
 80154cc:	4603      	mov	r3, r0
 80154ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80154d0:	7bfb      	ldrb	r3, [r7, #15]
 80154d2:	4a0a      	ldr	r2, [pc, #40]	; (80154fc <disk_write+0x3c>)
 80154d4:	009b      	lsls	r3, r3, #2
 80154d6:	4413      	add	r3, r2
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	68dc      	ldr	r4, [r3, #12]
 80154dc:	7bfb      	ldrb	r3, [r7, #15]
 80154de:	4a07      	ldr	r2, [pc, #28]	; (80154fc <disk_write+0x3c>)
 80154e0:	4413      	add	r3, r2
 80154e2:	7a18      	ldrb	r0, [r3, #8]
 80154e4:	683b      	ldr	r3, [r7, #0]
 80154e6:	687a      	ldr	r2, [r7, #4]
 80154e8:	68b9      	ldr	r1, [r7, #8]
 80154ea:	47a0      	blx	r4
 80154ec:	4603      	mov	r3, r0
 80154ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80154f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	371c      	adds	r7, #28
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd90      	pop	{r4, r7, pc}
 80154fa:	bf00      	nop
 80154fc:	24040378 	.word	0x24040378

08015500 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b084      	sub	sp, #16
 8015504:	af00      	add	r7, sp, #0
 8015506:	4603      	mov	r3, r0
 8015508:	603a      	str	r2, [r7, #0]
 801550a:	71fb      	strb	r3, [r7, #7]
 801550c:	460b      	mov	r3, r1
 801550e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015510:	79fb      	ldrb	r3, [r7, #7]
 8015512:	4a09      	ldr	r2, [pc, #36]	; (8015538 <disk_ioctl+0x38>)
 8015514:	009b      	lsls	r3, r3, #2
 8015516:	4413      	add	r3, r2
 8015518:	685b      	ldr	r3, [r3, #4]
 801551a:	691b      	ldr	r3, [r3, #16]
 801551c:	79fa      	ldrb	r2, [r7, #7]
 801551e:	4906      	ldr	r1, [pc, #24]	; (8015538 <disk_ioctl+0x38>)
 8015520:	440a      	add	r2, r1
 8015522:	7a10      	ldrb	r0, [r2, #8]
 8015524:	79b9      	ldrb	r1, [r7, #6]
 8015526:	683a      	ldr	r2, [r7, #0]
 8015528:	4798      	blx	r3
 801552a:	4603      	mov	r3, r0
 801552c:	73fb      	strb	r3, [r7, #15]
  return res;
 801552e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015530:	4618      	mov	r0, r3
 8015532:	3710      	adds	r7, #16
 8015534:	46bd      	mov	sp, r7
 8015536:	bd80      	pop	{r7, pc}
 8015538:	24040378 	.word	0x24040378

0801553c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801553c:	b480      	push	{r7}
 801553e:	b085      	sub	sp, #20
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	3301      	adds	r3, #1
 8015548:	781b      	ldrb	r3, [r3, #0]
 801554a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801554c:	89fb      	ldrh	r3, [r7, #14]
 801554e:	021b      	lsls	r3, r3, #8
 8015550:	b21a      	sxth	r2, r3
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	781b      	ldrb	r3, [r3, #0]
 8015556:	b21b      	sxth	r3, r3
 8015558:	4313      	orrs	r3, r2
 801555a:	b21b      	sxth	r3, r3
 801555c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801555e:	89fb      	ldrh	r3, [r7, #14]
}
 8015560:	4618      	mov	r0, r3
 8015562:	3714      	adds	r7, #20
 8015564:	46bd      	mov	sp, r7
 8015566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556a:	4770      	bx	lr

0801556c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801556c:	b480      	push	{r7}
 801556e:	b085      	sub	sp, #20
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	3303      	adds	r3, #3
 8015578:	781b      	ldrb	r3, [r3, #0]
 801557a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	021b      	lsls	r3, r3, #8
 8015580:	687a      	ldr	r2, [r7, #4]
 8015582:	3202      	adds	r2, #2
 8015584:	7812      	ldrb	r2, [r2, #0]
 8015586:	4313      	orrs	r3, r2
 8015588:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	021b      	lsls	r3, r3, #8
 801558e:	687a      	ldr	r2, [r7, #4]
 8015590:	3201      	adds	r2, #1
 8015592:	7812      	ldrb	r2, [r2, #0]
 8015594:	4313      	orrs	r3, r2
 8015596:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	021b      	lsls	r3, r3, #8
 801559c:	687a      	ldr	r2, [r7, #4]
 801559e:	7812      	ldrb	r2, [r2, #0]
 80155a0:	4313      	orrs	r3, r2
 80155a2:	60fb      	str	r3, [r7, #12]
	return rv;
 80155a4:	68fb      	ldr	r3, [r7, #12]
}
 80155a6:	4618      	mov	r0, r3
 80155a8:	3714      	adds	r7, #20
 80155aa:	46bd      	mov	sp, r7
 80155ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b0:	4770      	bx	lr

080155b2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80155b2:	b480      	push	{r7}
 80155b4:	b083      	sub	sp, #12
 80155b6:	af00      	add	r7, sp, #0
 80155b8:	6078      	str	r0, [r7, #4]
 80155ba:	460b      	mov	r3, r1
 80155bc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	1c5a      	adds	r2, r3, #1
 80155c2:	607a      	str	r2, [r7, #4]
 80155c4:	887a      	ldrh	r2, [r7, #2]
 80155c6:	b2d2      	uxtb	r2, r2
 80155c8:	701a      	strb	r2, [r3, #0]
 80155ca:	887b      	ldrh	r3, [r7, #2]
 80155cc:	0a1b      	lsrs	r3, r3, #8
 80155ce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	1c5a      	adds	r2, r3, #1
 80155d4:	607a      	str	r2, [r7, #4]
 80155d6:	887a      	ldrh	r2, [r7, #2]
 80155d8:	b2d2      	uxtb	r2, r2
 80155da:	701a      	strb	r2, [r3, #0]
}
 80155dc:	bf00      	nop
 80155de:	370c      	adds	r7, #12
 80155e0:	46bd      	mov	sp, r7
 80155e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e6:	4770      	bx	lr

080155e8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80155e8:	b480      	push	{r7}
 80155ea:	b083      	sub	sp, #12
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
 80155f0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	1c5a      	adds	r2, r3, #1
 80155f6:	607a      	str	r2, [r7, #4]
 80155f8:	683a      	ldr	r2, [r7, #0]
 80155fa:	b2d2      	uxtb	r2, r2
 80155fc:	701a      	strb	r2, [r3, #0]
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	0a1b      	lsrs	r3, r3, #8
 8015602:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	1c5a      	adds	r2, r3, #1
 8015608:	607a      	str	r2, [r7, #4]
 801560a:	683a      	ldr	r2, [r7, #0]
 801560c:	b2d2      	uxtb	r2, r2
 801560e:	701a      	strb	r2, [r3, #0]
 8015610:	683b      	ldr	r3, [r7, #0]
 8015612:	0a1b      	lsrs	r3, r3, #8
 8015614:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	1c5a      	adds	r2, r3, #1
 801561a:	607a      	str	r2, [r7, #4]
 801561c:	683a      	ldr	r2, [r7, #0]
 801561e:	b2d2      	uxtb	r2, r2
 8015620:	701a      	strb	r2, [r3, #0]
 8015622:	683b      	ldr	r3, [r7, #0]
 8015624:	0a1b      	lsrs	r3, r3, #8
 8015626:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	1c5a      	adds	r2, r3, #1
 801562c:	607a      	str	r2, [r7, #4]
 801562e:	683a      	ldr	r2, [r7, #0]
 8015630:	b2d2      	uxtb	r2, r2
 8015632:	701a      	strb	r2, [r3, #0]
}
 8015634:	bf00      	nop
 8015636:	370c      	adds	r7, #12
 8015638:	46bd      	mov	sp, r7
 801563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563e:	4770      	bx	lr

08015640 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015640:	b480      	push	{r7}
 8015642:	b087      	sub	sp, #28
 8015644:	af00      	add	r7, sp, #0
 8015646:	60f8      	str	r0, [r7, #12]
 8015648:	60b9      	str	r1, [r7, #8]
 801564a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d00d      	beq.n	8015676 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801565a:	693a      	ldr	r2, [r7, #16]
 801565c:	1c53      	adds	r3, r2, #1
 801565e:	613b      	str	r3, [r7, #16]
 8015660:	697b      	ldr	r3, [r7, #20]
 8015662:	1c59      	adds	r1, r3, #1
 8015664:	6179      	str	r1, [r7, #20]
 8015666:	7812      	ldrb	r2, [r2, #0]
 8015668:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	3b01      	subs	r3, #1
 801566e:	607b      	str	r3, [r7, #4]
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d1f1      	bne.n	801565a <mem_cpy+0x1a>
	}
}
 8015676:	bf00      	nop
 8015678:	371c      	adds	r7, #28
 801567a:	46bd      	mov	sp, r7
 801567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015680:	4770      	bx	lr

08015682 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8015682:	b480      	push	{r7}
 8015684:	b087      	sub	sp, #28
 8015686:	af00      	add	r7, sp, #0
 8015688:	60f8      	str	r0, [r7, #12]
 801568a:	60b9      	str	r1, [r7, #8]
 801568c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8015692:	697b      	ldr	r3, [r7, #20]
 8015694:	1c5a      	adds	r2, r3, #1
 8015696:	617a      	str	r2, [r7, #20]
 8015698:	68ba      	ldr	r2, [r7, #8]
 801569a:	b2d2      	uxtb	r2, r2
 801569c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	3b01      	subs	r3, #1
 80156a2:	607b      	str	r3, [r7, #4]
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d1f3      	bne.n	8015692 <mem_set+0x10>
}
 80156aa:	bf00      	nop
 80156ac:	371c      	adds	r7, #28
 80156ae:	46bd      	mov	sp, r7
 80156b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b4:	4770      	bx	lr

080156b6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80156b6:	b480      	push	{r7}
 80156b8:	b089      	sub	sp, #36	; 0x24
 80156ba:	af00      	add	r7, sp, #0
 80156bc:	60f8      	str	r0, [r7, #12]
 80156be:	60b9      	str	r1, [r7, #8]
 80156c0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	61fb      	str	r3, [r7, #28]
 80156c6:	68bb      	ldr	r3, [r7, #8]
 80156c8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80156ca:	2300      	movs	r3, #0
 80156cc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80156ce:	69fb      	ldr	r3, [r7, #28]
 80156d0:	1c5a      	adds	r2, r3, #1
 80156d2:	61fa      	str	r2, [r7, #28]
 80156d4:	781b      	ldrb	r3, [r3, #0]
 80156d6:	4619      	mov	r1, r3
 80156d8:	69bb      	ldr	r3, [r7, #24]
 80156da:	1c5a      	adds	r2, r3, #1
 80156dc:	61ba      	str	r2, [r7, #24]
 80156de:	781b      	ldrb	r3, [r3, #0]
 80156e0:	1acb      	subs	r3, r1, r3
 80156e2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	3b01      	subs	r3, #1
 80156e8:	607b      	str	r3, [r7, #4]
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d002      	beq.n	80156f6 <mem_cmp+0x40>
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d0eb      	beq.n	80156ce <mem_cmp+0x18>

	return r;
 80156f6:	697b      	ldr	r3, [r7, #20]
}
 80156f8:	4618      	mov	r0, r3
 80156fa:	3724      	adds	r7, #36	; 0x24
 80156fc:	46bd      	mov	sp, r7
 80156fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015702:	4770      	bx	lr

08015704 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8015704:	b480      	push	{r7}
 8015706:	b083      	sub	sp, #12
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
 801570c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801570e:	e002      	b.n	8015716 <chk_chr+0x12>
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	3301      	adds	r3, #1
 8015714:	607b      	str	r3, [r7, #4]
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	781b      	ldrb	r3, [r3, #0]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d005      	beq.n	801572a <chk_chr+0x26>
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	781b      	ldrb	r3, [r3, #0]
 8015722:	461a      	mov	r2, r3
 8015724:	683b      	ldr	r3, [r7, #0]
 8015726:	4293      	cmp	r3, r2
 8015728:	d1f2      	bne.n	8015710 <chk_chr+0xc>
	return *str;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	781b      	ldrb	r3, [r3, #0]
}
 801572e:	4618      	mov	r0, r3
 8015730:	370c      	adds	r7, #12
 8015732:	46bd      	mov	sp, r7
 8015734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015738:	4770      	bx	lr
	...

0801573c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801573c:	b480      	push	{r7}
 801573e:	b085      	sub	sp, #20
 8015740:	af00      	add	r7, sp, #0
 8015742:	6078      	str	r0, [r7, #4]
 8015744:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015746:	2300      	movs	r3, #0
 8015748:	60bb      	str	r3, [r7, #8]
 801574a:	68bb      	ldr	r3, [r7, #8]
 801574c:	60fb      	str	r3, [r7, #12]
 801574e:	e029      	b.n	80157a4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8015750:	4a27      	ldr	r2, [pc, #156]	; (80157f0 <chk_lock+0xb4>)
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	011b      	lsls	r3, r3, #4
 8015756:	4413      	add	r3, r2
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d01d      	beq.n	801579a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801575e:	4a24      	ldr	r2, [pc, #144]	; (80157f0 <chk_lock+0xb4>)
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	011b      	lsls	r3, r3, #4
 8015764:	4413      	add	r3, r2
 8015766:	681a      	ldr	r2, [r3, #0]
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	429a      	cmp	r2, r3
 801576e:	d116      	bne.n	801579e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8015770:	4a1f      	ldr	r2, [pc, #124]	; (80157f0 <chk_lock+0xb4>)
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	011b      	lsls	r3, r3, #4
 8015776:	4413      	add	r3, r2
 8015778:	3304      	adds	r3, #4
 801577a:	681a      	ldr	r2, [r3, #0]
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8015780:	429a      	cmp	r2, r3
 8015782:	d10c      	bne.n	801579e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015784:	4a1a      	ldr	r2, [pc, #104]	; (80157f0 <chk_lock+0xb4>)
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	011b      	lsls	r3, r3, #4
 801578a:	4413      	add	r3, r2
 801578c:	3308      	adds	r3, #8
 801578e:	681a      	ldr	r2, [r3, #0]
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8015794:	429a      	cmp	r2, r3
 8015796:	d102      	bne.n	801579e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015798:	e007      	b.n	80157aa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801579a:	2301      	movs	r3, #1
 801579c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	3301      	adds	r3, #1
 80157a2:	60fb      	str	r3, [r7, #12]
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	2b01      	cmp	r3, #1
 80157a8:	d9d2      	bls.n	8015750 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	2b02      	cmp	r3, #2
 80157ae:	d109      	bne.n	80157c4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80157b0:	68bb      	ldr	r3, [r7, #8]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d102      	bne.n	80157bc <chk_lock+0x80>
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	2b02      	cmp	r3, #2
 80157ba:	d101      	bne.n	80157c0 <chk_lock+0x84>
 80157bc:	2300      	movs	r3, #0
 80157be:	e010      	b.n	80157e2 <chk_lock+0xa6>
 80157c0:	2312      	movs	r3, #18
 80157c2:	e00e      	b.n	80157e2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80157c4:	683b      	ldr	r3, [r7, #0]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d108      	bne.n	80157dc <chk_lock+0xa0>
 80157ca:	4a09      	ldr	r2, [pc, #36]	; (80157f0 <chk_lock+0xb4>)
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	011b      	lsls	r3, r3, #4
 80157d0:	4413      	add	r3, r2
 80157d2:	330c      	adds	r3, #12
 80157d4:	881b      	ldrh	r3, [r3, #0]
 80157d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80157da:	d101      	bne.n	80157e0 <chk_lock+0xa4>
 80157dc:	2310      	movs	r3, #16
 80157de:	e000      	b.n	80157e2 <chk_lock+0xa6>
 80157e0:	2300      	movs	r3, #0
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	3714      	adds	r7, #20
 80157e6:	46bd      	mov	sp, r7
 80157e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ec:	4770      	bx	lr
 80157ee:	bf00      	nop
 80157f0:	24040358 	.word	0x24040358

080157f4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80157f4:	b480      	push	{r7}
 80157f6:	b083      	sub	sp, #12
 80157f8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80157fa:	2300      	movs	r3, #0
 80157fc:	607b      	str	r3, [r7, #4]
 80157fe:	e002      	b.n	8015806 <enq_lock+0x12>
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	3301      	adds	r3, #1
 8015804:	607b      	str	r3, [r7, #4]
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	2b01      	cmp	r3, #1
 801580a:	d806      	bhi.n	801581a <enq_lock+0x26>
 801580c:	4a09      	ldr	r2, [pc, #36]	; (8015834 <enq_lock+0x40>)
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	011b      	lsls	r3, r3, #4
 8015812:	4413      	add	r3, r2
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d1f2      	bne.n	8015800 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	2b02      	cmp	r3, #2
 801581e:	bf14      	ite	ne
 8015820:	2301      	movne	r3, #1
 8015822:	2300      	moveq	r3, #0
 8015824:	b2db      	uxtb	r3, r3
}
 8015826:	4618      	mov	r0, r3
 8015828:	370c      	adds	r7, #12
 801582a:	46bd      	mov	sp, r7
 801582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015830:	4770      	bx	lr
 8015832:	bf00      	nop
 8015834:	24040358 	.word	0x24040358

08015838 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015838:	b480      	push	{r7}
 801583a:	b085      	sub	sp, #20
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
 8015840:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015842:	2300      	movs	r3, #0
 8015844:	60fb      	str	r3, [r7, #12]
 8015846:	e01f      	b.n	8015888 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8015848:	4a41      	ldr	r2, [pc, #260]	; (8015950 <inc_lock+0x118>)
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	011b      	lsls	r3, r3, #4
 801584e:	4413      	add	r3, r2
 8015850:	681a      	ldr	r2, [r3, #0]
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	429a      	cmp	r2, r3
 8015858:	d113      	bne.n	8015882 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801585a:	4a3d      	ldr	r2, [pc, #244]	; (8015950 <inc_lock+0x118>)
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	011b      	lsls	r3, r3, #4
 8015860:	4413      	add	r3, r2
 8015862:	3304      	adds	r3, #4
 8015864:	681a      	ldr	r2, [r3, #0]
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801586a:	429a      	cmp	r2, r3
 801586c:	d109      	bne.n	8015882 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801586e:	4a38      	ldr	r2, [pc, #224]	; (8015950 <inc_lock+0x118>)
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	011b      	lsls	r3, r3, #4
 8015874:	4413      	add	r3, r2
 8015876:	3308      	adds	r3, #8
 8015878:	681a      	ldr	r2, [r3, #0]
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801587e:	429a      	cmp	r2, r3
 8015880:	d006      	beq.n	8015890 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	3301      	adds	r3, #1
 8015886:	60fb      	str	r3, [r7, #12]
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	2b01      	cmp	r3, #1
 801588c:	d9dc      	bls.n	8015848 <inc_lock+0x10>
 801588e:	e000      	b.n	8015892 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8015890:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	2b02      	cmp	r3, #2
 8015896:	d132      	bne.n	80158fe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015898:	2300      	movs	r3, #0
 801589a:	60fb      	str	r3, [r7, #12]
 801589c:	e002      	b.n	80158a4 <inc_lock+0x6c>
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	3301      	adds	r3, #1
 80158a2:	60fb      	str	r3, [r7, #12]
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	2b01      	cmp	r3, #1
 80158a8:	d806      	bhi.n	80158b8 <inc_lock+0x80>
 80158aa:	4a29      	ldr	r2, [pc, #164]	; (8015950 <inc_lock+0x118>)
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	011b      	lsls	r3, r3, #4
 80158b0:	4413      	add	r3, r2
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d1f2      	bne.n	801589e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	2b02      	cmp	r3, #2
 80158bc:	d101      	bne.n	80158c2 <inc_lock+0x8a>
 80158be:	2300      	movs	r3, #0
 80158c0:	e040      	b.n	8015944 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	681a      	ldr	r2, [r3, #0]
 80158c6:	4922      	ldr	r1, [pc, #136]	; (8015950 <inc_lock+0x118>)
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	011b      	lsls	r3, r3, #4
 80158cc:	440b      	add	r3, r1
 80158ce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	689a      	ldr	r2, [r3, #8]
 80158d4:	491e      	ldr	r1, [pc, #120]	; (8015950 <inc_lock+0x118>)
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	011b      	lsls	r3, r3, #4
 80158da:	440b      	add	r3, r1
 80158dc:	3304      	adds	r3, #4
 80158de:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	695a      	ldr	r2, [r3, #20]
 80158e4:	491a      	ldr	r1, [pc, #104]	; (8015950 <inc_lock+0x118>)
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	011b      	lsls	r3, r3, #4
 80158ea:	440b      	add	r3, r1
 80158ec:	3308      	adds	r3, #8
 80158ee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80158f0:	4a17      	ldr	r2, [pc, #92]	; (8015950 <inc_lock+0x118>)
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	011b      	lsls	r3, r3, #4
 80158f6:	4413      	add	r3, r2
 80158f8:	330c      	adds	r3, #12
 80158fa:	2200      	movs	r2, #0
 80158fc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80158fe:	683b      	ldr	r3, [r7, #0]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d009      	beq.n	8015918 <inc_lock+0xe0>
 8015904:	4a12      	ldr	r2, [pc, #72]	; (8015950 <inc_lock+0x118>)
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	011b      	lsls	r3, r3, #4
 801590a:	4413      	add	r3, r2
 801590c:	330c      	adds	r3, #12
 801590e:	881b      	ldrh	r3, [r3, #0]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d001      	beq.n	8015918 <inc_lock+0xe0>
 8015914:	2300      	movs	r3, #0
 8015916:	e015      	b.n	8015944 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015918:	683b      	ldr	r3, [r7, #0]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d108      	bne.n	8015930 <inc_lock+0xf8>
 801591e:	4a0c      	ldr	r2, [pc, #48]	; (8015950 <inc_lock+0x118>)
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	011b      	lsls	r3, r3, #4
 8015924:	4413      	add	r3, r2
 8015926:	330c      	adds	r3, #12
 8015928:	881b      	ldrh	r3, [r3, #0]
 801592a:	3301      	adds	r3, #1
 801592c:	b29a      	uxth	r2, r3
 801592e:	e001      	b.n	8015934 <inc_lock+0xfc>
 8015930:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015934:	4906      	ldr	r1, [pc, #24]	; (8015950 <inc_lock+0x118>)
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	011b      	lsls	r3, r3, #4
 801593a:	440b      	add	r3, r1
 801593c:	330c      	adds	r3, #12
 801593e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	3301      	adds	r3, #1
}
 8015944:	4618      	mov	r0, r3
 8015946:	3714      	adds	r7, #20
 8015948:	46bd      	mov	sp, r7
 801594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594e:	4770      	bx	lr
 8015950:	24040358 	.word	0x24040358

08015954 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8015954:	b480      	push	{r7}
 8015956:	b085      	sub	sp, #20
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	3b01      	subs	r3, #1
 8015960:	607b      	str	r3, [r7, #4]
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	2b01      	cmp	r3, #1
 8015966:	d825      	bhi.n	80159b4 <dec_lock+0x60>
		n = Files[i].ctr;
 8015968:	4a17      	ldr	r2, [pc, #92]	; (80159c8 <dec_lock+0x74>)
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	011b      	lsls	r3, r3, #4
 801596e:	4413      	add	r3, r2
 8015970:	330c      	adds	r3, #12
 8015972:	881b      	ldrh	r3, [r3, #0]
 8015974:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015976:	89fb      	ldrh	r3, [r7, #14]
 8015978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801597c:	d101      	bne.n	8015982 <dec_lock+0x2e>
 801597e:	2300      	movs	r3, #0
 8015980:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8015982:	89fb      	ldrh	r3, [r7, #14]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d002      	beq.n	801598e <dec_lock+0x3a>
 8015988:	89fb      	ldrh	r3, [r7, #14]
 801598a:	3b01      	subs	r3, #1
 801598c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801598e:	4a0e      	ldr	r2, [pc, #56]	; (80159c8 <dec_lock+0x74>)
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	011b      	lsls	r3, r3, #4
 8015994:	4413      	add	r3, r2
 8015996:	330c      	adds	r3, #12
 8015998:	89fa      	ldrh	r2, [r7, #14]
 801599a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801599c:	89fb      	ldrh	r3, [r7, #14]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d105      	bne.n	80159ae <dec_lock+0x5a>
 80159a2:	4a09      	ldr	r2, [pc, #36]	; (80159c8 <dec_lock+0x74>)
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	011b      	lsls	r3, r3, #4
 80159a8:	4413      	add	r3, r2
 80159aa:	2200      	movs	r2, #0
 80159ac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80159ae:	2300      	movs	r3, #0
 80159b0:	737b      	strb	r3, [r7, #13]
 80159b2:	e001      	b.n	80159b8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80159b4:	2302      	movs	r3, #2
 80159b6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80159b8:	7b7b      	ldrb	r3, [r7, #13]
}
 80159ba:	4618      	mov	r0, r3
 80159bc:	3714      	adds	r7, #20
 80159be:	46bd      	mov	sp, r7
 80159c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c4:	4770      	bx	lr
 80159c6:	bf00      	nop
 80159c8:	24040358 	.word	0x24040358

080159cc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80159cc:	b480      	push	{r7}
 80159ce:	b085      	sub	sp, #20
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80159d4:	2300      	movs	r3, #0
 80159d6:	60fb      	str	r3, [r7, #12]
 80159d8:	e010      	b.n	80159fc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80159da:	4a0d      	ldr	r2, [pc, #52]	; (8015a10 <clear_lock+0x44>)
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	011b      	lsls	r3, r3, #4
 80159e0:	4413      	add	r3, r2
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	687a      	ldr	r2, [r7, #4]
 80159e6:	429a      	cmp	r2, r3
 80159e8:	d105      	bne.n	80159f6 <clear_lock+0x2a>
 80159ea:	4a09      	ldr	r2, [pc, #36]	; (8015a10 <clear_lock+0x44>)
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	011b      	lsls	r3, r3, #4
 80159f0:	4413      	add	r3, r2
 80159f2:	2200      	movs	r2, #0
 80159f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	3301      	adds	r3, #1
 80159fa:	60fb      	str	r3, [r7, #12]
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	2b01      	cmp	r3, #1
 8015a00:	d9eb      	bls.n	80159da <clear_lock+0xe>
	}
}
 8015a02:	bf00      	nop
 8015a04:	3714      	adds	r7, #20
 8015a06:	46bd      	mov	sp, r7
 8015a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0c:	4770      	bx	lr
 8015a0e:	bf00      	nop
 8015a10:	24040358 	.word	0x24040358

08015a14 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b086      	sub	sp, #24
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	78db      	ldrb	r3, [r3, #3]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d034      	beq.n	8015a92 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a2c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	7858      	ldrb	r0, [r3, #1]
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015a38:	2301      	movs	r3, #1
 8015a3a:	697a      	ldr	r2, [r7, #20]
 8015a3c:	f7ff fd40 	bl	80154c0 <disk_write>
 8015a40:	4603      	mov	r3, r0
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d002      	beq.n	8015a4c <sync_window+0x38>
			res = FR_DISK_ERR;
 8015a46:	2301      	movs	r3, #1
 8015a48:	73fb      	strb	r3, [r7, #15]
 8015a4a:	e022      	b.n	8015a92 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2200      	movs	r2, #0
 8015a50:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	6a1b      	ldr	r3, [r3, #32]
 8015a56:	697a      	ldr	r2, [r7, #20]
 8015a58:	1ad2      	subs	r2, r2, r3
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	699b      	ldr	r3, [r3, #24]
 8015a5e:	429a      	cmp	r2, r3
 8015a60:	d217      	bcs.n	8015a92 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	789b      	ldrb	r3, [r3, #2]
 8015a66:	613b      	str	r3, [r7, #16]
 8015a68:	e010      	b.n	8015a8c <sync_window+0x78>
					wsect += fs->fsize;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	699b      	ldr	r3, [r3, #24]
 8015a6e:	697a      	ldr	r2, [r7, #20]
 8015a70:	4413      	add	r3, r2
 8015a72:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	7858      	ldrb	r0, [r3, #1]
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015a7e:	2301      	movs	r3, #1
 8015a80:	697a      	ldr	r2, [r7, #20]
 8015a82:	f7ff fd1d 	bl	80154c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015a86:	693b      	ldr	r3, [r7, #16]
 8015a88:	3b01      	subs	r3, #1
 8015a8a:	613b      	str	r3, [r7, #16]
 8015a8c:	693b      	ldr	r3, [r7, #16]
 8015a8e:	2b01      	cmp	r3, #1
 8015a90:	d8eb      	bhi.n	8015a6a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a94:	4618      	mov	r0, r3
 8015a96:	3718      	adds	r7, #24
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd80      	pop	{r7, pc}

08015a9c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b084      	sub	sp, #16
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
 8015aa4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015aae:	683a      	ldr	r2, [r7, #0]
 8015ab0:	429a      	cmp	r2, r3
 8015ab2:	d01b      	beq.n	8015aec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015ab4:	6878      	ldr	r0, [r7, #4]
 8015ab6:	f7ff ffad 	bl	8015a14 <sync_window>
 8015aba:	4603      	mov	r3, r0
 8015abc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015abe:	7bfb      	ldrb	r3, [r7, #15]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d113      	bne.n	8015aec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	7858      	ldrb	r0, [r3, #1]
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015ace:	2301      	movs	r3, #1
 8015ad0:	683a      	ldr	r2, [r7, #0]
 8015ad2:	f7ff fcd5 	bl	8015480 <disk_read>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d004      	beq.n	8015ae6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015adc:	f04f 33ff 	mov.w	r3, #4294967295
 8015ae0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	683a      	ldr	r2, [r7, #0]
 8015aea:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8015aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	3710      	adds	r7, #16
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}
	...

08015af8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b084      	sub	sp, #16
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f7ff ff87 	bl	8015a14 <sync_window>
 8015b06:	4603      	mov	r3, r0
 8015b08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015b0a:	7bfb      	ldrb	r3, [r7, #15]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d158      	bne.n	8015bc2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	781b      	ldrb	r3, [r3, #0]
 8015b14:	2b03      	cmp	r3, #3
 8015b16:	d148      	bne.n	8015baa <sync_fs+0xb2>
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	791b      	ldrb	r3, [r3, #4]
 8015b1c:	2b01      	cmp	r3, #1
 8015b1e:	d144      	bne.n	8015baa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	3330      	adds	r3, #48	; 0x30
 8015b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015b28:	2100      	movs	r1, #0
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f7ff fda9 	bl	8015682 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	3330      	adds	r3, #48	; 0x30
 8015b34:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015b38:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f7ff fd38 	bl	80155b2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	3330      	adds	r3, #48	; 0x30
 8015b46:	4921      	ldr	r1, [pc, #132]	; (8015bcc <sync_fs+0xd4>)
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f7ff fd4d 	bl	80155e8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	3330      	adds	r3, #48	; 0x30
 8015b52:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015b56:	491e      	ldr	r1, [pc, #120]	; (8015bd0 <sync_fs+0xd8>)
 8015b58:	4618      	mov	r0, r3
 8015b5a:	f7ff fd45 	bl	80155e8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	3330      	adds	r3, #48	; 0x30
 8015b62:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	691b      	ldr	r3, [r3, #16]
 8015b6a:	4619      	mov	r1, r3
 8015b6c:	4610      	mov	r0, r2
 8015b6e:	f7ff fd3b 	bl	80155e8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	3330      	adds	r3, #48	; 0x30
 8015b76:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	68db      	ldr	r3, [r3, #12]
 8015b7e:	4619      	mov	r1, r3
 8015b80:	4610      	mov	r0, r2
 8015b82:	f7ff fd31 	bl	80155e8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	69db      	ldr	r3, [r3, #28]
 8015b8a:	1c5a      	adds	r2, r3, #1
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	7858      	ldrb	r0, [r3, #1]
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	f7ff fc8e 	bl	80154c0 <disk_write>
			fs->fsi_flag = 0;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	785b      	ldrb	r3, [r3, #1]
 8015bae:	2200      	movs	r2, #0
 8015bb0:	2100      	movs	r1, #0
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	f7ff fca4 	bl	8015500 <disk_ioctl>
 8015bb8:	4603      	mov	r3, r0
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d001      	beq.n	8015bc2 <sync_fs+0xca>
 8015bbe:	2301      	movs	r3, #1
 8015bc0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	3710      	adds	r7, #16
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	bd80      	pop	{r7, pc}
 8015bcc:	41615252 	.word	0x41615252
 8015bd0:	61417272 	.word	0x61417272

08015bd4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015bd4:	b480      	push	{r7}
 8015bd6:	b083      	sub	sp, #12
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
 8015bdc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	3b02      	subs	r3, #2
 8015be2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	695b      	ldr	r3, [r3, #20]
 8015be8:	3b02      	subs	r3, #2
 8015bea:	683a      	ldr	r2, [r7, #0]
 8015bec:	429a      	cmp	r2, r3
 8015bee:	d301      	bcc.n	8015bf4 <clust2sect+0x20>
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	e008      	b.n	8015c06 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	895b      	ldrh	r3, [r3, #10]
 8015bf8:	461a      	mov	r2, r3
 8015bfa:	683b      	ldr	r3, [r7, #0]
 8015bfc:	fb03 f202 	mul.w	r2, r3, r2
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c04:	4413      	add	r3, r2
}
 8015c06:	4618      	mov	r0, r3
 8015c08:	370c      	adds	r7, #12
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c10:	4770      	bx	lr

08015c12 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015c12:	b580      	push	{r7, lr}
 8015c14:	b086      	sub	sp, #24
 8015c16:	af00      	add	r7, sp, #0
 8015c18:	6078      	str	r0, [r7, #4]
 8015c1a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	2b01      	cmp	r3, #1
 8015c26:	d904      	bls.n	8015c32 <get_fat+0x20>
 8015c28:	693b      	ldr	r3, [r7, #16]
 8015c2a:	695b      	ldr	r3, [r3, #20]
 8015c2c:	683a      	ldr	r2, [r7, #0]
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	d302      	bcc.n	8015c38 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015c32:	2301      	movs	r3, #1
 8015c34:	617b      	str	r3, [r7, #20]
 8015c36:	e08c      	b.n	8015d52 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015c38:	f04f 33ff 	mov.w	r3, #4294967295
 8015c3c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015c3e:	693b      	ldr	r3, [r7, #16]
 8015c40:	781b      	ldrb	r3, [r3, #0]
 8015c42:	2b02      	cmp	r3, #2
 8015c44:	d045      	beq.n	8015cd2 <get_fat+0xc0>
 8015c46:	2b03      	cmp	r3, #3
 8015c48:	d05d      	beq.n	8015d06 <get_fat+0xf4>
 8015c4a:	2b01      	cmp	r3, #1
 8015c4c:	d177      	bne.n	8015d3e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015c4e:	683b      	ldr	r3, [r7, #0]
 8015c50:	60fb      	str	r3, [r7, #12]
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	085b      	lsrs	r3, r3, #1
 8015c56:	68fa      	ldr	r2, [r7, #12]
 8015c58:	4413      	add	r3, r2
 8015c5a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015c5c:	693b      	ldr	r3, [r7, #16]
 8015c5e:	6a1a      	ldr	r2, [r3, #32]
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	0a5b      	lsrs	r3, r3, #9
 8015c64:	4413      	add	r3, r2
 8015c66:	4619      	mov	r1, r3
 8015c68:	6938      	ldr	r0, [r7, #16]
 8015c6a:	f7ff ff17 	bl	8015a9c <move_window>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d167      	bne.n	8015d44 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	1c5a      	adds	r2, r3, #1
 8015c78:	60fa      	str	r2, [r7, #12]
 8015c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015c7e:	693a      	ldr	r2, [r7, #16]
 8015c80:	4413      	add	r3, r2
 8015c82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c86:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015c88:	693b      	ldr	r3, [r7, #16]
 8015c8a:	6a1a      	ldr	r2, [r3, #32]
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	0a5b      	lsrs	r3, r3, #9
 8015c90:	4413      	add	r3, r2
 8015c92:	4619      	mov	r1, r3
 8015c94:	6938      	ldr	r0, [r7, #16]
 8015c96:	f7ff ff01 	bl	8015a9c <move_window>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d153      	bne.n	8015d48 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015ca6:	693a      	ldr	r2, [r7, #16]
 8015ca8:	4413      	add	r3, r2
 8015caa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015cae:	021b      	lsls	r3, r3, #8
 8015cb0:	461a      	mov	r2, r3
 8015cb2:	68bb      	ldr	r3, [r7, #8]
 8015cb4:	4313      	orrs	r3, r2
 8015cb6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	f003 0301 	and.w	r3, r3, #1
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d002      	beq.n	8015cc8 <get_fat+0xb6>
 8015cc2:	68bb      	ldr	r3, [r7, #8]
 8015cc4:	091b      	lsrs	r3, r3, #4
 8015cc6:	e002      	b.n	8015cce <get_fat+0xbc>
 8015cc8:	68bb      	ldr	r3, [r7, #8]
 8015cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015cce:	617b      	str	r3, [r7, #20]
			break;
 8015cd0:	e03f      	b.n	8015d52 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015cd2:	693b      	ldr	r3, [r7, #16]
 8015cd4:	6a1a      	ldr	r2, [r3, #32]
 8015cd6:	683b      	ldr	r3, [r7, #0]
 8015cd8:	0a1b      	lsrs	r3, r3, #8
 8015cda:	4413      	add	r3, r2
 8015cdc:	4619      	mov	r1, r3
 8015cde:	6938      	ldr	r0, [r7, #16]
 8015ce0:	f7ff fedc 	bl	8015a9c <move_window>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d130      	bne.n	8015d4c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015cf0:	683b      	ldr	r3, [r7, #0]
 8015cf2:	005b      	lsls	r3, r3, #1
 8015cf4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015cf8:	4413      	add	r3, r2
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7ff fc1e 	bl	801553c <ld_word>
 8015d00:	4603      	mov	r3, r0
 8015d02:	617b      	str	r3, [r7, #20]
			break;
 8015d04:	e025      	b.n	8015d52 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015d06:	693b      	ldr	r3, [r7, #16]
 8015d08:	6a1a      	ldr	r2, [r3, #32]
 8015d0a:	683b      	ldr	r3, [r7, #0]
 8015d0c:	09db      	lsrs	r3, r3, #7
 8015d0e:	4413      	add	r3, r2
 8015d10:	4619      	mov	r1, r3
 8015d12:	6938      	ldr	r0, [r7, #16]
 8015d14:	f7ff fec2 	bl	8015a9c <move_window>
 8015d18:	4603      	mov	r3, r0
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d118      	bne.n	8015d50 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015d1e:	693b      	ldr	r3, [r7, #16]
 8015d20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015d24:	683b      	ldr	r3, [r7, #0]
 8015d26:	009b      	lsls	r3, r3, #2
 8015d28:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015d2c:	4413      	add	r3, r2
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f7ff fc1c 	bl	801556c <ld_dword>
 8015d34:	4603      	mov	r3, r0
 8015d36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015d3a:	617b      	str	r3, [r7, #20]
			break;
 8015d3c:	e009      	b.n	8015d52 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015d3e:	2301      	movs	r3, #1
 8015d40:	617b      	str	r3, [r7, #20]
 8015d42:	e006      	b.n	8015d52 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015d44:	bf00      	nop
 8015d46:	e004      	b.n	8015d52 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015d48:	bf00      	nop
 8015d4a:	e002      	b.n	8015d52 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015d4c:	bf00      	nop
 8015d4e:	e000      	b.n	8015d52 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015d50:	bf00      	nop
		}
	}

	return val;
 8015d52:	697b      	ldr	r3, [r7, #20]
}
 8015d54:	4618      	mov	r0, r3
 8015d56:	3718      	adds	r7, #24
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	bd80      	pop	{r7, pc}

08015d5c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8015d5c:	b590      	push	{r4, r7, lr}
 8015d5e:	b089      	sub	sp, #36	; 0x24
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	60f8      	str	r0, [r7, #12]
 8015d64:	60b9      	str	r1, [r7, #8]
 8015d66:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015d68:	2302      	movs	r3, #2
 8015d6a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015d6c:	68bb      	ldr	r3, [r7, #8]
 8015d6e:	2b01      	cmp	r3, #1
 8015d70:	f240 80d6 	bls.w	8015f20 <put_fat+0x1c4>
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	695b      	ldr	r3, [r3, #20]
 8015d78:	68ba      	ldr	r2, [r7, #8]
 8015d7a:	429a      	cmp	r2, r3
 8015d7c:	f080 80d0 	bcs.w	8015f20 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	781b      	ldrb	r3, [r3, #0]
 8015d84:	2b02      	cmp	r3, #2
 8015d86:	d073      	beq.n	8015e70 <put_fat+0x114>
 8015d88:	2b03      	cmp	r3, #3
 8015d8a:	f000 8091 	beq.w	8015eb0 <put_fat+0x154>
 8015d8e:	2b01      	cmp	r3, #1
 8015d90:	f040 80c6 	bne.w	8015f20 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8015d94:	68bb      	ldr	r3, [r7, #8]
 8015d96:	61bb      	str	r3, [r7, #24]
 8015d98:	69bb      	ldr	r3, [r7, #24]
 8015d9a:	085b      	lsrs	r3, r3, #1
 8015d9c:	69ba      	ldr	r2, [r7, #24]
 8015d9e:	4413      	add	r3, r2
 8015da0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	6a1a      	ldr	r2, [r3, #32]
 8015da6:	69bb      	ldr	r3, [r7, #24]
 8015da8:	0a5b      	lsrs	r3, r3, #9
 8015daa:	4413      	add	r3, r2
 8015dac:	4619      	mov	r1, r3
 8015dae:	68f8      	ldr	r0, [r7, #12]
 8015db0:	f7ff fe74 	bl	8015a9c <move_window>
 8015db4:	4603      	mov	r3, r0
 8015db6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015db8:	7ffb      	ldrb	r3, [r7, #31]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	f040 80a9 	bne.w	8015f12 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015dc6:	69bb      	ldr	r3, [r7, #24]
 8015dc8:	1c59      	adds	r1, r3, #1
 8015dca:	61b9      	str	r1, [r7, #24]
 8015dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015dd0:	4413      	add	r3, r2
 8015dd2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015dd4:	68bb      	ldr	r3, [r7, #8]
 8015dd6:	f003 0301 	and.w	r3, r3, #1
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d00d      	beq.n	8015dfa <put_fat+0x9e>
 8015dde:	697b      	ldr	r3, [r7, #20]
 8015de0:	781b      	ldrb	r3, [r3, #0]
 8015de2:	b25b      	sxtb	r3, r3
 8015de4:	f003 030f 	and.w	r3, r3, #15
 8015de8:	b25a      	sxtb	r2, r3
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	b2db      	uxtb	r3, r3
 8015dee:	011b      	lsls	r3, r3, #4
 8015df0:	b25b      	sxtb	r3, r3
 8015df2:	4313      	orrs	r3, r2
 8015df4:	b25b      	sxtb	r3, r3
 8015df6:	b2db      	uxtb	r3, r3
 8015df8:	e001      	b.n	8015dfe <put_fat+0xa2>
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	697a      	ldr	r2, [r7, #20]
 8015e00:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	2201      	movs	r2, #1
 8015e06:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	6a1a      	ldr	r2, [r3, #32]
 8015e0c:	69bb      	ldr	r3, [r7, #24]
 8015e0e:	0a5b      	lsrs	r3, r3, #9
 8015e10:	4413      	add	r3, r2
 8015e12:	4619      	mov	r1, r3
 8015e14:	68f8      	ldr	r0, [r7, #12]
 8015e16:	f7ff fe41 	bl	8015a9c <move_window>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015e1e:	7ffb      	ldrb	r3, [r7, #31]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d178      	bne.n	8015f16 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015e2a:	69bb      	ldr	r3, [r7, #24]
 8015e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e30:	4413      	add	r3, r2
 8015e32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015e34:	68bb      	ldr	r3, [r7, #8]
 8015e36:	f003 0301 	and.w	r3, r3, #1
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d003      	beq.n	8015e46 <put_fat+0xea>
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	091b      	lsrs	r3, r3, #4
 8015e42:	b2db      	uxtb	r3, r3
 8015e44:	e00e      	b.n	8015e64 <put_fat+0x108>
 8015e46:	697b      	ldr	r3, [r7, #20]
 8015e48:	781b      	ldrb	r3, [r3, #0]
 8015e4a:	b25b      	sxtb	r3, r3
 8015e4c:	f023 030f 	bic.w	r3, r3, #15
 8015e50:	b25a      	sxtb	r2, r3
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	0a1b      	lsrs	r3, r3, #8
 8015e56:	b25b      	sxtb	r3, r3
 8015e58:	f003 030f 	and.w	r3, r3, #15
 8015e5c:	b25b      	sxtb	r3, r3
 8015e5e:	4313      	orrs	r3, r2
 8015e60:	b25b      	sxtb	r3, r3
 8015e62:	b2db      	uxtb	r3, r3
 8015e64:	697a      	ldr	r2, [r7, #20]
 8015e66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	2201      	movs	r2, #1
 8015e6c:	70da      	strb	r2, [r3, #3]
			break;
 8015e6e:	e057      	b.n	8015f20 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	6a1a      	ldr	r2, [r3, #32]
 8015e74:	68bb      	ldr	r3, [r7, #8]
 8015e76:	0a1b      	lsrs	r3, r3, #8
 8015e78:	4413      	add	r3, r2
 8015e7a:	4619      	mov	r1, r3
 8015e7c:	68f8      	ldr	r0, [r7, #12]
 8015e7e:	f7ff fe0d 	bl	8015a9c <move_window>
 8015e82:	4603      	mov	r3, r0
 8015e84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015e86:	7ffb      	ldrb	r3, [r7, #31]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d146      	bne.n	8015f1a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015e92:	68bb      	ldr	r3, [r7, #8]
 8015e94:	005b      	lsls	r3, r3, #1
 8015e96:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015e9a:	4413      	add	r3, r2
 8015e9c:	687a      	ldr	r2, [r7, #4]
 8015e9e:	b292      	uxth	r2, r2
 8015ea0:	4611      	mov	r1, r2
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	f7ff fb85 	bl	80155b2 <st_word>
			fs->wflag = 1;
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	2201      	movs	r2, #1
 8015eac:	70da      	strb	r2, [r3, #3]
			break;
 8015eae:	e037      	b.n	8015f20 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	6a1a      	ldr	r2, [r3, #32]
 8015eb4:	68bb      	ldr	r3, [r7, #8]
 8015eb6:	09db      	lsrs	r3, r3, #7
 8015eb8:	4413      	add	r3, r2
 8015eba:	4619      	mov	r1, r3
 8015ebc:	68f8      	ldr	r0, [r7, #12]
 8015ebe:	f7ff fded 	bl	8015a9c <move_window>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015ec6:	7ffb      	ldrb	r3, [r7, #31]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d128      	bne.n	8015f1e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015ed8:	68bb      	ldr	r3, [r7, #8]
 8015eda:	009b      	lsls	r3, r3, #2
 8015edc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015ee0:	4413      	add	r3, r2
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	f7ff fb42 	bl	801556c <ld_dword>
 8015ee8:	4603      	mov	r3, r0
 8015eea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015eee:	4323      	orrs	r3, r4
 8015ef0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015ef8:	68bb      	ldr	r3, [r7, #8]
 8015efa:	009b      	lsls	r3, r3, #2
 8015efc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015f00:	4413      	add	r3, r2
 8015f02:	6879      	ldr	r1, [r7, #4]
 8015f04:	4618      	mov	r0, r3
 8015f06:	f7ff fb6f 	bl	80155e8 <st_dword>
			fs->wflag = 1;
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	2201      	movs	r2, #1
 8015f0e:	70da      	strb	r2, [r3, #3]
			break;
 8015f10:	e006      	b.n	8015f20 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015f12:	bf00      	nop
 8015f14:	e004      	b.n	8015f20 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015f16:	bf00      	nop
 8015f18:	e002      	b.n	8015f20 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015f1a:	bf00      	nop
 8015f1c:	e000      	b.n	8015f20 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015f1e:	bf00      	nop
		}
	}
	return res;
 8015f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8015f22:	4618      	mov	r0, r3
 8015f24:	3724      	adds	r7, #36	; 0x24
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd90      	pop	{r4, r7, pc}

08015f2a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8015f2a:	b580      	push	{r7, lr}
 8015f2c:	b088      	sub	sp, #32
 8015f2e:	af00      	add	r7, sp, #0
 8015f30:	60f8      	str	r0, [r7, #12]
 8015f32:	60b9      	str	r1, [r7, #8]
 8015f34:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8015f36:	2300      	movs	r3, #0
 8015f38:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015f40:	68bb      	ldr	r3, [r7, #8]
 8015f42:	2b01      	cmp	r3, #1
 8015f44:	d904      	bls.n	8015f50 <remove_chain+0x26>
 8015f46:	69bb      	ldr	r3, [r7, #24]
 8015f48:	695b      	ldr	r3, [r3, #20]
 8015f4a:	68ba      	ldr	r2, [r7, #8]
 8015f4c:	429a      	cmp	r2, r3
 8015f4e:	d301      	bcc.n	8015f54 <remove_chain+0x2a>
 8015f50:	2302      	movs	r3, #2
 8015f52:	e04b      	b.n	8015fec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d00c      	beq.n	8015f74 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8015f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8015f5e:	6879      	ldr	r1, [r7, #4]
 8015f60:	69b8      	ldr	r0, [r7, #24]
 8015f62:	f7ff fefb 	bl	8015d5c <put_fat>
 8015f66:	4603      	mov	r3, r0
 8015f68:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8015f6a:	7ffb      	ldrb	r3, [r7, #31]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d001      	beq.n	8015f74 <remove_chain+0x4a>
 8015f70:	7ffb      	ldrb	r3, [r7, #31]
 8015f72:	e03b      	b.n	8015fec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8015f74:	68b9      	ldr	r1, [r7, #8]
 8015f76:	68f8      	ldr	r0, [r7, #12]
 8015f78:	f7ff fe4b 	bl	8015c12 <get_fat>
 8015f7c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8015f7e:	697b      	ldr	r3, [r7, #20]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d031      	beq.n	8015fe8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8015f84:	697b      	ldr	r3, [r7, #20]
 8015f86:	2b01      	cmp	r3, #1
 8015f88:	d101      	bne.n	8015f8e <remove_chain+0x64>
 8015f8a:	2302      	movs	r3, #2
 8015f8c:	e02e      	b.n	8015fec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8015f8e:	697b      	ldr	r3, [r7, #20]
 8015f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f94:	d101      	bne.n	8015f9a <remove_chain+0x70>
 8015f96:	2301      	movs	r3, #1
 8015f98:	e028      	b.n	8015fec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	68b9      	ldr	r1, [r7, #8]
 8015f9e:	69b8      	ldr	r0, [r7, #24]
 8015fa0:	f7ff fedc 	bl	8015d5c <put_fat>
 8015fa4:	4603      	mov	r3, r0
 8015fa6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8015fa8:	7ffb      	ldrb	r3, [r7, #31]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d001      	beq.n	8015fb2 <remove_chain+0x88>
 8015fae:	7ffb      	ldrb	r3, [r7, #31]
 8015fb0:	e01c      	b.n	8015fec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8015fb2:	69bb      	ldr	r3, [r7, #24]
 8015fb4:	691a      	ldr	r2, [r3, #16]
 8015fb6:	69bb      	ldr	r3, [r7, #24]
 8015fb8:	695b      	ldr	r3, [r3, #20]
 8015fba:	3b02      	subs	r3, #2
 8015fbc:	429a      	cmp	r2, r3
 8015fbe:	d20b      	bcs.n	8015fd8 <remove_chain+0xae>
			fs->free_clst++;
 8015fc0:	69bb      	ldr	r3, [r7, #24]
 8015fc2:	691b      	ldr	r3, [r3, #16]
 8015fc4:	1c5a      	adds	r2, r3, #1
 8015fc6:	69bb      	ldr	r3, [r7, #24]
 8015fc8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8015fca:	69bb      	ldr	r3, [r7, #24]
 8015fcc:	791b      	ldrb	r3, [r3, #4]
 8015fce:	f043 0301 	orr.w	r3, r3, #1
 8015fd2:	b2da      	uxtb	r2, r3
 8015fd4:	69bb      	ldr	r3, [r7, #24]
 8015fd6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8015fd8:	697b      	ldr	r3, [r7, #20]
 8015fda:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015fdc:	69bb      	ldr	r3, [r7, #24]
 8015fde:	695b      	ldr	r3, [r3, #20]
 8015fe0:	68ba      	ldr	r2, [r7, #8]
 8015fe2:	429a      	cmp	r2, r3
 8015fe4:	d3c6      	bcc.n	8015f74 <remove_chain+0x4a>
 8015fe6:	e000      	b.n	8015fea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015fe8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8015fea:	2300      	movs	r3, #0
}
 8015fec:	4618      	mov	r0, r3
 8015fee:	3720      	adds	r7, #32
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	bd80      	pop	{r7, pc}

08015ff4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b088      	sub	sp, #32
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
 8015ffc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8016004:	683b      	ldr	r3, [r7, #0]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d10d      	bne.n	8016026 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801600a:	693b      	ldr	r3, [r7, #16]
 801600c:	68db      	ldr	r3, [r3, #12]
 801600e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016010:	69bb      	ldr	r3, [r7, #24]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d004      	beq.n	8016020 <create_chain+0x2c>
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	695b      	ldr	r3, [r3, #20]
 801601a:	69ba      	ldr	r2, [r7, #24]
 801601c:	429a      	cmp	r2, r3
 801601e:	d31b      	bcc.n	8016058 <create_chain+0x64>
 8016020:	2301      	movs	r3, #1
 8016022:	61bb      	str	r3, [r7, #24]
 8016024:	e018      	b.n	8016058 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016026:	6839      	ldr	r1, [r7, #0]
 8016028:	6878      	ldr	r0, [r7, #4]
 801602a:	f7ff fdf2 	bl	8015c12 <get_fat>
 801602e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	2b01      	cmp	r3, #1
 8016034:	d801      	bhi.n	801603a <create_chain+0x46>
 8016036:	2301      	movs	r3, #1
 8016038:	e070      	b.n	801611c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016040:	d101      	bne.n	8016046 <create_chain+0x52>
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	e06a      	b.n	801611c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8016046:	693b      	ldr	r3, [r7, #16]
 8016048:	695b      	ldr	r3, [r3, #20]
 801604a:	68fa      	ldr	r2, [r7, #12]
 801604c:	429a      	cmp	r2, r3
 801604e:	d201      	bcs.n	8016054 <create_chain+0x60>
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	e063      	b.n	801611c <create_chain+0x128>
		scl = clst;
 8016054:	683b      	ldr	r3, [r7, #0]
 8016056:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8016058:	69bb      	ldr	r3, [r7, #24]
 801605a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801605c:	69fb      	ldr	r3, [r7, #28]
 801605e:	3301      	adds	r3, #1
 8016060:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8016062:	693b      	ldr	r3, [r7, #16]
 8016064:	695b      	ldr	r3, [r3, #20]
 8016066:	69fa      	ldr	r2, [r7, #28]
 8016068:	429a      	cmp	r2, r3
 801606a:	d307      	bcc.n	801607c <create_chain+0x88>
				ncl = 2;
 801606c:	2302      	movs	r3, #2
 801606e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8016070:	69fa      	ldr	r2, [r7, #28]
 8016072:	69bb      	ldr	r3, [r7, #24]
 8016074:	429a      	cmp	r2, r3
 8016076:	d901      	bls.n	801607c <create_chain+0x88>
 8016078:	2300      	movs	r3, #0
 801607a:	e04f      	b.n	801611c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801607c:	69f9      	ldr	r1, [r7, #28]
 801607e:	6878      	ldr	r0, [r7, #4]
 8016080:	f7ff fdc7 	bl	8015c12 <get_fat>
 8016084:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d00e      	beq.n	80160aa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	2b01      	cmp	r3, #1
 8016090:	d003      	beq.n	801609a <create_chain+0xa6>
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016098:	d101      	bne.n	801609e <create_chain+0xaa>
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	e03e      	b.n	801611c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801609e:	69fa      	ldr	r2, [r7, #28]
 80160a0:	69bb      	ldr	r3, [r7, #24]
 80160a2:	429a      	cmp	r2, r3
 80160a4:	d1da      	bne.n	801605c <create_chain+0x68>
 80160a6:	2300      	movs	r3, #0
 80160a8:	e038      	b.n	801611c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80160aa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80160ac:	f04f 32ff 	mov.w	r2, #4294967295
 80160b0:	69f9      	ldr	r1, [r7, #28]
 80160b2:	6938      	ldr	r0, [r7, #16]
 80160b4:	f7ff fe52 	bl	8015d5c <put_fat>
 80160b8:	4603      	mov	r3, r0
 80160ba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80160bc:	7dfb      	ldrb	r3, [r7, #23]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d109      	bne.n	80160d6 <create_chain+0xe2>
 80160c2:	683b      	ldr	r3, [r7, #0]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d006      	beq.n	80160d6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80160c8:	69fa      	ldr	r2, [r7, #28]
 80160ca:	6839      	ldr	r1, [r7, #0]
 80160cc:	6938      	ldr	r0, [r7, #16]
 80160ce:	f7ff fe45 	bl	8015d5c <put_fat>
 80160d2:	4603      	mov	r3, r0
 80160d4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80160d6:	7dfb      	ldrb	r3, [r7, #23]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d116      	bne.n	801610a <create_chain+0x116>
		fs->last_clst = ncl;
 80160dc:	693b      	ldr	r3, [r7, #16]
 80160de:	69fa      	ldr	r2, [r7, #28]
 80160e0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80160e2:	693b      	ldr	r3, [r7, #16]
 80160e4:	691a      	ldr	r2, [r3, #16]
 80160e6:	693b      	ldr	r3, [r7, #16]
 80160e8:	695b      	ldr	r3, [r3, #20]
 80160ea:	3b02      	subs	r3, #2
 80160ec:	429a      	cmp	r2, r3
 80160ee:	d804      	bhi.n	80160fa <create_chain+0x106>
 80160f0:	693b      	ldr	r3, [r7, #16]
 80160f2:	691b      	ldr	r3, [r3, #16]
 80160f4:	1e5a      	subs	r2, r3, #1
 80160f6:	693b      	ldr	r3, [r7, #16]
 80160f8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80160fa:	693b      	ldr	r3, [r7, #16]
 80160fc:	791b      	ldrb	r3, [r3, #4]
 80160fe:	f043 0301 	orr.w	r3, r3, #1
 8016102:	b2da      	uxtb	r2, r3
 8016104:	693b      	ldr	r3, [r7, #16]
 8016106:	711a      	strb	r2, [r3, #4]
 8016108:	e007      	b.n	801611a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801610a:	7dfb      	ldrb	r3, [r7, #23]
 801610c:	2b01      	cmp	r3, #1
 801610e:	d102      	bne.n	8016116 <create_chain+0x122>
 8016110:	f04f 33ff 	mov.w	r3, #4294967295
 8016114:	e000      	b.n	8016118 <create_chain+0x124>
 8016116:	2301      	movs	r3, #1
 8016118:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801611a:	69fb      	ldr	r3, [r7, #28]
}
 801611c:	4618      	mov	r0, r3
 801611e:	3720      	adds	r7, #32
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}

08016124 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8016124:	b480      	push	{r7}
 8016126:	b087      	sub	sp, #28
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
 801612c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016138:	3304      	adds	r3, #4
 801613a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	0a5b      	lsrs	r3, r3, #9
 8016140:	68fa      	ldr	r2, [r7, #12]
 8016142:	8952      	ldrh	r2, [r2, #10]
 8016144:	fbb3 f3f2 	udiv	r3, r3, r2
 8016148:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801614a:	693b      	ldr	r3, [r7, #16]
 801614c:	1d1a      	adds	r2, r3, #4
 801614e:	613a      	str	r2, [r7, #16]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d101      	bne.n	801615e <clmt_clust+0x3a>
 801615a:	2300      	movs	r3, #0
 801615c:	e010      	b.n	8016180 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801615e:	697a      	ldr	r2, [r7, #20]
 8016160:	68bb      	ldr	r3, [r7, #8]
 8016162:	429a      	cmp	r2, r3
 8016164:	d307      	bcc.n	8016176 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8016166:	697a      	ldr	r2, [r7, #20]
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	1ad3      	subs	r3, r2, r3
 801616c:	617b      	str	r3, [r7, #20]
 801616e:	693b      	ldr	r3, [r7, #16]
 8016170:	3304      	adds	r3, #4
 8016172:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016174:	e7e9      	b.n	801614a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8016176:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8016178:	693b      	ldr	r3, [r7, #16]
 801617a:	681a      	ldr	r2, [r3, #0]
 801617c:	697b      	ldr	r3, [r7, #20]
 801617e:	4413      	add	r3, r2
}
 8016180:	4618      	mov	r0, r3
 8016182:	371c      	adds	r7, #28
 8016184:	46bd      	mov	sp, r7
 8016186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618a:	4770      	bx	lr

0801618c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b086      	sub	sp, #24
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
 8016194:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801619c:	683b      	ldr	r3, [r7, #0]
 801619e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80161a2:	d204      	bcs.n	80161ae <dir_sdi+0x22>
 80161a4:	683b      	ldr	r3, [r7, #0]
 80161a6:	f003 031f 	and.w	r3, r3, #31
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d001      	beq.n	80161b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80161ae:	2302      	movs	r3, #2
 80161b0:	e063      	b.n	801627a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	683a      	ldr	r2, [r7, #0]
 80161b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	689b      	ldr	r3, [r3, #8]
 80161bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80161be:	697b      	ldr	r3, [r7, #20]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d106      	bne.n	80161d2 <dir_sdi+0x46>
 80161c4:	693b      	ldr	r3, [r7, #16]
 80161c6:	781b      	ldrb	r3, [r3, #0]
 80161c8:	2b02      	cmp	r3, #2
 80161ca:	d902      	bls.n	80161d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80161cc:	693b      	ldr	r3, [r7, #16]
 80161ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80161d2:	697b      	ldr	r3, [r7, #20]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d10c      	bne.n	80161f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80161d8:	683b      	ldr	r3, [r7, #0]
 80161da:	095b      	lsrs	r3, r3, #5
 80161dc:	693a      	ldr	r2, [r7, #16]
 80161de:	8912      	ldrh	r2, [r2, #8]
 80161e0:	4293      	cmp	r3, r2
 80161e2:	d301      	bcc.n	80161e8 <dir_sdi+0x5c>
 80161e4:	2302      	movs	r3, #2
 80161e6:	e048      	b.n	801627a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80161e8:	693b      	ldr	r3, [r7, #16]
 80161ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	61da      	str	r2, [r3, #28]
 80161f0:	e029      	b.n	8016246 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80161f2:	693b      	ldr	r3, [r7, #16]
 80161f4:	895b      	ldrh	r3, [r3, #10]
 80161f6:	025b      	lsls	r3, r3, #9
 80161f8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80161fa:	e019      	b.n	8016230 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	6979      	ldr	r1, [r7, #20]
 8016200:	4618      	mov	r0, r3
 8016202:	f7ff fd06 	bl	8015c12 <get_fat>
 8016206:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016208:	697b      	ldr	r3, [r7, #20]
 801620a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801620e:	d101      	bne.n	8016214 <dir_sdi+0x88>
 8016210:	2301      	movs	r3, #1
 8016212:	e032      	b.n	801627a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	2b01      	cmp	r3, #1
 8016218:	d904      	bls.n	8016224 <dir_sdi+0x98>
 801621a:	693b      	ldr	r3, [r7, #16]
 801621c:	695b      	ldr	r3, [r3, #20]
 801621e:	697a      	ldr	r2, [r7, #20]
 8016220:	429a      	cmp	r2, r3
 8016222:	d301      	bcc.n	8016228 <dir_sdi+0x9c>
 8016224:	2302      	movs	r3, #2
 8016226:	e028      	b.n	801627a <dir_sdi+0xee>
			ofs -= csz;
 8016228:	683a      	ldr	r2, [r7, #0]
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	1ad3      	subs	r3, r2, r3
 801622e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016230:	683a      	ldr	r2, [r7, #0]
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	429a      	cmp	r2, r3
 8016236:	d2e1      	bcs.n	80161fc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8016238:	6979      	ldr	r1, [r7, #20]
 801623a:	6938      	ldr	r0, [r7, #16]
 801623c:	f7ff fcca 	bl	8015bd4 <clust2sect>
 8016240:	4602      	mov	r2, r0
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	697a      	ldr	r2, [r7, #20]
 801624a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	69db      	ldr	r3, [r3, #28]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d101      	bne.n	8016258 <dir_sdi+0xcc>
 8016254:	2302      	movs	r3, #2
 8016256:	e010      	b.n	801627a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	69da      	ldr	r2, [r3, #28]
 801625c:	683b      	ldr	r3, [r7, #0]
 801625e:	0a5b      	lsrs	r3, r3, #9
 8016260:	441a      	add	r2, r3
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8016266:	693b      	ldr	r3, [r7, #16]
 8016268:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801626c:	683b      	ldr	r3, [r7, #0]
 801626e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016272:	441a      	add	r2, r3
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016278:	2300      	movs	r3, #0
}
 801627a:	4618      	mov	r0, r3
 801627c:	3718      	adds	r7, #24
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}

08016282 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8016282:	b580      	push	{r7, lr}
 8016284:	b086      	sub	sp, #24
 8016286:	af00      	add	r7, sp, #0
 8016288:	6078      	str	r0, [r7, #4]
 801628a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	695b      	ldr	r3, [r3, #20]
 8016296:	3320      	adds	r3, #32
 8016298:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	69db      	ldr	r3, [r3, #28]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d003      	beq.n	80162aa <dir_next+0x28>
 80162a2:	68bb      	ldr	r3, [r7, #8]
 80162a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80162a8:	d301      	bcc.n	80162ae <dir_next+0x2c>
 80162aa:	2304      	movs	r3, #4
 80162ac:	e0aa      	b.n	8016404 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80162ae:	68bb      	ldr	r3, [r7, #8]
 80162b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	f040 8098 	bne.w	80163ea <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	69db      	ldr	r3, [r3, #28]
 80162be:	1c5a      	adds	r2, r3, #1
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	699b      	ldr	r3, [r3, #24]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d10b      	bne.n	80162e4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80162cc:	68bb      	ldr	r3, [r7, #8]
 80162ce:	095b      	lsrs	r3, r3, #5
 80162d0:	68fa      	ldr	r2, [r7, #12]
 80162d2:	8912      	ldrh	r2, [r2, #8]
 80162d4:	4293      	cmp	r3, r2
 80162d6:	f0c0 8088 	bcc.w	80163ea <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	2200      	movs	r2, #0
 80162de:	61da      	str	r2, [r3, #28]
 80162e0:	2304      	movs	r3, #4
 80162e2:	e08f      	b.n	8016404 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80162e4:	68bb      	ldr	r3, [r7, #8]
 80162e6:	0a5b      	lsrs	r3, r3, #9
 80162e8:	68fa      	ldr	r2, [r7, #12]
 80162ea:	8952      	ldrh	r2, [r2, #10]
 80162ec:	3a01      	subs	r2, #1
 80162ee:	4013      	ands	r3, r2
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d17a      	bne.n	80163ea <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80162f4:	687a      	ldr	r2, [r7, #4]
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	699b      	ldr	r3, [r3, #24]
 80162fa:	4619      	mov	r1, r3
 80162fc:	4610      	mov	r0, r2
 80162fe:	f7ff fc88 	bl	8015c12 <get_fat>
 8016302:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8016304:	697b      	ldr	r3, [r7, #20]
 8016306:	2b01      	cmp	r3, #1
 8016308:	d801      	bhi.n	801630e <dir_next+0x8c>
 801630a:	2302      	movs	r3, #2
 801630c:	e07a      	b.n	8016404 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801630e:	697b      	ldr	r3, [r7, #20]
 8016310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016314:	d101      	bne.n	801631a <dir_next+0x98>
 8016316:	2301      	movs	r3, #1
 8016318:	e074      	b.n	8016404 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	695b      	ldr	r3, [r3, #20]
 801631e:	697a      	ldr	r2, [r7, #20]
 8016320:	429a      	cmp	r2, r3
 8016322:	d358      	bcc.n	80163d6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8016324:	683b      	ldr	r3, [r7, #0]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d104      	bne.n	8016334 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	2200      	movs	r2, #0
 801632e:	61da      	str	r2, [r3, #28]
 8016330:	2304      	movs	r3, #4
 8016332:	e067      	b.n	8016404 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8016334:	687a      	ldr	r2, [r7, #4]
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	699b      	ldr	r3, [r3, #24]
 801633a:	4619      	mov	r1, r3
 801633c:	4610      	mov	r0, r2
 801633e:	f7ff fe59 	bl	8015ff4 <create_chain>
 8016342:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016344:	697b      	ldr	r3, [r7, #20]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d101      	bne.n	801634e <dir_next+0xcc>
 801634a:	2307      	movs	r3, #7
 801634c:	e05a      	b.n	8016404 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801634e:	697b      	ldr	r3, [r7, #20]
 8016350:	2b01      	cmp	r3, #1
 8016352:	d101      	bne.n	8016358 <dir_next+0xd6>
 8016354:	2302      	movs	r3, #2
 8016356:	e055      	b.n	8016404 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016358:	697b      	ldr	r3, [r7, #20]
 801635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801635e:	d101      	bne.n	8016364 <dir_next+0xe2>
 8016360:	2301      	movs	r3, #1
 8016362:	e04f      	b.n	8016404 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8016364:	68f8      	ldr	r0, [r7, #12]
 8016366:	f7ff fb55 	bl	8015a14 <sync_window>
 801636a:	4603      	mov	r3, r0
 801636c:	2b00      	cmp	r3, #0
 801636e:	d001      	beq.n	8016374 <dir_next+0xf2>
 8016370:	2301      	movs	r3, #1
 8016372:	e047      	b.n	8016404 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	3330      	adds	r3, #48	; 0x30
 8016378:	f44f 7200 	mov.w	r2, #512	; 0x200
 801637c:	2100      	movs	r1, #0
 801637e:	4618      	mov	r0, r3
 8016380:	f7ff f97f 	bl	8015682 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016384:	2300      	movs	r3, #0
 8016386:	613b      	str	r3, [r7, #16]
 8016388:	6979      	ldr	r1, [r7, #20]
 801638a:	68f8      	ldr	r0, [r7, #12]
 801638c:	f7ff fc22 	bl	8015bd4 <clust2sect>
 8016390:	4602      	mov	r2, r0
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	62da      	str	r2, [r3, #44]	; 0x2c
 8016396:	e012      	b.n	80163be <dir_next+0x13c>
						fs->wflag = 1;
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	2201      	movs	r2, #1
 801639c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801639e:	68f8      	ldr	r0, [r7, #12]
 80163a0:	f7ff fb38 	bl	8015a14 <sync_window>
 80163a4:	4603      	mov	r3, r0
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d001      	beq.n	80163ae <dir_next+0x12c>
 80163aa:	2301      	movs	r3, #1
 80163ac:	e02a      	b.n	8016404 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80163ae:	693b      	ldr	r3, [r7, #16]
 80163b0:	3301      	adds	r3, #1
 80163b2:	613b      	str	r3, [r7, #16]
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163b8:	1c5a      	adds	r2, r3, #1
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	895b      	ldrh	r3, [r3, #10]
 80163c2:	461a      	mov	r2, r3
 80163c4:	693b      	ldr	r3, [r7, #16]
 80163c6:	4293      	cmp	r3, r2
 80163c8:	d3e6      	bcc.n	8016398 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163ce:	693b      	ldr	r3, [r7, #16]
 80163d0:	1ad2      	subs	r2, r2, r3
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	697a      	ldr	r2, [r7, #20]
 80163da:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80163dc:	6979      	ldr	r1, [r7, #20]
 80163de:	68f8      	ldr	r0, [r7, #12]
 80163e0:	f7ff fbf8 	bl	8015bd4 <clust2sect>
 80163e4:	4602      	mov	r2, r0
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	68ba      	ldr	r2, [r7, #8]
 80163ee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80163f6:	68bb      	ldr	r3, [r7, #8]
 80163f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80163fc:	441a      	add	r2, r3
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016402:	2300      	movs	r3, #0
}
 8016404:	4618      	mov	r0, r3
 8016406:	3718      	adds	r7, #24
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}

0801640c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b086      	sub	sp, #24
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
 8016414:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801641c:	2100      	movs	r1, #0
 801641e:	6878      	ldr	r0, [r7, #4]
 8016420:	f7ff feb4 	bl	801618c <dir_sdi>
 8016424:	4603      	mov	r3, r0
 8016426:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016428:	7dfb      	ldrb	r3, [r7, #23]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d12b      	bne.n	8016486 <dir_alloc+0x7a>
		n = 0;
 801642e:	2300      	movs	r3, #0
 8016430:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	69db      	ldr	r3, [r3, #28]
 8016436:	4619      	mov	r1, r3
 8016438:	68f8      	ldr	r0, [r7, #12]
 801643a:	f7ff fb2f 	bl	8015a9c <move_window>
 801643e:	4603      	mov	r3, r0
 8016440:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016442:	7dfb      	ldrb	r3, [r7, #23]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d11d      	bne.n	8016484 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	6a1b      	ldr	r3, [r3, #32]
 801644c:	781b      	ldrb	r3, [r3, #0]
 801644e:	2be5      	cmp	r3, #229	; 0xe5
 8016450:	d004      	beq.n	801645c <dir_alloc+0x50>
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	6a1b      	ldr	r3, [r3, #32]
 8016456:	781b      	ldrb	r3, [r3, #0]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d107      	bne.n	801646c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801645c:	693b      	ldr	r3, [r7, #16]
 801645e:	3301      	adds	r3, #1
 8016460:	613b      	str	r3, [r7, #16]
 8016462:	693a      	ldr	r2, [r7, #16]
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	429a      	cmp	r2, r3
 8016468:	d102      	bne.n	8016470 <dir_alloc+0x64>
 801646a:	e00c      	b.n	8016486 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801646c:	2300      	movs	r3, #0
 801646e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8016470:	2101      	movs	r1, #1
 8016472:	6878      	ldr	r0, [r7, #4]
 8016474:	f7ff ff05 	bl	8016282 <dir_next>
 8016478:	4603      	mov	r3, r0
 801647a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801647c:	7dfb      	ldrb	r3, [r7, #23]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d0d7      	beq.n	8016432 <dir_alloc+0x26>
 8016482:	e000      	b.n	8016486 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8016484:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8016486:	7dfb      	ldrb	r3, [r7, #23]
 8016488:	2b04      	cmp	r3, #4
 801648a:	d101      	bne.n	8016490 <dir_alloc+0x84>
 801648c:	2307      	movs	r3, #7
 801648e:	75fb      	strb	r3, [r7, #23]
	return res;
 8016490:	7dfb      	ldrb	r3, [r7, #23]
}
 8016492:	4618      	mov	r0, r3
 8016494:	3718      	adds	r7, #24
 8016496:	46bd      	mov	sp, r7
 8016498:	bd80      	pop	{r7, pc}

0801649a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801649a:	b580      	push	{r7, lr}
 801649c:	b084      	sub	sp, #16
 801649e:	af00      	add	r7, sp, #0
 80164a0:	6078      	str	r0, [r7, #4]
 80164a2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	331a      	adds	r3, #26
 80164a8:	4618      	mov	r0, r3
 80164aa:	f7ff f847 	bl	801553c <ld_word>
 80164ae:	4603      	mov	r3, r0
 80164b0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	781b      	ldrb	r3, [r3, #0]
 80164b6:	2b03      	cmp	r3, #3
 80164b8:	d109      	bne.n	80164ce <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80164ba:	683b      	ldr	r3, [r7, #0]
 80164bc:	3314      	adds	r3, #20
 80164be:	4618      	mov	r0, r3
 80164c0:	f7ff f83c 	bl	801553c <ld_word>
 80164c4:	4603      	mov	r3, r0
 80164c6:	041b      	lsls	r3, r3, #16
 80164c8:	68fa      	ldr	r2, [r7, #12]
 80164ca:	4313      	orrs	r3, r2
 80164cc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80164ce:	68fb      	ldr	r3, [r7, #12]
}
 80164d0:	4618      	mov	r0, r3
 80164d2:	3710      	adds	r7, #16
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}

080164d8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80164d8:	b580      	push	{r7, lr}
 80164da:	b084      	sub	sp, #16
 80164dc:	af00      	add	r7, sp, #0
 80164de:	60f8      	str	r0, [r7, #12]
 80164e0:	60b9      	str	r1, [r7, #8]
 80164e2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80164e4:	68bb      	ldr	r3, [r7, #8]
 80164e6:	331a      	adds	r3, #26
 80164e8:	687a      	ldr	r2, [r7, #4]
 80164ea:	b292      	uxth	r2, r2
 80164ec:	4611      	mov	r1, r2
 80164ee:	4618      	mov	r0, r3
 80164f0:	f7ff f85f 	bl	80155b2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	781b      	ldrb	r3, [r3, #0]
 80164f8:	2b03      	cmp	r3, #3
 80164fa:	d109      	bne.n	8016510 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80164fc:	68bb      	ldr	r3, [r7, #8]
 80164fe:	f103 0214 	add.w	r2, r3, #20
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	0c1b      	lsrs	r3, r3, #16
 8016506:	b29b      	uxth	r3, r3
 8016508:	4619      	mov	r1, r3
 801650a:	4610      	mov	r0, r2
 801650c:	f7ff f851 	bl	80155b2 <st_word>
	}
}
 8016510:	bf00      	nop
 8016512:	3710      	adds	r7, #16
 8016514:	46bd      	mov	sp, r7
 8016516:	bd80      	pop	{r7, pc}

08016518 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8016518:	b580      	push	{r7, lr}
 801651a:	b086      	sub	sp, #24
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016526:	2100      	movs	r1, #0
 8016528:	6878      	ldr	r0, [r7, #4]
 801652a:	f7ff fe2f 	bl	801618c <dir_sdi>
 801652e:	4603      	mov	r3, r0
 8016530:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8016532:	7dfb      	ldrb	r3, [r7, #23]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d001      	beq.n	801653c <dir_find+0x24>
 8016538:	7dfb      	ldrb	r3, [r7, #23]
 801653a:	e03e      	b.n	80165ba <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	69db      	ldr	r3, [r3, #28]
 8016540:	4619      	mov	r1, r3
 8016542:	6938      	ldr	r0, [r7, #16]
 8016544:	f7ff faaa 	bl	8015a9c <move_window>
 8016548:	4603      	mov	r3, r0
 801654a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801654c:	7dfb      	ldrb	r3, [r7, #23]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d12f      	bne.n	80165b2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	6a1b      	ldr	r3, [r3, #32]
 8016556:	781b      	ldrb	r3, [r3, #0]
 8016558:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801655a:	7bfb      	ldrb	r3, [r7, #15]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d102      	bne.n	8016566 <dir_find+0x4e>
 8016560:	2304      	movs	r3, #4
 8016562:	75fb      	strb	r3, [r7, #23]
 8016564:	e028      	b.n	80165b8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	6a1b      	ldr	r3, [r3, #32]
 801656a:	330b      	adds	r3, #11
 801656c:	781b      	ldrb	r3, [r3, #0]
 801656e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016572:	b2da      	uxtb	r2, r3
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	6a1b      	ldr	r3, [r3, #32]
 801657c:	330b      	adds	r3, #11
 801657e:	781b      	ldrb	r3, [r3, #0]
 8016580:	f003 0308 	and.w	r3, r3, #8
 8016584:	2b00      	cmp	r3, #0
 8016586:	d10a      	bne.n	801659e <dir_find+0x86>
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	6a18      	ldr	r0, [r3, #32]
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	3324      	adds	r3, #36	; 0x24
 8016590:	220b      	movs	r2, #11
 8016592:	4619      	mov	r1, r3
 8016594:	f7ff f88f 	bl	80156b6 <mem_cmp>
 8016598:	4603      	mov	r3, r0
 801659a:	2b00      	cmp	r3, #0
 801659c:	d00b      	beq.n	80165b6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801659e:	2100      	movs	r1, #0
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f7ff fe6e 	bl	8016282 <dir_next>
 80165a6:	4603      	mov	r3, r0
 80165a8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80165aa:	7dfb      	ldrb	r3, [r7, #23]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d0c5      	beq.n	801653c <dir_find+0x24>
 80165b0:	e002      	b.n	80165b8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80165b2:	bf00      	nop
 80165b4:	e000      	b.n	80165b8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80165b6:	bf00      	nop

	return res;
 80165b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80165ba:	4618      	mov	r0, r3
 80165bc:	3718      	adds	r7, #24
 80165be:	46bd      	mov	sp, r7
 80165c0:	bd80      	pop	{r7, pc}

080165c2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80165c2:	b580      	push	{r7, lr}
 80165c4:	b084      	sub	sp, #16
 80165c6:	af00      	add	r7, sp, #0
 80165c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80165d0:	2101      	movs	r1, #1
 80165d2:	6878      	ldr	r0, [r7, #4]
 80165d4:	f7ff ff1a 	bl	801640c <dir_alloc>
 80165d8:	4603      	mov	r3, r0
 80165da:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80165dc:	7bfb      	ldrb	r3, [r7, #15]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d11c      	bne.n	801661c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	69db      	ldr	r3, [r3, #28]
 80165e6:	4619      	mov	r1, r3
 80165e8:	68b8      	ldr	r0, [r7, #8]
 80165ea:	f7ff fa57 	bl	8015a9c <move_window>
 80165ee:	4603      	mov	r3, r0
 80165f0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80165f2:	7bfb      	ldrb	r3, [r7, #15]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d111      	bne.n	801661c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	6a1b      	ldr	r3, [r3, #32]
 80165fc:	2220      	movs	r2, #32
 80165fe:	2100      	movs	r1, #0
 8016600:	4618      	mov	r0, r3
 8016602:	f7ff f83e 	bl	8015682 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	6a18      	ldr	r0, [r3, #32]
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	3324      	adds	r3, #36	; 0x24
 801660e:	220b      	movs	r2, #11
 8016610:	4619      	mov	r1, r3
 8016612:	f7ff f815 	bl	8015640 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8016616:	68bb      	ldr	r3, [r7, #8]
 8016618:	2201      	movs	r2, #1
 801661a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801661c:	7bfb      	ldrb	r3, [r7, #15]
}
 801661e:	4618      	mov	r0, r3
 8016620:	3710      	adds	r7, #16
 8016622:	46bd      	mov	sp, r7
 8016624:	bd80      	pop	{r7, pc}
	...

08016628 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b088      	sub	sp, #32
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
 8016630:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8016632:	683b      	ldr	r3, [r7, #0]
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	60fb      	str	r3, [r7, #12]
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	3324      	adds	r3, #36	; 0x24
 801663c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801663e:	220b      	movs	r2, #11
 8016640:	2120      	movs	r1, #32
 8016642:	68b8      	ldr	r0, [r7, #8]
 8016644:	f7ff f81d 	bl	8015682 <mem_set>
	si = i = 0; ni = 8;
 8016648:	2300      	movs	r3, #0
 801664a:	613b      	str	r3, [r7, #16]
 801664c:	693b      	ldr	r3, [r7, #16]
 801664e:	617b      	str	r3, [r7, #20]
 8016650:	2308      	movs	r3, #8
 8016652:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8016654:	697b      	ldr	r3, [r7, #20]
 8016656:	1c5a      	adds	r2, r3, #1
 8016658:	617a      	str	r2, [r7, #20]
 801665a:	68fa      	ldr	r2, [r7, #12]
 801665c:	4413      	add	r3, r2
 801665e:	781b      	ldrb	r3, [r3, #0]
 8016660:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8016662:	7ffb      	ldrb	r3, [r7, #31]
 8016664:	2b20      	cmp	r3, #32
 8016666:	d94e      	bls.n	8016706 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8016668:	7ffb      	ldrb	r3, [r7, #31]
 801666a:	2b2f      	cmp	r3, #47	; 0x2f
 801666c:	d006      	beq.n	801667c <create_name+0x54>
 801666e:	7ffb      	ldrb	r3, [r7, #31]
 8016670:	2b5c      	cmp	r3, #92	; 0x5c
 8016672:	d110      	bne.n	8016696 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8016674:	e002      	b.n	801667c <create_name+0x54>
 8016676:	697b      	ldr	r3, [r7, #20]
 8016678:	3301      	adds	r3, #1
 801667a:	617b      	str	r3, [r7, #20]
 801667c:	68fa      	ldr	r2, [r7, #12]
 801667e:	697b      	ldr	r3, [r7, #20]
 8016680:	4413      	add	r3, r2
 8016682:	781b      	ldrb	r3, [r3, #0]
 8016684:	2b2f      	cmp	r3, #47	; 0x2f
 8016686:	d0f6      	beq.n	8016676 <create_name+0x4e>
 8016688:	68fa      	ldr	r2, [r7, #12]
 801668a:	697b      	ldr	r3, [r7, #20]
 801668c:	4413      	add	r3, r2
 801668e:	781b      	ldrb	r3, [r3, #0]
 8016690:	2b5c      	cmp	r3, #92	; 0x5c
 8016692:	d0f0      	beq.n	8016676 <create_name+0x4e>
			break;
 8016694:	e038      	b.n	8016708 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8016696:	7ffb      	ldrb	r3, [r7, #31]
 8016698:	2b2e      	cmp	r3, #46	; 0x2e
 801669a:	d003      	beq.n	80166a4 <create_name+0x7c>
 801669c:	693a      	ldr	r2, [r7, #16]
 801669e:	69bb      	ldr	r3, [r7, #24]
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d30c      	bcc.n	80166be <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80166a4:	69bb      	ldr	r3, [r7, #24]
 80166a6:	2b0b      	cmp	r3, #11
 80166a8:	d002      	beq.n	80166b0 <create_name+0x88>
 80166aa:	7ffb      	ldrb	r3, [r7, #31]
 80166ac:	2b2e      	cmp	r3, #46	; 0x2e
 80166ae:	d001      	beq.n	80166b4 <create_name+0x8c>
 80166b0:	2306      	movs	r3, #6
 80166b2:	e044      	b.n	801673e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80166b4:	2308      	movs	r3, #8
 80166b6:	613b      	str	r3, [r7, #16]
 80166b8:	230b      	movs	r3, #11
 80166ba:	61bb      	str	r3, [r7, #24]
			continue;
 80166bc:	e022      	b.n	8016704 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80166be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	da04      	bge.n	80166d0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80166c6:	7ffb      	ldrb	r3, [r7, #31]
 80166c8:	3b80      	subs	r3, #128	; 0x80
 80166ca:	4a1f      	ldr	r2, [pc, #124]	; (8016748 <create_name+0x120>)
 80166cc:	5cd3      	ldrb	r3, [r2, r3]
 80166ce:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80166d0:	7ffb      	ldrb	r3, [r7, #31]
 80166d2:	4619      	mov	r1, r3
 80166d4:	481d      	ldr	r0, [pc, #116]	; (801674c <create_name+0x124>)
 80166d6:	f7ff f815 	bl	8015704 <chk_chr>
 80166da:	4603      	mov	r3, r0
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d001      	beq.n	80166e4 <create_name+0xbc>
 80166e0:	2306      	movs	r3, #6
 80166e2:	e02c      	b.n	801673e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80166e4:	7ffb      	ldrb	r3, [r7, #31]
 80166e6:	2b60      	cmp	r3, #96	; 0x60
 80166e8:	d905      	bls.n	80166f6 <create_name+0xce>
 80166ea:	7ffb      	ldrb	r3, [r7, #31]
 80166ec:	2b7a      	cmp	r3, #122	; 0x7a
 80166ee:	d802      	bhi.n	80166f6 <create_name+0xce>
 80166f0:	7ffb      	ldrb	r3, [r7, #31]
 80166f2:	3b20      	subs	r3, #32
 80166f4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80166f6:	693b      	ldr	r3, [r7, #16]
 80166f8:	1c5a      	adds	r2, r3, #1
 80166fa:	613a      	str	r2, [r7, #16]
 80166fc:	68ba      	ldr	r2, [r7, #8]
 80166fe:	4413      	add	r3, r2
 8016700:	7ffa      	ldrb	r2, [r7, #31]
 8016702:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8016704:	e7a6      	b.n	8016654 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8016706:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8016708:	68fa      	ldr	r2, [r7, #12]
 801670a:	697b      	ldr	r3, [r7, #20]
 801670c:	441a      	add	r2, r3
 801670e:	683b      	ldr	r3, [r7, #0]
 8016710:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8016712:	693b      	ldr	r3, [r7, #16]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d101      	bne.n	801671c <create_name+0xf4>
 8016718:	2306      	movs	r3, #6
 801671a:	e010      	b.n	801673e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801671c:	68bb      	ldr	r3, [r7, #8]
 801671e:	781b      	ldrb	r3, [r3, #0]
 8016720:	2be5      	cmp	r3, #229	; 0xe5
 8016722:	d102      	bne.n	801672a <create_name+0x102>
 8016724:	68bb      	ldr	r3, [r7, #8]
 8016726:	2205      	movs	r2, #5
 8016728:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801672a:	7ffb      	ldrb	r3, [r7, #31]
 801672c:	2b20      	cmp	r3, #32
 801672e:	d801      	bhi.n	8016734 <create_name+0x10c>
 8016730:	2204      	movs	r2, #4
 8016732:	e000      	b.n	8016736 <create_name+0x10e>
 8016734:	2200      	movs	r2, #0
 8016736:	68bb      	ldr	r3, [r7, #8]
 8016738:	330b      	adds	r3, #11
 801673a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801673c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801673e:	4618      	mov	r0, r3
 8016740:	3720      	adds	r7, #32
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}
 8016746:	bf00      	nop
 8016748:	08019f14 	.word	0x08019f14
 801674c:	08019e38 	.word	0x08019e38

08016750 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b086      	sub	sp, #24
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
 8016758:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801675e:	693b      	ldr	r3, [r7, #16]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8016764:	e002      	b.n	801676c <follow_path+0x1c>
 8016766:	683b      	ldr	r3, [r7, #0]
 8016768:	3301      	adds	r3, #1
 801676a:	603b      	str	r3, [r7, #0]
 801676c:	683b      	ldr	r3, [r7, #0]
 801676e:	781b      	ldrb	r3, [r3, #0]
 8016770:	2b2f      	cmp	r3, #47	; 0x2f
 8016772:	d0f8      	beq.n	8016766 <follow_path+0x16>
 8016774:	683b      	ldr	r3, [r7, #0]
 8016776:	781b      	ldrb	r3, [r3, #0]
 8016778:	2b5c      	cmp	r3, #92	; 0x5c
 801677a:	d0f4      	beq.n	8016766 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801677c:	693b      	ldr	r3, [r7, #16]
 801677e:	2200      	movs	r2, #0
 8016780:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	781b      	ldrb	r3, [r3, #0]
 8016786:	2b1f      	cmp	r3, #31
 8016788:	d80a      	bhi.n	80167a0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	2280      	movs	r2, #128	; 0x80
 801678e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8016792:	2100      	movs	r1, #0
 8016794:	6878      	ldr	r0, [r7, #4]
 8016796:	f7ff fcf9 	bl	801618c <dir_sdi>
 801679a:	4603      	mov	r3, r0
 801679c:	75fb      	strb	r3, [r7, #23]
 801679e:	e043      	b.n	8016828 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80167a0:	463b      	mov	r3, r7
 80167a2:	4619      	mov	r1, r3
 80167a4:	6878      	ldr	r0, [r7, #4]
 80167a6:	f7ff ff3f 	bl	8016628 <create_name>
 80167aa:	4603      	mov	r3, r0
 80167ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80167ae:	7dfb      	ldrb	r3, [r7, #23]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d134      	bne.n	801681e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80167b4:	6878      	ldr	r0, [r7, #4]
 80167b6:	f7ff feaf 	bl	8016518 <dir_find>
 80167ba:	4603      	mov	r3, r0
 80167bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80167c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80167c6:	7dfb      	ldrb	r3, [r7, #23]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d00a      	beq.n	80167e2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80167cc:	7dfb      	ldrb	r3, [r7, #23]
 80167ce:	2b04      	cmp	r3, #4
 80167d0:	d127      	bne.n	8016822 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80167d2:	7afb      	ldrb	r3, [r7, #11]
 80167d4:	f003 0304 	and.w	r3, r3, #4
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d122      	bne.n	8016822 <follow_path+0xd2>
 80167dc:	2305      	movs	r3, #5
 80167de:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80167e0:	e01f      	b.n	8016822 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80167e2:	7afb      	ldrb	r3, [r7, #11]
 80167e4:	f003 0304 	and.w	r3, r3, #4
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d11c      	bne.n	8016826 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80167ec:	693b      	ldr	r3, [r7, #16]
 80167ee:	799b      	ldrb	r3, [r3, #6]
 80167f0:	f003 0310 	and.w	r3, r3, #16
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d102      	bne.n	80167fe <follow_path+0xae>
				res = FR_NO_PATH; break;
 80167f8:	2305      	movs	r3, #5
 80167fa:	75fb      	strb	r3, [r7, #23]
 80167fc:	e014      	b.n	8016828 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	695b      	ldr	r3, [r3, #20]
 8016808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801680c:	4413      	add	r3, r2
 801680e:	4619      	mov	r1, r3
 8016810:	68f8      	ldr	r0, [r7, #12]
 8016812:	f7ff fe42 	bl	801649a <ld_clust>
 8016816:	4602      	mov	r2, r0
 8016818:	693b      	ldr	r3, [r7, #16]
 801681a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801681c:	e7c0      	b.n	80167a0 <follow_path+0x50>
			if (res != FR_OK) break;
 801681e:	bf00      	nop
 8016820:	e002      	b.n	8016828 <follow_path+0xd8>
				break;
 8016822:	bf00      	nop
 8016824:	e000      	b.n	8016828 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016826:	bf00      	nop
			}
		}
	}

	return res;
 8016828:	7dfb      	ldrb	r3, [r7, #23]
}
 801682a:	4618      	mov	r0, r3
 801682c:	3718      	adds	r7, #24
 801682e:	46bd      	mov	sp, r7
 8016830:	bd80      	pop	{r7, pc}

08016832 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8016832:	b480      	push	{r7}
 8016834:	b087      	sub	sp, #28
 8016836:	af00      	add	r7, sp, #0
 8016838:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801683a:	f04f 33ff 	mov.w	r3, #4294967295
 801683e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d031      	beq.n	80168ac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	617b      	str	r3, [r7, #20]
 801684e:	e002      	b.n	8016856 <get_ldnumber+0x24>
 8016850:	697b      	ldr	r3, [r7, #20]
 8016852:	3301      	adds	r3, #1
 8016854:	617b      	str	r3, [r7, #20]
 8016856:	697b      	ldr	r3, [r7, #20]
 8016858:	781b      	ldrb	r3, [r3, #0]
 801685a:	2b20      	cmp	r3, #32
 801685c:	d903      	bls.n	8016866 <get_ldnumber+0x34>
 801685e:	697b      	ldr	r3, [r7, #20]
 8016860:	781b      	ldrb	r3, [r3, #0]
 8016862:	2b3a      	cmp	r3, #58	; 0x3a
 8016864:	d1f4      	bne.n	8016850 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016866:	697b      	ldr	r3, [r7, #20]
 8016868:	781b      	ldrb	r3, [r3, #0]
 801686a:	2b3a      	cmp	r3, #58	; 0x3a
 801686c:	d11c      	bne.n	80168a8 <get_ldnumber+0x76>
			tp = *path;
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	1c5a      	adds	r2, r3, #1
 8016878:	60fa      	str	r2, [r7, #12]
 801687a:	781b      	ldrb	r3, [r3, #0]
 801687c:	3b30      	subs	r3, #48	; 0x30
 801687e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8016880:	68bb      	ldr	r3, [r7, #8]
 8016882:	2b09      	cmp	r3, #9
 8016884:	d80e      	bhi.n	80168a4 <get_ldnumber+0x72>
 8016886:	68fa      	ldr	r2, [r7, #12]
 8016888:	697b      	ldr	r3, [r7, #20]
 801688a:	429a      	cmp	r2, r3
 801688c:	d10a      	bne.n	80168a4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801688e:	68bb      	ldr	r3, [r7, #8]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d107      	bne.n	80168a4 <get_ldnumber+0x72>
					vol = (int)i;
 8016894:	68bb      	ldr	r3, [r7, #8]
 8016896:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016898:	697b      	ldr	r3, [r7, #20]
 801689a:	3301      	adds	r3, #1
 801689c:	617b      	str	r3, [r7, #20]
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	697a      	ldr	r2, [r7, #20]
 80168a2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80168a4:	693b      	ldr	r3, [r7, #16]
 80168a6:	e002      	b.n	80168ae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80168a8:	2300      	movs	r3, #0
 80168aa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80168ac:	693b      	ldr	r3, [r7, #16]
}
 80168ae:	4618      	mov	r0, r3
 80168b0:	371c      	adds	r7, #28
 80168b2:	46bd      	mov	sp, r7
 80168b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b8:	4770      	bx	lr
	...

080168bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b082      	sub	sp, #8
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	6078      	str	r0, [r7, #4]
 80168c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	2200      	movs	r2, #0
 80168ca:	70da      	strb	r2, [r3, #3]
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	f04f 32ff 	mov.w	r2, #4294967295
 80168d2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80168d4:	6839      	ldr	r1, [r7, #0]
 80168d6:	6878      	ldr	r0, [r7, #4]
 80168d8:	f7ff f8e0 	bl	8015a9c <move_window>
 80168dc:	4603      	mov	r3, r0
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d001      	beq.n	80168e6 <check_fs+0x2a>
 80168e2:	2304      	movs	r3, #4
 80168e4:	e038      	b.n	8016958 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	3330      	adds	r3, #48	; 0x30
 80168ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80168ee:	4618      	mov	r0, r3
 80168f0:	f7fe fe24 	bl	801553c <ld_word>
 80168f4:	4603      	mov	r3, r0
 80168f6:	461a      	mov	r2, r3
 80168f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80168fc:	429a      	cmp	r2, r3
 80168fe:	d001      	beq.n	8016904 <check_fs+0x48>
 8016900:	2303      	movs	r3, #3
 8016902:	e029      	b.n	8016958 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801690a:	2be9      	cmp	r3, #233	; 0xe9
 801690c:	d009      	beq.n	8016922 <check_fs+0x66>
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016914:	2beb      	cmp	r3, #235	; 0xeb
 8016916:	d11e      	bne.n	8016956 <check_fs+0x9a>
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801691e:	2b90      	cmp	r3, #144	; 0x90
 8016920:	d119      	bne.n	8016956 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	3330      	adds	r3, #48	; 0x30
 8016926:	3336      	adds	r3, #54	; 0x36
 8016928:	4618      	mov	r0, r3
 801692a:	f7fe fe1f 	bl	801556c <ld_dword>
 801692e:	4603      	mov	r3, r0
 8016930:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016934:	4a0a      	ldr	r2, [pc, #40]	; (8016960 <check_fs+0xa4>)
 8016936:	4293      	cmp	r3, r2
 8016938:	d101      	bne.n	801693e <check_fs+0x82>
 801693a:	2300      	movs	r3, #0
 801693c:	e00c      	b.n	8016958 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	3330      	adds	r3, #48	; 0x30
 8016942:	3352      	adds	r3, #82	; 0x52
 8016944:	4618      	mov	r0, r3
 8016946:	f7fe fe11 	bl	801556c <ld_dword>
 801694a:	4602      	mov	r2, r0
 801694c:	4b05      	ldr	r3, [pc, #20]	; (8016964 <check_fs+0xa8>)
 801694e:	429a      	cmp	r2, r3
 8016950:	d101      	bne.n	8016956 <check_fs+0x9a>
 8016952:	2300      	movs	r3, #0
 8016954:	e000      	b.n	8016958 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016956:	2302      	movs	r3, #2
}
 8016958:	4618      	mov	r0, r3
 801695a:	3708      	adds	r7, #8
 801695c:	46bd      	mov	sp, r7
 801695e:	bd80      	pop	{r7, pc}
 8016960:	00544146 	.word	0x00544146
 8016964:	33544146 	.word	0x33544146

08016968 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b096      	sub	sp, #88	; 0x58
 801696c:	af00      	add	r7, sp, #0
 801696e:	60f8      	str	r0, [r7, #12]
 8016970:	60b9      	str	r1, [r7, #8]
 8016972:	4613      	mov	r3, r2
 8016974:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016976:	68bb      	ldr	r3, [r7, #8]
 8016978:	2200      	movs	r2, #0
 801697a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801697c:	68f8      	ldr	r0, [r7, #12]
 801697e:	f7ff ff58 	bl	8016832 <get_ldnumber>
 8016982:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016986:	2b00      	cmp	r3, #0
 8016988:	da01      	bge.n	801698e <find_volume+0x26>
 801698a:	230b      	movs	r3, #11
 801698c:	e22e      	b.n	8016dec <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801698e:	4aa8      	ldr	r2, [pc, #672]	; (8016c30 <find_volume+0x2c8>)
 8016990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016996:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801699a:	2b00      	cmp	r3, #0
 801699c:	d101      	bne.n	80169a2 <find_volume+0x3a>
 801699e:	230c      	movs	r3, #12
 80169a0:	e224      	b.n	8016dec <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80169a2:	68bb      	ldr	r3, [r7, #8]
 80169a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80169a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80169a8:	79fb      	ldrb	r3, [r7, #7]
 80169aa:	f023 0301 	bic.w	r3, r3, #1
 80169ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80169b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169b2:	781b      	ldrb	r3, [r3, #0]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d01a      	beq.n	80169ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80169b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169ba:	785b      	ldrb	r3, [r3, #1]
 80169bc:	4618      	mov	r0, r3
 80169be:	f7fe fd1f 	bl	8015400 <disk_status>
 80169c2:	4603      	mov	r3, r0
 80169c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80169c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80169cc:	f003 0301 	and.w	r3, r3, #1
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d10c      	bne.n	80169ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80169d4:	79fb      	ldrb	r3, [r7, #7]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d007      	beq.n	80169ea <find_volume+0x82>
 80169da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80169de:	f003 0304 	and.w	r3, r3, #4
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d001      	beq.n	80169ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80169e6:	230a      	movs	r3, #10
 80169e8:	e200      	b.n	8016dec <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80169ea:	2300      	movs	r3, #0
 80169ec:	e1fe      	b.n	8016dec <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80169ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169f0:	2200      	movs	r2, #0
 80169f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80169f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169f6:	b2da      	uxtb	r2, r3
 80169f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80169fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169fe:	785b      	ldrb	r3, [r3, #1]
 8016a00:	4618      	mov	r0, r3
 8016a02:	f7fe fd17 	bl	8015434 <disk_initialize>
 8016a06:	4603      	mov	r3, r0
 8016a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016a10:	f003 0301 	and.w	r3, r3, #1
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d001      	beq.n	8016a1c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016a18:	2303      	movs	r3, #3
 8016a1a:	e1e7      	b.n	8016dec <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016a1c:	79fb      	ldrb	r3, [r7, #7]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d007      	beq.n	8016a32 <find_volume+0xca>
 8016a22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016a26:	f003 0304 	and.w	r3, r3, #4
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d001      	beq.n	8016a32 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016a2e:	230a      	movs	r3, #10
 8016a30:	e1dc      	b.n	8016dec <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016a32:	2300      	movs	r3, #0
 8016a34:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016a36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016a38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016a3a:	f7ff ff3f 	bl	80168bc <check_fs>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016a44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016a48:	2b02      	cmp	r3, #2
 8016a4a:	d14b      	bne.n	8016ae4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8016a50:	e01f      	b.n	8016a92 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a5a:	011b      	lsls	r3, r3, #4
 8016a5c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016a60:	4413      	add	r3, r2
 8016a62:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a66:	3304      	adds	r3, #4
 8016a68:	781b      	ldrb	r3, [r3, #0]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d006      	beq.n	8016a7c <find_volume+0x114>
 8016a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a70:	3308      	adds	r3, #8
 8016a72:	4618      	mov	r0, r3
 8016a74:	f7fe fd7a 	bl	801556c <ld_dword>
 8016a78:	4602      	mov	r2, r0
 8016a7a:	e000      	b.n	8016a7e <find_volume+0x116>
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a80:	009b      	lsls	r3, r3, #2
 8016a82:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8016a86:	440b      	add	r3, r1
 8016a88:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a8e:	3301      	adds	r3, #1
 8016a90:	643b      	str	r3, [r7, #64]	; 0x40
 8016a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a94:	2b03      	cmp	r3, #3
 8016a96:	d9dc      	bls.n	8016a52 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016a98:	2300      	movs	r3, #0
 8016a9a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d002      	beq.n	8016aa8 <find_volume+0x140>
 8016aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016aa4:	3b01      	subs	r3, #1
 8016aa6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016aaa:	009b      	lsls	r3, r3, #2
 8016aac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8016ab0:	4413      	add	r3, r2
 8016ab2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8016ab6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d005      	beq.n	8016aca <find_volume+0x162>
 8016abe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016ac0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016ac2:	f7ff fefb 	bl	80168bc <check_fs>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	e000      	b.n	8016acc <find_volume+0x164>
 8016aca:	2303      	movs	r3, #3
 8016acc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016ad0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ad4:	2b01      	cmp	r3, #1
 8016ad6:	d905      	bls.n	8016ae4 <find_volume+0x17c>
 8016ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ada:	3301      	adds	r3, #1
 8016adc:	643b      	str	r3, [r7, #64]	; 0x40
 8016ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ae0:	2b03      	cmp	r3, #3
 8016ae2:	d9e1      	bls.n	8016aa8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ae8:	2b04      	cmp	r3, #4
 8016aea:	d101      	bne.n	8016af0 <find_volume+0x188>
 8016aec:	2301      	movs	r3, #1
 8016aee:	e17d      	b.n	8016dec <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016af0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016af4:	2b01      	cmp	r3, #1
 8016af6:	d901      	bls.n	8016afc <find_volume+0x194>
 8016af8:	230d      	movs	r3, #13
 8016afa:	e177      	b.n	8016dec <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016afe:	3330      	adds	r3, #48	; 0x30
 8016b00:	330b      	adds	r3, #11
 8016b02:	4618      	mov	r0, r3
 8016b04:	f7fe fd1a 	bl	801553c <ld_word>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016b0e:	d001      	beq.n	8016b14 <find_volume+0x1ac>
 8016b10:	230d      	movs	r3, #13
 8016b12:	e16b      	b.n	8016dec <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b16:	3330      	adds	r3, #48	; 0x30
 8016b18:	3316      	adds	r3, #22
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f7fe fd0e 	bl	801553c <ld_word>
 8016b20:	4603      	mov	r3, r0
 8016b22:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d106      	bne.n	8016b38 <find_volume+0x1d0>
 8016b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b2c:	3330      	adds	r3, #48	; 0x30
 8016b2e:	3324      	adds	r3, #36	; 0x24
 8016b30:	4618      	mov	r0, r3
 8016b32:	f7fe fd1b 	bl	801556c <ld_dword>
 8016b36:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8016b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016b3c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b40:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8016b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b46:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b4a:	789b      	ldrb	r3, [r3, #2]
 8016b4c:	2b01      	cmp	r3, #1
 8016b4e:	d005      	beq.n	8016b5c <find_volume+0x1f4>
 8016b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b52:	789b      	ldrb	r3, [r3, #2]
 8016b54:	2b02      	cmp	r3, #2
 8016b56:	d001      	beq.n	8016b5c <find_volume+0x1f4>
 8016b58:	230d      	movs	r3, #13
 8016b5a:	e147      	b.n	8016dec <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b5e:	789b      	ldrb	r3, [r3, #2]
 8016b60:	461a      	mov	r2, r3
 8016b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b64:	fb02 f303 	mul.w	r3, r2, r3
 8016b68:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8016b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016b70:	b29a      	uxth	r2, r3
 8016b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b74:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8016b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b78:	895b      	ldrh	r3, [r3, #10]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d008      	beq.n	8016b90 <find_volume+0x228>
 8016b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b80:	895b      	ldrh	r3, [r3, #10]
 8016b82:	461a      	mov	r2, r3
 8016b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b86:	895b      	ldrh	r3, [r3, #10]
 8016b88:	3b01      	subs	r3, #1
 8016b8a:	4013      	ands	r3, r2
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d001      	beq.n	8016b94 <find_volume+0x22c>
 8016b90:	230d      	movs	r3, #13
 8016b92:	e12b      	b.n	8016dec <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b96:	3330      	adds	r3, #48	; 0x30
 8016b98:	3311      	adds	r3, #17
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	f7fe fcce 	bl	801553c <ld_word>
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	461a      	mov	r2, r3
 8016ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ba6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016baa:	891b      	ldrh	r3, [r3, #8]
 8016bac:	f003 030f 	and.w	r3, r3, #15
 8016bb0:	b29b      	uxth	r3, r3
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d001      	beq.n	8016bba <find_volume+0x252>
 8016bb6:	230d      	movs	r3, #13
 8016bb8:	e118      	b.n	8016dec <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bbc:	3330      	adds	r3, #48	; 0x30
 8016bbe:	3313      	adds	r3, #19
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f7fe fcbb 	bl	801553c <ld_word>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d106      	bne.n	8016bde <find_volume+0x276>
 8016bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bd2:	3330      	adds	r3, #48	; 0x30
 8016bd4:	3320      	adds	r3, #32
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	f7fe fcc8 	bl	801556c <ld_dword>
 8016bdc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016be0:	3330      	adds	r3, #48	; 0x30
 8016be2:	330e      	adds	r3, #14
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7fe fca9 	bl	801553c <ld_word>
 8016bea:	4603      	mov	r3, r0
 8016bec:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016bee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d101      	bne.n	8016bf8 <find_volume+0x290>
 8016bf4:	230d      	movs	r3, #13
 8016bf6:	e0f9      	b.n	8016dec <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016bf8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016bfc:	4413      	add	r3, r2
 8016bfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016c00:	8912      	ldrh	r2, [r2, #8]
 8016c02:	0912      	lsrs	r2, r2, #4
 8016c04:	b292      	uxth	r2, r2
 8016c06:	4413      	add	r3, r2
 8016c08:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8016c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c0e:	429a      	cmp	r2, r3
 8016c10:	d201      	bcs.n	8016c16 <find_volume+0x2ae>
 8016c12:	230d      	movs	r3, #13
 8016c14:	e0ea      	b.n	8016dec <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016c16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c1a:	1ad3      	subs	r3, r2, r3
 8016c1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016c1e:	8952      	ldrh	r2, [r2, #10]
 8016c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8016c24:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d103      	bne.n	8016c34 <find_volume+0x2cc>
 8016c2c:	230d      	movs	r3, #13
 8016c2e:	e0dd      	b.n	8016dec <find_volume+0x484>
 8016c30:	24040350 	.word	0x24040350
		fmt = FS_FAT32;
 8016c34:	2303      	movs	r3, #3
 8016c36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c3c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016c40:	4293      	cmp	r3, r2
 8016c42:	d802      	bhi.n	8016c4a <find_volume+0x2e2>
 8016c44:	2302      	movs	r3, #2
 8016c46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c4c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016c50:	4293      	cmp	r3, r2
 8016c52:	d802      	bhi.n	8016c5a <find_volume+0x2f2>
 8016c54:	2301      	movs	r3, #1
 8016c56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c5c:	1c9a      	adds	r2, r3, #2
 8016c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c60:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8016c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016c66:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016c68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c6c:	441a      	add	r2, r3
 8016c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c70:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8016c72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c76:	441a      	add	r2, r3
 8016c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c7a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8016c7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016c80:	2b03      	cmp	r3, #3
 8016c82:	d11e      	bne.n	8016cc2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c86:	3330      	adds	r3, #48	; 0x30
 8016c88:	332a      	adds	r3, #42	; 0x2a
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f7fe fc56 	bl	801553c <ld_word>
 8016c90:	4603      	mov	r3, r0
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d001      	beq.n	8016c9a <find_volume+0x332>
 8016c96:	230d      	movs	r3, #13
 8016c98:	e0a8      	b.n	8016dec <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8016c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c9c:	891b      	ldrh	r3, [r3, #8]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d001      	beq.n	8016ca6 <find_volume+0x33e>
 8016ca2:	230d      	movs	r3, #13
 8016ca4:	e0a2      	b.n	8016dec <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8016ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ca8:	3330      	adds	r3, #48	; 0x30
 8016caa:	332c      	adds	r3, #44	; 0x2c
 8016cac:	4618      	mov	r0, r3
 8016cae:	f7fe fc5d 	bl	801556c <ld_dword>
 8016cb2:	4602      	mov	r2, r0
 8016cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cb6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8016cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cba:	695b      	ldr	r3, [r3, #20]
 8016cbc:	009b      	lsls	r3, r3, #2
 8016cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8016cc0:	e01f      	b.n	8016d02 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cc4:	891b      	ldrh	r3, [r3, #8]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d101      	bne.n	8016cce <find_volume+0x366>
 8016cca:	230d      	movs	r3, #13
 8016ccc:	e08e      	b.n	8016dec <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cd0:	6a1a      	ldr	r2, [r3, #32]
 8016cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016cd4:	441a      	add	r2, r3
 8016cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cd8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016cda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016cde:	2b02      	cmp	r3, #2
 8016ce0:	d103      	bne.n	8016cea <find_volume+0x382>
 8016ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ce4:	695b      	ldr	r3, [r3, #20]
 8016ce6:	005b      	lsls	r3, r3, #1
 8016ce8:	e00a      	b.n	8016d00 <find_volume+0x398>
 8016cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cec:	695a      	ldr	r2, [r3, #20]
 8016cee:	4613      	mov	r3, r2
 8016cf0:	005b      	lsls	r3, r3, #1
 8016cf2:	4413      	add	r3, r2
 8016cf4:	085a      	lsrs	r2, r3, #1
 8016cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cf8:	695b      	ldr	r3, [r3, #20]
 8016cfa:	f003 0301 	and.w	r3, r3, #1
 8016cfe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016d00:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d04:	699a      	ldr	r2, [r3, #24]
 8016d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d08:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8016d0c:	0a5b      	lsrs	r3, r3, #9
 8016d0e:	429a      	cmp	r2, r3
 8016d10:	d201      	bcs.n	8016d16 <find_volume+0x3ae>
 8016d12:	230d      	movs	r3, #13
 8016d14:	e06a      	b.n	8016dec <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d18:	f04f 32ff 	mov.w	r2, #4294967295
 8016d1c:	611a      	str	r2, [r3, #16]
 8016d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d20:	691a      	ldr	r2, [r3, #16]
 8016d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d24:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8016d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d28:	2280      	movs	r2, #128	; 0x80
 8016d2a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016d2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016d30:	2b03      	cmp	r3, #3
 8016d32:	d149      	bne.n	8016dc8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8016d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d36:	3330      	adds	r3, #48	; 0x30
 8016d38:	3330      	adds	r3, #48	; 0x30
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7fe fbfe 	bl	801553c <ld_word>
 8016d40:	4603      	mov	r3, r0
 8016d42:	2b01      	cmp	r3, #1
 8016d44:	d140      	bne.n	8016dc8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016d48:	3301      	adds	r3, #1
 8016d4a:	4619      	mov	r1, r3
 8016d4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016d4e:	f7fe fea5 	bl	8015a9c <move_window>
 8016d52:	4603      	mov	r3, r0
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d137      	bne.n	8016dc8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8016d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d5a:	2200      	movs	r2, #0
 8016d5c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d60:	3330      	adds	r3, #48	; 0x30
 8016d62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016d66:	4618      	mov	r0, r3
 8016d68:	f7fe fbe8 	bl	801553c <ld_word>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	461a      	mov	r2, r3
 8016d70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016d74:	429a      	cmp	r2, r3
 8016d76:	d127      	bne.n	8016dc8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d7a:	3330      	adds	r3, #48	; 0x30
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	f7fe fbf5 	bl	801556c <ld_dword>
 8016d82:	4602      	mov	r2, r0
 8016d84:	4b1b      	ldr	r3, [pc, #108]	; (8016df4 <find_volume+0x48c>)
 8016d86:	429a      	cmp	r2, r3
 8016d88:	d11e      	bne.n	8016dc8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d8c:	3330      	adds	r3, #48	; 0x30
 8016d8e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016d92:	4618      	mov	r0, r3
 8016d94:	f7fe fbea 	bl	801556c <ld_dword>
 8016d98:	4602      	mov	r2, r0
 8016d9a:	4b17      	ldr	r3, [pc, #92]	; (8016df8 <find_volume+0x490>)
 8016d9c:	429a      	cmp	r2, r3
 8016d9e:	d113      	bne.n	8016dc8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016da2:	3330      	adds	r3, #48	; 0x30
 8016da4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8016da8:	4618      	mov	r0, r3
 8016daa:	f7fe fbdf 	bl	801556c <ld_dword>
 8016dae:	4602      	mov	r2, r0
 8016db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016db2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8016db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016db6:	3330      	adds	r3, #48	; 0x30
 8016db8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f7fe fbd5 	bl	801556c <ld_dword>
 8016dc2:	4602      	mov	r2, r0
 8016dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dc6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8016dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016dce:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016dd0:	4b0a      	ldr	r3, [pc, #40]	; (8016dfc <find_volume+0x494>)
 8016dd2:	881b      	ldrh	r3, [r3, #0]
 8016dd4:	3301      	adds	r3, #1
 8016dd6:	b29a      	uxth	r2, r3
 8016dd8:	4b08      	ldr	r3, [pc, #32]	; (8016dfc <find_volume+0x494>)
 8016dda:	801a      	strh	r2, [r3, #0]
 8016ddc:	4b07      	ldr	r3, [pc, #28]	; (8016dfc <find_volume+0x494>)
 8016dde:	881a      	ldrh	r2, [r3, #0]
 8016de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016de2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8016de4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016de6:	f7fe fdf1 	bl	80159cc <clear_lock>
#endif
	return FR_OK;
 8016dea:	2300      	movs	r3, #0
}
 8016dec:	4618      	mov	r0, r3
 8016dee:	3758      	adds	r7, #88	; 0x58
 8016df0:	46bd      	mov	sp, r7
 8016df2:	bd80      	pop	{r7, pc}
 8016df4:	41615252 	.word	0x41615252
 8016df8:	61417272 	.word	0x61417272
 8016dfc:	24040354 	.word	0x24040354

08016e00 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b084      	sub	sp, #16
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
 8016e08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8016e0a:	2309      	movs	r3, #9
 8016e0c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d01c      	beq.n	8016e4e <validate+0x4e>
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d018      	beq.n	8016e4e <validate+0x4e>
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	781b      	ldrb	r3, [r3, #0]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d013      	beq.n	8016e4e <validate+0x4e>
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	889a      	ldrh	r2, [r3, #4]
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	88db      	ldrh	r3, [r3, #6]
 8016e30:	429a      	cmp	r2, r3
 8016e32:	d10c      	bne.n	8016e4e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	785b      	ldrb	r3, [r3, #1]
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	f7fe fae0 	bl	8015400 <disk_status>
 8016e40:	4603      	mov	r3, r0
 8016e42:	f003 0301 	and.w	r3, r3, #1
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d101      	bne.n	8016e4e <validate+0x4e>
			res = FR_OK;
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016e4e:	7bfb      	ldrb	r3, [r7, #15]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d102      	bne.n	8016e5a <validate+0x5a>
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	e000      	b.n	8016e5c <validate+0x5c>
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	683a      	ldr	r2, [r7, #0]
 8016e5e:	6013      	str	r3, [r2, #0]
	return res;
 8016e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e62:	4618      	mov	r0, r3
 8016e64:	3710      	adds	r7, #16
 8016e66:	46bd      	mov	sp, r7
 8016e68:	bd80      	pop	{r7, pc}
	...

08016e6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b088      	sub	sp, #32
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	60f8      	str	r0, [r7, #12]
 8016e74:	60b9      	str	r1, [r7, #8]
 8016e76:	4613      	mov	r3, r2
 8016e78:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016e7a:	68bb      	ldr	r3, [r7, #8]
 8016e7c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016e7e:	f107 0310 	add.w	r3, r7, #16
 8016e82:	4618      	mov	r0, r3
 8016e84:	f7ff fcd5 	bl	8016832 <get_ldnumber>
 8016e88:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016e8a:	69fb      	ldr	r3, [r7, #28]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	da01      	bge.n	8016e94 <f_mount+0x28>
 8016e90:	230b      	movs	r3, #11
 8016e92:	e02b      	b.n	8016eec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016e94:	4a17      	ldr	r2, [pc, #92]	; (8016ef4 <f_mount+0x88>)
 8016e96:	69fb      	ldr	r3, [r7, #28]
 8016e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016e9c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016e9e:	69bb      	ldr	r3, [r7, #24]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d005      	beq.n	8016eb0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8016ea4:	69b8      	ldr	r0, [r7, #24]
 8016ea6:	f7fe fd91 	bl	80159cc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8016eaa:	69bb      	ldr	r3, [r7, #24]
 8016eac:	2200      	movs	r2, #0
 8016eae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d002      	beq.n	8016ebc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	2200      	movs	r2, #0
 8016eba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016ebc:	68fa      	ldr	r2, [r7, #12]
 8016ebe:	490d      	ldr	r1, [pc, #52]	; (8016ef4 <f_mount+0x88>)
 8016ec0:	69fb      	ldr	r3, [r7, #28]
 8016ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d002      	beq.n	8016ed2 <f_mount+0x66>
 8016ecc:	79fb      	ldrb	r3, [r7, #7]
 8016ece:	2b01      	cmp	r3, #1
 8016ed0:	d001      	beq.n	8016ed6 <f_mount+0x6a>
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	e00a      	b.n	8016eec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016ed6:	f107 010c 	add.w	r1, r7, #12
 8016eda:	f107 0308 	add.w	r3, r7, #8
 8016ede:	2200      	movs	r2, #0
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f7ff fd41 	bl	8016968 <find_volume>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8016eec:	4618      	mov	r0, r3
 8016eee:	3720      	adds	r7, #32
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	bd80      	pop	{r7, pc}
 8016ef4:	24040350 	.word	0x24040350

08016ef8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b098      	sub	sp, #96	; 0x60
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	60f8      	str	r0, [r7, #12]
 8016f00:	60b9      	str	r1, [r7, #8]
 8016f02:	4613      	mov	r3, r2
 8016f04:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d101      	bne.n	8016f10 <f_open+0x18>
 8016f0c:	2309      	movs	r3, #9
 8016f0e:	e1ad      	b.n	801726c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016f10:	79fb      	ldrb	r3, [r7, #7]
 8016f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016f16:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8016f18:	79fa      	ldrb	r2, [r7, #7]
 8016f1a:	f107 0110 	add.w	r1, r7, #16
 8016f1e:	f107 0308 	add.w	r3, r7, #8
 8016f22:	4618      	mov	r0, r3
 8016f24:	f7ff fd20 	bl	8016968 <find_volume>
 8016f28:	4603      	mov	r3, r0
 8016f2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8016f2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	f040 8191 	bne.w	801725a <f_open+0x362>
		dj.obj.fs = fs;
 8016f38:	693b      	ldr	r3, [r7, #16]
 8016f3a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016f3c:	68ba      	ldr	r2, [r7, #8]
 8016f3e:	f107 0314 	add.w	r3, r7, #20
 8016f42:	4611      	mov	r1, r2
 8016f44:	4618      	mov	r0, r3
 8016f46:	f7ff fc03 	bl	8016750 <follow_path>
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016f50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d11a      	bne.n	8016f8e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016f58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016f5c:	b25b      	sxtb	r3, r3
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	da03      	bge.n	8016f6a <f_open+0x72>
				res = FR_INVALID_NAME;
 8016f62:	2306      	movs	r3, #6
 8016f64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016f68:	e011      	b.n	8016f8e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016f6a:	79fb      	ldrb	r3, [r7, #7]
 8016f6c:	f023 0301 	bic.w	r3, r3, #1
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	bf14      	ite	ne
 8016f74:	2301      	movne	r3, #1
 8016f76:	2300      	moveq	r3, #0
 8016f78:	b2db      	uxtb	r3, r3
 8016f7a:	461a      	mov	r2, r3
 8016f7c:	f107 0314 	add.w	r3, r7, #20
 8016f80:	4611      	mov	r1, r2
 8016f82:	4618      	mov	r0, r3
 8016f84:	f7fe fbda 	bl	801573c <chk_lock>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016f8e:	79fb      	ldrb	r3, [r7, #7]
 8016f90:	f003 031c 	and.w	r3, r3, #28
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d07f      	beq.n	8017098 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8016f98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d017      	beq.n	8016fd0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016fa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016fa4:	2b04      	cmp	r3, #4
 8016fa6:	d10e      	bne.n	8016fc6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016fa8:	f7fe fc24 	bl	80157f4 <enq_lock>
 8016fac:	4603      	mov	r3, r0
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d006      	beq.n	8016fc0 <f_open+0xc8>
 8016fb2:	f107 0314 	add.w	r3, r7, #20
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	f7ff fb03 	bl	80165c2 <dir_register>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	e000      	b.n	8016fc2 <f_open+0xca>
 8016fc0:	2312      	movs	r3, #18
 8016fc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016fc6:	79fb      	ldrb	r3, [r7, #7]
 8016fc8:	f043 0308 	orr.w	r3, r3, #8
 8016fcc:	71fb      	strb	r3, [r7, #7]
 8016fce:	e010      	b.n	8016ff2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016fd0:	7ebb      	ldrb	r3, [r7, #26]
 8016fd2:	f003 0311 	and.w	r3, r3, #17
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d003      	beq.n	8016fe2 <f_open+0xea>
					res = FR_DENIED;
 8016fda:	2307      	movs	r3, #7
 8016fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016fe0:	e007      	b.n	8016ff2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016fe2:	79fb      	ldrb	r3, [r7, #7]
 8016fe4:	f003 0304 	and.w	r3, r3, #4
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d002      	beq.n	8016ff2 <f_open+0xfa>
 8016fec:	2308      	movs	r3, #8
 8016fee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d168      	bne.n	80170cc <f_open+0x1d4>
 8016ffa:	79fb      	ldrb	r3, [r7, #7]
 8016ffc:	f003 0308 	and.w	r3, r3, #8
 8017000:	2b00      	cmp	r3, #0
 8017002:	d063      	beq.n	80170cc <f_open+0x1d4>
				dw = GET_FATTIME();
 8017004:	f7fb f8fe 	bl	8012204 <get_fattime>
 8017008:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801700a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801700c:	330e      	adds	r3, #14
 801700e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017010:	4618      	mov	r0, r3
 8017012:	f7fe fae9 	bl	80155e8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8017016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017018:	3316      	adds	r3, #22
 801701a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801701c:	4618      	mov	r0, r3
 801701e:	f7fe fae3 	bl	80155e8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8017022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017024:	330b      	adds	r3, #11
 8017026:	2220      	movs	r2, #32
 8017028:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801702a:	693b      	ldr	r3, [r7, #16]
 801702c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801702e:	4611      	mov	r1, r2
 8017030:	4618      	mov	r0, r3
 8017032:	f7ff fa32 	bl	801649a <ld_clust>
 8017036:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8017038:	693b      	ldr	r3, [r7, #16]
 801703a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801703c:	2200      	movs	r2, #0
 801703e:	4618      	mov	r0, r3
 8017040:	f7ff fa4a 	bl	80164d8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8017044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017046:	331c      	adds	r3, #28
 8017048:	2100      	movs	r1, #0
 801704a:	4618      	mov	r0, r3
 801704c:	f7fe facc 	bl	80155e8 <st_dword>
					fs->wflag = 1;
 8017050:	693b      	ldr	r3, [r7, #16]
 8017052:	2201      	movs	r2, #1
 8017054:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8017056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017058:	2b00      	cmp	r3, #0
 801705a:	d037      	beq.n	80170cc <f_open+0x1d4>
						dw = fs->winsect;
 801705c:	693b      	ldr	r3, [r7, #16]
 801705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017060:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8017062:	f107 0314 	add.w	r3, r7, #20
 8017066:	2200      	movs	r2, #0
 8017068:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801706a:	4618      	mov	r0, r3
 801706c:	f7fe ff5d 	bl	8015f2a <remove_chain>
 8017070:	4603      	mov	r3, r0
 8017072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8017076:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801707a:	2b00      	cmp	r3, #0
 801707c:	d126      	bne.n	80170cc <f_open+0x1d4>
							res = move_window(fs, dw);
 801707e:	693b      	ldr	r3, [r7, #16]
 8017080:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017082:	4618      	mov	r0, r3
 8017084:	f7fe fd0a 	bl	8015a9c <move_window>
 8017088:	4603      	mov	r3, r0
 801708a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801708e:	693b      	ldr	r3, [r7, #16]
 8017090:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017092:	3a01      	subs	r2, #1
 8017094:	60da      	str	r2, [r3, #12]
 8017096:	e019      	b.n	80170cc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8017098:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801709c:	2b00      	cmp	r3, #0
 801709e:	d115      	bne.n	80170cc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80170a0:	7ebb      	ldrb	r3, [r7, #26]
 80170a2:	f003 0310 	and.w	r3, r3, #16
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d003      	beq.n	80170b2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80170aa:	2304      	movs	r3, #4
 80170ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80170b0:	e00c      	b.n	80170cc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80170b2:	79fb      	ldrb	r3, [r7, #7]
 80170b4:	f003 0302 	and.w	r3, r3, #2
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d007      	beq.n	80170cc <f_open+0x1d4>
 80170bc:	7ebb      	ldrb	r3, [r7, #26]
 80170be:	f003 0301 	and.w	r3, r3, #1
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d002      	beq.n	80170cc <f_open+0x1d4>
						res = FR_DENIED;
 80170c6:	2307      	movs	r3, #7
 80170c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80170cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d128      	bne.n	8017126 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80170d4:	79fb      	ldrb	r3, [r7, #7]
 80170d6:	f003 0308 	and.w	r3, r3, #8
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d003      	beq.n	80170e6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80170de:	79fb      	ldrb	r3, [r7, #7]
 80170e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80170e6:	693b      	ldr	r3, [r7, #16]
 80170e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80170ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80170f4:	79fb      	ldrb	r3, [r7, #7]
 80170f6:	f023 0301 	bic.w	r3, r3, #1
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	bf14      	ite	ne
 80170fe:	2301      	movne	r3, #1
 8017100:	2300      	moveq	r3, #0
 8017102:	b2db      	uxtb	r3, r3
 8017104:	461a      	mov	r2, r3
 8017106:	f107 0314 	add.w	r3, r7, #20
 801710a:	4611      	mov	r1, r2
 801710c:	4618      	mov	r0, r3
 801710e:	f7fe fb93 	bl	8015838 <inc_lock>
 8017112:	4602      	mov	r2, r0
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	691b      	ldr	r3, [r3, #16]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d102      	bne.n	8017126 <f_open+0x22e>
 8017120:	2302      	movs	r3, #2
 8017122:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8017126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801712a:	2b00      	cmp	r3, #0
 801712c:	f040 8095 	bne.w	801725a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8017130:	693b      	ldr	r3, [r7, #16]
 8017132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017134:	4611      	mov	r1, r2
 8017136:	4618      	mov	r0, r3
 8017138:	f7ff f9af 	bl	801649a <ld_clust>
 801713c:	4602      	mov	r2, r0
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8017142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017144:	331c      	adds	r3, #28
 8017146:	4618      	mov	r0, r3
 8017148:	f7fe fa10 	bl	801556c <ld_dword>
 801714c:	4602      	mov	r2, r0
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	2200      	movs	r2, #0
 8017156:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8017158:	693a      	ldr	r2, [r7, #16]
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801715e:	693b      	ldr	r3, [r7, #16]
 8017160:	88da      	ldrh	r2, [r3, #6]
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	79fa      	ldrb	r2, [r7, #7]
 801716a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	2200      	movs	r2, #0
 8017170:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	2200      	movs	r2, #0
 8017176:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	2200      	movs	r2, #0
 801717c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	3330      	adds	r3, #48	; 0x30
 8017182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017186:	2100      	movs	r1, #0
 8017188:	4618      	mov	r0, r3
 801718a:	f7fe fa7a 	bl	8015682 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801718e:	79fb      	ldrb	r3, [r7, #7]
 8017190:	f003 0320 	and.w	r3, r3, #32
 8017194:	2b00      	cmp	r3, #0
 8017196:	d060      	beq.n	801725a <f_open+0x362>
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	68db      	ldr	r3, [r3, #12]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d05c      	beq.n	801725a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	68da      	ldr	r2, [r3, #12]
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80171a8:	693b      	ldr	r3, [r7, #16]
 80171aa:	895b      	ldrh	r3, [r3, #10]
 80171ac:	025b      	lsls	r3, r3, #9
 80171ae:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	689b      	ldr	r3, [r3, #8]
 80171b4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	68db      	ldr	r3, [r3, #12]
 80171ba:	657b      	str	r3, [r7, #84]	; 0x54
 80171bc:	e016      	b.n	80171ec <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80171c2:	4618      	mov	r0, r3
 80171c4:	f7fe fd25 	bl	8015c12 <get_fat>
 80171c8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80171ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80171cc:	2b01      	cmp	r3, #1
 80171ce:	d802      	bhi.n	80171d6 <f_open+0x2de>
 80171d0:	2302      	movs	r3, #2
 80171d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80171d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80171d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171dc:	d102      	bne.n	80171e4 <f_open+0x2ec>
 80171de:	2301      	movs	r3, #1
 80171e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80171e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80171e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171e8:	1ad3      	subs	r3, r2, r3
 80171ea:	657b      	str	r3, [r7, #84]	; 0x54
 80171ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d103      	bne.n	80171fc <f_open+0x304>
 80171f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80171f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171f8:	429a      	cmp	r2, r3
 80171fa:	d8e0      	bhi.n	80171be <f_open+0x2c6>
				}
				fp->clust = clst;
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017200:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8017202:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017206:	2b00      	cmp	r3, #0
 8017208:	d127      	bne.n	801725a <f_open+0x362>
 801720a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801720c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017210:	2b00      	cmp	r3, #0
 8017212:	d022      	beq.n	801725a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8017214:	693b      	ldr	r3, [r7, #16]
 8017216:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017218:	4618      	mov	r0, r3
 801721a:	f7fe fcdb 	bl	8015bd4 <clust2sect>
 801721e:	6478      	str	r0, [r7, #68]	; 0x44
 8017220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017222:	2b00      	cmp	r3, #0
 8017224:	d103      	bne.n	801722e <f_open+0x336>
						res = FR_INT_ERR;
 8017226:	2302      	movs	r3, #2
 8017228:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801722c:	e015      	b.n	801725a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801722e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017230:	0a5a      	lsrs	r2, r3, #9
 8017232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017234:	441a      	add	r2, r3
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801723a:	693b      	ldr	r3, [r7, #16]
 801723c:	7858      	ldrb	r0, [r3, #1]
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	6a1a      	ldr	r2, [r3, #32]
 8017248:	2301      	movs	r3, #1
 801724a:	f7fe f919 	bl	8015480 <disk_read>
 801724e:	4603      	mov	r3, r0
 8017250:	2b00      	cmp	r3, #0
 8017252:	d002      	beq.n	801725a <f_open+0x362>
 8017254:	2301      	movs	r3, #1
 8017256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801725a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801725e:	2b00      	cmp	r3, #0
 8017260:	d002      	beq.n	8017268 <f_open+0x370>
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	2200      	movs	r2, #0
 8017266:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017268:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801726c:	4618      	mov	r0, r3
 801726e:	3760      	adds	r7, #96	; 0x60
 8017270:	46bd      	mov	sp, r7
 8017272:	bd80      	pop	{r7, pc}

08017274 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8017274:	b580      	push	{r7, lr}
 8017276:	b08e      	sub	sp, #56	; 0x38
 8017278:	af00      	add	r7, sp, #0
 801727a:	60f8      	str	r0, [r7, #12]
 801727c:	60b9      	str	r1, [r7, #8]
 801727e:	607a      	str	r2, [r7, #4]
 8017280:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8017282:	68bb      	ldr	r3, [r7, #8]
 8017284:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8017286:	683b      	ldr	r3, [r7, #0]
 8017288:	2200      	movs	r2, #0
 801728a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	f107 0214 	add.w	r2, r7, #20
 8017292:	4611      	mov	r1, r2
 8017294:	4618      	mov	r0, r3
 8017296:	f7ff fdb3 	bl	8016e00 <validate>
 801729a:	4603      	mov	r3, r0
 801729c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80172a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d107      	bne.n	80172b8 <f_read+0x44>
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	7d5b      	ldrb	r3, [r3, #21]
 80172ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80172b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d002      	beq.n	80172be <f_read+0x4a>
 80172b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80172bc:	e115      	b.n	80174ea <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	7d1b      	ldrb	r3, [r3, #20]
 80172c2:	f003 0301 	and.w	r3, r3, #1
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d101      	bne.n	80172ce <f_read+0x5a>
 80172ca:	2307      	movs	r3, #7
 80172cc:	e10d      	b.n	80174ea <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	68da      	ldr	r2, [r3, #12]
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	699b      	ldr	r3, [r3, #24]
 80172d6:	1ad3      	subs	r3, r2, r3
 80172d8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80172da:	687a      	ldr	r2, [r7, #4]
 80172dc:	6a3b      	ldr	r3, [r7, #32]
 80172de:	429a      	cmp	r2, r3
 80172e0:	f240 80fe 	bls.w	80174e0 <f_read+0x26c>
 80172e4:	6a3b      	ldr	r3, [r7, #32]
 80172e6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80172e8:	e0fa      	b.n	80174e0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	699b      	ldr	r3, [r3, #24]
 80172ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	f040 80c6 	bne.w	8017484 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	699b      	ldr	r3, [r3, #24]
 80172fc:	0a5b      	lsrs	r3, r3, #9
 80172fe:	697a      	ldr	r2, [r7, #20]
 8017300:	8952      	ldrh	r2, [r2, #10]
 8017302:	3a01      	subs	r2, #1
 8017304:	4013      	ands	r3, r2
 8017306:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8017308:	69fb      	ldr	r3, [r7, #28]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d12f      	bne.n	801736e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	699b      	ldr	r3, [r3, #24]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d103      	bne.n	801731e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	689b      	ldr	r3, [r3, #8]
 801731a:	633b      	str	r3, [r7, #48]	; 0x30
 801731c:	e013      	b.n	8017346 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017322:	2b00      	cmp	r3, #0
 8017324:	d007      	beq.n	8017336 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	699b      	ldr	r3, [r3, #24]
 801732a:	4619      	mov	r1, r3
 801732c:	68f8      	ldr	r0, [r7, #12]
 801732e:	f7fe fef9 	bl	8016124 <clmt_clust>
 8017332:	6338      	str	r0, [r7, #48]	; 0x30
 8017334:	e007      	b.n	8017346 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8017336:	68fa      	ldr	r2, [r7, #12]
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	69db      	ldr	r3, [r3, #28]
 801733c:	4619      	mov	r1, r3
 801733e:	4610      	mov	r0, r2
 8017340:	f7fe fc67 	bl	8015c12 <get_fat>
 8017344:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8017346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017348:	2b01      	cmp	r3, #1
 801734a:	d804      	bhi.n	8017356 <f_read+0xe2>
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	2202      	movs	r2, #2
 8017350:	755a      	strb	r2, [r3, #21]
 8017352:	2302      	movs	r3, #2
 8017354:	e0c9      	b.n	80174ea <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017358:	f1b3 3fff 	cmp.w	r3, #4294967295
 801735c:	d104      	bne.n	8017368 <f_read+0xf4>
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	2201      	movs	r2, #1
 8017362:	755a      	strb	r2, [r3, #21]
 8017364:	2301      	movs	r3, #1
 8017366:	e0c0      	b.n	80174ea <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801736c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801736e:	697a      	ldr	r2, [r7, #20]
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	69db      	ldr	r3, [r3, #28]
 8017374:	4619      	mov	r1, r3
 8017376:	4610      	mov	r0, r2
 8017378:	f7fe fc2c 	bl	8015bd4 <clust2sect>
 801737c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801737e:	69bb      	ldr	r3, [r7, #24]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d104      	bne.n	801738e <f_read+0x11a>
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	2202      	movs	r2, #2
 8017388:	755a      	strb	r2, [r3, #21]
 801738a:	2302      	movs	r3, #2
 801738c:	e0ad      	b.n	80174ea <f_read+0x276>
			sect += csect;
 801738e:	69ba      	ldr	r2, [r7, #24]
 8017390:	69fb      	ldr	r3, [r7, #28]
 8017392:	4413      	add	r3, r2
 8017394:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	0a5b      	lsrs	r3, r3, #9
 801739a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d039      	beq.n	8017416 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80173a2:	69fa      	ldr	r2, [r7, #28]
 80173a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173a6:	4413      	add	r3, r2
 80173a8:	697a      	ldr	r2, [r7, #20]
 80173aa:	8952      	ldrh	r2, [r2, #10]
 80173ac:	4293      	cmp	r3, r2
 80173ae:	d905      	bls.n	80173bc <f_read+0x148>
					cc = fs->csize - csect;
 80173b0:	697b      	ldr	r3, [r7, #20]
 80173b2:	895b      	ldrh	r3, [r3, #10]
 80173b4:	461a      	mov	r2, r3
 80173b6:	69fb      	ldr	r3, [r7, #28]
 80173b8:	1ad3      	subs	r3, r2, r3
 80173ba:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80173bc:	697b      	ldr	r3, [r7, #20]
 80173be:	7858      	ldrb	r0, [r3, #1]
 80173c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173c2:	69ba      	ldr	r2, [r7, #24]
 80173c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80173c6:	f7fe f85b 	bl	8015480 <disk_read>
 80173ca:	4603      	mov	r3, r0
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d004      	beq.n	80173da <f_read+0x166>
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	2201      	movs	r2, #1
 80173d4:	755a      	strb	r2, [r3, #21]
 80173d6:	2301      	movs	r3, #1
 80173d8:	e087      	b.n	80174ea <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	7d1b      	ldrb	r3, [r3, #20]
 80173de:	b25b      	sxtb	r3, r3
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	da14      	bge.n	801740e <f_read+0x19a>
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	6a1a      	ldr	r2, [r3, #32]
 80173e8:	69bb      	ldr	r3, [r7, #24]
 80173ea:	1ad3      	subs	r3, r2, r3
 80173ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80173ee:	429a      	cmp	r2, r3
 80173f0:	d90d      	bls.n	801740e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	6a1a      	ldr	r2, [r3, #32]
 80173f6:	69bb      	ldr	r3, [r7, #24]
 80173f8:	1ad3      	subs	r3, r2, r3
 80173fa:	025b      	lsls	r3, r3, #9
 80173fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80173fe:	18d0      	adds	r0, r2, r3
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	3330      	adds	r3, #48	; 0x30
 8017404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017408:	4619      	mov	r1, r3
 801740a:	f7fe f919 	bl	8015640 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017410:	025b      	lsls	r3, r3, #9
 8017412:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8017414:	e050      	b.n	80174b8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	6a1b      	ldr	r3, [r3, #32]
 801741a:	69ba      	ldr	r2, [r7, #24]
 801741c:	429a      	cmp	r2, r3
 801741e:	d02e      	beq.n	801747e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	7d1b      	ldrb	r3, [r3, #20]
 8017424:	b25b      	sxtb	r3, r3
 8017426:	2b00      	cmp	r3, #0
 8017428:	da18      	bge.n	801745c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801742a:	697b      	ldr	r3, [r7, #20]
 801742c:	7858      	ldrb	r0, [r3, #1]
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	6a1a      	ldr	r2, [r3, #32]
 8017438:	2301      	movs	r3, #1
 801743a:	f7fe f841 	bl	80154c0 <disk_write>
 801743e:	4603      	mov	r3, r0
 8017440:	2b00      	cmp	r3, #0
 8017442:	d004      	beq.n	801744e <f_read+0x1da>
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	2201      	movs	r2, #1
 8017448:	755a      	strb	r2, [r3, #21]
 801744a:	2301      	movs	r3, #1
 801744c:	e04d      	b.n	80174ea <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	7d1b      	ldrb	r3, [r3, #20]
 8017452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017456:	b2da      	uxtb	r2, r3
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801745c:	697b      	ldr	r3, [r7, #20]
 801745e:	7858      	ldrb	r0, [r3, #1]
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017466:	2301      	movs	r3, #1
 8017468:	69ba      	ldr	r2, [r7, #24]
 801746a:	f7fe f809 	bl	8015480 <disk_read>
 801746e:	4603      	mov	r3, r0
 8017470:	2b00      	cmp	r3, #0
 8017472:	d004      	beq.n	801747e <f_read+0x20a>
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	2201      	movs	r2, #1
 8017478:	755a      	strb	r2, [r3, #21]
 801747a:	2301      	movs	r3, #1
 801747c:	e035      	b.n	80174ea <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	69ba      	ldr	r2, [r7, #24]
 8017482:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	699b      	ldr	r3, [r3, #24]
 8017488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801748c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8017490:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8017492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	429a      	cmp	r2, r3
 8017498:	d901      	bls.n	801749e <f_read+0x22a>
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	699b      	ldr	r3, [r3, #24]
 80174a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80174ac:	4413      	add	r3, r2
 80174ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174b0:	4619      	mov	r1, r3
 80174b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80174b4:	f7fe f8c4 	bl	8015640 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80174b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174bc:	4413      	add	r3, r2
 80174be:	627b      	str	r3, [r7, #36]	; 0x24
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	699a      	ldr	r2, [r3, #24]
 80174c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174c6:	441a      	add	r2, r3
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	619a      	str	r2, [r3, #24]
 80174cc:	683b      	ldr	r3, [r7, #0]
 80174ce:	681a      	ldr	r2, [r3, #0]
 80174d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174d2:	441a      	add	r2, r3
 80174d4:	683b      	ldr	r3, [r7, #0]
 80174d6:	601a      	str	r2, [r3, #0]
 80174d8:	687a      	ldr	r2, [r7, #4]
 80174da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174dc:	1ad3      	subs	r3, r2, r3
 80174de:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	f47f af01 	bne.w	80172ea <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80174e8:	2300      	movs	r3, #0
}
 80174ea:	4618      	mov	r0, r3
 80174ec:	3738      	adds	r7, #56	; 0x38
 80174ee:	46bd      	mov	sp, r7
 80174f0:	bd80      	pop	{r7, pc}

080174f2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80174f2:	b580      	push	{r7, lr}
 80174f4:	b08c      	sub	sp, #48	; 0x30
 80174f6:	af00      	add	r7, sp, #0
 80174f8:	60f8      	str	r0, [r7, #12]
 80174fa:	60b9      	str	r1, [r7, #8]
 80174fc:	607a      	str	r2, [r7, #4]
 80174fe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8017500:	68bb      	ldr	r3, [r7, #8]
 8017502:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8017504:	683b      	ldr	r3, [r7, #0]
 8017506:	2200      	movs	r2, #0
 8017508:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	f107 0210 	add.w	r2, r7, #16
 8017510:	4611      	mov	r1, r2
 8017512:	4618      	mov	r0, r3
 8017514:	f7ff fc74 	bl	8016e00 <validate>
 8017518:	4603      	mov	r3, r0
 801751a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801751e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017522:	2b00      	cmp	r3, #0
 8017524:	d107      	bne.n	8017536 <f_write+0x44>
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	7d5b      	ldrb	r3, [r3, #21]
 801752a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801752e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017532:	2b00      	cmp	r3, #0
 8017534:	d002      	beq.n	801753c <f_write+0x4a>
 8017536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801753a:	e14b      	b.n	80177d4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	7d1b      	ldrb	r3, [r3, #20]
 8017540:	f003 0302 	and.w	r3, r3, #2
 8017544:	2b00      	cmp	r3, #0
 8017546:	d101      	bne.n	801754c <f_write+0x5a>
 8017548:	2307      	movs	r3, #7
 801754a:	e143      	b.n	80177d4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	699a      	ldr	r2, [r3, #24]
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	441a      	add	r2, r3
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	699b      	ldr	r3, [r3, #24]
 8017558:	429a      	cmp	r2, r3
 801755a:	f080 812d 	bcs.w	80177b8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	699b      	ldr	r3, [r3, #24]
 8017562:	43db      	mvns	r3, r3
 8017564:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8017566:	e127      	b.n	80177b8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	699b      	ldr	r3, [r3, #24]
 801756c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017570:	2b00      	cmp	r3, #0
 8017572:	f040 80e3 	bne.w	801773c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	699b      	ldr	r3, [r3, #24]
 801757a:	0a5b      	lsrs	r3, r3, #9
 801757c:	693a      	ldr	r2, [r7, #16]
 801757e:	8952      	ldrh	r2, [r2, #10]
 8017580:	3a01      	subs	r2, #1
 8017582:	4013      	ands	r3, r2
 8017584:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8017586:	69bb      	ldr	r3, [r7, #24]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d143      	bne.n	8017614 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	699b      	ldr	r3, [r3, #24]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d10c      	bne.n	80175ae <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	689b      	ldr	r3, [r3, #8]
 8017598:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801759c:	2b00      	cmp	r3, #0
 801759e:	d11a      	bne.n	80175d6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	2100      	movs	r1, #0
 80175a4:	4618      	mov	r0, r3
 80175a6:	f7fe fd25 	bl	8015ff4 <create_chain>
 80175aa:	62b8      	str	r0, [r7, #40]	; 0x28
 80175ac:	e013      	b.n	80175d6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d007      	beq.n	80175c6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	699b      	ldr	r3, [r3, #24]
 80175ba:	4619      	mov	r1, r3
 80175bc:	68f8      	ldr	r0, [r7, #12]
 80175be:	f7fe fdb1 	bl	8016124 <clmt_clust>
 80175c2:	62b8      	str	r0, [r7, #40]	; 0x28
 80175c4:	e007      	b.n	80175d6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80175c6:	68fa      	ldr	r2, [r7, #12]
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	69db      	ldr	r3, [r3, #28]
 80175cc:	4619      	mov	r1, r3
 80175ce:	4610      	mov	r0, r2
 80175d0:	f7fe fd10 	bl	8015ff4 <create_chain>
 80175d4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80175d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175d8:	2b00      	cmp	r3, #0
 80175da:	f000 80f2 	beq.w	80177c2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80175de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175e0:	2b01      	cmp	r3, #1
 80175e2:	d104      	bne.n	80175ee <f_write+0xfc>
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	2202      	movs	r2, #2
 80175e8:	755a      	strb	r2, [r3, #21]
 80175ea:	2302      	movs	r3, #2
 80175ec:	e0f2      	b.n	80177d4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80175ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175f4:	d104      	bne.n	8017600 <f_write+0x10e>
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	2201      	movs	r2, #1
 80175fa:	755a      	strb	r2, [r3, #21]
 80175fc:	2301      	movs	r3, #1
 80175fe:	e0e9      	b.n	80177d4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017604:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	689b      	ldr	r3, [r3, #8]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d102      	bne.n	8017614 <f_write+0x122>
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017612:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	7d1b      	ldrb	r3, [r3, #20]
 8017618:	b25b      	sxtb	r3, r3
 801761a:	2b00      	cmp	r3, #0
 801761c:	da18      	bge.n	8017650 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801761e:	693b      	ldr	r3, [r7, #16]
 8017620:	7858      	ldrb	r0, [r3, #1]
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	6a1a      	ldr	r2, [r3, #32]
 801762c:	2301      	movs	r3, #1
 801762e:	f7fd ff47 	bl	80154c0 <disk_write>
 8017632:	4603      	mov	r3, r0
 8017634:	2b00      	cmp	r3, #0
 8017636:	d004      	beq.n	8017642 <f_write+0x150>
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	2201      	movs	r2, #1
 801763c:	755a      	strb	r2, [r3, #21]
 801763e:	2301      	movs	r3, #1
 8017640:	e0c8      	b.n	80177d4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	7d1b      	ldrb	r3, [r3, #20]
 8017646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801764a:	b2da      	uxtb	r2, r3
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8017650:	693a      	ldr	r2, [r7, #16]
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	69db      	ldr	r3, [r3, #28]
 8017656:	4619      	mov	r1, r3
 8017658:	4610      	mov	r0, r2
 801765a:	f7fe fabb 	bl	8015bd4 <clust2sect>
 801765e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8017660:	697b      	ldr	r3, [r7, #20]
 8017662:	2b00      	cmp	r3, #0
 8017664:	d104      	bne.n	8017670 <f_write+0x17e>
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	2202      	movs	r2, #2
 801766a:	755a      	strb	r2, [r3, #21]
 801766c:	2302      	movs	r3, #2
 801766e:	e0b1      	b.n	80177d4 <f_write+0x2e2>
			sect += csect;
 8017670:	697a      	ldr	r2, [r7, #20]
 8017672:	69bb      	ldr	r3, [r7, #24]
 8017674:	4413      	add	r3, r2
 8017676:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	0a5b      	lsrs	r3, r3, #9
 801767c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801767e:	6a3b      	ldr	r3, [r7, #32]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d03c      	beq.n	80176fe <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017684:	69ba      	ldr	r2, [r7, #24]
 8017686:	6a3b      	ldr	r3, [r7, #32]
 8017688:	4413      	add	r3, r2
 801768a:	693a      	ldr	r2, [r7, #16]
 801768c:	8952      	ldrh	r2, [r2, #10]
 801768e:	4293      	cmp	r3, r2
 8017690:	d905      	bls.n	801769e <f_write+0x1ac>
					cc = fs->csize - csect;
 8017692:	693b      	ldr	r3, [r7, #16]
 8017694:	895b      	ldrh	r3, [r3, #10]
 8017696:	461a      	mov	r2, r3
 8017698:	69bb      	ldr	r3, [r7, #24]
 801769a:	1ad3      	subs	r3, r2, r3
 801769c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801769e:	693b      	ldr	r3, [r7, #16]
 80176a0:	7858      	ldrb	r0, [r3, #1]
 80176a2:	6a3b      	ldr	r3, [r7, #32]
 80176a4:	697a      	ldr	r2, [r7, #20]
 80176a6:	69f9      	ldr	r1, [r7, #28]
 80176a8:	f7fd ff0a 	bl	80154c0 <disk_write>
 80176ac:	4603      	mov	r3, r0
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d004      	beq.n	80176bc <f_write+0x1ca>
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	2201      	movs	r2, #1
 80176b6:	755a      	strb	r2, [r3, #21]
 80176b8:	2301      	movs	r3, #1
 80176ba:	e08b      	b.n	80177d4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	6a1a      	ldr	r2, [r3, #32]
 80176c0:	697b      	ldr	r3, [r7, #20]
 80176c2:	1ad3      	subs	r3, r2, r3
 80176c4:	6a3a      	ldr	r2, [r7, #32]
 80176c6:	429a      	cmp	r2, r3
 80176c8:	d915      	bls.n	80176f6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	6a1a      	ldr	r2, [r3, #32]
 80176d4:	697b      	ldr	r3, [r7, #20]
 80176d6:	1ad3      	subs	r3, r2, r3
 80176d8:	025b      	lsls	r3, r3, #9
 80176da:	69fa      	ldr	r2, [r7, #28]
 80176dc:	4413      	add	r3, r2
 80176de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80176e2:	4619      	mov	r1, r3
 80176e4:	f7fd ffac 	bl	8015640 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	7d1b      	ldrb	r3, [r3, #20]
 80176ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80176f0:	b2da      	uxtb	r2, r3
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80176f6:	6a3b      	ldr	r3, [r7, #32]
 80176f8:	025b      	lsls	r3, r3, #9
 80176fa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80176fc:	e03f      	b.n	801777e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	6a1b      	ldr	r3, [r3, #32]
 8017702:	697a      	ldr	r2, [r7, #20]
 8017704:	429a      	cmp	r2, r3
 8017706:	d016      	beq.n	8017736 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	699a      	ldr	r2, [r3, #24]
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017710:	429a      	cmp	r2, r3
 8017712:	d210      	bcs.n	8017736 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017714:	693b      	ldr	r3, [r7, #16]
 8017716:	7858      	ldrb	r0, [r3, #1]
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801771e:	2301      	movs	r3, #1
 8017720:	697a      	ldr	r2, [r7, #20]
 8017722:	f7fd fead 	bl	8015480 <disk_read>
 8017726:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017728:	2b00      	cmp	r3, #0
 801772a:	d004      	beq.n	8017736 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	2201      	movs	r2, #1
 8017730:	755a      	strb	r2, [r3, #21]
 8017732:	2301      	movs	r3, #1
 8017734:	e04e      	b.n	80177d4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	697a      	ldr	r2, [r7, #20]
 801773a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	699b      	ldr	r3, [r3, #24]
 8017740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017744:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8017748:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801774a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	429a      	cmp	r2, r3
 8017750:	d901      	bls.n	8017756 <f_write+0x264>
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	699b      	ldr	r3, [r3, #24]
 8017760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017764:	4413      	add	r3, r2
 8017766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017768:	69f9      	ldr	r1, [r7, #28]
 801776a:	4618      	mov	r0, r3
 801776c:	f7fd ff68 	bl	8015640 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	7d1b      	ldrb	r3, [r3, #20]
 8017774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017778:	b2da      	uxtb	r2, r3
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801777e:	69fa      	ldr	r2, [r7, #28]
 8017780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017782:	4413      	add	r3, r2
 8017784:	61fb      	str	r3, [r7, #28]
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	699a      	ldr	r2, [r3, #24]
 801778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801778c:	441a      	add	r2, r3
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	619a      	str	r2, [r3, #24]
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	68da      	ldr	r2, [r3, #12]
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	699b      	ldr	r3, [r3, #24]
 801779a:	429a      	cmp	r2, r3
 801779c:	bf38      	it	cc
 801779e:	461a      	movcc	r2, r3
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	60da      	str	r2, [r3, #12]
 80177a4:	683b      	ldr	r3, [r7, #0]
 80177a6:	681a      	ldr	r2, [r3, #0]
 80177a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177aa:	441a      	add	r2, r3
 80177ac:	683b      	ldr	r3, [r7, #0]
 80177ae:	601a      	str	r2, [r3, #0]
 80177b0:	687a      	ldr	r2, [r7, #4]
 80177b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177b4:	1ad3      	subs	r3, r2, r3
 80177b6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	f47f aed4 	bne.w	8017568 <f_write+0x76>
 80177c0:	e000      	b.n	80177c4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80177c2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	7d1b      	ldrb	r3, [r3, #20]
 80177c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177cc:	b2da      	uxtb	r2, r3
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80177d2:	2300      	movs	r3, #0
}
 80177d4:	4618      	mov	r0, r3
 80177d6:	3730      	adds	r7, #48	; 0x30
 80177d8:	46bd      	mov	sp, r7
 80177da:	bd80      	pop	{r7, pc}

080177dc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b086      	sub	sp, #24
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	f107 0208 	add.w	r2, r7, #8
 80177ea:	4611      	mov	r1, r2
 80177ec:	4618      	mov	r0, r3
 80177ee:	f7ff fb07 	bl	8016e00 <validate>
 80177f2:	4603      	mov	r3, r0
 80177f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80177f6:	7dfb      	ldrb	r3, [r7, #23]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d168      	bne.n	80178ce <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	7d1b      	ldrb	r3, [r3, #20]
 8017800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017804:	2b00      	cmp	r3, #0
 8017806:	d062      	beq.n	80178ce <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	7d1b      	ldrb	r3, [r3, #20]
 801780c:	b25b      	sxtb	r3, r3
 801780e:	2b00      	cmp	r3, #0
 8017810:	da15      	bge.n	801783e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017812:	68bb      	ldr	r3, [r7, #8]
 8017814:	7858      	ldrb	r0, [r3, #1]
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	6a1a      	ldr	r2, [r3, #32]
 8017820:	2301      	movs	r3, #1
 8017822:	f7fd fe4d 	bl	80154c0 <disk_write>
 8017826:	4603      	mov	r3, r0
 8017828:	2b00      	cmp	r3, #0
 801782a:	d001      	beq.n	8017830 <f_sync+0x54>
 801782c:	2301      	movs	r3, #1
 801782e:	e04f      	b.n	80178d0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	7d1b      	ldrb	r3, [r3, #20]
 8017834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017838:	b2da      	uxtb	r2, r3
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801783e:	f7fa fce1 	bl	8012204 <get_fattime>
 8017842:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8017844:	68ba      	ldr	r2, [r7, #8]
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801784a:	4619      	mov	r1, r3
 801784c:	4610      	mov	r0, r2
 801784e:	f7fe f925 	bl	8015a9c <move_window>
 8017852:	4603      	mov	r3, r0
 8017854:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8017856:	7dfb      	ldrb	r3, [r7, #23]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d138      	bne.n	80178ce <f_sync+0xf2>
					dir = fp->dir_ptr;
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017860:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	330b      	adds	r3, #11
 8017866:	781a      	ldrb	r2, [r3, #0]
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	330b      	adds	r3, #11
 801786c:	f042 0220 	orr.w	r2, r2, #32
 8017870:	b2d2      	uxtb	r2, r2
 8017872:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	6818      	ldr	r0, [r3, #0]
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	689b      	ldr	r3, [r3, #8]
 801787c:	461a      	mov	r2, r3
 801787e:	68f9      	ldr	r1, [r7, #12]
 8017880:	f7fe fe2a 	bl	80164d8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	f103 021c 	add.w	r2, r3, #28
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	68db      	ldr	r3, [r3, #12]
 801788e:	4619      	mov	r1, r3
 8017890:	4610      	mov	r0, r2
 8017892:	f7fd fea9 	bl	80155e8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	3316      	adds	r3, #22
 801789a:	6939      	ldr	r1, [r7, #16]
 801789c:	4618      	mov	r0, r3
 801789e:	f7fd fea3 	bl	80155e8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	3312      	adds	r3, #18
 80178a6:	2100      	movs	r1, #0
 80178a8:	4618      	mov	r0, r3
 80178aa:	f7fd fe82 	bl	80155b2 <st_word>
					fs->wflag = 1;
 80178ae:	68bb      	ldr	r3, [r7, #8]
 80178b0:	2201      	movs	r2, #1
 80178b2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80178b4:	68bb      	ldr	r3, [r7, #8]
 80178b6:	4618      	mov	r0, r3
 80178b8:	f7fe f91e 	bl	8015af8 <sync_fs>
 80178bc:	4603      	mov	r3, r0
 80178be:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	7d1b      	ldrb	r3, [r3, #20]
 80178c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80178c8:	b2da      	uxtb	r2, r3
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80178ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80178d0:	4618      	mov	r0, r3
 80178d2:	3718      	adds	r7, #24
 80178d4:	46bd      	mov	sp, r7
 80178d6:	bd80      	pop	{r7, pc}

080178d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	b084      	sub	sp, #16
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80178e0:	6878      	ldr	r0, [r7, #4]
 80178e2:	f7ff ff7b 	bl	80177dc <f_sync>
 80178e6:	4603      	mov	r3, r0
 80178e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80178ea:	7bfb      	ldrb	r3, [r7, #15]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d118      	bne.n	8017922 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	f107 0208 	add.w	r2, r7, #8
 80178f6:	4611      	mov	r1, r2
 80178f8:	4618      	mov	r0, r3
 80178fa:	f7ff fa81 	bl	8016e00 <validate>
 80178fe:	4603      	mov	r3, r0
 8017900:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017902:	7bfb      	ldrb	r3, [r7, #15]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d10c      	bne.n	8017922 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	691b      	ldr	r3, [r3, #16]
 801790c:	4618      	mov	r0, r3
 801790e:	f7fe f821 	bl	8015954 <dec_lock>
 8017912:	4603      	mov	r3, r0
 8017914:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8017916:	7bfb      	ldrb	r3, [r7, #15]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d102      	bne.n	8017922 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	2200      	movs	r2, #0
 8017920:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8017922:	7bfb      	ldrb	r3, [r7, #15]
}
 8017924:	4618      	mov	r0, r3
 8017926:	3710      	adds	r7, #16
 8017928:	46bd      	mov	sp, r7
 801792a:	bd80      	pop	{r7, pc}

0801792c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801792c:	b480      	push	{r7}
 801792e:	b087      	sub	sp, #28
 8017930:	af00      	add	r7, sp, #0
 8017932:	60f8      	str	r0, [r7, #12]
 8017934:	60b9      	str	r1, [r7, #8]
 8017936:	4613      	mov	r3, r2
 8017938:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801793a:	2301      	movs	r3, #1
 801793c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801793e:	2300      	movs	r3, #0
 8017940:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017942:	4b1f      	ldr	r3, [pc, #124]	; (80179c0 <FATFS_LinkDriverEx+0x94>)
 8017944:	7a5b      	ldrb	r3, [r3, #9]
 8017946:	b2db      	uxtb	r3, r3
 8017948:	2b00      	cmp	r3, #0
 801794a:	d131      	bne.n	80179b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801794c:	4b1c      	ldr	r3, [pc, #112]	; (80179c0 <FATFS_LinkDriverEx+0x94>)
 801794e:	7a5b      	ldrb	r3, [r3, #9]
 8017950:	b2db      	uxtb	r3, r3
 8017952:	461a      	mov	r2, r3
 8017954:	4b1a      	ldr	r3, [pc, #104]	; (80179c0 <FATFS_LinkDriverEx+0x94>)
 8017956:	2100      	movs	r1, #0
 8017958:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801795a:	4b19      	ldr	r3, [pc, #100]	; (80179c0 <FATFS_LinkDriverEx+0x94>)
 801795c:	7a5b      	ldrb	r3, [r3, #9]
 801795e:	b2db      	uxtb	r3, r3
 8017960:	4a17      	ldr	r2, [pc, #92]	; (80179c0 <FATFS_LinkDriverEx+0x94>)
 8017962:	009b      	lsls	r3, r3, #2
 8017964:	4413      	add	r3, r2
 8017966:	68fa      	ldr	r2, [r7, #12]
 8017968:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801796a:	4b15      	ldr	r3, [pc, #84]	; (80179c0 <FATFS_LinkDriverEx+0x94>)
 801796c:	7a5b      	ldrb	r3, [r3, #9]
 801796e:	b2db      	uxtb	r3, r3
 8017970:	461a      	mov	r2, r3
 8017972:	4b13      	ldr	r3, [pc, #76]	; (80179c0 <FATFS_LinkDriverEx+0x94>)
 8017974:	4413      	add	r3, r2
 8017976:	79fa      	ldrb	r2, [r7, #7]
 8017978:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801797a:	4b11      	ldr	r3, [pc, #68]	; (80179c0 <FATFS_LinkDriverEx+0x94>)
 801797c:	7a5b      	ldrb	r3, [r3, #9]
 801797e:	b2db      	uxtb	r3, r3
 8017980:	1c5a      	adds	r2, r3, #1
 8017982:	b2d1      	uxtb	r1, r2
 8017984:	4a0e      	ldr	r2, [pc, #56]	; (80179c0 <FATFS_LinkDriverEx+0x94>)
 8017986:	7251      	strb	r1, [r2, #9]
 8017988:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801798a:	7dbb      	ldrb	r3, [r7, #22]
 801798c:	3330      	adds	r3, #48	; 0x30
 801798e:	b2da      	uxtb	r2, r3
 8017990:	68bb      	ldr	r3, [r7, #8]
 8017992:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017994:	68bb      	ldr	r3, [r7, #8]
 8017996:	3301      	adds	r3, #1
 8017998:	223a      	movs	r2, #58	; 0x3a
 801799a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801799c:	68bb      	ldr	r3, [r7, #8]
 801799e:	3302      	adds	r3, #2
 80179a0:	222f      	movs	r2, #47	; 0x2f
 80179a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80179a4:	68bb      	ldr	r3, [r7, #8]
 80179a6:	3303      	adds	r3, #3
 80179a8:	2200      	movs	r2, #0
 80179aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80179ac:	2300      	movs	r3, #0
 80179ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80179b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80179b2:	4618      	mov	r0, r3
 80179b4:	371c      	adds	r7, #28
 80179b6:	46bd      	mov	sp, r7
 80179b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179bc:	4770      	bx	lr
 80179be:	bf00      	nop
 80179c0:	24040378 	.word	0x24040378

080179c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b082      	sub	sp, #8
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	6078      	str	r0, [r7, #4]
 80179cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80179ce:	2200      	movs	r2, #0
 80179d0:	6839      	ldr	r1, [r7, #0]
 80179d2:	6878      	ldr	r0, [r7, #4]
 80179d4:	f7ff ffaa 	bl	801792c <FATFS_LinkDriverEx>
 80179d8:	4603      	mov	r3, r0
}
 80179da:	4618      	mov	r0, r3
 80179dc:	3708      	adds	r7, #8
 80179de:	46bd      	mov	sp, r7
 80179e0:	bd80      	pop	{r7, pc}
	...

080179e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80179e8:	2200      	movs	r2, #0
 80179ea:	4913      	ldr	r1, [pc, #76]	; (8017a38 <MX_USB_DEVICE_Init+0x54>)
 80179ec:	4813      	ldr	r0, [pc, #76]	; (8017a3c <MX_USB_DEVICE_Init+0x58>)
 80179ee:	f7fc fc20 	bl	8014232 <USBD_Init>
 80179f2:	4603      	mov	r3, r0
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d001      	beq.n	80179fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80179f8:	f7eb f8ee 	bl	8002bd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80179fc:	4910      	ldr	r1, [pc, #64]	; (8017a40 <MX_USB_DEVICE_Init+0x5c>)
 80179fe:	480f      	ldr	r0, [pc, #60]	; (8017a3c <MX_USB_DEVICE_Init+0x58>)
 8017a00:	f7fc fc4d 	bl	801429e <USBD_RegisterClass>
 8017a04:	4603      	mov	r3, r0
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d001      	beq.n	8017a0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017a0a:	f7eb f8e5 	bl	8002bd8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8017a0e:	490d      	ldr	r1, [pc, #52]	; (8017a44 <MX_USB_DEVICE_Init+0x60>)
 8017a10:	480a      	ldr	r0, [pc, #40]	; (8017a3c <MX_USB_DEVICE_Init+0x58>)
 8017a12:	f7fa fff7 	bl	8012a04 <USBD_MSC_RegisterStorage>
 8017a16:	4603      	mov	r3, r0
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d001      	beq.n	8017a20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017a1c:	f7eb f8dc 	bl	8002bd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017a20:	4806      	ldr	r0, [pc, #24]	; (8017a3c <MX_USB_DEVICE_Init+0x58>)
 8017a22:	f7fc fc5d 	bl	80142e0 <USBD_Start>
 8017a26:	4603      	mov	r3, r0
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d001      	beq.n	8017a30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017a2c:	f7eb f8d4 	bl	8002bd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017a30:	f7f0 fe2e 	bl	8008690 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017a34:	bf00      	nop
 8017a36:	bd80      	pop	{r7, pc}
 8017a38:	24000104 	.word	0x24000104
 8017a3c:	240413ac 	.word	0x240413ac
 8017a40:	2400001c 	.word	0x2400001c
 8017a44:	24000154 	.word	0x24000154

08017a48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a48:	b480      	push	{r7}
 8017a4a:	b083      	sub	sp, #12
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	4603      	mov	r3, r0
 8017a50:	6039      	str	r1, [r7, #0]
 8017a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017a54:	683b      	ldr	r3, [r7, #0]
 8017a56:	2212      	movs	r2, #18
 8017a58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017a5a:	4b03      	ldr	r3, [pc, #12]	; (8017a68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	370c      	adds	r7, #12
 8017a60:	46bd      	mov	sp, r7
 8017a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a66:	4770      	bx	lr
 8017a68:	24000120 	.word	0x24000120

08017a6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a6c:	b480      	push	{r7}
 8017a6e:	b083      	sub	sp, #12
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	4603      	mov	r3, r0
 8017a74:	6039      	str	r1, [r7, #0]
 8017a76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017a78:	683b      	ldr	r3, [r7, #0]
 8017a7a:	2204      	movs	r2, #4
 8017a7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017a7e:	4b03      	ldr	r3, [pc, #12]	; (8017a8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017a80:	4618      	mov	r0, r3
 8017a82:	370c      	adds	r7, #12
 8017a84:	46bd      	mov	sp, r7
 8017a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a8a:	4770      	bx	lr
 8017a8c:	24000134 	.word	0x24000134

08017a90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b082      	sub	sp, #8
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	4603      	mov	r3, r0
 8017a98:	6039      	str	r1, [r7, #0]
 8017a9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017a9c:	79fb      	ldrb	r3, [r7, #7]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d105      	bne.n	8017aae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017aa2:	683a      	ldr	r2, [r7, #0]
 8017aa4:	4907      	ldr	r1, [pc, #28]	; (8017ac4 <USBD_FS_ProductStrDescriptor+0x34>)
 8017aa6:	4808      	ldr	r0, [pc, #32]	; (8017ac8 <USBD_FS_ProductStrDescriptor+0x38>)
 8017aa8:	f7fd fbe7 	bl	801527a <USBD_GetString>
 8017aac:	e004      	b.n	8017ab8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017aae:	683a      	ldr	r2, [r7, #0]
 8017ab0:	4904      	ldr	r1, [pc, #16]	; (8017ac4 <USBD_FS_ProductStrDescriptor+0x34>)
 8017ab2:	4805      	ldr	r0, [pc, #20]	; (8017ac8 <USBD_FS_ProductStrDescriptor+0x38>)
 8017ab4:	f7fd fbe1 	bl	801527a <USBD_GetString>
  }
  return USBD_StrDesc;
 8017ab8:	4b02      	ldr	r3, [pc, #8]	; (8017ac4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017aba:	4618      	mov	r0, r3
 8017abc:	3708      	adds	r7, #8
 8017abe:	46bd      	mov	sp, r7
 8017ac0:	bd80      	pop	{r7, pc}
 8017ac2:	bf00      	nop
 8017ac4:	2404167c 	.word	0x2404167c
 8017ac8:	08019e7c 	.word	0x08019e7c

08017acc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	b082      	sub	sp, #8
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	4603      	mov	r3, r0
 8017ad4:	6039      	str	r1, [r7, #0]
 8017ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017ad8:	683a      	ldr	r2, [r7, #0]
 8017ada:	4904      	ldr	r1, [pc, #16]	; (8017aec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017adc:	4804      	ldr	r0, [pc, #16]	; (8017af0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017ade:	f7fd fbcc 	bl	801527a <USBD_GetString>
  return USBD_StrDesc;
 8017ae2:	4b02      	ldr	r3, [pc, #8]	; (8017aec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	3708      	adds	r7, #8
 8017ae8:	46bd      	mov	sp, r7
 8017aea:	bd80      	pop	{r7, pc}
 8017aec:	2404167c 	.word	0x2404167c
 8017af0:	08019e90 	.word	0x08019e90

08017af4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b082      	sub	sp, #8
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	4603      	mov	r3, r0
 8017afc:	6039      	str	r1, [r7, #0]
 8017afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017b00:	683b      	ldr	r3, [r7, #0]
 8017b02:	221a      	movs	r2, #26
 8017b04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017b06:	f000 f843 	bl	8017b90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017b0a:	4b02      	ldr	r3, [pc, #8]	; (8017b14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	3708      	adds	r7, #8
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}
 8017b14:	24000138 	.word	0x24000138

08017b18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b082      	sub	sp, #8
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	4603      	mov	r3, r0
 8017b20:	6039      	str	r1, [r7, #0]
 8017b22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017b24:	79fb      	ldrb	r3, [r7, #7]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d105      	bne.n	8017b36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017b2a:	683a      	ldr	r2, [r7, #0]
 8017b2c:	4907      	ldr	r1, [pc, #28]	; (8017b4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8017b2e:	4808      	ldr	r0, [pc, #32]	; (8017b50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017b30:	f7fd fba3 	bl	801527a <USBD_GetString>
 8017b34:	e004      	b.n	8017b40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017b36:	683a      	ldr	r2, [r7, #0]
 8017b38:	4904      	ldr	r1, [pc, #16]	; (8017b4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8017b3a:	4805      	ldr	r0, [pc, #20]	; (8017b50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017b3c:	f7fd fb9d 	bl	801527a <USBD_GetString>
  }
  return USBD_StrDesc;
 8017b40:	4b02      	ldr	r3, [pc, #8]	; (8017b4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017b42:	4618      	mov	r0, r3
 8017b44:	3708      	adds	r7, #8
 8017b46:	46bd      	mov	sp, r7
 8017b48:	bd80      	pop	{r7, pc}
 8017b4a:	bf00      	nop
 8017b4c:	2404167c 	.word	0x2404167c
 8017b50:	08019ea4 	.word	0x08019ea4

08017b54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017b54:	b580      	push	{r7, lr}
 8017b56:	b082      	sub	sp, #8
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	4603      	mov	r3, r0
 8017b5c:	6039      	str	r1, [r7, #0]
 8017b5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017b60:	79fb      	ldrb	r3, [r7, #7]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d105      	bne.n	8017b72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017b66:	683a      	ldr	r2, [r7, #0]
 8017b68:	4907      	ldr	r1, [pc, #28]	; (8017b88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017b6a:	4808      	ldr	r0, [pc, #32]	; (8017b8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017b6c:	f7fd fb85 	bl	801527a <USBD_GetString>
 8017b70:	e004      	b.n	8017b7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017b72:	683a      	ldr	r2, [r7, #0]
 8017b74:	4904      	ldr	r1, [pc, #16]	; (8017b88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017b76:	4805      	ldr	r0, [pc, #20]	; (8017b8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017b78:	f7fd fb7f 	bl	801527a <USBD_GetString>
  }
  return USBD_StrDesc;
 8017b7c:	4b02      	ldr	r3, [pc, #8]	; (8017b88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017b7e:	4618      	mov	r0, r3
 8017b80:	3708      	adds	r7, #8
 8017b82:	46bd      	mov	sp, r7
 8017b84:	bd80      	pop	{r7, pc}
 8017b86:	bf00      	nop
 8017b88:	2404167c 	.word	0x2404167c
 8017b8c:	08019eb0 	.word	0x08019eb0

08017b90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b084      	sub	sp, #16
 8017b94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017b96:	4b0f      	ldr	r3, [pc, #60]	; (8017bd4 <Get_SerialNum+0x44>)
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017b9c:	4b0e      	ldr	r3, [pc, #56]	; (8017bd8 <Get_SerialNum+0x48>)
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017ba2:	4b0e      	ldr	r3, [pc, #56]	; (8017bdc <Get_SerialNum+0x4c>)
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017ba8:	68fa      	ldr	r2, [r7, #12]
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	4413      	add	r3, r2
 8017bae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d009      	beq.n	8017bca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017bb6:	2208      	movs	r2, #8
 8017bb8:	4909      	ldr	r1, [pc, #36]	; (8017be0 <Get_SerialNum+0x50>)
 8017bba:	68f8      	ldr	r0, [r7, #12]
 8017bbc:	f000 f814 	bl	8017be8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017bc0:	2204      	movs	r2, #4
 8017bc2:	4908      	ldr	r1, [pc, #32]	; (8017be4 <Get_SerialNum+0x54>)
 8017bc4:	68b8      	ldr	r0, [r7, #8]
 8017bc6:	f000 f80f 	bl	8017be8 <IntToUnicode>
  }
}
 8017bca:	bf00      	nop
 8017bcc:	3710      	adds	r7, #16
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	bd80      	pop	{r7, pc}
 8017bd2:	bf00      	nop
 8017bd4:	1ff1e800 	.word	0x1ff1e800
 8017bd8:	1ff1e804 	.word	0x1ff1e804
 8017bdc:	1ff1e808 	.word	0x1ff1e808
 8017be0:	2400013a 	.word	0x2400013a
 8017be4:	2400014a 	.word	0x2400014a

08017be8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017be8:	b480      	push	{r7}
 8017bea:	b087      	sub	sp, #28
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	60f8      	str	r0, [r7, #12]
 8017bf0:	60b9      	str	r1, [r7, #8]
 8017bf2:	4613      	mov	r3, r2
 8017bf4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	75fb      	strb	r3, [r7, #23]
 8017bfe:	e027      	b.n	8017c50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	0f1b      	lsrs	r3, r3, #28
 8017c04:	2b09      	cmp	r3, #9
 8017c06:	d80b      	bhi.n	8017c20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	0f1b      	lsrs	r3, r3, #28
 8017c0c:	b2da      	uxtb	r2, r3
 8017c0e:	7dfb      	ldrb	r3, [r7, #23]
 8017c10:	005b      	lsls	r3, r3, #1
 8017c12:	4619      	mov	r1, r3
 8017c14:	68bb      	ldr	r3, [r7, #8]
 8017c16:	440b      	add	r3, r1
 8017c18:	3230      	adds	r2, #48	; 0x30
 8017c1a:	b2d2      	uxtb	r2, r2
 8017c1c:	701a      	strb	r2, [r3, #0]
 8017c1e:	e00a      	b.n	8017c36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	0f1b      	lsrs	r3, r3, #28
 8017c24:	b2da      	uxtb	r2, r3
 8017c26:	7dfb      	ldrb	r3, [r7, #23]
 8017c28:	005b      	lsls	r3, r3, #1
 8017c2a:	4619      	mov	r1, r3
 8017c2c:	68bb      	ldr	r3, [r7, #8]
 8017c2e:	440b      	add	r3, r1
 8017c30:	3237      	adds	r2, #55	; 0x37
 8017c32:	b2d2      	uxtb	r2, r2
 8017c34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	011b      	lsls	r3, r3, #4
 8017c3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017c3c:	7dfb      	ldrb	r3, [r7, #23]
 8017c3e:	005b      	lsls	r3, r3, #1
 8017c40:	3301      	adds	r3, #1
 8017c42:	68ba      	ldr	r2, [r7, #8]
 8017c44:	4413      	add	r3, r2
 8017c46:	2200      	movs	r2, #0
 8017c48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017c4a:	7dfb      	ldrb	r3, [r7, #23]
 8017c4c:	3301      	adds	r3, #1
 8017c4e:	75fb      	strb	r3, [r7, #23]
 8017c50:	7dfa      	ldrb	r2, [r7, #23]
 8017c52:	79fb      	ldrb	r3, [r7, #7]
 8017c54:	429a      	cmp	r2, r3
 8017c56:	d3d3      	bcc.n	8017c00 <IntToUnicode+0x18>
  }
}
 8017c58:	bf00      	nop
 8017c5a:	371c      	adds	r7, #28
 8017c5c:	46bd      	mov	sp, r7
 8017c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c62:	4770      	bx	lr

08017c64 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8017c64:	b480      	push	{r7}
 8017c66:	b083      	sub	sp, #12
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8017c6e:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8017c70:	4618      	mov	r0, r3
 8017c72:	370c      	adds	r7, #12
 8017c74:	46bd      	mov	sp, r7
 8017c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c7a:	4770      	bx	lr

08017c7c <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8017c7c:	b580      	push	{r7, lr}
 8017c7e:	b08e      	sub	sp, #56	; 0x38
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	4603      	mov	r3, r0
 8017c84:	60b9      	str	r1, [r7, #8]
 8017c86:	607a      	str	r2, [r7, #4]
 8017c88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8017c8a:	23ff      	movs	r3, #255	; 0xff
 8017c8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8017c90:	f107 0310 	add.w	r3, r7, #16
 8017c94:	4619      	mov	r1, r3
 8017c96:	480a      	ldr	r0, [pc, #40]	; (8017cc0 <STORAGE_GetCapacity_FS+0x44>)
 8017c98:	f7f5 f89a 	bl	800cdd0 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8017c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c9e:	1e5a      	subs	r2, r3, #1
 8017ca0:	68bb      	ldr	r3, [r7, #8]
 8017ca2:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8017ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ca6:	b29a      	uxth	r2, r3
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8017cac:	2300      	movs	r3, #0
 8017cae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8017cb2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	3738      	adds	r7, #56	; 0x38
 8017cba:	46bd      	mov	sp, r7
 8017cbc:	bd80      	pop	{r7, pc}
 8017cbe:	bf00      	nop
 8017cc0:	24040c48 	.word	0x24040c48

08017cc4 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8017cc4:	b480      	push	{r7}
 8017cc6:	b083      	sub	sp, #12
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	4603      	mov	r3, r0
 8017ccc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017cce:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	370c      	adds	r7, #12
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cda:	4770      	bx	lr

08017cdc <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8017cdc:	b480      	push	{r7}
 8017cde:	b083      	sub	sp, #12
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8017ce6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017ce8:	4618      	mov	r0, r3
 8017cea:	370c      	adds	r7, #12
 8017cec:	46bd      	mov	sp, r7
 8017cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf2:	4770      	bx	lr

08017cf4 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b088      	sub	sp, #32
 8017cf8:	af02      	add	r7, sp, #8
 8017cfa:	60b9      	str	r1, [r7, #8]
 8017cfc:	607a      	str	r2, [r7, #4]
 8017cfe:	461a      	mov	r2, r3
 8017d00:	4603      	mov	r3, r0
 8017d02:	73fb      	strb	r3, [r7, #15]
 8017d04:	4613      	mov	r3, r2
 8017d06:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8017d08:	23ff      	movs	r3, #255	; 0xff
 8017d0a:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017d0c:	89ba      	ldrh	r2, [r7, #12]
 8017d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8017d12:	9300      	str	r3, [sp, #0]
 8017d14:	4613      	mov	r3, r2
 8017d16:	687a      	ldr	r2, [r7, #4]
 8017d18:	68b9      	ldr	r1, [r7, #8]
 8017d1a:	4809      	ldr	r0, [pc, #36]	; (8017d40 <STORAGE_Read_FS+0x4c>)
 8017d1c:	f7f3 ffca 	bl	800bcb4 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8017d20:	bf00      	nop
 8017d22:	4807      	ldr	r0, [pc, #28]	; (8017d40 <STORAGE_Read_FS+0x4c>)
 8017d24:	f7f5 f92a 	bl	800cf7c <HAL_SD_GetCardState>
 8017d28:	4603      	mov	r3, r0
 8017d2a:	2b04      	cmp	r3, #4
 8017d2c:	d1f9      	bne.n	8017d22 <STORAGE_Read_FS+0x2e>
	ret = 0;
 8017d2e:	2300      	movs	r3, #0
 8017d30:	75fb      	strb	r3, [r7, #23]
	return ret;
 8017d32:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8017d36:	4618      	mov	r0, r3
 8017d38:	3718      	adds	r7, #24
 8017d3a:	46bd      	mov	sp, r7
 8017d3c:	bd80      	pop	{r7, pc}
 8017d3e:	bf00      	nop
 8017d40:	24040c48 	.word	0x24040c48

08017d44 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b088      	sub	sp, #32
 8017d48:	af02      	add	r7, sp, #8
 8017d4a:	60b9      	str	r1, [r7, #8]
 8017d4c:	607a      	str	r2, [r7, #4]
 8017d4e:	461a      	mov	r2, r3
 8017d50:	4603      	mov	r3, r0
 8017d52:	73fb      	strb	r3, [r7, #15]
 8017d54:	4613      	mov	r3, r2
 8017d56:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8017d58:	23ff      	movs	r3, #255	; 0xff
 8017d5a:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017d5c:	89ba      	ldrh	r2, [r7, #12]
 8017d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8017d62:	9300      	str	r3, [sp, #0]
 8017d64:	4613      	mov	r3, r2
 8017d66:	687a      	ldr	r2, [r7, #4]
 8017d68:	68b9      	ldr	r1, [r7, #8]
 8017d6a:	4809      	ldr	r0, [pc, #36]	; (8017d90 <STORAGE_Write_FS+0x4c>)
 8017d6c:	f7f4 f92c 	bl	800bfc8 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8017d70:	bf00      	nop
 8017d72:	4807      	ldr	r0, [pc, #28]	; (8017d90 <STORAGE_Write_FS+0x4c>)
 8017d74:	f7f5 f902 	bl	800cf7c <HAL_SD_GetCardState>
 8017d78:	4603      	mov	r3, r0
 8017d7a:	2b04      	cmp	r3, #4
 8017d7c:	d1f9      	bne.n	8017d72 <STORAGE_Write_FS+0x2e>
	ret = 0;
 8017d7e:	2300      	movs	r3, #0
 8017d80:	75fb      	strb	r3, [r7, #23]
	return ret;
 8017d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8017d86:	4618      	mov	r0, r3
 8017d88:	3718      	adds	r7, #24
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	bd80      	pop	{r7, pc}
 8017d8e:	bf00      	nop
 8017d90:	24040c48 	.word	0x24040c48

08017d94 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8017d94:	b480      	push	{r7}
 8017d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8017d98:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da2:	4770      	bx	lr

08017da4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b08a      	sub	sp, #40	; 0x28
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017dac:	f107 0314 	add.w	r3, r7, #20
 8017db0:	2200      	movs	r2, #0
 8017db2:	601a      	str	r2, [r3, #0]
 8017db4:	605a      	str	r2, [r3, #4]
 8017db6:	609a      	str	r2, [r3, #8]
 8017db8:	60da      	str	r2, [r3, #12]
 8017dba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	4a1e      	ldr	r2, [pc, #120]	; (8017e3c <HAL_PCD_MspInit+0x98>)
 8017dc2:	4293      	cmp	r3, r2
 8017dc4:	d136      	bne.n	8017e34 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017dc6:	4b1e      	ldr	r3, [pc, #120]	; (8017e40 <HAL_PCD_MspInit+0x9c>)
 8017dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017dcc:	4a1c      	ldr	r2, [pc, #112]	; (8017e40 <HAL_PCD_MspInit+0x9c>)
 8017dce:	f043 0301 	orr.w	r3, r3, #1
 8017dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8017dd6:	4b1a      	ldr	r3, [pc, #104]	; (8017e40 <HAL_PCD_MspInit+0x9c>)
 8017dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017ddc:	f003 0301 	and.w	r3, r3, #1
 8017de0:	613b      	str	r3, [r7, #16]
 8017de2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017de4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017dea:	2302      	movs	r3, #2
 8017dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017dee:	2300      	movs	r3, #0
 8017df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017df2:	2300      	movs	r3, #0
 8017df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8017df6:	230a      	movs	r3, #10
 8017df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017dfa:	f107 0314 	add.w	r3, r7, #20
 8017dfe:	4619      	mov	r1, r3
 8017e00:	4810      	ldr	r0, [pc, #64]	; (8017e44 <HAL_PCD_MspInit+0xa0>)
 8017e02:	f7ee ff2f 	bl	8006c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017e06:	4b0e      	ldr	r3, [pc, #56]	; (8017e40 <HAL_PCD_MspInit+0x9c>)
 8017e08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017e0c:	4a0c      	ldr	r2, [pc, #48]	; (8017e40 <HAL_PCD_MspInit+0x9c>)
 8017e0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8017e12:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8017e16:	4b0a      	ldr	r3, [pc, #40]	; (8017e40 <HAL_PCD_MspInit+0x9c>)
 8017e18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017e20:	60fb      	str	r3, [r7, #12]
 8017e22:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017e24:	2200      	movs	r2, #0
 8017e26:	2100      	movs	r1, #0
 8017e28:	2065      	movs	r0, #101	; 0x65
 8017e2a:	f7eb fcd2 	bl	80037d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017e2e:	2065      	movs	r0, #101	; 0x65
 8017e30:	f7eb fce9 	bl	8003806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017e34:	bf00      	nop
 8017e36:	3728      	adds	r7, #40	; 0x28
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	bd80      	pop	{r7, pc}
 8017e3c:	40080000 	.word	0x40080000
 8017e40:	58024400 	.word	0x58024400
 8017e44:	58020000 	.word	0x58020000

08017e48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b082      	sub	sp, #8
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8017e5c:	4619      	mov	r1, r3
 8017e5e:	4610      	mov	r0, r2
 8017e60:	f7fc fa89 	bl	8014376 <USBD_LL_SetupStage>
}
 8017e64:	bf00      	nop
 8017e66:	3708      	adds	r7, #8
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	bd80      	pop	{r7, pc}

08017e6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b082      	sub	sp, #8
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	6078      	str	r0, [r7, #4]
 8017e74:	460b      	mov	r3, r1
 8017e76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017e7e:	78fa      	ldrb	r2, [r7, #3]
 8017e80:	6879      	ldr	r1, [r7, #4]
 8017e82:	4613      	mov	r3, r2
 8017e84:	00db      	lsls	r3, r3, #3
 8017e86:	1a9b      	subs	r3, r3, r2
 8017e88:	009b      	lsls	r3, r3, #2
 8017e8a:	440b      	add	r3, r1
 8017e8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017e90:	681a      	ldr	r2, [r3, #0]
 8017e92:	78fb      	ldrb	r3, [r7, #3]
 8017e94:	4619      	mov	r1, r3
 8017e96:	f7fc fac1 	bl	801441c <USBD_LL_DataOutStage>
}
 8017e9a:	bf00      	nop
 8017e9c:	3708      	adds	r7, #8
 8017e9e:	46bd      	mov	sp, r7
 8017ea0:	bd80      	pop	{r7, pc}

08017ea2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ea2:	b580      	push	{r7, lr}
 8017ea4:	b082      	sub	sp, #8
 8017ea6:	af00      	add	r7, sp, #0
 8017ea8:	6078      	str	r0, [r7, #4]
 8017eaa:	460b      	mov	r3, r1
 8017eac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017eb4:	78fa      	ldrb	r2, [r7, #3]
 8017eb6:	6879      	ldr	r1, [r7, #4]
 8017eb8:	4613      	mov	r3, r2
 8017eba:	00db      	lsls	r3, r3, #3
 8017ebc:	1a9b      	subs	r3, r3, r2
 8017ebe:	009b      	lsls	r3, r3, #2
 8017ec0:	440b      	add	r3, r1
 8017ec2:	3348      	adds	r3, #72	; 0x48
 8017ec4:	681a      	ldr	r2, [r3, #0]
 8017ec6:	78fb      	ldrb	r3, [r7, #3]
 8017ec8:	4619      	mov	r1, r3
 8017eca:	f7fc fb0a 	bl	80144e2 <USBD_LL_DataInStage>
}
 8017ece:	bf00      	nop
 8017ed0:	3708      	adds	r7, #8
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	bd80      	pop	{r7, pc}

08017ed6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ed6:	b580      	push	{r7, lr}
 8017ed8:	b082      	sub	sp, #8
 8017eda:	af00      	add	r7, sp, #0
 8017edc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f7fc fc0e 	bl	8014706 <USBD_LL_SOF>
}
 8017eea:	bf00      	nop
 8017eec:	3708      	adds	r7, #8
 8017eee:	46bd      	mov	sp, r7
 8017ef0:	bd80      	pop	{r7, pc}

08017ef2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ef2:	b580      	push	{r7, lr}
 8017ef4:	b084      	sub	sp, #16
 8017ef6:	af00      	add	r7, sp, #0
 8017ef8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017efa:	2301      	movs	r3, #1
 8017efc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	68db      	ldr	r3, [r3, #12]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d102      	bne.n	8017f0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017f06:	2300      	movs	r3, #0
 8017f08:	73fb      	strb	r3, [r7, #15]
 8017f0a:	e008      	b.n	8017f1e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	68db      	ldr	r3, [r3, #12]
 8017f10:	2b02      	cmp	r3, #2
 8017f12:	d102      	bne.n	8017f1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017f14:	2301      	movs	r3, #1
 8017f16:	73fb      	strb	r3, [r7, #15]
 8017f18:	e001      	b.n	8017f1e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017f1a:	f7ea fe5d 	bl	8002bd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017f24:	7bfa      	ldrb	r2, [r7, #15]
 8017f26:	4611      	mov	r1, r2
 8017f28:	4618      	mov	r0, r3
 8017f2a:	f7fc fbb1 	bl	8014690 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017f34:	4618      	mov	r0, r3
 8017f36:	f7fc fb6a 	bl	801460e <USBD_LL_Reset>
}
 8017f3a:	bf00      	nop
 8017f3c:	3710      	adds	r7, #16
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	bd80      	pop	{r7, pc}
	...

08017f44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b082      	sub	sp, #8
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017f52:	4618      	mov	r0, r3
 8017f54:	f7fc fbac 	bl	80146b0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	687a      	ldr	r2, [r7, #4]
 8017f64:	6812      	ldr	r2, [r2, #0]
 8017f66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017f6a:	f043 0301 	orr.w	r3, r3, #1
 8017f6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	6a1b      	ldr	r3, [r3, #32]
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d005      	beq.n	8017f84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017f78:	4b04      	ldr	r3, [pc, #16]	; (8017f8c <HAL_PCD_SuspendCallback+0x48>)
 8017f7a:	691b      	ldr	r3, [r3, #16]
 8017f7c:	4a03      	ldr	r2, [pc, #12]	; (8017f8c <HAL_PCD_SuspendCallback+0x48>)
 8017f7e:	f043 0306 	orr.w	r3, r3, #6
 8017f82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017f84:	bf00      	nop
 8017f86:	3708      	adds	r7, #8
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	bd80      	pop	{r7, pc}
 8017f8c:	e000ed00 	.word	0xe000ed00

08017f90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b082      	sub	sp, #8
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	f7fc fb9b 	bl	80146da <USBD_LL_Resume>
}
 8017fa4:	bf00      	nop
 8017fa6:	3708      	adds	r7, #8
 8017fa8:	46bd      	mov	sp, r7
 8017faa:	bd80      	pop	{r7, pc}

08017fac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fac:	b580      	push	{r7, lr}
 8017fae:	b082      	sub	sp, #8
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	6078      	str	r0, [r7, #4]
 8017fb4:	460b      	mov	r3, r1
 8017fb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017fbe:	78fa      	ldrb	r2, [r7, #3]
 8017fc0:	4611      	mov	r1, r2
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	f7fc fbc6 	bl	8014754 <USBD_LL_IsoOUTIncomplete>
}
 8017fc8:	bf00      	nop
 8017fca:	3708      	adds	r7, #8
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	bd80      	pop	{r7, pc}

08017fd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b082      	sub	sp, #8
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
 8017fd8:	460b      	mov	r3, r1
 8017fda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017fe2:	78fa      	ldrb	r2, [r7, #3]
 8017fe4:	4611      	mov	r1, r2
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	f7fc fba7 	bl	801473a <USBD_LL_IsoINIncomplete>
}
 8017fec:	bf00      	nop
 8017fee:	3708      	adds	r7, #8
 8017ff0:	46bd      	mov	sp, r7
 8017ff2:	bd80      	pop	{r7, pc}

08017ff4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b082      	sub	sp, #8
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018002:	4618      	mov	r0, r3
 8018004:	f7fc fbb3 	bl	801476e <USBD_LL_DevConnected>
}
 8018008:	bf00      	nop
 801800a:	3708      	adds	r7, #8
 801800c:	46bd      	mov	sp, r7
 801800e:	bd80      	pop	{r7, pc}

08018010 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018010:	b580      	push	{r7, lr}
 8018012:	b082      	sub	sp, #8
 8018014:	af00      	add	r7, sp, #0
 8018016:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801801e:	4618      	mov	r0, r3
 8018020:	f7fc fbb0 	bl	8014784 <USBD_LL_DevDisconnected>
}
 8018024:	bf00      	nop
 8018026:	3708      	adds	r7, #8
 8018028:	46bd      	mov	sp, r7
 801802a:	bd80      	pop	{r7, pc}

0801802c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801802c:	b580      	push	{r7, lr}
 801802e:	b082      	sub	sp, #8
 8018030:	af00      	add	r7, sp, #0
 8018032:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	781b      	ldrb	r3, [r3, #0]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d13e      	bne.n	80180ba <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801803c:	4a21      	ldr	r2, [pc, #132]	; (80180c4 <USBD_LL_Init+0x98>)
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	4a1f      	ldr	r2, [pc, #124]	; (80180c4 <USBD_LL_Init+0x98>)
 8018048:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801804c:	4b1d      	ldr	r3, [pc, #116]	; (80180c4 <USBD_LL_Init+0x98>)
 801804e:	4a1e      	ldr	r2, [pc, #120]	; (80180c8 <USBD_LL_Init+0x9c>)
 8018050:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8018052:	4b1c      	ldr	r3, [pc, #112]	; (80180c4 <USBD_LL_Init+0x98>)
 8018054:	2209      	movs	r2, #9
 8018056:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018058:	4b1a      	ldr	r3, [pc, #104]	; (80180c4 <USBD_LL_Init+0x98>)
 801805a:	2202      	movs	r2, #2
 801805c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801805e:	4b19      	ldr	r3, [pc, #100]	; (80180c4 <USBD_LL_Init+0x98>)
 8018060:	2200      	movs	r2, #0
 8018062:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018064:	4b17      	ldr	r3, [pc, #92]	; (80180c4 <USBD_LL_Init+0x98>)
 8018066:	2202      	movs	r2, #2
 8018068:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801806a:	4b16      	ldr	r3, [pc, #88]	; (80180c4 <USBD_LL_Init+0x98>)
 801806c:	2200      	movs	r2, #0
 801806e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018070:	4b14      	ldr	r3, [pc, #80]	; (80180c4 <USBD_LL_Init+0x98>)
 8018072:	2200      	movs	r2, #0
 8018074:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018076:	4b13      	ldr	r3, [pc, #76]	; (80180c4 <USBD_LL_Init+0x98>)
 8018078:	2200      	movs	r2, #0
 801807a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801807c:	4b11      	ldr	r3, [pc, #68]	; (80180c4 <USBD_LL_Init+0x98>)
 801807e:	2200      	movs	r2, #0
 8018080:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018082:	4b10      	ldr	r3, [pc, #64]	; (80180c4 <USBD_LL_Init+0x98>)
 8018084:	2200      	movs	r2, #0
 8018086:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018088:	4b0e      	ldr	r3, [pc, #56]	; (80180c4 <USBD_LL_Init+0x98>)
 801808a:	2200      	movs	r2, #0
 801808c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801808e:	480d      	ldr	r0, [pc, #52]	; (80180c4 <USBD_LL_Init+0x98>)
 8018090:	f7ef f822 	bl	80070d8 <HAL_PCD_Init>
 8018094:	4603      	mov	r3, r0
 8018096:	2b00      	cmp	r3, #0
 8018098:	d001      	beq.n	801809e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801809a:	f7ea fd9d 	bl	8002bd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801809e:	2180      	movs	r1, #128	; 0x80
 80180a0:	4808      	ldr	r0, [pc, #32]	; (80180c4 <USBD_LL_Init+0x98>)
 80180a2:	f7f0 f9e0 	bl	8008466 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80180a6:	2240      	movs	r2, #64	; 0x40
 80180a8:	2100      	movs	r1, #0
 80180aa:	4806      	ldr	r0, [pc, #24]	; (80180c4 <USBD_LL_Init+0x98>)
 80180ac:	f7f0 f994 	bl	80083d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80180b0:	2280      	movs	r2, #128	; 0x80
 80180b2:	2101      	movs	r1, #1
 80180b4:	4803      	ldr	r0, [pc, #12]	; (80180c4 <USBD_LL_Init+0x98>)
 80180b6:	f7f0 f98f 	bl	80083d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80180ba:	2300      	movs	r3, #0
}
 80180bc:	4618      	mov	r0, r3
 80180be:	3708      	adds	r7, #8
 80180c0:	46bd      	mov	sp, r7
 80180c2:	bd80      	pop	{r7, pc}
 80180c4:	2404187c 	.word	0x2404187c
 80180c8:	40080000 	.word	0x40080000

080180cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b084      	sub	sp, #16
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80180d4:	2300      	movs	r3, #0
 80180d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80180d8:	2300      	movs	r3, #0
 80180da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80180e2:	4618      	mov	r0, r3
 80180e4:	f7ef f91c 	bl	8007320 <HAL_PCD_Start>
 80180e8:	4603      	mov	r3, r0
 80180ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80180ec:	7bfb      	ldrb	r3, [r7, #15]
 80180ee:	4618      	mov	r0, r3
 80180f0:	f000 f94a 	bl	8018388 <USBD_Get_USB_Status>
 80180f4:	4603      	mov	r3, r0
 80180f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80180f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80180fa:	4618      	mov	r0, r3
 80180fc:	3710      	adds	r7, #16
 80180fe:	46bd      	mov	sp, r7
 8018100:	bd80      	pop	{r7, pc}

08018102 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018102:	b580      	push	{r7, lr}
 8018104:	b084      	sub	sp, #16
 8018106:	af00      	add	r7, sp, #0
 8018108:	6078      	str	r0, [r7, #4]
 801810a:	4608      	mov	r0, r1
 801810c:	4611      	mov	r1, r2
 801810e:	461a      	mov	r2, r3
 8018110:	4603      	mov	r3, r0
 8018112:	70fb      	strb	r3, [r7, #3]
 8018114:	460b      	mov	r3, r1
 8018116:	70bb      	strb	r3, [r7, #2]
 8018118:	4613      	mov	r3, r2
 801811a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801811c:	2300      	movs	r3, #0
 801811e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018120:	2300      	movs	r3, #0
 8018122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801812a:	78bb      	ldrb	r3, [r7, #2]
 801812c:	883a      	ldrh	r2, [r7, #0]
 801812e:	78f9      	ldrb	r1, [r7, #3]
 8018130:	f7ef fd2d 	bl	8007b8e <HAL_PCD_EP_Open>
 8018134:	4603      	mov	r3, r0
 8018136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018138:	7bfb      	ldrb	r3, [r7, #15]
 801813a:	4618      	mov	r0, r3
 801813c:	f000 f924 	bl	8018388 <USBD_Get_USB_Status>
 8018140:	4603      	mov	r3, r0
 8018142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018144:	7bbb      	ldrb	r3, [r7, #14]
}
 8018146:	4618      	mov	r0, r3
 8018148:	3710      	adds	r7, #16
 801814a:	46bd      	mov	sp, r7
 801814c:	bd80      	pop	{r7, pc}

0801814e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801814e:	b580      	push	{r7, lr}
 8018150:	b084      	sub	sp, #16
 8018152:	af00      	add	r7, sp, #0
 8018154:	6078      	str	r0, [r7, #4]
 8018156:	460b      	mov	r3, r1
 8018158:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801815a:	2300      	movs	r3, #0
 801815c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801815e:	2300      	movs	r3, #0
 8018160:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018168:	78fa      	ldrb	r2, [r7, #3]
 801816a:	4611      	mov	r1, r2
 801816c:	4618      	mov	r0, r3
 801816e:	f7ef fd76 	bl	8007c5e <HAL_PCD_EP_Close>
 8018172:	4603      	mov	r3, r0
 8018174:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018176:	7bfb      	ldrb	r3, [r7, #15]
 8018178:	4618      	mov	r0, r3
 801817a:	f000 f905 	bl	8018388 <USBD_Get_USB_Status>
 801817e:	4603      	mov	r3, r0
 8018180:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018182:	7bbb      	ldrb	r3, [r7, #14]
}
 8018184:	4618      	mov	r0, r3
 8018186:	3710      	adds	r7, #16
 8018188:	46bd      	mov	sp, r7
 801818a:	bd80      	pop	{r7, pc}

0801818c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b084      	sub	sp, #16
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
 8018194:	460b      	mov	r3, r1
 8018196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018198:	2300      	movs	r3, #0
 801819a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801819c:	2300      	movs	r3, #0
 801819e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80181a6:	78fa      	ldrb	r2, [r7, #3]
 80181a8:	4611      	mov	r1, r2
 80181aa:	4618      	mov	r0, r3
 80181ac:	f7ef ff08 	bl	8007fc0 <HAL_PCD_EP_Flush>
 80181b0:	4603      	mov	r3, r0
 80181b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80181b4:	7bfb      	ldrb	r3, [r7, #15]
 80181b6:	4618      	mov	r0, r3
 80181b8:	f000 f8e6 	bl	8018388 <USBD_Get_USB_Status>
 80181bc:	4603      	mov	r3, r0
 80181be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80181c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80181c2:	4618      	mov	r0, r3
 80181c4:	3710      	adds	r7, #16
 80181c6:	46bd      	mov	sp, r7
 80181c8:	bd80      	pop	{r7, pc}

080181ca <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80181ca:	b580      	push	{r7, lr}
 80181cc:	b084      	sub	sp, #16
 80181ce:	af00      	add	r7, sp, #0
 80181d0:	6078      	str	r0, [r7, #4]
 80181d2:	460b      	mov	r3, r1
 80181d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181d6:	2300      	movs	r3, #0
 80181d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80181da:	2300      	movs	r3, #0
 80181dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80181e4:	78fa      	ldrb	r2, [r7, #3]
 80181e6:	4611      	mov	r1, r2
 80181e8:	4618      	mov	r0, r3
 80181ea:	f7ef fe2f 	bl	8007e4c <HAL_PCD_EP_SetStall>
 80181ee:	4603      	mov	r3, r0
 80181f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80181f2:	7bfb      	ldrb	r3, [r7, #15]
 80181f4:	4618      	mov	r0, r3
 80181f6:	f000 f8c7 	bl	8018388 <USBD_Get_USB_Status>
 80181fa:	4603      	mov	r3, r0
 80181fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80181fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8018200:	4618      	mov	r0, r3
 8018202:	3710      	adds	r7, #16
 8018204:	46bd      	mov	sp, r7
 8018206:	bd80      	pop	{r7, pc}

08018208 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018208:	b580      	push	{r7, lr}
 801820a:	b084      	sub	sp, #16
 801820c:	af00      	add	r7, sp, #0
 801820e:	6078      	str	r0, [r7, #4]
 8018210:	460b      	mov	r3, r1
 8018212:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018214:	2300      	movs	r3, #0
 8018216:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018218:	2300      	movs	r3, #0
 801821a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018222:	78fa      	ldrb	r2, [r7, #3]
 8018224:	4611      	mov	r1, r2
 8018226:	4618      	mov	r0, r3
 8018228:	f7ef fe74 	bl	8007f14 <HAL_PCD_EP_ClrStall>
 801822c:	4603      	mov	r3, r0
 801822e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018230:	7bfb      	ldrb	r3, [r7, #15]
 8018232:	4618      	mov	r0, r3
 8018234:	f000 f8a8 	bl	8018388 <USBD_Get_USB_Status>
 8018238:	4603      	mov	r3, r0
 801823a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801823c:	7bbb      	ldrb	r3, [r7, #14]
}
 801823e:	4618      	mov	r0, r3
 8018240:	3710      	adds	r7, #16
 8018242:	46bd      	mov	sp, r7
 8018244:	bd80      	pop	{r7, pc}

08018246 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018246:	b480      	push	{r7}
 8018248:	b085      	sub	sp, #20
 801824a:	af00      	add	r7, sp, #0
 801824c:	6078      	str	r0, [r7, #4]
 801824e:	460b      	mov	r3, r1
 8018250:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018258:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801825a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801825e:	2b00      	cmp	r3, #0
 8018260:	da0b      	bge.n	801827a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018262:	78fb      	ldrb	r3, [r7, #3]
 8018264:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018268:	68f9      	ldr	r1, [r7, #12]
 801826a:	4613      	mov	r3, r2
 801826c:	00db      	lsls	r3, r3, #3
 801826e:	1a9b      	subs	r3, r3, r2
 8018270:	009b      	lsls	r3, r3, #2
 8018272:	440b      	add	r3, r1
 8018274:	333e      	adds	r3, #62	; 0x3e
 8018276:	781b      	ldrb	r3, [r3, #0]
 8018278:	e00b      	b.n	8018292 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801827a:	78fb      	ldrb	r3, [r7, #3]
 801827c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018280:	68f9      	ldr	r1, [r7, #12]
 8018282:	4613      	mov	r3, r2
 8018284:	00db      	lsls	r3, r3, #3
 8018286:	1a9b      	subs	r3, r3, r2
 8018288:	009b      	lsls	r3, r3, #2
 801828a:	440b      	add	r3, r1
 801828c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018290:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018292:	4618      	mov	r0, r3
 8018294:	3714      	adds	r7, #20
 8018296:	46bd      	mov	sp, r7
 8018298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801829c:	4770      	bx	lr

0801829e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801829e:	b580      	push	{r7, lr}
 80182a0:	b084      	sub	sp, #16
 80182a2:	af00      	add	r7, sp, #0
 80182a4:	6078      	str	r0, [r7, #4]
 80182a6:	460b      	mov	r3, r1
 80182a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182aa:	2300      	movs	r3, #0
 80182ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182ae:	2300      	movs	r3, #0
 80182b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80182b8:	78fa      	ldrb	r2, [r7, #3]
 80182ba:	4611      	mov	r1, r2
 80182bc:	4618      	mov	r0, r3
 80182be:	f7ef fc41 	bl	8007b44 <HAL_PCD_SetAddress>
 80182c2:	4603      	mov	r3, r0
 80182c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182c6:	7bfb      	ldrb	r3, [r7, #15]
 80182c8:	4618      	mov	r0, r3
 80182ca:	f000 f85d 	bl	8018388 <USBD_Get_USB_Status>
 80182ce:	4603      	mov	r3, r0
 80182d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80182d4:	4618      	mov	r0, r3
 80182d6:	3710      	adds	r7, #16
 80182d8:	46bd      	mov	sp, r7
 80182da:	bd80      	pop	{r7, pc}

080182dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	b086      	sub	sp, #24
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	60f8      	str	r0, [r7, #12]
 80182e4:	607a      	str	r2, [r7, #4]
 80182e6:	603b      	str	r3, [r7, #0]
 80182e8:	460b      	mov	r3, r1
 80182ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182ec:	2300      	movs	r3, #0
 80182ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182f0:	2300      	movs	r3, #0
 80182f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80182fa:	7af9      	ldrb	r1, [r7, #11]
 80182fc:	683b      	ldr	r3, [r7, #0]
 80182fe:	687a      	ldr	r2, [r7, #4]
 8018300:	f7ef fd5a 	bl	8007db8 <HAL_PCD_EP_Transmit>
 8018304:	4603      	mov	r3, r0
 8018306:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018308:	7dfb      	ldrb	r3, [r7, #23]
 801830a:	4618      	mov	r0, r3
 801830c:	f000 f83c 	bl	8018388 <USBD_Get_USB_Status>
 8018310:	4603      	mov	r3, r0
 8018312:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018314:	7dbb      	ldrb	r3, [r7, #22]
}
 8018316:	4618      	mov	r0, r3
 8018318:	3718      	adds	r7, #24
 801831a:	46bd      	mov	sp, r7
 801831c:	bd80      	pop	{r7, pc}

0801831e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801831e:	b580      	push	{r7, lr}
 8018320:	b086      	sub	sp, #24
 8018322:	af00      	add	r7, sp, #0
 8018324:	60f8      	str	r0, [r7, #12]
 8018326:	607a      	str	r2, [r7, #4]
 8018328:	603b      	str	r3, [r7, #0]
 801832a:	460b      	mov	r3, r1
 801832c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801832e:	2300      	movs	r3, #0
 8018330:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018332:	2300      	movs	r3, #0
 8018334:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801833c:	7af9      	ldrb	r1, [r7, #11]
 801833e:	683b      	ldr	r3, [r7, #0]
 8018340:	687a      	ldr	r2, [r7, #4]
 8018342:	f7ef fcd6 	bl	8007cf2 <HAL_PCD_EP_Receive>
 8018346:	4603      	mov	r3, r0
 8018348:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801834a:	7dfb      	ldrb	r3, [r7, #23]
 801834c:	4618      	mov	r0, r3
 801834e:	f000 f81b 	bl	8018388 <USBD_Get_USB_Status>
 8018352:	4603      	mov	r3, r0
 8018354:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018356:	7dbb      	ldrb	r3, [r7, #22]
}
 8018358:	4618      	mov	r0, r3
 801835a:	3718      	adds	r7, #24
 801835c:	46bd      	mov	sp, r7
 801835e:	bd80      	pop	{r7, pc}

08018360 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b082      	sub	sp, #8
 8018364:	af00      	add	r7, sp, #0
 8018366:	6078      	str	r0, [r7, #4]
 8018368:	460b      	mov	r3, r1
 801836a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018372:	78fa      	ldrb	r2, [r7, #3]
 8018374:	4611      	mov	r1, r2
 8018376:	4618      	mov	r0, r3
 8018378:	f7ef fd06 	bl	8007d88 <HAL_PCD_EP_GetRxCount>
 801837c:	4603      	mov	r3, r0
}
 801837e:	4618      	mov	r0, r3
 8018380:	3708      	adds	r7, #8
 8018382:	46bd      	mov	sp, r7
 8018384:	bd80      	pop	{r7, pc}
	...

08018388 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018388:	b480      	push	{r7}
 801838a:	b085      	sub	sp, #20
 801838c:	af00      	add	r7, sp, #0
 801838e:	4603      	mov	r3, r0
 8018390:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018392:	2300      	movs	r3, #0
 8018394:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018396:	79fb      	ldrb	r3, [r7, #7]
 8018398:	2b03      	cmp	r3, #3
 801839a:	d817      	bhi.n	80183cc <USBD_Get_USB_Status+0x44>
 801839c:	a201      	add	r2, pc, #4	; (adr r2, 80183a4 <USBD_Get_USB_Status+0x1c>)
 801839e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183a2:	bf00      	nop
 80183a4:	080183b5 	.word	0x080183b5
 80183a8:	080183bb 	.word	0x080183bb
 80183ac:	080183c1 	.word	0x080183c1
 80183b0:	080183c7 	.word	0x080183c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80183b4:	2300      	movs	r3, #0
 80183b6:	73fb      	strb	r3, [r7, #15]
    break;
 80183b8:	e00b      	b.n	80183d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80183ba:	2303      	movs	r3, #3
 80183bc:	73fb      	strb	r3, [r7, #15]
    break;
 80183be:	e008      	b.n	80183d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80183c0:	2301      	movs	r3, #1
 80183c2:	73fb      	strb	r3, [r7, #15]
    break;
 80183c4:	e005      	b.n	80183d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80183c6:	2303      	movs	r3, #3
 80183c8:	73fb      	strb	r3, [r7, #15]
    break;
 80183ca:	e002      	b.n	80183d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80183cc:	2303      	movs	r3, #3
 80183ce:	73fb      	strb	r3, [r7, #15]
    break;
 80183d0:	bf00      	nop
  }
  return usb_status;
 80183d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80183d4:	4618      	mov	r0, r3
 80183d6:	3714      	adds	r7, #20
 80183d8:	46bd      	mov	sp, r7
 80183da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183de:	4770      	bx	lr

080183e0 <__errno>:
 80183e0:	4b01      	ldr	r3, [pc, #4]	; (80183e8 <__errno+0x8>)
 80183e2:	6818      	ldr	r0, [r3, #0]
 80183e4:	4770      	bx	lr
 80183e6:	bf00      	nop
 80183e8:	24000174 	.word	0x24000174

080183ec <__libc_init_array>:
 80183ec:	b570      	push	{r4, r5, r6, lr}
 80183ee:	4e0d      	ldr	r6, [pc, #52]	; (8018424 <__libc_init_array+0x38>)
 80183f0:	4c0d      	ldr	r4, [pc, #52]	; (8018428 <__libc_init_array+0x3c>)
 80183f2:	1ba4      	subs	r4, r4, r6
 80183f4:	10a4      	asrs	r4, r4, #2
 80183f6:	2500      	movs	r5, #0
 80183f8:	42a5      	cmp	r5, r4
 80183fa:	d109      	bne.n	8018410 <__libc_init_array+0x24>
 80183fc:	4e0b      	ldr	r6, [pc, #44]	; (801842c <__libc_init_array+0x40>)
 80183fe:	4c0c      	ldr	r4, [pc, #48]	; (8018430 <__libc_init_array+0x44>)
 8018400:	f001 f972 	bl	80196e8 <_init>
 8018404:	1ba4      	subs	r4, r4, r6
 8018406:	10a4      	asrs	r4, r4, #2
 8018408:	2500      	movs	r5, #0
 801840a:	42a5      	cmp	r5, r4
 801840c:	d105      	bne.n	801841a <__libc_init_array+0x2e>
 801840e:	bd70      	pop	{r4, r5, r6, pc}
 8018410:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018414:	4798      	blx	r3
 8018416:	3501      	adds	r5, #1
 8018418:	e7ee      	b.n	80183f8 <__libc_init_array+0xc>
 801841a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801841e:	4798      	blx	r3
 8018420:	3501      	adds	r5, #1
 8018422:	e7f2      	b.n	801840a <__libc_init_array+0x1e>
 8018424:	0801a058 	.word	0x0801a058
 8018428:	0801a058 	.word	0x0801a058
 801842c:	0801a058 	.word	0x0801a058
 8018430:	0801a05c 	.word	0x0801a05c

08018434 <malloc>:
 8018434:	4b02      	ldr	r3, [pc, #8]	; (8018440 <malloc+0xc>)
 8018436:	4601      	mov	r1, r0
 8018438:	6818      	ldr	r0, [r3, #0]
 801843a:	f000 b86d 	b.w	8018518 <_malloc_r>
 801843e:	bf00      	nop
 8018440:	24000174 	.word	0x24000174

08018444 <free>:
 8018444:	4b02      	ldr	r3, [pc, #8]	; (8018450 <free+0xc>)
 8018446:	4601      	mov	r1, r0
 8018448:	6818      	ldr	r0, [r3, #0]
 801844a:	f000 b817 	b.w	801847c <_free_r>
 801844e:	bf00      	nop
 8018450:	24000174 	.word	0x24000174

08018454 <memcpy>:
 8018454:	b510      	push	{r4, lr}
 8018456:	1e43      	subs	r3, r0, #1
 8018458:	440a      	add	r2, r1
 801845a:	4291      	cmp	r1, r2
 801845c:	d100      	bne.n	8018460 <memcpy+0xc>
 801845e:	bd10      	pop	{r4, pc}
 8018460:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018464:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018468:	e7f7      	b.n	801845a <memcpy+0x6>

0801846a <memset>:
 801846a:	4402      	add	r2, r0
 801846c:	4603      	mov	r3, r0
 801846e:	4293      	cmp	r3, r2
 8018470:	d100      	bne.n	8018474 <memset+0xa>
 8018472:	4770      	bx	lr
 8018474:	f803 1b01 	strb.w	r1, [r3], #1
 8018478:	e7f9      	b.n	801846e <memset+0x4>
	...

0801847c <_free_r>:
 801847c:	b538      	push	{r3, r4, r5, lr}
 801847e:	4605      	mov	r5, r0
 8018480:	2900      	cmp	r1, #0
 8018482:	d045      	beq.n	8018510 <_free_r+0x94>
 8018484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018488:	1f0c      	subs	r4, r1, #4
 801848a:	2b00      	cmp	r3, #0
 801848c:	bfb8      	it	lt
 801848e:	18e4      	addlt	r4, r4, r3
 8018490:	f000 fc1a 	bl	8018cc8 <__malloc_lock>
 8018494:	4a1f      	ldr	r2, [pc, #124]	; (8018514 <_free_r+0x98>)
 8018496:	6813      	ldr	r3, [r2, #0]
 8018498:	4610      	mov	r0, r2
 801849a:	b933      	cbnz	r3, 80184aa <_free_r+0x2e>
 801849c:	6063      	str	r3, [r4, #4]
 801849e:	6014      	str	r4, [r2, #0]
 80184a0:	4628      	mov	r0, r5
 80184a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80184a6:	f000 bc10 	b.w	8018cca <__malloc_unlock>
 80184aa:	42a3      	cmp	r3, r4
 80184ac:	d90c      	bls.n	80184c8 <_free_r+0x4c>
 80184ae:	6821      	ldr	r1, [r4, #0]
 80184b0:	1862      	adds	r2, r4, r1
 80184b2:	4293      	cmp	r3, r2
 80184b4:	bf04      	itt	eq
 80184b6:	681a      	ldreq	r2, [r3, #0]
 80184b8:	685b      	ldreq	r3, [r3, #4]
 80184ba:	6063      	str	r3, [r4, #4]
 80184bc:	bf04      	itt	eq
 80184be:	1852      	addeq	r2, r2, r1
 80184c0:	6022      	streq	r2, [r4, #0]
 80184c2:	6004      	str	r4, [r0, #0]
 80184c4:	e7ec      	b.n	80184a0 <_free_r+0x24>
 80184c6:	4613      	mov	r3, r2
 80184c8:	685a      	ldr	r2, [r3, #4]
 80184ca:	b10a      	cbz	r2, 80184d0 <_free_r+0x54>
 80184cc:	42a2      	cmp	r2, r4
 80184ce:	d9fa      	bls.n	80184c6 <_free_r+0x4a>
 80184d0:	6819      	ldr	r1, [r3, #0]
 80184d2:	1858      	adds	r0, r3, r1
 80184d4:	42a0      	cmp	r0, r4
 80184d6:	d10b      	bne.n	80184f0 <_free_r+0x74>
 80184d8:	6820      	ldr	r0, [r4, #0]
 80184da:	4401      	add	r1, r0
 80184dc:	1858      	adds	r0, r3, r1
 80184de:	4282      	cmp	r2, r0
 80184e0:	6019      	str	r1, [r3, #0]
 80184e2:	d1dd      	bne.n	80184a0 <_free_r+0x24>
 80184e4:	6810      	ldr	r0, [r2, #0]
 80184e6:	6852      	ldr	r2, [r2, #4]
 80184e8:	605a      	str	r2, [r3, #4]
 80184ea:	4401      	add	r1, r0
 80184ec:	6019      	str	r1, [r3, #0]
 80184ee:	e7d7      	b.n	80184a0 <_free_r+0x24>
 80184f0:	d902      	bls.n	80184f8 <_free_r+0x7c>
 80184f2:	230c      	movs	r3, #12
 80184f4:	602b      	str	r3, [r5, #0]
 80184f6:	e7d3      	b.n	80184a0 <_free_r+0x24>
 80184f8:	6820      	ldr	r0, [r4, #0]
 80184fa:	1821      	adds	r1, r4, r0
 80184fc:	428a      	cmp	r2, r1
 80184fe:	bf04      	itt	eq
 8018500:	6811      	ldreq	r1, [r2, #0]
 8018502:	6852      	ldreq	r2, [r2, #4]
 8018504:	6062      	str	r2, [r4, #4]
 8018506:	bf04      	itt	eq
 8018508:	1809      	addeq	r1, r1, r0
 801850a:	6021      	streq	r1, [r4, #0]
 801850c:	605c      	str	r4, [r3, #4]
 801850e:	e7c7      	b.n	80184a0 <_free_r+0x24>
 8018510:	bd38      	pop	{r3, r4, r5, pc}
 8018512:	bf00      	nop
 8018514:	24040384 	.word	0x24040384

08018518 <_malloc_r>:
 8018518:	b570      	push	{r4, r5, r6, lr}
 801851a:	1ccd      	adds	r5, r1, #3
 801851c:	f025 0503 	bic.w	r5, r5, #3
 8018520:	3508      	adds	r5, #8
 8018522:	2d0c      	cmp	r5, #12
 8018524:	bf38      	it	cc
 8018526:	250c      	movcc	r5, #12
 8018528:	2d00      	cmp	r5, #0
 801852a:	4606      	mov	r6, r0
 801852c:	db01      	blt.n	8018532 <_malloc_r+0x1a>
 801852e:	42a9      	cmp	r1, r5
 8018530:	d903      	bls.n	801853a <_malloc_r+0x22>
 8018532:	230c      	movs	r3, #12
 8018534:	6033      	str	r3, [r6, #0]
 8018536:	2000      	movs	r0, #0
 8018538:	bd70      	pop	{r4, r5, r6, pc}
 801853a:	f000 fbc5 	bl	8018cc8 <__malloc_lock>
 801853e:	4a21      	ldr	r2, [pc, #132]	; (80185c4 <_malloc_r+0xac>)
 8018540:	6814      	ldr	r4, [r2, #0]
 8018542:	4621      	mov	r1, r4
 8018544:	b991      	cbnz	r1, 801856c <_malloc_r+0x54>
 8018546:	4c20      	ldr	r4, [pc, #128]	; (80185c8 <_malloc_r+0xb0>)
 8018548:	6823      	ldr	r3, [r4, #0]
 801854a:	b91b      	cbnz	r3, 8018554 <_malloc_r+0x3c>
 801854c:	4630      	mov	r0, r6
 801854e:	f000 f8b9 	bl	80186c4 <_sbrk_r>
 8018552:	6020      	str	r0, [r4, #0]
 8018554:	4629      	mov	r1, r5
 8018556:	4630      	mov	r0, r6
 8018558:	f000 f8b4 	bl	80186c4 <_sbrk_r>
 801855c:	1c43      	adds	r3, r0, #1
 801855e:	d124      	bne.n	80185aa <_malloc_r+0x92>
 8018560:	230c      	movs	r3, #12
 8018562:	6033      	str	r3, [r6, #0]
 8018564:	4630      	mov	r0, r6
 8018566:	f000 fbb0 	bl	8018cca <__malloc_unlock>
 801856a:	e7e4      	b.n	8018536 <_malloc_r+0x1e>
 801856c:	680b      	ldr	r3, [r1, #0]
 801856e:	1b5b      	subs	r3, r3, r5
 8018570:	d418      	bmi.n	80185a4 <_malloc_r+0x8c>
 8018572:	2b0b      	cmp	r3, #11
 8018574:	d90f      	bls.n	8018596 <_malloc_r+0x7e>
 8018576:	600b      	str	r3, [r1, #0]
 8018578:	50cd      	str	r5, [r1, r3]
 801857a:	18cc      	adds	r4, r1, r3
 801857c:	4630      	mov	r0, r6
 801857e:	f000 fba4 	bl	8018cca <__malloc_unlock>
 8018582:	f104 000b 	add.w	r0, r4, #11
 8018586:	1d23      	adds	r3, r4, #4
 8018588:	f020 0007 	bic.w	r0, r0, #7
 801858c:	1ac3      	subs	r3, r0, r3
 801858e:	d0d3      	beq.n	8018538 <_malloc_r+0x20>
 8018590:	425a      	negs	r2, r3
 8018592:	50e2      	str	r2, [r4, r3]
 8018594:	e7d0      	b.n	8018538 <_malloc_r+0x20>
 8018596:	428c      	cmp	r4, r1
 8018598:	684b      	ldr	r3, [r1, #4]
 801859a:	bf16      	itet	ne
 801859c:	6063      	strne	r3, [r4, #4]
 801859e:	6013      	streq	r3, [r2, #0]
 80185a0:	460c      	movne	r4, r1
 80185a2:	e7eb      	b.n	801857c <_malloc_r+0x64>
 80185a4:	460c      	mov	r4, r1
 80185a6:	6849      	ldr	r1, [r1, #4]
 80185a8:	e7cc      	b.n	8018544 <_malloc_r+0x2c>
 80185aa:	1cc4      	adds	r4, r0, #3
 80185ac:	f024 0403 	bic.w	r4, r4, #3
 80185b0:	42a0      	cmp	r0, r4
 80185b2:	d005      	beq.n	80185c0 <_malloc_r+0xa8>
 80185b4:	1a21      	subs	r1, r4, r0
 80185b6:	4630      	mov	r0, r6
 80185b8:	f000 f884 	bl	80186c4 <_sbrk_r>
 80185bc:	3001      	adds	r0, #1
 80185be:	d0cf      	beq.n	8018560 <_malloc_r+0x48>
 80185c0:	6025      	str	r5, [r4, #0]
 80185c2:	e7db      	b.n	801857c <_malloc_r+0x64>
 80185c4:	24040384 	.word	0x24040384
 80185c8:	24040388 	.word	0x24040388

080185cc <iprintf>:
 80185cc:	b40f      	push	{r0, r1, r2, r3}
 80185ce:	4b0a      	ldr	r3, [pc, #40]	; (80185f8 <iprintf+0x2c>)
 80185d0:	b513      	push	{r0, r1, r4, lr}
 80185d2:	681c      	ldr	r4, [r3, #0]
 80185d4:	b124      	cbz	r4, 80185e0 <iprintf+0x14>
 80185d6:	69a3      	ldr	r3, [r4, #24]
 80185d8:	b913      	cbnz	r3, 80185e0 <iprintf+0x14>
 80185da:	4620      	mov	r0, r4
 80185dc:	f000 fa86 	bl	8018aec <__sinit>
 80185e0:	ab05      	add	r3, sp, #20
 80185e2:	9a04      	ldr	r2, [sp, #16]
 80185e4:	68a1      	ldr	r1, [r4, #8]
 80185e6:	9301      	str	r3, [sp, #4]
 80185e8:	4620      	mov	r0, r4
 80185ea:	f000 fceb 	bl	8018fc4 <_vfiprintf_r>
 80185ee:	b002      	add	sp, #8
 80185f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185f4:	b004      	add	sp, #16
 80185f6:	4770      	bx	lr
 80185f8:	24000174 	.word	0x24000174

080185fc <_puts_r>:
 80185fc:	b570      	push	{r4, r5, r6, lr}
 80185fe:	460e      	mov	r6, r1
 8018600:	4605      	mov	r5, r0
 8018602:	b118      	cbz	r0, 801860c <_puts_r+0x10>
 8018604:	6983      	ldr	r3, [r0, #24]
 8018606:	b90b      	cbnz	r3, 801860c <_puts_r+0x10>
 8018608:	f000 fa70 	bl	8018aec <__sinit>
 801860c:	69ab      	ldr	r3, [r5, #24]
 801860e:	68ac      	ldr	r4, [r5, #8]
 8018610:	b913      	cbnz	r3, 8018618 <_puts_r+0x1c>
 8018612:	4628      	mov	r0, r5
 8018614:	f000 fa6a 	bl	8018aec <__sinit>
 8018618:	4b23      	ldr	r3, [pc, #140]	; (80186a8 <_puts_r+0xac>)
 801861a:	429c      	cmp	r4, r3
 801861c:	d117      	bne.n	801864e <_puts_r+0x52>
 801861e:	686c      	ldr	r4, [r5, #4]
 8018620:	89a3      	ldrh	r3, [r4, #12]
 8018622:	071b      	lsls	r3, r3, #28
 8018624:	d51d      	bpl.n	8018662 <_puts_r+0x66>
 8018626:	6923      	ldr	r3, [r4, #16]
 8018628:	b1db      	cbz	r3, 8018662 <_puts_r+0x66>
 801862a:	3e01      	subs	r6, #1
 801862c:	68a3      	ldr	r3, [r4, #8]
 801862e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018632:	3b01      	subs	r3, #1
 8018634:	60a3      	str	r3, [r4, #8]
 8018636:	b9e9      	cbnz	r1, 8018674 <_puts_r+0x78>
 8018638:	2b00      	cmp	r3, #0
 801863a:	da2e      	bge.n	801869a <_puts_r+0x9e>
 801863c:	4622      	mov	r2, r4
 801863e:	210a      	movs	r1, #10
 8018640:	4628      	mov	r0, r5
 8018642:	f000 f8a3 	bl	801878c <__swbuf_r>
 8018646:	3001      	adds	r0, #1
 8018648:	d011      	beq.n	801866e <_puts_r+0x72>
 801864a:	200a      	movs	r0, #10
 801864c:	e011      	b.n	8018672 <_puts_r+0x76>
 801864e:	4b17      	ldr	r3, [pc, #92]	; (80186ac <_puts_r+0xb0>)
 8018650:	429c      	cmp	r4, r3
 8018652:	d101      	bne.n	8018658 <_puts_r+0x5c>
 8018654:	68ac      	ldr	r4, [r5, #8]
 8018656:	e7e3      	b.n	8018620 <_puts_r+0x24>
 8018658:	4b15      	ldr	r3, [pc, #84]	; (80186b0 <_puts_r+0xb4>)
 801865a:	429c      	cmp	r4, r3
 801865c:	bf08      	it	eq
 801865e:	68ec      	ldreq	r4, [r5, #12]
 8018660:	e7de      	b.n	8018620 <_puts_r+0x24>
 8018662:	4621      	mov	r1, r4
 8018664:	4628      	mov	r0, r5
 8018666:	f000 f8e3 	bl	8018830 <__swsetup_r>
 801866a:	2800      	cmp	r0, #0
 801866c:	d0dd      	beq.n	801862a <_puts_r+0x2e>
 801866e:	f04f 30ff 	mov.w	r0, #4294967295
 8018672:	bd70      	pop	{r4, r5, r6, pc}
 8018674:	2b00      	cmp	r3, #0
 8018676:	da04      	bge.n	8018682 <_puts_r+0x86>
 8018678:	69a2      	ldr	r2, [r4, #24]
 801867a:	429a      	cmp	r2, r3
 801867c:	dc06      	bgt.n	801868c <_puts_r+0x90>
 801867e:	290a      	cmp	r1, #10
 8018680:	d004      	beq.n	801868c <_puts_r+0x90>
 8018682:	6823      	ldr	r3, [r4, #0]
 8018684:	1c5a      	adds	r2, r3, #1
 8018686:	6022      	str	r2, [r4, #0]
 8018688:	7019      	strb	r1, [r3, #0]
 801868a:	e7cf      	b.n	801862c <_puts_r+0x30>
 801868c:	4622      	mov	r2, r4
 801868e:	4628      	mov	r0, r5
 8018690:	f000 f87c 	bl	801878c <__swbuf_r>
 8018694:	3001      	adds	r0, #1
 8018696:	d1c9      	bne.n	801862c <_puts_r+0x30>
 8018698:	e7e9      	b.n	801866e <_puts_r+0x72>
 801869a:	6823      	ldr	r3, [r4, #0]
 801869c:	200a      	movs	r0, #10
 801869e:	1c5a      	adds	r2, r3, #1
 80186a0:	6022      	str	r2, [r4, #0]
 80186a2:	7018      	strb	r0, [r3, #0]
 80186a4:	e7e5      	b.n	8018672 <_puts_r+0x76>
 80186a6:	bf00      	nop
 80186a8:	08019fdc 	.word	0x08019fdc
 80186ac:	08019ffc 	.word	0x08019ffc
 80186b0:	08019fbc 	.word	0x08019fbc

080186b4 <puts>:
 80186b4:	4b02      	ldr	r3, [pc, #8]	; (80186c0 <puts+0xc>)
 80186b6:	4601      	mov	r1, r0
 80186b8:	6818      	ldr	r0, [r3, #0]
 80186ba:	f7ff bf9f 	b.w	80185fc <_puts_r>
 80186be:	bf00      	nop
 80186c0:	24000174 	.word	0x24000174

080186c4 <_sbrk_r>:
 80186c4:	b538      	push	{r3, r4, r5, lr}
 80186c6:	4c06      	ldr	r4, [pc, #24]	; (80186e0 <_sbrk_r+0x1c>)
 80186c8:	2300      	movs	r3, #0
 80186ca:	4605      	mov	r5, r0
 80186cc:	4608      	mov	r0, r1
 80186ce:	6023      	str	r3, [r4, #0]
 80186d0:	f7ea fdf8 	bl	80032c4 <_sbrk>
 80186d4:	1c43      	adds	r3, r0, #1
 80186d6:	d102      	bne.n	80186de <_sbrk_r+0x1a>
 80186d8:	6823      	ldr	r3, [r4, #0]
 80186da:	b103      	cbz	r3, 80186de <_sbrk_r+0x1a>
 80186dc:	602b      	str	r3, [r5, #0]
 80186de:	bd38      	pop	{r3, r4, r5, pc}
 80186e0:	24041c84 	.word	0x24041c84

080186e4 <sniprintf>:
 80186e4:	b40c      	push	{r2, r3}
 80186e6:	b530      	push	{r4, r5, lr}
 80186e8:	4b17      	ldr	r3, [pc, #92]	; (8018748 <sniprintf+0x64>)
 80186ea:	1e0c      	subs	r4, r1, #0
 80186ec:	b09d      	sub	sp, #116	; 0x74
 80186ee:	681d      	ldr	r5, [r3, #0]
 80186f0:	da08      	bge.n	8018704 <sniprintf+0x20>
 80186f2:	238b      	movs	r3, #139	; 0x8b
 80186f4:	602b      	str	r3, [r5, #0]
 80186f6:	f04f 30ff 	mov.w	r0, #4294967295
 80186fa:	b01d      	add	sp, #116	; 0x74
 80186fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018700:	b002      	add	sp, #8
 8018702:	4770      	bx	lr
 8018704:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018708:	f8ad 3014 	strh.w	r3, [sp, #20]
 801870c:	bf14      	ite	ne
 801870e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018712:	4623      	moveq	r3, r4
 8018714:	9304      	str	r3, [sp, #16]
 8018716:	9307      	str	r3, [sp, #28]
 8018718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801871c:	9002      	str	r0, [sp, #8]
 801871e:	9006      	str	r0, [sp, #24]
 8018720:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018724:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018726:	ab21      	add	r3, sp, #132	; 0x84
 8018728:	a902      	add	r1, sp, #8
 801872a:	4628      	mov	r0, r5
 801872c:	9301      	str	r3, [sp, #4]
 801872e:	f000 fb27 	bl	8018d80 <_svfiprintf_r>
 8018732:	1c43      	adds	r3, r0, #1
 8018734:	bfbc      	itt	lt
 8018736:	238b      	movlt	r3, #139	; 0x8b
 8018738:	602b      	strlt	r3, [r5, #0]
 801873a:	2c00      	cmp	r4, #0
 801873c:	d0dd      	beq.n	80186fa <sniprintf+0x16>
 801873e:	9b02      	ldr	r3, [sp, #8]
 8018740:	2200      	movs	r2, #0
 8018742:	701a      	strb	r2, [r3, #0]
 8018744:	e7d9      	b.n	80186fa <sniprintf+0x16>
 8018746:	bf00      	nop
 8018748:	24000174 	.word	0x24000174

0801874c <siprintf>:
 801874c:	b40e      	push	{r1, r2, r3}
 801874e:	b500      	push	{lr}
 8018750:	b09c      	sub	sp, #112	; 0x70
 8018752:	ab1d      	add	r3, sp, #116	; 0x74
 8018754:	9002      	str	r0, [sp, #8]
 8018756:	9006      	str	r0, [sp, #24]
 8018758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801875c:	4809      	ldr	r0, [pc, #36]	; (8018784 <siprintf+0x38>)
 801875e:	9107      	str	r1, [sp, #28]
 8018760:	9104      	str	r1, [sp, #16]
 8018762:	4909      	ldr	r1, [pc, #36]	; (8018788 <siprintf+0x3c>)
 8018764:	f853 2b04 	ldr.w	r2, [r3], #4
 8018768:	9105      	str	r1, [sp, #20]
 801876a:	6800      	ldr	r0, [r0, #0]
 801876c:	9301      	str	r3, [sp, #4]
 801876e:	a902      	add	r1, sp, #8
 8018770:	f000 fb06 	bl	8018d80 <_svfiprintf_r>
 8018774:	9b02      	ldr	r3, [sp, #8]
 8018776:	2200      	movs	r2, #0
 8018778:	701a      	strb	r2, [r3, #0]
 801877a:	b01c      	add	sp, #112	; 0x70
 801877c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018780:	b003      	add	sp, #12
 8018782:	4770      	bx	lr
 8018784:	24000174 	.word	0x24000174
 8018788:	ffff0208 	.word	0xffff0208

0801878c <__swbuf_r>:
 801878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801878e:	460e      	mov	r6, r1
 8018790:	4614      	mov	r4, r2
 8018792:	4605      	mov	r5, r0
 8018794:	b118      	cbz	r0, 801879e <__swbuf_r+0x12>
 8018796:	6983      	ldr	r3, [r0, #24]
 8018798:	b90b      	cbnz	r3, 801879e <__swbuf_r+0x12>
 801879a:	f000 f9a7 	bl	8018aec <__sinit>
 801879e:	4b21      	ldr	r3, [pc, #132]	; (8018824 <__swbuf_r+0x98>)
 80187a0:	429c      	cmp	r4, r3
 80187a2:	d12a      	bne.n	80187fa <__swbuf_r+0x6e>
 80187a4:	686c      	ldr	r4, [r5, #4]
 80187a6:	69a3      	ldr	r3, [r4, #24]
 80187a8:	60a3      	str	r3, [r4, #8]
 80187aa:	89a3      	ldrh	r3, [r4, #12]
 80187ac:	071a      	lsls	r2, r3, #28
 80187ae:	d52e      	bpl.n	801880e <__swbuf_r+0x82>
 80187b0:	6923      	ldr	r3, [r4, #16]
 80187b2:	b363      	cbz	r3, 801880e <__swbuf_r+0x82>
 80187b4:	6923      	ldr	r3, [r4, #16]
 80187b6:	6820      	ldr	r0, [r4, #0]
 80187b8:	1ac0      	subs	r0, r0, r3
 80187ba:	6963      	ldr	r3, [r4, #20]
 80187bc:	b2f6      	uxtb	r6, r6
 80187be:	4283      	cmp	r3, r0
 80187c0:	4637      	mov	r7, r6
 80187c2:	dc04      	bgt.n	80187ce <__swbuf_r+0x42>
 80187c4:	4621      	mov	r1, r4
 80187c6:	4628      	mov	r0, r5
 80187c8:	f000 f926 	bl	8018a18 <_fflush_r>
 80187cc:	bb28      	cbnz	r0, 801881a <__swbuf_r+0x8e>
 80187ce:	68a3      	ldr	r3, [r4, #8]
 80187d0:	3b01      	subs	r3, #1
 80187d2:	60a3      	str	r3, [r4, #8]
 80187d4:	6823      	ldr	r3, [r4, #0]
 80187d6:	1c5a      	adds	r2, r3, #1
 80187d8:	6022      	str	r2, [r4, #0]
 80187da:	701e      	strb	r6, [r3, #0]
 80187dc:	6963      	ldr	r3, [r4, #20]
 80187de:	3001      	adds	r0, #1
 80187e0:	4283      	cmp	r3, r0
 80187e2:	d004      	beq.n	80187ee <__swbuf_r+0x62>
 80187e4:	89a3      	ldrh	r3, [r4, #12]
 80187e6:	07db      	lsls	r3, r3, #31
 80187e8:	d519      	bpl.n	801881e <__swbuf_r+0x92>
 80187ea:	2e0a      	cmp	r6, #10
 80187ec:	d117      	bne.n	801881e <__swbuf_r+0x92>
 80187ee:	4621      	mov	r1, r4
 80187f0:	4628      	mov	r0, r5
 80187f2:	f000 f911 	bl	8018a18 <_fflush_r>
 80187f6:	b190      	cbz	r0, 801881e <__swbuf_r+0x92>
 80187f8:	e00f      	b.n	801881a <__swbuf_r+0x8e>
 80187fa:	4b0b      	ldr	r3, [pc, #44]	; (8018828 <__swbuf_r+0x9c>)
 80187fc:	429c      	cmp	r4, r3
 80187fe:	d101      	bne.n	8018804 <__swbuf_r+0x78>
 8018800:	68ac      	ldr	r4, [r5, #8]
 8018802:	e7d0      	b.n	80187a6 <__swbuf_r+0x1a>
 8018804:	4b09      	ldr	r3, [pc, #36]	; (801882c <__swbuf_r+0xa0>)
 8018806:	429c      	cmp	r4, r3
 8018808:	bf08      	it	eq
 801880a:	68ec      	ldreq	r4, [r5, #12]
 801880c:	e7cb      	b.n	80187a6 <__swbuf_r+0x1a>
 801880e:	4621      	mov	r1, r4
 8018810:	4628      	mov	r0, r5
 8018812:	f000 f80d 	bl	8018830 <__swsetup_r>
 8018816:	2800      	cmp	r0, #0
 8018818:	d0cc      	beq.n	80187b4 <__swbuf_r+0x28>
 801881a:	f04f 37ff 	mov.w	r7, #4294967295
 801881e:	4638      	mov	r0, r7
 8018820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018822:	bf00      	nop
 8018824:	08019fdc 	.word	0x08019fdc
 8018828:	08019ffc 	.word	0x08019ffc
 801882c:	08019fbc 	.word	0x08019fbc

08018830 <__swsetup_r>:
 8018830:	4b32      	ldr	r3, [pc, #200]	; (80188fc <__swsetup_r+0xcc>)
 8018832:	b570      	push	{r4, r5, r6, lr}
 8018834:	681d      	ldr	r5, [r3, #0]
 8018836:	4606      	mov	r6, r0
 8018838:	460c      	mov	r4, r1
 801883a:	b125      	cbz	r5, 8018846 <__swsetup_r+0x16>
 801883c:	69ab      	ldr	r3, [r5, #24]
 801883e:	b913      	cbnz	r3, 8018846 <__swsetup_r+0x16>
 8018840:	4628      	mov	r0, r5
 8018842:	f000 f953 	bl	8018aec <__sinit>
 8018846:	4b2e      	ldr	r3, [pc, #184]	; (8018900 <__swsetup_r+0xd0>)
 8018848:	429c      	cmp	r4, r3
 801884a:	d10f      	bne.n	801886c <__swsetup_r+0x3c>
 801884c:	686c      	ldr	r4, [r5, #4]
 801884e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018852:	b29a      	uxth	r2, r3
 8018854:	0715      	lsls	r5, r2, #28
 8018856:	d42c      	bmi.n	80188b2 <__swsetup_r+0x82>
 8018858:	06d0      	lsls	r0, r2, #27
 801885a:	d411      	bmi.n	8018880 <__swsetup_r+0x50>
 801885c:	2209      	movs	r2, #9
 801885e:	6032      	str	r2, [r6, #0]
 8018860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018864:	81a3      	strh	r3, [r4, #12]
 8018866:	f04f 30ff 	mov.w	r0, #4294967295
 801886a:	e03e      	b.n	80188ea <__swsetup_r+0xba>
 801886c:	4b25      	ldr	r3, [pc, #148]	; (8018904 <__swsetup_r+0xd4>)
 801886e:	429c      	cmp	r4, r3
 8018870:	d101      	bne.n	8018876 <__swsetup_r+0x46>
 8018872:	68ac      	ldr	r4, [r5, #8]
 8018874:	e7eb      	b.n	801884e <__swsetup_r+0x1e>
 8018876:	4b24      	ldr	r3, [pc, #144]	; (8018908 <__swsetup_r+0xd8>)
 8018878:	429c      	cmp	r4, r3
 801887a:	bf08      	it	eq
 801887c:	68ec      	ldreq	r4, [r5, #12]
 801887e:	e7e6      	b.n	801884e <__swsetup_r+0x1e>
 8018880:	0751      	lsls	r1, r2, #29
 8018882:	d512      	bpl.n	80188aa <__swsetup_r+0x7a>
 8018884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018886:	b141      	cbz	r1, 801889a <__swsetup_r+0x6a>
 8018888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801888c:	4299      	cmp	r1, r3
 801888e:	d002      	beq.n	8018896 <__swsetup_r+0x66>
 8018890:	4630      	mov	r0, r6
 8018892:	f7ff fdf3 	bl	801847c <_free_r>
 8018896:	2300      	movs	r3, #0
 8018898:	6363      	str	r3, [r4, #52]	; 0x34
 801889a:	89a3      	ldrh	r3, [r4, #12]
 801889c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80188a0:	81a3      	strh	r3, [r4, #12]
 80188a2:	2300      	movs	r3, #0
 80188a4:	6063      	str	r3, [r4, #4]
 80188a6:	6923      	ldr	r3, [r4, #16]
 80188a8:	6023      	str	r3, [r4, #0]
 80188aa:	89a3      	ldrh	r3, [r4, #12]
 80188ac:	f043 0308 	orr.w	r3, r3, #8
 80188b0:	81a3      	strh	r3, [r4, #12]
 80188b2:	6923      	ldr	r3, [r4, #16]
 80188b4:	b94b      	cbnz	r3, 80188ca <__swsetup_r+0x9a>
 80188b6:	89a3      	ldrh	r3, [r4, #12]
 80188b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80188bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80188c0:	d003      	beq.n	80188ca <__swsetup_r+0x9a>
 80188c2:	4621      	mov	r1, r4
 80188c4:	4630      	mov	r0, r6
 80188c6:	f000 f9bf 	bl	8018c48 <__smakebuf_r>
 80188ca:	89a2      	ldrh	r2, [r4, #12]
 80188cc:	f012 0301 	ands.w	r3, r2, #1
 80188d0:	d00c      	beq.n	80188ec <__swsetup_r+0xbc>
 80188d2:	2300      	movs	r3, #0
 80188d4:	60a3      	str	r3, [r4, #8]
 80188d6:	6963      	ldr	r3, [r4, #20]
 80188d8:	425b      	negs	r3, r3
 80188da:	61a3      	str	r3, [r4, #24]
 80188dc:	6923      	ldr	r3, [r4, #16]
 80188de:	b953      	cbnz	r3, 80188f6 <__swsetup_r+0xc6>
 80188e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80188e8:	d1ba      	bne.n	8018860 <__swsetup_r+0x30>
 80188ea:	bd70      	pop	{r4, r5, r6, pc}
 80188ec:	0792      	lsls	r2, r2, #30
 80188ee:	bf58      	it	pl
 80188f0:	6963      	ldrpl	r3, [r4, #20]
 80188f2:	60a3      	str	r3, [r4, #8]
 80188f4:	e7f2      	b.n	80188dc <__swsetup_r+0xac>
 80188f6:	2000      	movs	r0, #0
 80188f8:	e7f7      	b.n	80188ea <__swsetup_r+0xba>
 80188fa:	bf00      	nop
 80188fc:	24000174 	.word	0x24000174
 8018900:	08019fdc 	.word	0x08019fdc
 8018904:	08019ffc 	.word	0x08019ffc
 8018908:	08019fbc 	.word	0x08019fbc

0801890c <__sflush_r>:
 801890c:	898a      	ldrh	r2, [r1, #12]
 801890e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018912:	4605      	mov	r5, r0
 8018914:	0710      	lsls	r0, r2, #28
 8018916:	460c      	mov	r4, r1
 8018918:	d458      	bmi.n	80189cc <__sflush_r+0xc0>
 801891a:	684b      	ldr	r3, [r1, #4]
 801891c:	2b00      	cmp	r3, #0
 801891e:	dc05      	bgt.n	801892c <__sflush_r+0x20>
 8018920:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018922:	2b00      	cmp	r3, #0
 8018924:	dc02      	bgt.n	801892c <__sflush_r+0x20>
 8018926:	2000      	movs	r0, #0
 8018928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801892c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801892e:	2e00      	cmp	r6, #0
 8018930:	d0f9      	beq.n	8018926 <__sflush_r+0x1a>
 8018932:	2300      	movs	r3, #0
 8018934:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018938:	682f      	ldr	r7, [r5, #0]
 801893a:	6a21      	ldr	r1, [r4, #32]
 801893c:	602b      	str	r3, [r5, #0]
 801893e:	d032      	beq.n	80189a6 <__sflush_r+0x9a>
 8018940:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018942:	89a3      	ldrh	r3, [r4, #12]
 8018944:	075a      	lsls	r2, r3, #29
 8018946:	d505      	bpl.n	8018954 <__sflush_r+0x48>
 8018948:	6863      	ldr	r3, [r4, #4]
 801894a:	1ac0      	subs	r0, r0, r3
 801894c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801894e:	b10b      	cbz	r3, 8018954 <__sflush_r+0x48>
 8018950:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018952:	1ac0      	subs	r0, r0, r3
 8018954:	2300      	movs	r3, #0
 8018956:	4602      	mov	r2, r0
 8018958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801895a:	6a21      	ldr	r1, [r4, #32]
 801895c:	4628      	mov	r0, r5
 801895e:	47b0      	blx	r6
 8018960:	1c43      	adds	r3, r0, #1
 8018962:	89a3      	ldrh	r3, [r4, #12]
 8018964:	d106      	bne.n	8018974 <__sflush_r+0x68>
 8018966:	6829      	ldr	r1, [r5, #0]
 8018968:	291d      	cmp	r1, #29
 801896a:	d848      	bhi.n	80189fe <__sflush_r+0xf2>
 801896c:	4a29      	ldr	r2, [pc, #164]	; (8018a14 <__sflush_r+0x108>)
 801896e:	40ca      	lsrs	r2, r1
 8018970:	07d6      	lsls	r6, r2, #31
 8018972:	d544      	bpl.n	80189fe <__sflush_r+0xf2>
 8018974:	2200      	movs	r2, #0
 8018976:	6062      	str	r2, [r4, #4]
 8018978:	04d9      	lsls	r1, r3, #19
 801897a:	6922      	ldr	r2, [r4, #16]
 801897c:	6022      	str	r2, [r4, #0]
 801897e:	d504      	bpl.n	801898a <__sflush_r+0x7e>
 8018980:	1c42      	adds	r2, r0, #1
 8018982:	d101      	bne.n	8018988 <__sflush_r+0x7c>
 8018984:	682b      	ldr	r3, [r5, #0]
 8018986:	b903      	cbnz	r3, 801898a <__sflush_r+0x7e>
 8018988:	6560      	str	r0, [r4, #84]	; 0x54
 801898a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801898c:	602f      	str	r7, [r5, #0]
 801898e:	2900      	cmp	r1, #0
 8018990:	d0c9      	beq.n	8018926 <__sflush_r+0x1a>
 8018992:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018996:	4299      	cmp	r1, r3
 8018998:	d002      	beq.n	80189a0 <__sflush_r+0x94>
 801899a:	4628      	mov	r0, r5
 801899c:	f7ff fd6e 	bl	801847c <_free_r>
 80189a0:	2000      	movs	r0, #0
 80189a2:	6360      	str	r0, [r4, #52]	; 0x34
 80189a4:	e7c0      	b.n	8018928 <__sflush_r+0x1c>
 80189a6:	2301      	movs	r3, #1
 80189a8:	4628      	mov	r0, r5
 80189aa:	47b0      	blx	r6
 80189ac:	1c41      	adds	r1, r0, #1
 80189ae:	d1c8      	bne.n	8018942 <__sflush_r+0x36>
 80189b0:	682b      	ldr	r3, [r5, #0]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d0c5      	beq.n	8018942 <__sflush_r+0x36>
 80189b6:	2b1d      	cmp	r3, #29
 80189b8:	d001      	beq.n	80189be <__sflush_r+0xb2>
 80189ba:	2b16      	cmp	r3, #22
 80189bc:	d101      	bne.n	80189c2 <__sflush_r+0xb6>
 80189be:	602f      	str	r7, [r5, #0]
 80189c0:	e7b1      	b.n	8018926 <__sflush_r+0x1a>
 80189c2:	89a3      	ldrh	r3, [r4, #12]
 80189c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189c8:	81a3      	strh	r3, [r4, #12]
 80189ca:	e7ad      	b.n	8018928 <__sflush_r+0x1c>
 80189cc:	690f      	ldr	r7, [r1, #16]
 80189ce:	2f00      	cmp	r7, #0
 80189d0:	d0a9      	beq.n	8018926 <__sflush_r+0x1a>
 80189d2:	0793      	lsls	r3, r2, #30
 80189d4:	680e      	ldr	r6, [r1, #0]
 80189d6:	bf08      	it	eq
 80189d8:	694b      	ldreq	r3, [r1, #20]
 80189da:	600f      	str	r7, [r1, #0]
 80189dc:	bf18      	it	ne
 80189de:	2300      	movne	r3, #0
 80189e0:	eba6 0807 	sub.w	r8, r6, r7
 80189e4:	608b      	str	r3, [r1, #8]
 80189e6:	f1b8 0f00 	cmp.w	r8, #0
 80189ea:	dd9c      	ble.n	8018926 <__sflush_r+0x1a>
 80189ec:	4643      	mov	r3, r8
 80189ee:	463a      	mov	r2, r7
 80189f0:	6a21      	ldr	r1, [r4, #32]
 80189f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80189f4:	4628      	mov	r0, r5
 80189f6:	47b0      	blx	r6
 80189f8:	2800      	cmp	r0, #0
 80189fa:	dc06      	bgt.n	8018a0a <__sflush_r+0xfe>
 80189fc:	89a3      	ldrh	r3, [r4, #12]
 80189fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a02:	81a3      	strh	r3, [r4, #12]
 8018a04:	f04f 30ff 	mov.w	r0, #4294967295
 8018a08:	e78e      	b.n	8018928 <__sflush_r+0x1c>
 8018a0a:	4407      	add	r7, r0
 8018a0c:	eba8 0800 	sub.w	r8, r8, r0
 8018a10:	e7e9      	b.n	80189e6 <__sflush_r+0xda>
 8018a12:	bf00      	nop
 8018a14:	20400001 	.word	0x20400001

08018a18 <_fflush_r>:
 8018a18:	b538      	push	{r3, r4, r5, lr}
 8018a1a:	690b      	ldr	r3, [r1, #16]
 8018a1c:	4605      	mov	r5, r0
 8018a1e:	460c      	mov	r4, r1
 8018a20:	b1db      	cbz	r3, 8018a5a <_fflush_r+0x42>
 8018a22:	b118      	cbz	r0, 8018a2c <_fflush_r+0x14>
 8018a24:	6983      	ldr	r3, [r0, #24]
 8018a26:	b90b      	cbnz	r3, 8018a2c <_fflush_r+0x14>
 8018a28:	f000 f860 	bl	8018aec <__sinit>
 8018a2c:	4b0c      	ldr	r3, [pc, #48]	; (8018a60 <_fflush_r+0x48>)
 8018a2e:	429c      	cmp	r4, r3
 8018a30:	d109      	bne.n	8018a46 <_fflush_r+0x2e>
 8018a32:	686c      	ldr	r4, [r5, #4]
 8018a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a38:	b17b      	cbz	r3, 8018a5a <_fflush_r+0x42>
 8018a3a:	4621      	mov	r1, r4
 8018a3c:	4628      	mov	r0, r5
 8018a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018a42:	f7ff bf63 	b.w	801890c <__sflush_r>
 8018a46:	4b07      	ldr	r3, [pc, #28]	; (8018a64 <_fflush_r+0x4c>)
 8018a48:	429c      	cmp	r4, r3
 8018a4a:	d101      	bne.n	8018a50 <_fflush_r+0x38>
 8018a4c:	68ac      	ldr	r4, [r5, #8]
 8018a4e:	e7f1      	b.n	8018a34 <_fflush_r+0x1c>
 8018a50:	4b05      	ldr	r3, [pc, #20]	; (8018a68 <_fflush_r+0x50>)
 8018a52:	429c      	cmp	r4, r3
 8018a54:	bf08      	it	eq
 8018a56:	68ec      	ldreq	r4, [r5, #12]
 8018a58:	e7ec      	b.n	8018a34 <_fflush_r+0x1c>
 8018a5a:	2000      	movs	r0, #0
 8018a5c:	bd38      	pop	{r3, r4, r5, pc}
 8018a5e:	bf00      	nop
 8018a60:	08019fdc 	.word	0x08019fdc
 8018a64:	08019ffc 	.word	0x08019ffc
 8018a68:	08019fbc 	.word	0x08019fbc

08018a6c <std>:
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	b510      	push	{r4, lr}
 8018a70:	4604      	mov	r4, r0
 8018a72:	e9c0 3300 	strd	r3, r3, [r0]
 8018a76:	6083      	str	r3, [r0, #8]
 8018a78:	8181      	strh	r1, [r0, #12]
 8018a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8018a7c:	81c2      	strh	r2, [r0, #14]
 8018a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018a82:	6183      	str	r3, [r0, #24]
 8018a84:	4619      	mov	r1, r3
 8018a86:	2208      	movs	r2, #8
 8018a88:	305c      	adds	r0, #92	; 0x5c
 8018a8a:	f7ff fcee 	bl	801846a <memset>
 8018a8e:	4b05      	ldr	r3, [pc, #20]	; (8018aa4 <std+0x38>)
 8018a90:	6263      	str	r3, [r4, #36]	; 0x24
 8018a92:	4b05      	ldr	r3, [pc, #20]	; (8018aa8 <std+0x3c>)
 8018a94:	62a3      	str	r3, [r4, #40]	; 0x28
 8018a96:	4b05      	ldr	r3, [pc, #20]	; (8018aac <std+0x40>)
 8018a98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018a9a:	4b05      	ldr	r3, [pc, #20]	; (8018ab0 <std+0x44>)
 8018a9c:	6224      	str	r4, [r4, #32]
 8018a9e:	6323      	str	r3, [r4, #48]	; 0x30
 8018aa0:	bd10      	pop	{r4, pc}
 8018aa2:	bf00      	nop
 8018aa4:	08019501 	.word	0x08019501
 8018aa8:	08019523 	.word	0x08019523
 8018aac:	0801955b 	.word	0x0801955b
 8018ab0:	0801957f 	.word	0x0801957f

08018ab4 <_cleanup_r>:
 8018ab4:	4901      	ldr	r1, [pc, #4]	; (8018abc <_cleanup_r+0x8>)
 8018ab6:	f000 b885 	b.w	8018bc4 <_fwalk_reent>
 8018aba:	bf00      	nop
 8018abc:	08018a19 	.word	0x08018a19

08018ac0 <__sfmoreglue>:
 8018ac0:	b570      	push	{r4, r5, r6, lr}
 8018ac2:	1e4a      	subs	r2, r1, #1
 8018ac4:	2568      	movs	r5, #104	; 0x68
 8018ac6:	4355      	muls	r5, r2
 8018ac8:	460e      	mov	r6, r1
 8018aca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018ace:	f7ff fd23 	bl	8018518 <_malloc_r>
 8018ad2:	4604      	mov	r4, r0
 8018ad4:	b140      	cbz	r0, 8018ae8 <__sfmoreglue+0x28>
 8018ad6:	2100      	movs	r1, #0
 8018ad8:	e9c0 1600 	strd	r1, r6, [r0]
 8018adc:	300c      	adds	r0, #12
 8018ade:	60a0      	str	r0, [r4, #8]
 8018ae0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018ae4:	f7ff fcc1 	bl	801846a <memset>
 8018ae8:	4620      	mov	r0, r4
 8018aea:	bd70      	pop	{r4, r5, r6, pc}

08018aec <__sinit>:
 8018aec:	6983      	ldr	r3, [r0, #24]
 8018aee:	b510      	push	{r4, lr}
 8018af0:	4604      	mov	r4, r0
 8018af2:	bb33      	cbnz	r3, 8018b42 <__sinit+0x56>
 8018af4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8018af8:	6503      	str	r3, [r0, #80]	; 0x50
 8018afa:	4b12      	ldr	r3, [pc, #72]	; (8018b44 <__sinit+0x58>)
 8018afc:	4a12      	ldr	r2, [pc, #72]	; (8018b48 <__sinit+0x5c>)
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	6282      	str	r2, [r0, #40]	; 0x28
 8018b02:	4298      	cmp	r0, r3
 8018b04:	bf04      	itt	eq
 8018b06:	2301      	moveq	r3, #1
 8018b08:	6183      	streq	r3, [r0, #24]
 8018b0a:	f000 f81f 	bl	8018b4c <__sfp>
 8018b0e:	6060      	str	r0, [r4, #4]
 8018b10:	4620      	mov	r0, r4
 8018b12:	f000 f81b 	bl	8018b4c <__sfp>
 8018b16:	60a0      	str	r0, [r4, #8]
 8018b18:	4620      	mov	r0, r4
 8018b1a:	f000 f817 	bl	8018b4c <__sfp>
 8018b1e:	2200      	movs	r2, #0
 8018b20:	60e0      	str	r0, [r4, #12]
 8018b22:	2104      	movs	r1, #4
 8018b24:	6860      	ldr	r0, [r4, #4]
 8018b26:	f7ff ffa1 	bl	8018a6c <std>
 8018b2a:	2201      	movs	r2, #1
 8018b2c:	2109      	movs	r1, #9
 8018b2e:	68a0      	ldr	r0, [r4, #8]
 8018b30:	f7ff ff9c 	bl	8018a6c <std>
 8018b34:	2202      	movs	r2, #2
 8018b36:	2112      	movs	r1, #18
 8018b38:	68e0      	ldr	r0, [r4, #12]
 8018b3a:	f7ff ff97 	bl	8018a6c <std>
 8018b3e:	2301      	movs	r3, #1
 8018b40:	61a3      	str	r3, [r4, #24]
 8018b42:	bd10      	pop	{r4, pc}
 8018b44:	08019fb8 	.word	0x08019fb8
 8018b48:	08018ab5 	.word	0x08018ab5

08018b4c <__sfp>:
 8018b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b4e:	4b1b      	ldr	r3, [pc, #108]	; (8018bbc <__sfp+0x70>)
 8018b50:	681e      	ldr	r6, [r3, #0]
 8018b52:	69b3      	ldr	r3, [r6, #24]
 8018b54:	4607      	mov	r7, r0
 8018b56:	b913      	cbnz	r3, 8018b5e <__sfp+0x12>
 8018b58:	4630      	mov	r0, r6
 8018b5a:	f7ff ffc7 	bl	8018aec <__sinit>
 8018b5e:	3648      	adds	r6, #72	; 0x48
 8018b60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018b64:	3b01      	subs	r3, #1
 8018b66:	d503      	bpl.n	8018b70 <__sfp+0x24>
 8018b68:	6833      	ldr	r3, [r6, #0]
 8018b6a:	b133      	cbz	r3, 8018b7a <__sfp+0x2e>
 8018b6c:	6836      	ldr	r6, [r6, #0]
 8018b6e:	e7f7      	b.n	8018b60 <__sfp+0x14>
 8018b70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018b74:	b16d      	cbz	r5, 8018b92 <__sfp+0x46>
 8018b76:	3468      	adds	r4, #104	; 0x68
 8018b78:	e7f4      	b.n	8018b64 <__sfp+0x18>
 8018b7a:	2104      	movs	r1, #4
 8018b7c:	4638      	mov	r0, r7
 8018b7e:	f7ff ff9f 	bl	8018ac0 <__sfmoreglue>
 8018b82:	6030      	str	r0, [r6, #0]
 8018b84:	2800      	cmp	r0, #0
 8018b86:	d1f1      	bne.n	8018b6c <__sfp+0x20>
 8018b88:	230c      	movs	r3, #12
 8018b8a:	603b      	str	r3, [r7, #0]
 8018b8c:	4604      	mov	r4, r0
 8018b8e:	4620      	mov	r0, r4
 8018b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b92:	4b0b      	ldr	r3, [pc, #44]	; (8018bc0 <__sfp+0x74>)
 8018b94:	6665      	str	r5, [r4, #100]	; 0x64
 8018b96:	e9c4 5500 	strd	r5, r5, [r4]
 8018b9a:	60a5      	str	r5, [r4, #8]
 8018b9c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018ba0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018ba4:	2208      	movs	r2, #8
 8018ba6:	4629      	mov	r1, r5
 8018ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018bac:	f7ff fc5d 	bl	801846a <memset>
 8018bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018bb8:	e7e9      	b.n	8018b8e <__sfp+0x42>
 8018bba:	bf00      	nop
 8018bbc:	08019fb8 	.word	0x08019fb8
 8018bc0:	ffff0001 	.word	0xffff0001

08018bc4 <_fwalk_reent>:
 8018bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bc8:	4680      	mov	r8, r0
 8018bca:	4689      	mov	r9, r1
 8018bcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018bd0:	2600      	movs	r6, #0
 8018bd2:	b914      	cbnz	r4, 8018bda <_fwalk_reent+0x16>
 8018bd4:	4630      	mov	r0, r6
 8018bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bda:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018bde:	3f01      	subs	r7, #1
 8018be0:	d501      	bpl.n	8018be6 <_fwalk_reent+0x22>
 8018be2:	6824      	ldr	r4, [r4, #0]
 8018be4:	e7f5      	b.n	8018bd2 <_fwalk_reent+0xe>
 8018be6:	89ab      	ldrh	r3, [r5, #12]
 8018be8:	2b01      	cmp	r3, #1
 8018bea:	d907      	bls.n	8018bfc <_fwalk_reent+0x38>
 8018bec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018bf0:	3301      	adds	r3, #1
 8018bf2:	d003      	beq.n	8018bfc <_fwalk_reent+0x38>
 8018bf4:	4629      	mov	r1, r5
 8018bf6:	4640      	mov	r0, r8
 8018bf8:	47c8      	blx	r9
 8018bfa:	4306      	orrs	r6, r0
 8018bfc:	3568      	adds	r5, #104	; 0x68
 8018bfe:	e7ee      	b.n	8018bde <_fwalk_reent+0x1a>

08018c00 <__swhatbuf_r>:
 8018c00:	b570      	push	{r4, r5, r6, lr}
 8018c02:	460e      	mov	r6, r1
 8018c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c08:	2900      	cmp	r1, #0
 8018c0a:	b096      	sub	sp, #88	; 0x58
 8018c0c:	4614      	mov	r4, r2
 8018c0e:	461d      	mov	r5, r3
 8018c10:	da07      	bge.n	8018c22 <__swhatbuf_r+0x22>
 8018c12:	2300      	movs	r3, #0
 8018c14:	602b      	str	r3, [r5, #0]
 8018c16:	89b3      	ldrh	r3, [r6, #12]
 8018c18:	061a      	lsls	r2, r3, #24
 8018c1a:	d410      	bmi.n	8018c3e <__swhatbuf_r+0x3e>
 8018c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018c20:	e00e      	b.n	8018c40 <__swhatbuf_r+0x40>
 8018c22:	466a      	mov	r2, sp
 8018c24:	f000 fcd2 	bl	80195cc <_fstat_r>
 8018c28:	2800      	cmp	r0, #0
 8018c2a:	dbf2      	blt.n	8018c12 <__swhatbuf_r+0x12>
 8018c2c:	9a01      	ldr	r2, [sp, #4]
 8018c2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018c32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018c36:	425a      	negs	r2, r3
 8018c38:	415a      	adcs	r2, r3
 8018c3a:	602a      	str	r2, [r5, #0]
 8018c3c:	e7ee      	b.n	8018c1c <__swhatbuf_r+0x1c>
 8018c3e:	2340      	movs	r3, #64	; 0x40
 8018c40:	2000      	movs	r0, #0
 8018c42:	6023      	str	r3, [r4, #0]
 8018c44:	b016      	add	sp, #88	; 0x58
 8018c46:	bd70      	pop	{r4, r5, r6, pc}

08018c48 <__smakebuf_r>:
 8018c48:	898b      	ldrh	r3, [r1, #12]
 8018c4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018c4c:	079d      	lsls	r5, r3, #30
 8018c4e:	4606      	mov	r6, r0
 8018c50:	460c      	mov	r4, r1
 8018c52:	d507      	bpl.n	8018c64 <__smakebuf_r+0x1c>
 8018c54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018c58:	6023      	str	r3, [r4, #0]
 8018c5a:	6123      	str	r3, [r4, #16]
 8018c5c:	2301      	movs	r3, #1
 8018c5e:	6163      	str	r3, [r4, #20]
 8018c60:	b002      	add	sp, #8
 8018c62:	bd70      	pop	{r4, r5, r6, pc}
 8018c64:	ab01      	add	r3, sp, #4
 8018c66:	466a      	mov	r2, sp
 8018c68:	f7ff ffca 	bl	8018c00 <__swhatbuf_r>
 8018c6c:	9900      	ldr	r1, [sp, #0]
 8018c6e:	4605      	mov	r5, r0
 8018c70:	4630      	mov	r0, r6
 8018c72:	f7ff fc51 	bl	8018518 <_malloc_r>
 8018c76:	b948      	cbnz	r0, 8018c8c <__smakebuf_r+0x44>
 8018c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c7c:	059a      	lsls	r2, r3, #22
 8018c7e:	d4ef      	bmi.n	8018c60 <__smakebuf_r+0x18>
 8018c80:	f023 0303 	bic.w	r3, r3, #3
 8018c84:	f043 0302 	orr.w	r3, r3, #2
 8018c88:	81a3      	strh	r3, [r4, #12]
 8018c8a:	e7e3      	b.n	8018c54 <__smakebuf_r+0xc>
 8018c8c:	4b0d      	ldr	r3, [pc, #52]	; (8018cc4 <__smakebuf_r+0x7c>)
 8018c8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8018c90:	89a3      	ldrh	r3, [r4, #12]
 8018c92:	6020      	str	r0, [r4, #0]
 8018c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018c98:	81a3      	strh	r3, [r4, #12]
 8018c9a:	9b00      	ldr	r3, [sp, #0]
 8018c9c:	6163      	str	r3, [r4, #20]
 8018c9e:	9b01      	ldr	r3, [sp, #4]
 8018ca0:	6120      	str	r0, [r4, #16]
 8018ca2:	b15b      	cbz	r3, 8018cbc <__smakebuf_r+0x74>
 8018ca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018ca8:	4630      	mov	r0, r6
 8018caa:	f000 fca1 	bl	80195f0 <_isatty_r>
 8018cae:	b128      	cbz	r0, 8018cbc <__smakebuf_r+0x74>
 8018cb0:	89a3      	ldrh	r3, [r4, #12]
 8018cb2:	f023 0303 	bic.w	r3, r3, #3
 8018cb6:	f043 0301 	orr.w	r3, r3, #1
 8018cba:	81a3      	strh	r3, [r4, #12]
 8018cbc:	89a3      	ldrh	r3, [r4, #12]
 8018cbe:	431d      	orrs	r5, r3
 8018cc0:	81a5      	strh	r5, [r4, #12]
 8018cc2:	e7cd      	b.n	8018c60 <__smakebuf_r+0x18>
 8018cc4:	08018ab5 	.word	0x08018ab5

08018cc8 <__malloc_lock>:
 8018cc8:	4770      	bx	lr

08018cca <__malloc_unlock>:
 8018cca:	4770      	bx	lr

08018ccc <__ssputs_r>:
 8018ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cd0:	688e      	ldr	r6, [r1, #8]
 8018cd2:	429e      	cmp	r6, r3
 8018cd4:	4682      	mov	sl, r0
 8018cd6:	460c      	mov	r4, r1
 8018cd8:	4690      	mov	r8, r2
 8018cda:	4699      	mov	r9, r3
 8018cdc:	d837      	bhi.n	8018d4e <__ssputs_r+0x82>
 8018cde:	898a      	ldrh	r2, [r1, #12]
 8018ce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018ce4:	d031      	beq.n	8018d4a <__ssputs_r+0x7e>
 8018ce6:	6825      	ldr	r5, [r4, #0]
 8018ce8:	6909      	ldr	r1, [r1, #16]
 8018cea:	1a6f      	subs	r7, r5, r1
 8018cec:	6965      	ldr	r5, [r4, #20]
 8018cee:	2302      	movs	r3, #2
 8018cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018cf4:	fb95 f5f3 	sdiv	r5, r5, r3
 8018cf8:	f109 0301 	add.w	r3, r9, #1
 8018cfc:	443b      	add	r3, r7
 8018cfe:	429d      	cmp	r5, r3
 8018d00:	bf38      	it	cc
 8018d02:	461d      	movcc	r5, r3
 8018d04:	0553      	lsls	r3, r2, #21
 8018d06:	d530      	bpl.n	8018d6a <__ssputs_r+0x9e>
 8018d08:	4629      	mov	r1, r5
 8018d0a:	f7ff fc05 	bl	8018518 <_malloc_r>
 8018d0e:	4606      	mov	r6, r0
 8018d10:	b950      	cbnz	r0, 8018d28 <__ssputs_r+0x5c>
 8018d12:	230c      	movs	r3, #12
 8018d14:	f8ca 3000 	str.w	r3, [sl]
 8018d18:	89a3      	ldrh	r3, [r4, #12]
 8018d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d1e:	81a3      	strh	r3, [r4, #12]
 8018d20:	f04f 30ff 	mov.w	r0, #4294967295
 8018d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d28:	463a      	mov	r2, r7
 8018d2a:	6921      	ldr	r1, [r4, #16]
 8018d2c:	f7ff fb92 	bl	8018454 <memcpy>
 8018d30:	89a3      	ldrh	r3, [r4, #12]
 8018d32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d3a:	81a3      	strh	r3, [r4, #12]
 8018d3c:	6126      	str	r6, [r4, #16]
 8018d3e:	6165      	str	r5, [r4, #20]
 8018d40:	443e      	add	r6, r7
 8018d42:	1bed      	subs	r5, r5, r7
 8018d44:	6026      	str	r6, [r4, #0]
 8018d46:	60a5      	str	r5, [r4, #8]
 8018d48:	464e      	mov	r6, r9
 8018d4a:	454e      	cmp	r6, r9
 8018d4c:	d900      	bls.n	8018d50 <__ssputs_r+0x84>
 8018d4e:	464e      	mov	r6, r9
 8018d50:	4632      	mov	r2, r6
 8018d52:	4641      	mov	r1, r8
 8018d54:	6820      	ldr	r0, [r4, #0]
 8018d56:	f000 fc6d 	bl	8019634 <memmove>
 8018d5a:	68a3      	ldr	r3, [r4, #8]
 8018d5c:	1b9b      	subs	r3, r3, r6
 8018d5e:	60a3      	str	r3, [r4, #8]
 8018d60:	6823      	ldr	r3, [r4, #0]
 8018d62:	441e      	add	r6, r3
 8018d64:	6026      	str	r6, [r4, #0]
 8018d66:	2000      	movs	r0, #0
 8018d68:	e7dc      	b.n	8018d24 <__ssputs_r+0x58>
 8018d6a:	462a      	mov	r2, r5
 8018d6c:	f000 fc7b 	bl	8019666 <_realloc_r>
 8018d70:	4606      	mov	r6, r0
 8018d72:	2800      	cmp	r0, #0
 8018d74:	d1e2      	bne.n	8018d3c <__ssputs_r+0x70>
 8018d76:	6921      	ldr	r1, [r4, #16]
 8018d78:	4650      	mov	r0, sl
 8018d7a:	f7ff fb7f 	bl	801847c <_free_r>
 8018d7e:	e7c8      	b.n	8018d12 <__ssputs_r+0x46>

08018d80 <_svfiprintf_r>:
 8018d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d84:	461d      	mov	r5, r3
 8018d86:	898b      	ldrh	r3, [r1, #12]
 8018d88:	061f      	lsls	r7, r3, #24
 8018d8a:	b09d      	sub	sp, #116	; 0x74
 8018d8c:	4680      	mov	r8, r0
 8018d8e:	460c      	mov	r4, r1
 8018d90:	4616      	mov	r6, r2
 8018d92:	d50f      	bpl.n	8018db4 <_svfiprintf_r+0x34>
 8018d94:	690b      	ldr	r3, [r1, #16]
 8018d96:	b96b      	cbnz	r3, 8018db4 <_svfiprintf_r+0x34>
 8018d98:	2140      	movs	r1, #64	; 0x40
 8018d9a:	f7ff fbbd 	bl	8018518 <_malloc_r>
 8018d9e:	6020      	str	r0, [r4, #0]
 8018da0:	6120      	str	r0, [r4, #16]
 8018da2:	b928      	cbnz	r0, 8018db0 <_svfiprintf_r+0x30>
 8018da4:	230c      	movs	r3, #12
 8018da6:	f8c8 3000 	str.w	r3, [r8]
 8018daa:	f04f 30ff 	mov.w	r0, #4294967295
 8018dae:	e0c8      	b.n	8018f42 <_svfiprintf_r+0x1c2>
 8018db0:	2340      	movs	r3, #64	; 0x40
 8018db2:	6163      	str	r3, [r4, #20]
 8018db4:	2300      	movs	r3, #0
 8018db6:	9309      	str	r3, [sp, #36]	; 0x24
 8018db8:	2320      	movs	r3, #32
 8018dba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018dbe:	2330      	movs	r3, #48	; 0x30
 8018dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018dc4:	9503      	str	r5, [sp, #12]
 8018dc6:	f04f 0b01 	mov.w	fp, #1
 8018dca:	4637      	mov	r7, r6
 8018dcc:	463d      	mov	r5, r7
 8018dce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018dd2:	b10b      	cbz	r3, 8018dd8 <_svfiprintf_r+0x58>
 8018dd4:	2b25      	cmp	r3, #37	; 0x25
 8018dd6:	d13e      	bne.n	8018e56 <_svfiprintf_r+0xd6>
 8018dd8:	ebb7 0a06 	subs.w	sl, r7, r6
 8018ddc:	d00b      	beq.n	8018df6 <_svfiprintf_r+0x76>
 8018dde:	4653      	mov	r3, sl
 8018de0:	4632      	mov	r2, r6
 8018de2:	4621      	mov	r1, r4
 8018de4:	4640      	mov	r0, r8
 8018de6:	f7ff ff71 	bl	8018ccc <__ssputs_r>
 8018dea:	3001      	adds	r0, #1
 8018dec:	f000 80a4 	beq.w	8018f38 <_svfiprintf_r+0x1b8>
 8018df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018df2:	4453      	add	r3, sl
 8018df4:	9309      	str	r3, [sp, #36]	; 0x24
 8018df6:	783b      	ldrb	r3, [r7, #0]
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	f000 809d 	beq.w	8018f38 <_svfiprintf_r+0x1b8>
 8018dfe:	2300      	movs	r3, #0
 8018e00:	f04f 32ff 	mov.w	r2, #4294967295
 8018e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018e08:	9304      	str	r3, [sp, #16]
 8018e0a:	9307      	str	r3, [sp, #28]
 8018e0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018e10:	931a      	str	r3, [sp, #104]	; 0x68
 8018e12:	462f      	mov	r7, r5
 8018e14:	2205      	movs	r2, #5
 8018e16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018e1a:	4850      	ldr	r0, [pc, #320]	; (8018f5c <_svfiprintf_r+0x1dc>)
 8018e1c:	f7e7 fa68 	bl	80002f0 <memchr>
 8018e20:	9b04      	ldr	r3, [sp, #16]
 8018e22:	b9d0      	cbnz	r0, 8018e5a <_svfiprintf_r+0xda>
 8018e24:	06d9      	lsls	r1, r3, #27
 8018e26:	bf44      	itt	mi
 8018e28:	2220      	movmi	r2, #32
 8018e2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018e2e:	071a      	lsls	r2, r3, #28
 8018e30:	bf44      	itt	mi
 8018e32:	222b      	movmi	r2, #43	; 0x2b
 8018e34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018e38:	782a      	ldrb	r2, [r5, #0]
 8018e3a:	2a2a      	cmp	r2, #42	; 0x2a
 8018e3c:	d015      	beq.n	8018e6a <_svfiprintf_r+0xea>
 8018e3e:	9a07      	ldr	r2, [sp, #28]
 8018e40:	462f      	mov	r7, r5
 8018e42:	2000      	movs	r0, #0
 8018e44:	250a      	movs	r5, #10
 8018e46:	4639      	mov	r1, r7
 8018e48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018e4c:	3b30      	subs	r3, #48	; 0x30
 8018e4e:	2b09      	cmp	r3, #9
 8018e50:	d94d      	bls.n	8018eee <_svfiprintf_r+0x16e>
 8018e52:	b1b8      	cbz	r0, 8018e84 <_svfiprintf_r+0x104>
 8018e54:	e00f      	b.n	8018e76 <_svfiprintf_r+0xf6>
 8018e56:	462f      	mov	r7, r5
 8018e58:	e7b8      	b.n	8018dcc <_svfiprintf_r+0x4c>
 8018e5a:	4a40      	ldr	r2, [pc, #256]	; (8018f5c <_svfiprintf_r+0x1dc>)
 8018e5c:	1a80      	subs	r0, r0, r2
 8018e5e:	fa0b f000 	lsl.w	r0, fp, r0
 8018e62:	4318      	orrs	r0, r3
 8018e64:	9004      	str	r0, [sp, #16]
 8018e66:	463d      	mov	r5, r7
 8018e68:	e7d3      	b.n	8018e12 <_svfiprintf_r+0x92>
 8018e6a:	9a03      	ldr	r2, [sp, #12]
 8018e6c:	1d11      	adds	r1, r2, #4
 8018e6e:	6812      	ldr	r2, [r2, #0]
 8018e70:	9103      	str	r1, [sp, #12]
 8018e72:	2a00      	cmp	r2, #0
 8018e74:	db01      	blt.n	8018e7a <_svfiprintf_r+0xfa>
 8018e76:	9207      	str	r2, [sp, #28]
 8018e78:	e004      	b.n	8018e84 <_svfiprintf_r+0x104>
 8018e7a:	4252      	negs	r2, r2
 8018e7c:	f043 0302 	orr.w	r3, r3, #2
 8018e80:	9207      	str	r2, [sp, #28]
 8018e82:	9304      	str	r3, [sp, #16]
 8018e84:	783b      	ldrb	r3, [r7, #0]
 8018e86:	2b2e      	cmp	r3, #46	; 0x2e
 8018e88:	d10c      	bne.n	8018ea4 <_svfiprintf_r+0x124>
 8018e8a:	787b      	ldrb	r3, [r7, #1]
 8018e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8018e8e:	d133      	bne.n	8018ef8 <_svfiprintf_r+0x178>
 8018e90:	9b03      	ldr	r3, [sp, #12]
 8018e92:	1d1a      	adds	r2, r3, #4
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	9203      	str	r2, [sp, #12]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	bfb8      	it	lt
 8018e9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018ea0:	3702      	adds	r7, #2
 8018ea2:	9305      	str	r3, [sp, #20]
 8018ea4:	4d2e      	ldr	r5, [pc, #184]	; (8018f60 <_svfiprintf_r+0x1e0>)
 8018ea6:	7839      	ldrb	r1, [r7, #0]
 8018ea8:	2203      	movs	r2, #3
 8018eaa:	4628      	mov	r0, r5
 8018eac:	f7e7 fa20 	bl	80002f0 <memchr>
 8018eb0:	b138      	cbz	r0, 8018ec2 <_svfiprintf_r+0x142>
 8018eb2:	2340      	movs	r3, #64	; 0x40
 8018eb4:	1b40      	subs	r0, r0, r5
 8018eb6:	fa03 f000 	lsl.w	r0, r3, r0
 8018eba:	9b04      	ldr	r3, [sp, #16]
 8018ebc:	4303      	orrs	r3, r0
 8018ebe:	3701      	adds	r7, #1
 8018ec0:	9304      	str	r3, [sp, #16]
 8018ec2:	7839      	ldrb	r1, [r7, #0]
 8018ec4:	4827      	ldr	r0, [pc, #156]	; (8018f64 <_svfiprintf_r+0x1e4>)
 8018ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018eca:	2206      	movs	r2, #6
 8018ecc:	1c7e      	adds	r6, r7, #1
 8018ece:	f7e7 fa0f 	bl	80002f0 <memchr>
 8018ed2:	2800      	cmp	r0, #0
 8018ed4:	d038      	beq.n	8018f48 <_svfiprintf_r+0x1c8>
 8018ed6:	4b24      	ldr	r3, [pc, #144]	; (8018f68 <_svfiprintf_r+0x1e8>)
 8018ed8:	bb13      	cbnz	r3, 8018f20 <_svfiprintf_r+0x1a0>
 8018eda:	9b03      	ldr	r3, [sp, #12]
 8018edc:	3307      	adds	r3, #7
 8018ede:	f023 0307 	bic.w	r3, r3, #7
 8018ee2:	3308      	adds	r3, #8
 8018ee4:	9303      	str	r3, [sp, #12]
 8018ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ee8:	444b      	add	r3, r9
 8018eea:	9309      	str	r3, [sp, #36]	; 0x24
 8018eec:	e76d      	b.n	8018dca <_svfiprintf_r+0x4a>
 8018eee:	fb05 3202 	mla	r2, r5, r2, r3
 8018ef2:	2001      	movs	r0, #1
 8018ef4:	460f      	mov	r7, r1
 8018ef6:	e7a6      	b.n	8018e46 <_svfiprintf_r+0xc6>
 8018ef8:	2300      	movs	r3, #0
 8018efa:	3701      	adds	r7, #1
 8018efc:	9305      	str	r3, [sp, #20]
 8018efe:	4619      	mov	r1, r3
 8018f00:	250a      	movs	r5, #10
 8018f02:	4638      	mov	r0, r7
 8018f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f08:	3a30      	subs	r2, #48	; 0x30
 8018f0a:	2a09      	cmp	r2, #9
 8018f0c:	d903      	bls.n	8018f16 <_svfiprintf_r+0x196>
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d0c8      	beq.n	8018ea4 <_svfiprintf_r+0x124>
 8018f12:	9105      	str	r1, [sp, #20]
 8018f14:	e7c6      	b.n	8018ea4 <_svfiprintf_r+0x124>
 8018f16:	fb05 2101 	mla	r1, r5, r1, r2
 8018f1a:	2301      	movs	r3, #1
 8018f1c:	4607      	mov	r7, r0
 8018f1e:	e7f0      	b.n	8018f02 <_svfiprintf_r+0x182>
 8018f20:	ab03      	add	r3, sp, #12
 8018f22:	9300      	str	r3, [sp, #0]
 8018f24:	4622      	mov	r2, r4
 8018f26:	4b11      	ldr	r3, [pc, #68]	; (8018f6c <_svfiprintf_r+0x1ec>)
 8018f28:	a904      	add	r1, sp, #16
 8018f2a:	4640      	mov	r0, r8
 8018f2c:	f3af 8000 	nop.w
 8018f30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018f34:	4681      	mov	r9, r0
 8018f36:	d1d6      	bne.n	8018ee6 <_svfiprintf_r+0x166>
 8018f38:	89a3      	ldrh	r3, [r4, #12]
 8018f3a:	065b      	lsls	r3, r3, #25
 8018f3c:	f53f af35 	bmi.w	8018daa <_svfiprintf_r+0x2a>
 8018f40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018f42:	b01d      	add	sp, #116	; 0x74
 8018f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f48:	ab03      	add	r3, sp, #12
 8018f4a:	9300      	str	r3, [sp, #0]
 8018f4c:	4622      	mov	r2, r4
 8018f4e:	4b07      	ldr	r3, [pc, #28]	; (8018f6c <_svfiprintf_r+0x1ec>)
 8018f50:	a904      	add	r1, sp, #16
 8018f52:	4640      	mov	r0, r8
 8018f54:	f000 f9c2 	bl	80192dc <_printf_i>
 8018f58:	e7ea      	b.n	8018f30 <_svfiprintf_r+0x1b0>
 8018f5a:	bf00      	nop
 8018f5c:	0801a01c 	.word	0x0801a01c
 8018f60:	0801a022 	.word	0x0801a022
 8018f64:	0801a026 	.word	0x0801a026
 8018f68:	00000000 	.word	0x00000000
 8018f6c:	08018ccd 	.word	0x08018ccd

08018f70 <__sfputc_r>:
 8018f70:	6893      	ldr	r3, [r2, #8]
 8018f72:	3b01      	subs	r3, #1
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	b410      	push	{r4}
 8018f78:	6093      	str	r3, [r2, #8]
 8018f7a:	da08      	bge.n	8018f8e <__sfputc_r+0x1e>
 8018f7c:	6994      	ldr	r4, [r2, #24]
 8018f7e:	42a3      	cmp	r3, r4
 8018f80:	db01      	blt.n	8018f86 <__sfputc_r+0x16>
 8018f82:	290a      	cmp	r1, #10
 8018f84:	d103      	bne.n	8018f8e <__sfputc_r+0x1e>
 8018f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f8a:	f7ff bbff 	b.w	801878c <__swbuf_r>
 8018f8e:	6813      	ldr	r3, [r2, #0]
 8018f90:	1c58      	adds	r0, r3, #1
 8018f92:	6010      	str	r0, [r2, #0]
 8018f94:	7019      	strb	r1, [r3, #0]
 8018f96:	4608      	mov	r0, r1
 8018f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f9c:	4770      	bx	lr

08018f9e <__sfputs_r>:
 8018f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fa0:	4606      	mov	r6, r0
 8018fa2:	460f      	mov	r7, r1
 8018fa4:	4614      	mov	r4, r2
 8018fa6:	18d5      	adds	r5, r2, r3
 8018fa8:	42ac      	cmp	r4, r5
 8018faa:	d101      	bne.n	8018fb0 <__sfputs_r+0x12>
 8018fac:	2000      	movs	r0, #0
 8018fae:	e007      	b.n	8018fc0 <__sfputs_r+0x22>
 8018fb0:	463a      	mov	r2, r7
 8018fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fb6:	4630      	mov	r0, r6
 8018fb8:	f7ff ffda 	bl	8018f70 <__sfputc_r>
 8018fbc:	1c43      	adds	r3, r0, #1
 8018fbe:	d1f3      	bne.n	8018fa8 <__sfputs_r+0xa>
 8018fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018fc4 <_vfiprintf_r>:
 8018fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fc8:	460c      	mov	r4, r1
 8018fca:	b09d      	sub	sp, #116	; 0x74
 8018fcc:	4617      	mov	r7, r2
 8018fce:	461d      	mov	r5, r3
 8018fd0:	4606      	mov	r6, r0
 8018fd2:	b118      	cbz	r0, 8018fdc <_vfiprintf_r+0x18>
 8018fd4:	6983      	ldr	r3, [r0, #24]
 8018fd6:	b90b      	cbnz	r3, 8018fdc <_vfiprintf_r+0x18>
 8018fd8:	f7ff fd88 	bl	8018aec <__sinit>
 8018fdc:	4b7c      	ldr	r3, [pc, #496]	; (80191d0 <_vfiprintf_r+0x20c>)
 8018fde:	429c      	cmp	r4, r3
 8018fe0:	d158      	bne.n	8019094 <_vfiprintf_r+0xd0>
 8018fe2:	6874      	ldr	r4, [r6, #4]
 8018fe4:	89a3      	ldrh	r3, [r4, #12]
 8018fe6:	0718      	lsls	r0, r3, #28
 8018fe8:	d55e      	bpl.n	80190a8 <_vfiprintf_r+0xe4>
 8018fea:	6923      	ldr	r3, [r4, #16]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d05b      	beq.n	80190a8 <_vfiprintf_r+0xe4>
 8018ff0:	2300      	movs	r3, #0
 8018ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8018ff4:	2320      	movs	r3, #32
 8018ff6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018ffa:	2330      	movs	r3, #48	; 0x30
 8018ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019000:	9503      	str	r5, [sp, #12]
 8019002:	f04f 0b01 	mov.w	fp, #1
 8019006:	46b8      	mov	r8, r7
 8019008:	4645      	mov	r5, r8
 801900a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801900e:	b10b      	cbz	r3, 8019014 <_vfiprintf_r+0x50>
 8019010:	2b25      	cmp	r3, #37	; 0x25
 8019012:	d154      	bne.n	80190be <_vfiprintf_r+0xfa>
 8019014:	ebb8 0a07 	subs.w	sl, r8, r7
 8019018:	d00b      	beq.n	8019032 <_vfiprintf_r+0x6e>
 801901a:	4653      	mov	r3, sl
 801901c:	463a      	mov	r2, r7
 801901e:	4621      	mov	r1, r4
 8019020:	4630      	mov	r0, r6
 8019022:	f7ff ffbc 	bl	8018f9e <__sfputs_r>
 8019026:	3001      	adds	r0, #1
 8019028:	f000 80c2 	beq.w	80191b0 <_vfiprintf_r+0x1ec>
 801902c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801902e:	4453      	add	r3, sl
 8019030:	9309      	str	r3, [sp, #36]	; 0x24
 8019032:	f898 3000 	ldrb.w	r3, [r8]
 8019036:	2b00      	cmp	r3, #0
 8019038:	f000 80ba 	beq.w	80191b0 <_vfiprintf_r+0x1ec>
 801903c:	2300      	movs	r3, #0
 801903e:	f04f 32ff 	mov.w	r2, #4294967295
 8019042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019046:	9304      	str	r3, [sp, #16]
 8019048:	9307      	str	r3, [sp, #28]
 801904a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801904e:	931a      	str	r3, [sp, #104]	; 0x68
 8019050:	46a8      	mov	r8, r5
 8019052:	2205      	movs	r2, #5
 8019054:	f818 1b01 	ldrb.w	r1, [r8], #1
 8019058:	485e      	ldr	r0, [pc, #376]	; (80191d4 <_vfiprintf_r+0x210>)
 801905a:	f7e7 f949 	bl	80002f0 <memchr>
 801905e:	9b04      	ldr	r3, [sp, #16]
 8019060:	bb78      	cbnz	r0, 80190c2 <_vfiprintf_r+0xfe>
 8019062:	06d9      	lsls	r1, r3, #27
 8019064:	bf44      	itt	mi
 8019066:	2220      	movmi	r2, #32
 8019068:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801906c:	071a      	lsls	r2, r3, #28
 801906e:	bf44      	itt	mi
 8019070:	222b      	movmi	r2, #43	; 0x2b
 8019072:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019076:	782a      	ldrb	r2, [r5, #0]
 8019078:	2a2a      	cmp	r2, #42	; 0x2a
 801907a:	d02a      	beq.n	80190d2 <_vfiprintf_r+0x10e>
 801907c:	9a07      	ldr	r2, [sp, #28]
 801907e:	46a8      	mov	r8, r5
 8019080:	2000      	movs	r0, #0
 8019082:	250a      	movs	r5, #10
 8019084:	4641      	mov	r1, r8
 8019086:	f811 3b01 	ldrb.w	r3, [r1], #1
 801908a:	3b30      	subs	r3, #48	; 0x30
 801908c:	2b09      	cmp	r3, #9
 801908e:	d969      	bls.n	8019164 <_vfiprintf_r+0x1a0>
 8019090:	b360      	cbz	r0, 80190ec <_vfiprintf_r+0x128>
 8019092:	e024      	b.n	80190de <_vfiprintf_r+0x11a>
 8019094:	4b50      	ldr	r3, [pc, #320]	; (80191d8 <_vfiprintf_r+0x214>)
 8019096:	429c      	cmp	r4, r3
 8019098:	d101      	bne.n	801909e <_vfiprintf_r+0xda>
 801909a:	68b4      	ldr	r4, [r6, #8]
 801909c:	e7a2      	b.n	8018fe4 <_vfiprintf_r+0x20>
 801909e:	4b4f      	ldr	r3, [pc, #316]	; (80191dc <_vfiprintf_r+0x218>)
 80190a0:	429c      	cmp	r4, r3
 80190a2:	bf08      	it	eq
 80190a4:	68f4      	ldreq	r4, [r6, #12]
 80190a6:	e79d      	b.n	8018fe4 <_vfiprintf_r+0x20>
 80190a8:	4621      	mov	r1, r4
 80190aa:	4630      	mov	r0, r6
 80190ac:	f7ff fbc0 	bl	8018830 <__swsetup_r>
 80190b0:	2800      	cmp	r0, #0
 80190b2:	d09d      	beq.n	8018ff0 <_vfiprintf_r+0x2c>
 80190b4:	f04f 30ff 	mov.w	r0, #4294967295
 80190b8:	b01d      	add	sp, #116	; 0x74
 80190ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190be:	46a8      	mov	r8, r5
 80190c0:	e7a2      	b.n	8019008 <_vfiprintf_r+0x44>
 80190c2:	4a44      	ldr	r2, [pc, #272]	; (80191d4 <_vfiprintf_r+0x210>)
 80190c4:	1a80      	subs	r0, r0, r2
 80190c6:	fa0b f000 	lsl.w	r0, fp, r0
 80190ca:	4318      	orrs	r0, r3
 80190cc:	9004      	str	r0, [sp, #16]
 80190ce:	4645      	mov	r5, r8
 80190d0:	e7be      	b.n	8019050 <_vfiprintf_r+0x8c>
 80190d2:	9a03      	ldr	r2, [sp, #12]
 80190d4:	1d11      	adds	r1, r2, #4
 80190d6:	6812      	ldr	r2, [r2, #0]
 80190d8:	9103      	str	r1, [sp, #12]
 80190da:	2a00      	cmp	r2, #0
 80190dc:	db01      	blt.n	80190e2 <_vfiprintf_r+0x11e>
 80190de:	9207      	str	r2, [sp, #28]
 80190e0:	e004      	b.n	80190ec <_vfiprintf_r+0x128>
 80190e2:	4252      	negs	r2, r2
 80190e4:	f043 0302 	orr.w	r3, r3, #2
 80190e8:	9207      	str	r2, [sp, #28]
 80190ea:	9304      	str	r3, [sp, #16]
 80190ec:	f898 3000 	ldrb.w	r3, [r8]
 80190f0:	2b2e      	cmp	r3, #46	; 0x2e
 80190f2:	d10e      	bne.n	8019112 <_vfiprintf_r+0x14e>
 80190f4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80190f8:	2b2a      	cmp	r3, #42	; 0x2a
 80190fa:	d138      	bne.n	801916e <_vfiprintf_r+0x1aa>
 80190fc:	9b03      	ldr	r3, [sp, #12]
 80190fe:	1d1a      	adds	r2, r3, #4
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	9203      	str	r2, [sp, #12]
 8019104:	2b00      	cmp	r3, #0
 8019106:	bfb8      	it	lt
 8019108:	f04f 33ff 	movlt.w	r3, #4294967295
 801910c:	f108 0802 	add.w	r8, r8, #2
 8019110:	9305      	str	r3, [sp, #20]
 8019112:	4d33      	ldr	r5, [pc, #204]	; (80191e0 <_vfiprintf_r+0x21c>)
 8019114:	f898 1000 	ldrb.w	r1, [r8]
 8019118:	2203      	movs	r2, #3
 801911a:	4628      	mov	r0, r5
 801911c:	f7e7 f8e8 	bl	80002f0 <memchr>
 8019120:	b140      	cbz	r0, 8019134 <_vfiprintf_r+0x170>
 8019122:	2340      	movs	r3, #64	; 0x40
 8019124:	1b40      	subs	r0, r0, r5
 8019126:	fa03 f000 	lsl.w	r0, r3, r0
 801912a:	9b04      	ldr	r3, [sp, #16]
 801912c:	4303      	orrs	r3, r0
 801912e:	f108 0801 	add.w	r8, r8, #1
 8019132:	9304      	str	r3, [sp, #16]
 8019134:	f898 1000 	ldrb.w	r1, [r8]
 8019138:	482a      	ldr	r0, [pc, #168]	; (80191e4 <_vfiprintf_r+0x220>)
 801913a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801913e:	2206      	movs	r2, #6
 8019140:	f108 0701 	add.w	r7, r8, #1
 8019144:	f7e7 f8d4 	bl	80002f0 <memchr>
 8019148:	2800      	cmp	r0, #0
 801914a:	d037      	beq.n	80191bc <_vfiprintf_r+0x1f8>
 801914c:	4b26      	ldr	r3, [pc, #152]	; (80191e8 <_vfiprintf_r+0x224>)
 801914e:	bb1b      	cbnz	r3, 8019198 <_vfiprintf_r+0x1d4>
 8019150:	9b03      	ldr	r3, [sp, #12]
 8019152:	3307      	adds	r3, #7
 8019154:	f023 0307 	bic.w	r3, r3, #7
 8019158:	3308      	adds	r3, #8
 801915a:	9303      	str	r3, [sp, #12]
 801915c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801915e:	444b      	add	r3, r9
 8019160:	9309      	str	r3, [sp, #36]	; 0x24
 8019162:	e750      	b.n	8019006 <_vfiprintf_r+0x42>
 8019164:	fb05 3202 	mla	r2, r5, r2, r3
 8019168:	2001      	movs	r0, #1
 801916a:	4688      	mov	r8, r1
 801916c:	e78a      	b.n	8019084 <_vfiprintf_r+0xc0>
 801916e:	2300      	movs	r3, #0
 8019170:	f108 0801 	add.w	r8, r8, #1
 8019174:	9305      	str	r3, [sp, #20]
 8019176:	4619      	mov	r1, r3
 8019178:	250a      	movs	r5, #10
 801917a:	4640      	mov	r0, r8
 801917c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019180:	3a30      	subs	r2, #48	; 0x30
 8019182:	2a09      	cmp	r2, #9
 8019184:	d903      	bls.n	801918e <_vfiprintf_r+0x1ca>
 8019186:	2b00      	cmp	r3, #0
 8019188:	d0c3      	beq.n	8019112 <_vfiprintf_r+0x14e>
 801918a:	9105      	str	r1, [sp, #20]
 801918c:	e7c1      	b.n	8019112 <_vfiprintf_r+0x14e>
 801918e:	fb05 2101 	mla	r1, r5, r1, r2
 8019192:	2301      	movs	r3, #1
 8019194:	4680      	mov	r8, r0
 8019196:	e7f0      	b.n	801917a <_vfiprintf_r+0x1b6>
 8019198:	ab03      	add	r3, sp, #12
 801919a:	9300      	str	r3, [sp, #0]
 801919c:	4622      	mov	r2, r4
 801919e:	4b13      	ldr	r3, [pc, #76]	; (80191ec <_vfiprintf_r+0x228>)
 80191a0:	a904      	add	r1, sp, #16
 80191a2:	4630      	mov	r0, r6
 80191a4:	f3af 8000 	nop.w
 80191a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80191ac:	4681      	mov	r9, r0
 80191ae:	d1d5      	bne.n	801915c <_vfiprintf_r+0x198>
 80191b0:	89a3      	ldrh	r3, [r4, #12]
 80191b2:	065b      	lsls	r3, r3, #25
 80191b4:	f53f af7e 	bmi.w	80190b4 <_vfiprintf_r+0xf0>
 80191b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80191ba:	e77d      	b.n	80190b8 <_vfiprintf_r+0xf4>
 80191bc:	ab03      	add	r3, sp, #12
 80191be:	9300      	str	r3, [sp, #0]
 80191c0:	4622      	mov	r2, r4
 80191c2:	4b0a      	ldr	r3, [pc, #40]	; (80191ec <_vfiprintf_r+0x228>)
 80191c4:	a904      	add	r1, sp, #16
 80191c6:	4630      	mov	r0, r6
 80191c8:	f000 f888 	bl	80192dc <_printf_i>
 80191cc:	e7ec      	b.n	80191a8 <_vfiprintf_r+0x1e4>
 80191ce:	bf00      	nop
 80191d0:	08019fdc 	.word	0x08019fdc
 80191d4:	0801a01c 	.word	0x0801a01c
 80191d8:	08019ffc 	.word	0x08019ffc
 80191dc:	08019fbc 	.word	0x08019fbc
 80191e0:	0801a022 	.word	0x0801a022
 80191e4:	0801a026 	.word	0x0801a026
 80191e8:	00000000 	.word	0x00000000
 80191ec:	08018f9f 	.word	0x08018f9f

080191f0 <_printf_common>:
 80191f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191f4:	4691      	mov	r9, r2
 80191f6:	461f      	mov	r7, r3
 80191f8:	688a      	ldr	r2, [r1, #8]
 80191fa:	690b      	ldr	r3, [r1, #16]
 80191fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019200:	4293      	cmp	r3, r2
 8019202:	bfb8      	it	lt
 8019204:	4613      	movlt	r3, r2
 8019206:	f8c9 3000 	str.w	r3, [r9]
 801920a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801920e:	4606      	mov	r6, r0
 8019210:	460c      	mov	r4, r1
 8019212:	b112      	cbz	r2, 801921a <_printf_common+0x2a>
 8019214:	3301      	adds	r3, #1
 8019216:	f8c9 3000 	str.w	r3, [r9]
 801921a:	6823      	ldr	r3, [r4, #0]
 801921c:	0699      	lsls	r1, r3, #26
 801921e:	bf42      	ittt	mi
 8019220:	f8d9 3000 	ldrmi.w	r3, [r9]
 8019224:	3302      	addmi	r3, #2
 8019226:	f8c9 3000 	strmi.w	r3, [r9]
 801922a:	6825      	ldr	r5, [r4, #0]
 801922c:	f015 0506 	ands.w	r5, r5, #6
 8019230:	d107      	bne.n	8019242 <_printf_common+0x52>
 8019232:	f104 0a19 	add.w	sl, r4, #25
 8019236:	68e3      	ldr	r3, [r4, #12]
 8019238:	f8d9 2000 	ldr.w	r2, [r9]
 801923c:	1a9b      	subs	r3, r3, r2
 801923e:	42ab      	cmp	r3, r5
 8019240:	dc28      	bgt.n	8019294 <_printf_common+0xa4>
 8019242:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019246:	6822      	ldr	r2, [r4, #0]
 8019248:	3300      	adds	r3, #0
 801924a:	bf18      	it	ne
 801924c:	2301      	movne	r3, #1
 801924e:	0692      	lsls	r2, r2, #26
 8019250:	d42d      	bmi.n	80192ae <_printf_common+0xbe>
 8019252:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019256:	4639      	mov	r1, r7
 8019258:	4630      	mov	r0, r6
 801925a:	47c0      	blx	r8
 801925c:	3001      	adds	r0, #1
 801925e:	d020      	beq.n	80192a2 <_printf_common+0xb2>
 8019260:	6823      	ldr	r3, [r4, #0]
 8019262:	68e5      	ldr	r5, [r4, #12]
 8019264:	f8d9 2000 	ldr.w	r2, [r9]
 8019268:	f003 0306 	and.w	r3, r3, #6
 801926c:	2b04      	cmp	r3, #4
 801926e:	bf08      	it	eq
 8019270:	1aad      	subeq	r5, r5, r2
 8019272:	68a3      	ldr	r3, [r4, #8]
 8019274:	6922      	ldr	r2, [r4, #16]
 8019276:	bf0c      	ite	eq
 8019278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801927c:	2500      	movne	r5, #0
 801927e:	4293      	cmp	r3, r2
 8019280:	bfc4      	itt	gt
 8019282:	1a9b      	subgt	r3, r3, r2
 8019284:	18ed      	addgt	r5, r5, r3
 8019286:	f04f 0900 	mov.w	r9, #0
 801928a:	341a      	adds	r4, #26
 801928c:	454d      	cmp	r5, r9
 801928e:	d11a      	bne.n	80192c6 <_printf_common+0xd6>
 8019290:	2000      	movs	r0, #0
 8019292:	e008      	b.n	80192a6 <_printf_common+0xb6>
 8019294:	2301      	movs	r3, #1
 8019296:	4652      	mov	r2, sl
 8019298:	4639      	mov	r1, r7
 801929a:	4630      	mov	r0, r6
 801929c:	47c0      	blx	r8
 801929e:	3001      	adds	r0, #1
 80192a0:	d103      	bne.n	80192aa <_printf_common+0xba>
 80192a2:	f04f 30ff 	mov.w	r0, #4294967295
 80192a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192aa:	3501      	adds	r5, #1
 80192ac:	e7c3      	b.n	8019236 <_printf_common+0x46>
 80192ae:	18e1      	adds	r1, r4, r3
 80192b0:	1c5a      	adds	r2, r3, #1
 80192b2:	2030      	movs	r0, #48	; 0x30
 80192b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80192b8:	4422      	add	r2, r4
 80192ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80192be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80192c2:	3302      	adds	r3, #2
 80192c4:	e7c5      	b.n	8019252 <_printf_common+0x62>
 80192c6:	2301      	movs	r3, #1
 80192c8:	4622      	mov	r2, r4
 80192ca:	4639      	mov	r1, r7
 80192cc:	4630      	mov	r0, r6
 80192ce:	47c0      	blx	r8
 80192d0:	3001      	adds	r0, #1
 80192d2:	d0e6      	beq.n	80192a2 <_printf_common+0xb2>
 80192d4:	f109 0901 	add.w	r9, r9, #1
 80192d8:	e7d8      	b.n	801928c <_printf_common+0x9c>
	...

080192dc <_printf_i>:
 80192dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80192e4:	460c      	mov	r4, r1
 80192e6:	7e09      	ldrb	r1, [r1, #24]
 80192e8:	b085      	sub	sp, #20
 80192ea:	296e      	cmp	r1, #110	; 0x6e
 80192ec:	4617      	mov	r7, r2
 80192ee:	4606      	mov	r6, r0
 80192f0:	4698      	mov	r8, r3
 80192f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80192f4:	f000 80b3 	beq.w	801945e <_printf_i+0x182>
 80192f8:	d822      	bhi.n	8019340 <_printf_i+0x64>
 80192fa:	2963      	cmp	r1, #99	; 0x63
 80192fc:	d036      	beq.n	801936c <_printf_i+0x90>
 80192fe:	d80a      	bhi.n	8019316 <_printf_i+0x3a>
 8019300:	2900      	cmp	r1, #0
 8019302:	f000 80b9 	beq.w	8019478 <_printf_i+0x19c>
 8019306:	2958      	cmp	r1, #88	; 0x58
 8019308:	f000 8083 	beq.w	8019412 <_printf_i+0x136>
 801930c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019310:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8019314:	e032      	b.n	801937c <_printf_i+0xa0>
 8019316:	2964      	cmp	r1, #100	; 0x64
 8019318:	d001      	beq.n	801931e <_printf_i+0x42>
 801931a:	2969      	cmp	r1, #105	; 0x69
 801931c:	d1f6      	bne.n	801930c <_printf_i+0x30>
 801931e:	6820      	ldr	r0, [r4, #0]
 8019320:	6813      	ldr	r3, [r2, #0]
 8019322:	0605      	lsls	r5, r0, #24
 8019324:	f103 0104 	add.w	r1, r3, #4
 8019328:	d52a      	bpl.n	8019380 <_printf_i+0xa4>
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	6011      	str	r1, [r2, #0]
 801932e:	2b00      	cmp	r3, #0
 8019330:	da03      	bge.n	801933a <_printf_i+0x5e>
 8019332:	222d      	movs	r2, #45	; 0x2d
 8019334:	425b      	negs	r3, r3
 8019336:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801933a:	486f      	ldr	r0, [pc, #444]	; (80194f8 <_printf_i+0x21c>)
 801933c:	220a      	movs	r2, #10
 801933e:	e039      	b.n	80193b4 <_printf_i+0xd8>
 8019340:	2973      	cmp	r1, #115	; 0x73
 8019342:	f000 809d 	beq.w	8019480 <_printf_i+0x1a4>
 8019346:	d808      	bhi.n	801935a <_printf_i+0x7e>
 8019348:	296f      	cmp	r1, #111	; 0x6f
 801934a:	d020      	beq.n	801938e <_printf_i+0xb2>
 801934c:	2970      	cmp	r1, #112	; 0x70
 801934e:	d1dd      	bne.n	801930c <_printf_i+0x30>
 8019350:	6823      	ldr	r3, [r4, #0]
 8019352:	f043 0320 	orr.w	r3, r3, #32
 8019356:	6023      	str	r3, [r4, #0]
 8019358:	e003      	b.n	8019362 <_printf_i+0x86>
 801935a:	2975      	cmp	r1, #117	; 0x75
 801935c:	d017      	beq.n	801938e <_printf_i+0xb2>
 801935e:	2978      	cmp	r1, #120	; 0x78
 8019360:	d1d4      	bne.n	801930c <_printf_i+0x30>
 8019362:	2378      	movs	r3, #120	; 0x78
 8019364:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019368:	4864      	ldr	r0, [pc, #400]	; (80194fc <_printf_i+0x220>)
 801936a:	e055      	b.n	8019418 <_printf_i+0x13c>
 801936c:	6813      	ldr	r3, [r2, #0]
 801936e:	1d19      	adds	r1, r3, #4
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	6011      	str	r1, [r2, #0]
 8019374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019378:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801937c:	2301      	movs	r3, #1
 801937e:	e08c      	b.n	801949a <_printf_i+0x1be>
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	6011      	str	r1, [r2, #0]
 8019384:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019388:	bf18      	it	ne
 801938a:	b21b      	sxthne	r3, r3
 801938c:	e7cf      	b.n	801932e <_printf_i+0x52>
 801938e:	6813      	ldr	r3, [r2, #0]
 8019390:	6825      	ldr	r5, [r4, #0]
 8019392:	1d18      	adds	r0, r3, #4
 8019394:	6010      	str	r0, [r2, #0]
 8019396:	0628      	lsls	r0, r5, #24
 8019398:	d501      	bpl.n	801939e <_printf_i+0xc2>
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	e002      	b.n	80193a4 <_printf_i+0xc8>
 801939e:	0668      	lsls	r0, r5, #25
 80193a0:	d5fb      	bpl.n	801939a <_printf_i+0xbe>
 80193a2:	881b      	ldrh	r3, [r3, #0]
 80193a4:	4854      	ldr	r0, [pc, #336]	; (80194f8 <_printf_i+0x21c>)
 80193a6:	296f      	cmp	r1, #111	; 0x6f
 80193a8:	bf14      	ite	ne
 80193aa:	220a      	movne	r2, #10
 80193ac:	2208      	moveq	r2, #8
 80193ae:	2100      	movs	r1, #0
 80193b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80193b4:	6865      	ldr	r5, [r4, #4]
 80193b6:	60a5      	str	r5, [r4, #8]
 80193b8:	2d00      	cmp	r5, #0
 80193ba:	f2c0 8095 	blt.w	80194e8 <_printf_i+0x20c>
 80193be:	6821      	ldr	r1, [r4, #0]
 80193c0:	f021 0104 	bic.w	r1, r1, #4
 80193c4:	6021      	str	r1, [r4, #0]
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d13d      	bne.n	8019446 <_printf_i+0x16a>
 80193ca:	2d00      	cmp	r5, #0
 80193cc:	f040 808e 	bne.w	80194ec <_printf_i+0x210>
 80193d0:	4665      	mov	r5, ip
 80193d2:	2a08      	cmp	r2, #8
 80193d4:	d10b      	bne.n	80193ee <_printf_i+0x112>
 80193d6:	6823      	ldr	r3, [r4, #0]
 80193d8:	07db      	lsls	r3, r3, #31
 80193da:	d508      	bpl.n	80193ee <_printf_i+0x112>
 80193dc:	6923      	ldr	r3, [r4, #16]
 80193de:	6862      	ldr	r2, [r4, #4]
 80193e0:	429a      	cmp	r2, r3
 80193e2:	bfde      	ittt	le
 80193e4:	2330      	movle	r3, #48	; 0x30
 80193e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80193ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80193ee:	ebac 0305 	sub.w	r3, ip, r5
 80193f2:	6123      	str	r3, [r4, #16]
 80193f4:	f8cd 8000 	str.w	r8, [sp]
 80193f8:	463b      	mov	r3, r7
 80193fa:	aa03      	add	r2, sp, #12
 80193fc:	4621      	mov	r1, r4
 80193fe:	4630      	mov	r0, r6
 8019400:	f7ff fef6 	bl	80191f0 <_printf_common>
 8019404:	3001      	adds	r0, #1
 8019406:	d14d      	bne.n	80194a4 <_printf_i+0x1c8>
 8019408:	f04f 30ff 	mov.w	r0, #4294967295
 801940c:	b005      	add	sp, #20
 801940e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019412:	4839      	ldr	r0, [pc, #228]	; (80194f8 <_printf_i+0x21c>)
 8019414:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8019418:	6813      	ldr	r3, [r2, #0]
 801941a:	6821      	ldr	r1, [r4, #0]
 801941c:	1d1d      	adds	r5, r3, #4
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	6015      	str	r5, [r2, #0]
 8019422:	060a      	lsls	r2, r1, #24
 8019424:	d50b      	bpl.n	801943e <_printf_i+0x162>
 8019426:	07ca      	lsls	r2, r1, #31
 8019428:	bf44      	itt	mi
 801942a:	f041 0120 	orrmi.w	r1, r1, #32
 801942e:	6021      	strmi	r1, [r4, #0]
 8019430:	b91b      	cbnz	r3, 801943a <_printf_i+0x15e>
 8019432:	6822      	ldr	r2, [r4, #0]
 8019434:	f022 0220 	bic.w	r2, r2, #32
 8019438:	6022      	str	r2, [r4, #0]
 801943a:	2210      	movs	r2, #16
 801943c:	e7b7      	b.n	80193ae <_printf_i+0xd2>
 801943e:	064d      	lsls	r5, r1, #25
 8019440:	bf48      	it	mi
 8019442:	b29b      	uxthmi	r3, r3
 8019444:	e7ef      	b.n	8019426 <_printf_i+0x14a>
 8019446:	4665      	mov	r5, ip
 8019448:	fbb3 f1f2 	udiv	r1, r3, r2
 801944c:	fb02 3311 	mls	r3, r2, r1, r3
 8019450:	5cc3      	ldrb	r3, [r0, r3]
 8019452:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8019456:	460b      	mov	r3, r1
 8019458:	2900      	cmp	r1, #0
 801945a:	d1f5      	bne.n	8019448 <_printf_i+0x16c>
 801945c:	e7b9      	b.n	80193d2 <_printf_i+0xf6>
 801945e:	6813      	ldr	r3, [r2, #0]
 8019460:	6825      	ldr	r5, [r4, #0]
 8019462:	6961      	ldr	r1, [r4, #20]
 8019464:	1d18      	adds	r0, r3, #4
 8019466:	6010      	str	r0, [r2, #0]
 8019468:	0628      	lsls	r0, r5, #24
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	d501      	bpl.n	8019472 <_printf_i+0x196>
 801946e:	6019      	str	r1, [r3, #0]
 8019470:	e002      	b.n	8019478 <_printf_i+0x19c>
 8019472:	066a      	lsls	r2, r5, #25
 8019474:	d5fb      	bpl.n	801946e <_printf_i+0x192>
 8019476:	8019      	strh	r1, [r3, #0]
 8019478:	2300      	movs	r3, #0
 801947a:	6123      	str	r3, [r4, #16]
 801947c:	4665      	mov	r5, ip
 801947e:	e7b9      	b.n	80193f4 <_printf_i+0x118>
 8019480:	6813      	ldr	r3, [r2, #0]
 8019482:	1d19      	adds	r1, r3, #4
 8019484:	6011      	str	r1, [r2, #0]
 8019486:	681d      	ldr	r5, [r3, #0]
 8019488:	6862      	ldr	r2, [r4, #4]
 801948a:	2100      	movs	r1, #0
 801948c:	4628      	mov	r0, r5
 801948e:	f7e6 ff2f 	bl	80002f0 <memchr>
 8019492:	b108      	cbz	r0, 8019498 <_printf_i+0x1bc>
 8019494:	1b40      	subs	r0, r0, r5
 8019496:	6060      	str	r0, [r4, #4]
 8019498:	6863      	ldr	r3, [r4, #4]
 801949a:	6123      	str	r3, [r4, #16]
 801949c:	2300      	movs	r3, #0
 801949e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80194a2:	e7a7      	b.n	80193f4 <_printf_i+0x118>
 80194a4:	6923      	ldr	r3, [r4, #16]
 80194a6:	462a      	mov	r2, r5
 80194a8:	4639      	mov	r1, r7
 80194aa:	4630      	mov	r0, r6
 80194ac:	47c0      	blx	r8
 80194ae:	3001      	adds	r0, #1
 80194b0:	d0aa      	beq.n	8019408 <_printf_i+0x12c>
 80194b2:	6823      	ldr	r3, [r4, #0]
 80194b4:	079b      	lsls	r3, r3, #30
 80194b6:	d413      	bmi.n	80194e0 <_printf_i+0x204>
 80194b8:	68e0      	ldr	r0, [r4, #12]
 80194ba:	9b03      	ldr	r3, [sp, #12]
 80194bc:	4298      	cmp	r0, r3
 80194be:	bfb8      	it	lt
 80194c0:	4618      	movlt	r0, r3
 80194c2:	e7a3      	b.n	801940c <_printf_i+0x130>
 80194c4:	2301      	movs	r3, #1
 80194c6:	464a      	mov	r2, r9
 80194c8:	4639      	mov	r1, r7
 80194ca:	4630      	mov	r0, r6
 80194cc:	47c0      	blx	r8
 80194ce:	3001      	adds	r0, #1
 80194d0:	d09a      	beq.n	8019408 <_printf_i+0x12c>
 80194d2:	3501      	adds	r5, #1
 80194d4:	68e3      	ldr	r3, [r4, #12]
 80194d6:	9a03      	ldr	r2, [sp, #12]
 80194d8:	1a9b      	subs	r3, r3, r2
 80194da:	42ab      	cmp	r3, r5
 80194dc:	dcf2      	bgt.n	80194c4 <_printf_i+0x1e8>
 80194de:	e7eb      	b.n	80194b8 <_printf_i+0x1dc>
 80194e0:	2500      	movs	r5, #0
 80194e2:	f104 0919 	add.w	r9, r4, #25
 80194e6:	e7f5      	b.n	80194d4 <_printf_i+0x1f8>
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d1ac      	bne.n	8019446 <_printf_i+0x16a>
 80194ec:	7803      	ldrb	r3, [r0, #0]
 80194ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80194f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80194f6:	e76c      	b.n	80193d2 <_printf_i+0xf6>
 80194f8:	0801a02d 	.word	0x0801a02d
 80194fc:	0801a03e 	.word	0x0801a03e

08019500 <__sread>:
 8019500:	b510      	push	{r4, lr}
 8019502:	460c      	mov	r4, r1
 8019504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019508:	f000 f8d4 	bl	80196b4 <_read_r>
 801950c:	2800      	cmp	r0, #0
 801950e:	bfab      	itete	ge
 8019510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019512:	89a3      	ldrhlt	r3, [r4, #12]
 8019514:	181b      	addge	r3, r3, r0
 8019516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801951a:	bfac      	ite	ge
 801951c:	6563      	strge	r3, [r4, #84]	; 0x54
 801951e:	81a3      	strhlt	r3, [r4, #12]
 8019520:	bd10      	pop	{r4, pc}

08019522 <__swrite>:
 8019522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019526:	461f      	mov	r7, r3
 8019528:	898b      	ldrh	r3, [r1, #12]
 801952a:	05db      	lsls	r3, r3, #23
 801952c:	4605      	mov	r5, r0
 801952e:	460c      	mov	r4, r1
 8019530:	4616      	mov	r6, r2
 8019532:	d505      	bpl.n	8019540 <__swrite+0x1e>
 8019534:	2302      	movs	r3, #2
 8019536:	2200      	movs	r2, #0
 8019538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801953c:	f000 f868 	bl	8019610 <_lseek_r>
 8019540:	89a3      	ldrh	r3, [r4, #12]
 8019542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801954a:	81a3      	strh	r3, [r4, #12]
 801954c:	4632      	mov	r2, r6
 801954e:	463b      	mov	r3, r7
 8019550:	4628      	mov	r0, r5
 8019552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019556:	f000 b817 	b.w	8019588 <_write_r>

0801955a <__sseek>:
 801955a:	b510      	push	{r4, lr}
 801955c:	460c      	mov	r4, r1
 801955e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019562:	f000 f855 	bl	8019610 <_lseek_r>
 8019566:	1c43      	adds	r3, r0, #1
 8019568:	89a3      	ldrh	r3, [r4, #12]
 801956a:	bf15      	itete	ne
 801956c:	6560      	strne	r0, [r4, #84]	; 0x54
 801956e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019576:	81a3      	strheq	r3, [r4, #12]
 8019578:	bf18      	it	ne
 801957a:	81a3      	strhne	r3, [r4, #12]
 801957c:	bd10      	pop	{r4, pc}

0801957e <__sclose>:
 801957e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019582:	f000 b813 	b.w	80195ac <_close_r>
	...

08019588 <_write_r>:
 8019588:	b538      	push	{r3, r4, r5, lr}
 801958a:	4c07      	ldr	r4, [pc, #28]	; (80195a8 <_write_r+0x20>)
 801958c:	4605      	mov	r5, r0
 801958e:	4608      	mov	r0, r1
 8019590:	4611      	mov	r1, r2
 8019592:	2200      	movs	r2, #0
 8019594:	6022      	str	r2, [r4, #0]
 8019596:	461a      	mov	r2, r3
 8019598:	f7e9 fb4f 	bl	8002c3a <_write>
 801959c:	1c43      	adds	r3, r0, #1
 801959e:	d102      	bne.n	80195a6 <_write_r+0x1e>
 80195a0:	6823      	ldr	r3, [r4, #0]
 80195a2:	b103      	cbz	r3, 80195a6 <_write_r+0x1e>
 80195a4:	602b      	str	r3, [r5, #0]
 80195a6:	bd38      	pop	{r3, r4, r5, pc}
 80195a8:	24041c84 	.word	0x24041c84

080195ac <_close_r>:
 80195ac:	b538      	push	{r3, r4, r5, lr}
 80195ae:	4c06      	ldr	r4, [pc, #24]	; (80195c8 <_close_r+0x1c>)
 80195b0:	2300      	movs	r3, #0
 80195b2:	4605      	mov	r5, r0
 80195b4:	4608      	mov	r0, r1
 80195b6:	6023      	str	r3, [r4, #0]
 80195b8:	f7e9 fe4f 	bl	800325a <_close>
 80195bc:	1c43      	adds	r3, r0, #1
 80195be:	d102      	bne.n	80195c6 <_close_r+0x1a>
 80195c0:	6823      	ldr	r3, [r4, #0]
 80195c2:	b103      	cbz	r3, 80195c6 <_close_r+0x1a>
 80195c4:	602b      	str	r3, [r5, #0]
 80195c6:	bd38      	pop	{r3, r4, r5, pc}
 80195c8:	24041c84 	.word	0x24041c84

080195cc <_fstat_r>:
 80195cc:	b538      	push	{r3, r4, r5, lr}
 80195ce:	4c07      	ldr	r4, [pc, #28]	; (80195ec <_fstat_r+0x20>)
 80195d0:	2300      	movs	r3, #0
 80195d2:	4605      	mov	r5, r0
 80195d4:	4608      	mov	r0, r1
 80195d6:	4611      	mov	r1, r2
 80195d8:	6023      	str	r3, [r4, #0]
 80195da:	f7e9 fe4a 	bl	8003272 <_fstat>
 80195de:	1c43      	adds	r3, r0, #1
 80195e0:	d102      	bne.n	80195e8 <_fstat_r+0x1c>
 80195e2:	6823      	ldr	r3, [r4, #0]
 80195e4:	b103      	cbz	r3, 80195e8 <_fstat_r+0x1c>
 80195e6:	602b      	str	r3, [r5, #0]
 80195e8:	bd38      	pop	{r3, r4, r5, pc}
 80195ea:	bf00      	nop
 80195ec:	24041c84 	.word	0x24041c84

080195f0 <_isatty_r>:
 80195f0:	b538      	push	{r3, r4, r5, lr}
 80195f2:	4c06      	ldr	r4, [pc, #24]	; (801960c <_isatty_r+0x1c>)
 80195f4:	2300      	movs	r3, #0
 80195f6:	4605      	mov	r5, r0
 80195f8:	4608      	mov	r0, r1
 80195fa:	6023      	str	r3, [r4, #0]
 80195fc:	f7e9 fe49 	bl	8003292 <_isatty>
 8019600:	1c43      	adds	r3, r0, #1
 8019602:	d102      	bne.n	801960a <_isatty_r+0x1a>
 8019604:	6823      	ldr	r3, [r4, #0]
 8019606:	b103      	cbz	r3, 801960a <_isatty_r+0x1a>
 8019608:	602b      	str	r3, [r5, #0]
 801960a:	bd38      	pop	{r3, r4, r5, pc}
 801960c:	24041c84 	.word	0x24041c84

08019610 <_lseek_r>:
 8019610:	b538      	push	{r3, r4, r5, lr}
 8019612:	4c07      	ldr	r4, [pc, #28]	; (8019630 <_lseek_r+0x20>)
 8019614:	4605      	mov	r5, r0
 8019616:	4608      	mov	r0, r1
 8019618:	4611      	mov	r1, r2
 801961a:	2200      	movs	r2, #0
 801961c:	6022      	str	r2, [r4, #0]
 801961e:	461a      	mov	r2, r3
 8019620:	f7e9 fe42 	bl	80032a8 <_lseek>
 8019624:	1c43      	adds	r3, r0, #1
 8019626:	d102      	bne.n	801962e <_lseek_r+0x1e>
 8019628:	6823      	ldr	r3, [r4, #0]
 801962a:	b103      	cbz	r3, 801962e <_lseek_r+0x1e>
 801962c:	602b      	str	r3, [r5, #0]
 801962e:	bd38      	pop	{r3, r4, r5, pc}
 8019630:	24041c84 	.word	0x24041c84

08019634 <memmove>:
 8019634:	4288      	cmp	r0, r1
 8019636:	b510      	push	{r4, lr}
 8019638:	eb01 0302 	add.w	r3, r1, r2
 801963c:	d807      	bhi.n	801964e <memmove+0x1a>
 801963e:	1e42      	subs	r2, r0, #1
 8019640:	4299      	cmp	r1, r3
 8019642:	d00a      	beq.n	801965a <memmove+0x26>
 8019644:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019648:	f802 4f01 	strb.w	r4, [r2, #1]!
 801964c:	e7f8      	b.n	8019640 <memmove+0xc>
 801964e:	4283      	cmp	r3, r0
 8019650:	d9f5      	bls.n	801963e <memmove+0xa>
 8019652:	1881      	adds	r1, r0, r2
 8019654:	1ad2      	subs	r2, r2, r3
 8019656:	42d3      	cmn	r3, r2
 8019658:	d100      	bne.n	801965c <memmove+0x28>
 801965a:	bd10      	pop	{r4, pc}
 801965c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019660:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019664:	e7f7      	b.n	8019656 <memmove+0x22>

08019666 <_realloc_r>:
 8019666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019668:	4607      	mov	r7, r0
 801966a:	4614      	mov	r4, r2
 801966c:	460e      	mov	r6, r1
 801966e:	b921      	cbnz	r1, 801967a <_realloc_r+0x14>
 8019670:	4611      	mov	r1, r2
 8019672:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019676:	f7fe bf4f 	b.w	8018518 <_malloc_r>
 801967a:	b922      	cbnz	r2, 8019686 <_realloc_r+0x20>
 801967c:	f7fe fefe 	bl	801847c <_free_r>
 8019680:	4625      	mov	r5, r4
 8019682:	4628      	mov	r0, r5
 8019684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019686:	f000 f827 	bl	80196d8 <_malloc_usable_size_r>
 801968a:	42a0      	cmp	r0, r4
 801968c:	d20f      	bcs.n	80196ae <_realloc_r+0x48>
 801968e:	4621      	mov	r1, r4
 8019690:	4638      	mov	r0, r7
 8019692:	f7fe ff41 	bl	8018518 <_malloc_r>
 8019696:	4605      	mov	r5, r0
 8019698:	2800      	cmp	r0, #0
 801969a:	d0f2      	beq.n	8019682 <_realloc_r+0x1c>
 801969c:	4631      	mov	r1, r6
 801969e:	4622      	mov	r2, r4
 80196a0:	f7fe fed8 	bl	8018454 <memcpy>
 80196a4:	4631      	mov	r1, r6
 80196a6:	4638      	mov	r0, r7
 80196a8:	f7fe fee8 	bl	801847c <_free_r>
 80196ac:	e7e9      	b.n	8019682 <_realloc_r+0x1c>
 80196ae:	4635      	mov	r5, r6
 80196b0:	e7e7      	b.n	8019682 <_realloc_r+0x1c>
	...

080196b4 <_read_r>:
 80196b4:	b538      	push	{r3, r4, r5, lr}
 80196b6:	4c07      	ldr	r4, [pc, #28]	; (80196d4 <_read_r+0x20>)
 80196b8:	4605      	mov	r5, r0
 80196ba:	4608      	mov	r0, r1
 80196bc:	4611      	mov	r1, r2
 80196be:	2200      	movs	r2, #0
 80196c0:	6022      	str	r2, [r4, #0]
 80196c2:	461a      	mov	r2, r3
 80196c4:	f7e9 fdac 	bl	8003220 <_read>
 80196c8:	1c43      	adds	r3, r0, #1
 80196ca:	d102      	bne.n	80196d2 <_read_r+0x1e>
 80196cc:	6823      	ldr	r3, [r4, #0]
 80196ce:	b103      	cbz	r3, 80196d2 <_read_r+0x1e>
 80196d0:	602b      	str	r3, [r5, #0]
 80196d2:	bd38      	pop	{r3, r4, r5, pc}
 80196d4:	24041c84 	.word	0x24041c84

080196d8 <_malloc_usable_size_r>:
 80196d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80196dc:	1f18      	subs	r0, r3, #4
 80196de:	2b00      	cmp	r3, #0
 80196e0:	bfbc      	itt	lt
 80196e2:	580b      	ldrlt	r3, [r1, r0]
 80196e4:	18c0      	addlt	r0, r0, r3
 80196e6:	4770      	bx	lr

080196e8 <_init>:
 80196e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196ea:	bf00      	nop
 80196ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196ee:	bc08      	pop	{r3}
 80196f0:	469e      	mov	lr, r3
 80196f2:	4770      	bx	lr

080196f4 <_fini>:
 80196f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196f6:	bf00      	nop
 80196f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196fa:	bc08      	pop	{r3}
 80196fc:	469e      	mov	lr, r3
 80196fe:	4770      	bx	lr
